import * as ts from "./_namespaces/ts";

const ambientModuleSymbolRegex = /^".+"$/;
const anon = "(anonymous)" as ts.__String & string;

let nextSymbolId = 1;
let nextNodeId = 1;
let nextMergeId = 1;
let nextFlowId = 1;

const enum IterationUse {
    AllowsSyncIterablesFlag = 1 << 0,
    AllowsAsyncIterablesFlag = 1 << 1,
    AllowsStringInputFlag = 1 << 2,
    ForOfFlag = 1 << 3,
    YieldStarFlag = 1 << 4,
    SpreadFlag = 1 << 5,
    DestructuringFlag = 1 << 6,
    PossiblyOutOfBounds = 1 << 7,

    // Spread, Destructuring, Array element assignment
    Element = AllowsSyncIterablesFlag,
    Spread = AllowsSyncIterablesFlag | SpreadFlag,
    Destructuring = AllowsSyncIterablesFlag | DestructuringFlag,

    ForOf = AllowsSyncIterablesFlag | AllowsStringInputFlag | ForOfFlag,
    ForAwaitOf = AllowsSyncIterablesFlag | AllowsAsyncIterablesFlag | AllowsStringInputFlag | ForOfFlag,

    YieldStar = AllowsSyncIterablesFlag | YieldStarFlag,
    AsyncYieldStar = AllowsSyncIterablesFlag | AllowsAsyncIterablesFlag | YieldStarFlag,

    GeneratorReturnType = AllowsSyncIterablesFlag,
    AsyncGeneratorReturnType = AllowsAsyncIterablesFlag,

}

const enum IterationTypeKind {
    Yield,
    Return,
    Next,
}

interface IterationTypesResolver {
    iterableCacheKey: "iterationTypesOfAsyncIterable" | "iterationTypesOfIterable";
    iteratorCacheKey: "iterationTypesOfAsyncIterator" | "iterationTypesOfIterator";
    iteratorSymbolName: "asyncIterator" | "iterator";
    getGlobalIteratorType: (reportErrors: boolean) => ts.GenericType;
    getGlobalIterableType: (reportErrors: boolean) => ts.GenericType;
    getGlobalIterableIteratorType: (reportErrors: boolean) => ts.GenericType;
    getGlobalGeneratorType: (reportErrors: boolean) => ts.GenericType;
    resolveIterationType: (type: ts.Type, errorNode: ts.Node | undefined) => ts.Type | undefined;
    mustHaveANextMethodDiagnostic: ts.DiagnosticMessage;
    mustBeAMethodDiagnostic: ts.DiagnosticMessage;
    mustHaveAValueDiagnostic: ts.DiagnosticMessage;
}

const enum WideningKind {
    Normal,
    FunctionReturn,
    GeneratorNext,
    GeneratorYield,
}

/** @internal */
export const enum TypeFacts {
    None = 0,
    TypeofEQString = 1 << 0,      // typeof x === "string"
    TypeofEQNumber = 1 << 1,      // typeof x === "number"
    TypeofEQBigInt = 1 << 2,      // typeof x === "bigint"
    TypeofEQBoolean = 1 << 3,     // typeof x === "boolean"
    TypeofEQSymbol = 1 << 4,      // typeof x === "symbol"
    TypeofEQObject = 1 << 5,      // typeof x === "object"
    TypeofEQFunction = 1 << 6,    // typeof x === "function"
    TypeofEQHostObject = 1 << 7,  // typeof x === "xxx"
    TypeofNEString = 1 << 8,      // typeof x !== "string"
    TypeofNENumber = 1 << 9,      // typeof x !== "number"
    TypeofNEBigInt = 1 << 10,     // typeof x !== "bigint"
    TypeofNEBoolean = 1 << 11,    // typeof x !== "boolean"
    TypeofNESymbol = 1 << 12,     // typeof x !== "symbol"
    TypeofNEObject = 1 << 13,     // typeof x !== "object"
    TypeofNEFunction = 1 << 14,   // typeof x !== "function"
    TypeofNEHostObject = 1 << 15, // typeof x !== "xxx"
    EQUndefined = 1 << 16,        // x === undefined
    EQNull = 1 << 17,             // x === null
    EQUndefinedOrNull = 1 << 18,  // x === undefined / x === null
    NEUndefined = 1 << 19,        // x !== undefined
    NENull = 1 << 20,             // x !== null
    NEUndefinedOrNull = 1 << 21,  // x != undefined / x != null
    Truthy = 1 << 22,             // x
    Falsy = 1 << 23,              // !x
    IsUndefined = 1 << 24,        // Contains undefined or intersection with undefined
    IsNull = 1 << 25,             // Contains null or intersection with null
    IsUndefinedOrNull = IsUndefined | IsNull,
    All = (1 << 27) - 1,
    // The following members encode facts about particular kinds of types for use in the getTypeFacts function.
    // The presence of a particular fact means that the given test is true for some (and possibly all) values
    // of that kind of type.
    BaseStringStrictFacts = TypeofEQString | TypeofNENumber | TypeofNEBigInt | TypeofNEBoolean | TypeofNESymbol | TypeofNEObject | TypeofNEFunction | TypeofNEHostObject | NEUndefined | NENull | NEUndefinedOrNull,
    BaseStringFacts = BaseStringStrictFacts | EQUndefined | EQNull | EQUndefinedOrNull | Falsy,
    StringStrictFacts = BaseStringStrictFacts | Truthy | Falsy,
    StringFacts = BaseStringFacts | Truthy,
    EmptyStringStrictFacts = BaseStringStrictFacts | Falsy,
    EmptyStringFacts = BaseStringFacts,
    NonEmptyStringStrictFacts = BaseStringStrictFacts | Truthy,
    NonEmptyStringFacts = BaseStringFacts | Truthy,
    BaseNumberStrictFacts = TypeofEQNumber | TypeofNEString | TypeofNEBigInt | TypeofNEBoolean | TypeofNESymbol | TypeofNEObject | TypeofNEFunction | TypeofNEHostObject | NEUndefined | NENull | NEUndefinedOrNull,
    BaseNumberFacts = BaseNumberStrictFacts | EQUndefined | EQNull | EQUndefinedOrNull | Falsy,
    NumberStrictFacts = BaseNumberStrictFacts | Truthy | Falsy,
    NumberFacts = BaseNumberFacts | Truthy,
    ZeroNumberStrictFacts = BaseNumberStrictFacts | Falsy,
    ZeroNumberFacts = BaseNumberFacts,
    NonZeroNumberStrictFacts = BaseNumberStrictFacts | Truthy,
    NonZeroNumberFacts = BaseNumberFacts | Truthy,
    BaseBigIntStrictFacts = TypeofEQBigInt | TypeofNEString | TypeofNENumber | TypeofNEBoolean | TypeofNESymbol | TypeofNEObject | TypeofNEFunction | TypeofNEHostObject | NEUndefined | NENull | NEUndefinedOrNull,
    BaseBigIntFacts = BaseBigIntStrictFacts | EQUndefined | EQNull | EQUndefinedOrNull | Falsy,
    BigIntStrictFacts = BaseBigIntStrictFacts | Truthy | Falsy,
    BigIntFacts = BaseBigIntFacts | Truthy,
    ZeroBigIntStrictFacts = BaseBigIntStrictFacts | Falsy,
    ZeroBigIntFacts = BaseBigIntFacts,
    NonZeroBigIntStrictFacts = BaseBigIntStrictFacts | Truthy,
    NonZeroBigIntFacts = BaseBigIntFacts | Truthy,
    BaseBooleanStrictFacts = TypeofEQBoolean | TypeofNEString | TypeofNENumber | TypeofNEBigInt | TypeofNESymbol | TypeofNEObject | TypeofNEFunction | TypeofNEHostObject | NEUndefined | NENull | NEUndefinedOrNull,
    BaseBooleanFacts = BaseBooleanStrictFacts | EQUndefined | EQNull | EQUndefinedOrNull | Falsy,
    BooleanStrictFacts = BaseBooleanStrictFacts | Truthy | Falsy,
    BooleanFacts = BaseBooleanFacts | Truthy,
    FalseStrictFacts = BaseBooleanStrictFacts | Falsy,
    FalseFacts = BaseBooleanFacts,
    TrueStrictFacts = BaseBooleanStrictFacts | Truthy,
    TrueFacts = BaseBooleanFacts | Truthy,
    SymbolStrictFacts = TypeofEQSymbol | TypeofNEString | TypeofNENumber | TypeofNEBigInt | TypeofNEBoolean | TypeofNEObject | TypeofNEFunction | TypeofNEHostObject | NEUndefined | NENull | NEUndefinedOrNull | Truthy,
    SymbolFacts = SymbolStrictFacts | EQUndefined | EQNull | EQUndefinedOrNull | Falsy,
    ObjectStrictFacts = TypeofEQObject | TypeofEQHostObject | TypeofNEString | TypeofNENumber | TypeofNEBigInt | TypeofNEBoolean | TypeofNESymbol | TypeofNEFunction | NEUndefined | NENull | NEUndefinedOrNull | Truthy,
    ObjectFacts = ObjectStrictFacts | EQUndefined | EQNull | EQUndefinedOrNull | Falsy,
    FunctionStrictFacts = TypeofEQFunction | TypeofEQHostObject | TypeofNEString | TypeofNENumber | TypeofNEBigInt | TypeofNEBoolean | TypeofNESymbol | TypeofNEObject | NEUndefined | NENull | NEUndefinedOrNull | Truthy,
    FunctionFacts = FunctionStrictFacts | EQUndefined | EQNull | EQUndefinedOrNull | Falsy,
    VoidFacts = TypeofNEString | TypeofNENumber | TypeofNEBigInt | TypeofNEBoolean | TypeofNESymbol | TypeofNEObject | TypeofNEFunction | TypeofNEHostObject | EQUndefined | EQUndefinedOrNull | NENull | Falsy,
    UndefinedFacts = TypeofNEString | TypeofNENumber | TypeofNEBigInt | TypeofNEBoolean | TypeofNESymbol | TypeofNEObject | TypeofNEFunction | TypeofNEHostObject | EQUndefined | EQUndefinedOrNull | NENull | Falsy | IsUndefined,
    NullFacts = TypeofEQObject | TypeofNEString | TypeofNENumber | TypeofNEBigInt | TypeofNEBoolean | TypeofNESymbol | TypeofNEFunction | TypeofNEHostObject | EQNull | EQUndefinedOrNull | NEUndefined | Falsy | IsNull,
    EmptyObjectStrictFacts = All & ~(EQUndefined | EQNull | EQUndefinedOrNull | IsUndefinedOrNull),
    EmptyObjectFacts = All & ~IsUndefinedOrNull,
    UnknownFacts = All & ~IsUndefinedOrNull,
    AllTypeofNE = TypeofNEString | TypeofNENumber | TypeofNEBigInt | TypeofNEBoolean | TypeofNESymbol | TypeofNEObject | TypeofNEFunction | NEUndefined,
    // Masks
    OrFactsMask = TypeofEQFunction | TypeofNEObject,
    AndFactsMask = All & ~OrFactsMask,
}

const typeofNEFacts: ts.ReadonlyESMap<string, TypeFacts> = new ts.Map(ts.getEntries({
    string: TypeFacts.TypeofNEString,
    number: TypeFacts.TypeofNENumber,
    bigint: TypeFacts.TypeofNEBigInt,
    boolean: TypeFacts.TypeofNEBoolean,
    symbol: TypeFacts.TypeofNESymbol,
    undefined: TypeFacts.NEUndefined,
    object: TypeFacts.TypeofNEObject,
    function: TypeFacts.TypeofNEFunction
}));

type TypeSystemEntity = ts.Node | ts.Symbol | ts.Type | ts.Signature;

const enum TypeSystemPropertyName {
    Type,
    ResolvedBaseConstructorType,
    DeclaredType,
    ResolvedReturnType,
    ImmediateBaseConstraint,
    EnumTagType,
    ResolvedTypeArguments,
    ResolvedBaseTypes,
    WriteType,
}

/** @internal */
export const enum CheckMode {
    Normal = 0,                                     // Normal type checking
    Contextual = 1 << 0,                            // Explicitly assigned contextual type, therefore not cacheable
    Inferential = 1 << 1,                           // Inferential typing
    SkipContextSensitive = 1 << 2,                  // Skip context sensitive function expressions
    SkipGenericFunctions = 1 << 3,                  // Skip single signature generic functions
    IsForSignatureHelp = 1 << 4,                    // Call resolution for purposes of signature help
    IsForStringLiteralArgumentCompletions = 1 << 5, // Do not infer from the argument currently being typed
    RestBindingElement = 1 << 6,                    // Checking a type that is going to be used to determine the type of a rest binding element
                                                    //   e.g. in `const { a, ...rest } = foo`, when checking the type of `foo` to determine the type of `rest`,
                                                    //   we need to preserve generic types instead of substituting them for constraints
}

/** @internal */
export const enum SignatureCheckMode {
    BivariantCallback = 1 << 0,
    StrictCallback    = 1 << 1,
    IgnoreReturnTypes = 1 << 2,
    StrictArity       = 1 << 3,
    Callback          = BivariantCallback | StrictCallback,
}

const enum IntersectionState {
    None = 0,
    Source = 1 << 0,
    Target = 1 << 1,
}

const enum RecursionFlags {
    None = 0,
    Source = 1 << 0,
    Target = 1 << 1,
    Both = Source | Target,
}

const enum MappedTypeModifiers {
    IncludeReadonly = 1 << 0,
    ExcludeReadonly = 1 << 1,
    IncludeOptional = 1 << 2,
    ExcludeOptional = 1 << 3,
}

const enum ExpandingFlags {
    None = 0,
    Source = 1,
    Target = 1 << 1,
    Both = Source | Target,
}

const enum MembersOrExportsResolutionKind {
    resolvedExports = "resolvedExports",
    resolvedMembers = "resolvedMembers"
}

const enum UnusedKind {
    Local,
    Parameter,
}

/** @param containingNode Node to check for parse error */
type AddUnusedDiagnostic = (containingNode: ts.Node, type: UnusedKind, diagnostic: ts.DiagnosticWithLocation) => void;

const isNotOverloadAndNotAccessor = ts.and(isNotOverload, isNotAccessor);

const enum DeclarationMeaning {
    GetAccessor = 1,
    SetAccessor = 2,
    PropertyAssignment = 4,
    Method = 8,
    PrivateStatic = 16,
    GetOrSetAccessor = GetAccessor | SetAccessor,
    PropertyAssignmentOrMethod = PropertyAssignment | Method,
}

const enum DeclarationSpaces {
    None = 0,
    ExportValue = 1 << 0,
    ExportType = 1 << 1,
    ExportNamespace = 1 << 2,
}

const enum MinArgumentCountFlags {
    None = 0,
    StrongArityForUntypedJS = 1 << 0,
    VoidIsNonOptional = 1 << 1,
}

const enum IntrinsicTypeKind {
    Uppercase,
    Lowercase,
    Capitalize,
    Uncapitalize
}

const intrinsicTypeKinds: ts.ReadonlyESMap<string, IntrinsicTypeKind> = new ts.Map(ts.getEntries({
    Uppercase: IntrinsicTypeKind.Uppercase,
    Lowercase: IntrinsicTypeKind.Lowercase,
    Capitalize: IntrinsicTypeKind.Capitalize,
    Uncapitalize: IntrinsicTypeKind.Uncapitalize
}));

function SymbolLinks(this: ts.SymbolLinks) {
}

function NodeLinks(this: ts.NodeLinks) {
    this.flags = 0;
}

/** @internal */
export function getNodeId(node: ts.Node): number {
    if (!node.id) {
        node.id = nextNodeId;
        nextNodeId++;
    }
    return node.id;
}

/** @internal */
export function getSymbolId(symbol: ts.Symbol): ts.SymbolId {
    if (!symbol.id) {
        symbol.id = nextSymbolId;
        nextSymbolId++;
    }

    return symbol.id;
}

/** @internal */
export function isInstantiatedModule(node: ts.ModuleDeclaration, preserveConstEnums: boolean) {
    const moduleState = ts.getModuleInstanceState(node);
    return moduleState === ts.ModuleInstanceState.Instantiated ||
        (preserveConstEnums && moduleState === ts.ModuleInstanceState.ConstEnumOnly);
}

/** @internal */
export function createTypeChecker(host: ts.TypeCheckerHost): ts.TypeChecker {
    const getPackagesMap = ts.memoize(() => {
        // A package name maps to true when we detect it has .d.ts files.
        // This is useful as an approximation of whether a package bundles its own types.
        // Note: we only look at files already found by module resolution,
        // so there may be files we did not consider.
        const map = new ts.Map<string, boolean>();
        host.getSourceFiles().forEach(sf => {
            if (!sf.resolvedModules) return;

            sf.resolvedModules.forEach(r => {
                if (r && r.packageId) map.set(r.packageId.name, r.extension === ts.Extension.Dts || !!map.get(r.packageId.name));
            });
        });
        return map;
    });

    let deferredDiagnosticsCallbacks: (() => void)[] = [];

    let addLazyDiagnostic = (arg: () => void) => {
        deferredDiagnosticsCallbacks.push(arg);
    };

    // Cancellation that controls whether or not we can cancel in the middle of type checking.
    // In general cancelling is *not* safe for the type checker.  We might be in the middle of
    // computing something, and we will leave our internals in an inconsistent state.  Callers
    // who set the cancellation token should catch if a cancellation exception occurs, and
    // should throw away and create a new TypeChecker.
    //
    // Currently we only support setting the cancellation token when getting diagnostics.  This
    // is because diagnostics can be quite expensive, and we want to allow hosts to bail out if
    // they no longer need the information (for example, if the user started editing again).
    let cancellationToken: ts.CancellationToken | undefined;
    let requestedExternalEmitHelpers: ts.ExternalEmitHelpers;
    let externalHelpersModule: ts.Symbol;

    const Symbol = ts.objectAllocator.getSymbolConstructor();
    const Type = ts.objectAllocator.getTypeConstructor();
    const Signature = ts.objectAllocator.getSignatureConstructor();

    let typeCount = 0;
    let symbolCount = 0;
    let totalInstantiationCount = 0;
    let instantiationCount = 0;
    let instantiationDepth = 0;
    let inlineLevel = 0;
    let currentNode: ts.Node | undefined;
    let varianceTypeParameter: ts.TypeParameter | undefined;

    const emptySymbols = ts.createSymbolTable();
    const arrayVariances = [ts.VarianceFlags.Covariant];

    const compilerOptions = host.getCompilerOptions();
    const languageVersion = ts.getEmitScriptTarget(compilerOptions);
    const moduleKind = ts.getEmitModuleKind(compilerOptions);
    const useDefineForClassFields = ts.getUseDefineForClassFields(compilerOptions);
    const allowSyntheticDefaultImports = ts.getAllowSyntheticDefaultImports(compilerOptions);
    const strictNullChecks = ts.getStrictOptionValue(compilerOptions, "strictNullChecks");
    const strictFunctionTypes = ts.getStrictOptionValue(compilerOptions, "strictFunctionTypes");
    const strictBindCallApply = ts.getStrictOptionValue(compilerOptions, "strictBindCallApply");
    const strictPropertyInitialization = ts.getStrictOptionValue(compilerOptions, "strictPropertyInitialization");
    const noImplicitAny = ts.getStrictOptionValue(compilerOptions, "noImplicitAny");
    const noImplicitThis = ts.getStrictOptionValue(compilerOptions, "noImplicitThis");
    const useUnknownInCatchVariables = ts.getStrictOptionValue(compilerOptions, "useUnknownInCatchVariables");
    const keyofStringsOnly = !!compilerOptions.keyofStringsOnly;
    const freshObjectLiteralFlag = compilerOptions.suppressExcessPropertyErrors ? 0 : ts.ObjectFlags.FreshLiteral;
    const exactOptionalPropertyTypes = compilerOptions.exactOptionalPropertyTypes;

    const checkBinaryExpression = createCheckBinaryExpression();
    const emitResolver = createResolver();
    const nodeBuilder = createNodeBuilder();

    const globals = ts.createSymbolTable();
    const undefinedSymbol = createSymbol(ts.SymbolFlags.Property, "undefined" as ts.__String);
    undefinedSymbol.declarations = [];

    const globalThisSymbol = createSymbol(ts.SymbolFlags.Module, "globalThis" as ts.__String, ts.CheckFlags.Readonly);
    globalThisSymbol.exports = globals;
    globalThisSymbol.declarations = [];
    globals.set(globalThisSymbol.escapedName, globalThisSymbol);

    const argumentsSymbol = createSymbol(ts.SymbolFlags.Property, "arguments" as ts.__String);
    const requireSymbol = createSymbol(ts.SymbolFlags.Property, "require" as ts.__String);

    /** This will be set during calls to `getResolvedSignature` where services determines an apparent number of arguments greater than what is actually provided. */
    let apparentArgumentCount: number | undefined;

    // for public members that accept a Node or one of its subtypes, we must guard against
    // synthetic nodes created during transformations by calling `getParseTreeNode`.
    // for most of these, we perform the guard only on `checker` to avoid any possible
    // extra cost of calling `getParseTreeNode` when calling these functions from inside the
    // checker.
    const checker: ts.TypeChecker = {
        getNodeCount: () => ts.sum(host.getSourceFiles(), "nodeCount"),
        getIdentifierCount: () => ts.sum(host.getSourceFiles(), "identifierCount"),
        getSymbolCount: () => ts.sum(host.getSourceFiles(), "symbolCount") + symbolCount,
        getTypeCount: () => typeCount,
        getInstantiationCount: () => totalInstantiationCount,
        getRelationCacheSizes: () => ({
            assignable: assignableRelation.size,
            identity: identityRelation.size,
            subtype: subtypeRelation.size,
            strictSubtype: strictSubtypeRelation.size,
        }),
        isUndefinedSymbol: symbol => symbol === undefinedSymbol,
        isArgumentsSymbol: symbol => symbol === argumentsSymbol,
        isUnknownSymbol: symbol => symbol === unknownSymbol,
        getMergedSymbol,
        getDiagnostics,
        getGlobalDiagnostics,
        getRecursionIdentity,
        getUnmatchedProperties,
        getTypeOfSymbolAtLocation: (symbol, locationIn) => {
            const location = ts.getParseTreeNode(locationIn);
            return location ? getTypeOfSymbolAtLocation(symbol, location) : errorType;
        },
        getTypeOfSymbol,
        getSymbolsOfParameterPropertyDeclaration: (parameterIn, parameterName) => {
            const parameter = ts.getParseTreeNode(parameterIn, ts.isParameter);
            if (parameter === undefined) return ts.Debug.fail("Cannot get symbols of a synthetic parameter that cannot be resolved to a parse-tree node.");
            return getSymbolsOfParameterPropertyDeclaration(parameter, ts.escapeLeadingUnderscores(parameterName));
        },
        getDeclaredTypeOfSymbol,
        getPropertiesOfType,
        getPropertyOfType: (type, name) => getPropertyOfType(type, ts.escapeLeadingUnderscores(name)),
        getPrivateIdentifierPropertyOfType: (leftType: ts.Type, name: string, location: ts.Node) => {
            const node = ts.getParseTreeNode(location);
            if (!node) {
                return undefined;
            }
            const propName = ts.escapeLeadingUnderscores(name);
            const lexicallyScopedIdentifier = lookupSymbolForPrivateIdentifierDeclaration(propName, node);
            return lexicallyScopedIdentifier ? getPrivateIdentifierPropertyOfType(leftType, lexicallyScopedIdentifier) : undefined;
        },
        getTypeOfPropertyOfType: (type, name) => getTypeOfPropertyOfType(type, ts.escapeLeadingUnderscores(name)),
        getIndexInfoOfType: (type, kind) => getIndexInfoOfType(type, kind === ts.IndexKind.String ? stringType : numberType),
        getIndexInfosOfType,
        getIndexInfosOfIndexSymbol,
        getSignaturesOfType,
        getIndexTypeOfType: (type, kind) => getIndexTypeOfType(type, kind === ts.IndexKind.String ? stringType : numberType),
        getIndexType: type => getIndexType(type),
        getBaseTypes,
        getBaseTypeOfLiteralType,
        getWidenedType,
        getTypeFromTypeNode: nodeIn => {
            const node = ts.getParseTreeNode(nodeIn, ts.isTypeNode);
            return node ? getTypeFromTypeNode(node) : errorType;
        },
        getParameterType: getTypeAtPosition,
        getParameterIdentifierNameAtPosition,
        getPromisedTypeOfPromise,
        getAwaitedType: type => getAwaitedType(type),
        getReturnTypeOfSignature,
        isNullableType,
        getNullableType,
        getNonNullableType,
        getNonOptionalType: removeOptionalTypeMarker,
        getTypeArguments,
        typeToTypeNode: nodeBuilder.typeToTypeNode,
        indexInfoToIndexSignatureDeclaration: nodeBuilder.indexInfoToIndexSignatureDeclaration,
        signatureToSignatureDeclaration: nodeBuilder.signatureToSignatureDeclaration,
        symbolToEntityName: nodeBuilder.symbolToEntityName,
        symbolToExpression: nodeBuilder.symbolToExpression,
        symbolToNode: nodeBuilder.symbolToNode,
        symbolToTypeParameterDeclarations: nodeBuilder.symbolToTypeParameterDeclarations,
        symbolToParameterDeclaration: nodeBuilder.symbolToParameterDeclaration,
        typeParameterToDeclaration: nodeBuilder.typeParameterToDeclaration,
        getSymbolsInScope: (locationIn, meaning) => {
            const location = ts.getParseTreeNode(locationIn);
            return location ? getSymbolsInScope(location, meaning) : [];
        },
        getSymbolAtLocation: nodeIn => {
            const node = ts.getParseTreeNode(nodeIn);
            // set ignoreErrors: true because any lookups invoked by the API shouldn't cause any new errors
            return node ? getSymbolAtLocation(node, /*ignoreErrors*/ true) : undefined;
        },
        getIndexInfosAtLocation: nodeIn => {
            const node = ts.getParseTreeNode(nodeIn);
            return node ? getIndexInfosAtLocation(node) : undefined;
        },
        getShorthandAssignmentValueSymbol: nodeIn => {
            const node = ts.getParseTreeNode(nodeIn);
            return node ? getShorthandAssignmentValueSymbol(node) : undefined;
        },
        getExportSpecifierLocalTargetSymbol: nodeIn => {
            const node = ts.getParseTreeNode(nodeIn, ts.isExportSpecifier);
            return node ? getExportSpecifierLocalTargetSymbol(node) : undefined;
        },
        getExportSymbolOfSymbol(symbol) {
            return getMergedSymbol(symbol.exportSymbol || symbol);
        },
        getTypeAtLocation: nodeIn => {
            const node = ts.getParseTreeNode(nodeIn);
            return node ? getTypeOfNode(node) : errorType;
        },
        getTypeOfAssignmentPattern: nodeIn => {
            const node = ts.getParseTreeNode(nodeIn, ts.isAssignmentPattern);
            return node && getTypeOfAssignmentPattern(node) || errorType;
        },
        getPropertySymbolOfDestructuringAssignment: locationIn => {
            const location = ts.getParseTreeNode(locationIn, ts.isIdentifier);
            return location ? getPropertySymbolOfDestructuringAssignment(location) : undefined;
        },
        signatureToString: (signature, enclosingDeclaration, flags, kind) => {
            return signatureToString(signature, ts.getParseTreeNode(enclosingDeclaration), flags, kind);
        },
        typeToString: (type, enclosingDeclaration, flags) => {
            return typeToString(type, ts.getParseTreeNode(enclosingDeclaration), flags);
        },
        symbolToString: (symbol, enclosingDeclaration, meaning, flags) => {
            return symbolToString(symbol, ts.getParseTreeNode(enclosingDeclaration), meaning, flags);
        },
        typePredicateToString: (predicate, enclosingDeclaration, flags) => {
            return typePredicateToString(predicate, ts.getParseTreeNode(enclosingDeclaration), flags);
        },
        writeSignature: (signature, enclosingDeclaration, flags, kind, writer) => {
            return signatureToString(signature, ts.getParseTreeNode(enclosingDeclaration), flags, kind, writer);
        },
        writeType: (type, enclosingDeclaration, flags, writer) => {
            return typeToString(type, ts.getParseTreeNode(enclosingDeclaration), flags, writer);
        },
        writeSymbol: (symbol, enclosingDeclaration, meaning, flags, writer) => {
            return symbolToString(symbol, ts.getParseTreeNode(enclosingDeclaration), meaning, flags, writer);
        },
        writeTypePredicate: (predicate, enclosingDeclaration, flags, writer) => {
            return typePredicateToString(predicate, ts.getParseTreeNode(enclosingDeclaration), flags, writer);
        },
        getAugmentedPropertiesOfType,
        getRootSymbols,
        getSymbolOfExpando,
        getContextualType: (nodeIn: ts.Expression, contextFlags?: ts.ContextFlags) => {
            const node = ts.getParseTreeNode(nodeIn, ts.isExpression);
            if (!node) {
                return undefined;
            }
            if (contextFlags! & ts.ContextFlags.Completions) {
                return runWithInferenceBlockedFromSourceNode(node, () => getContextualType(node, contextFlags));
            }
            return getContextualType(node, contextFlags);
        },
        getContextualTypeForObjectLiteralElement: nodeIn => {
            const node = ts.getParseTreeNode(nodeIn, ts.isObjectLiteralElementLike);
            return node ? getContextualTypeForObjectLiteralElement(node, /*contextFlags*/ undefined) : undefined;
        },
        getContextualTypeForArgumentAtIndex: (nodeIn, argIndex) => {
            const node = ts.getParseTreeNode(nodeIn, ts.isCallLikeExpression);
            return node && getContextualTypeForArgumentAtIndex(node, argIndex);
        },
        getContextualTypeForJsxAttribute: (nodeIn) => {
            const node = ts.getParseTreeNode(nodeIn, ts.isJsxAttributeLike);
            return node && getContextualTypeForJsxAttribute(node, /*contextFlags*/ undefined);
        },
        isContextSensitive,
        getTypeOfPropertyOfContextualType,
        getFullyQualifiedName,
        getResolvedSignature: (node, candidatesOutArray, argumentCount) =>
            getResolvedSignatureWorker(node, candidatesOutArray, argumentCount, CheckMode.Normal),
        getResolvedSignatureForStringLiteralCompletions: (call, editingArgument, candidatesOutArray) =>
            getResolvedSignatureWorker(call, candidatesOutArray, /*argumentCount*/ undefined, CheckMode.IsForStringLiteralArgumentCompletions, editingArgument),
        getResolvedSignatureForSignatureHelp: (node, candidatesOutArray, argumentCount) =>
            getResolvedSignatureWorker(node, candidatesOutArray, argumentCount, CheckMode.IsForSignatureHelp),
        getExpandedParameters,
        hasEffectiveRestParameter,
        containsArgumentsReference,
        getConstantValue: nodeIn => {
            const node = ts.getParseTreeNode(nodeIn, canHaveConstantValue);
            return node ? getConstantValue(node) : undefined;
        },
        isValidPropertyAccess: (nodeIn, propertyName) => {
            const node = ts.getParseTreeNode(nodeIn, ts.isPropertyAccessOrQualifiedNameOrImportTypeNode);
            return !!node && isValidPropertyAccess(node, ts.escapeLeadingUnderscores(propertyName));
        },
        isValidPropertyAccessForCompletions: (nodeIn, type, property) => {
            const node = ts.getParseTreeNode(nodeIn, ts.isPropertyAccessExpression);
            return !!node && isValidPropertyAccessForCompletions(node, type, property);
        },
        getSignatureFromDeclaration: declarationIn => {
            const declaration = ts.getParseTreeNode(declarationIn, ts.isFunctionLike);
            return declaration ? getSignatureFromDeclaration(declaration) : undefined;
        },
        isImplementationOfOverload: nodeIn => {
            const node = ts.getParseTreeNode(nodeIn, ts.isFunctionLike);
            return node ? isImplementationOfOverload(node) : undefined;
        },
        getImmediateAliasedSymbol,
        getAliasedSymbol: resolveAlias,
        getEmitResolver,
        getExportsOfModule: getExportsOfModuleAsArray,
        getExportsAndPropertiesOfModule,
        forEachExportAndPropertyOfModule,
        getSymbolWalker: ts.createGetSymbolWalker(
            getRestTypeOfSignature,
            getTypePredicateOfSignature,
            getReturnTypeOfSignature,
            getBaseTypes,
            resolveStructuredTypeMembers,
            getTypeOfSymbol,
            getResolvedSymbol,
            getConstraintOfTypeParameter,
            ts.getFirstIdentifier,
            getTypeArguments,
        ),
        getAmbientModules,
        getJsxIntrinsicTagNamesAt,
        isOptionalParameter: nodeIn => {
            const node = ts.getParseTreeNode(nodeIn, ts.isParameter);
            return node ? isOptionalParameter(node) : false;
        },
        tryGetMemberInModuleExports: (name, symbol) => tryGetMemberInModuleExports(ts.escapeLeadingUnderscores(name), symbol),
        tryGetMemberInModuleExportsAndProperties: (name, symbol) => tryGetMemberInModuleExportsAndProperties(ts.escapeLeadingUnderscores(name), symbol),
        tryFindAmbientModule: moduleName => tryFindAmbientModule(moduleName, /*withAugmentations*/ true),
        tryFindAmbientModuleWithoutAugmentations: moduleName => {
            // we deliberately exclude augmentations
            // since we are only interested in declarations of the module itself
            return tryFindAmbientModule(moduleName, /*withAugmentations*/ false);
        },
        getApparentType,
        getUnionType,
        isTypeAssignableTo,
        createAnonymousType,
        createSignature,
        createSymbol,
        createIndexInfo,
        getAnyType: () => anyType,
        getStringType: () => stringType,
        getNumberType: () => numberType,
        createPromiseType,
        createArrayType,
        getElementTypeOfArrayType,
        getBooleanType: () => booleanType,
        getFalseType: (fresh?) => fresh ? falseType : regularFalseType,
        getTrueType: (fresh?) => fresh ? trueType : regularTrueType,
        getVoidType: () => voidType,
        getUndefinedType: () => undefinedType,
        getNullType: () => nullType,
        getESSymbolType: () => esSymbolType,
        getNeverType: () => neverType,
        getOptionalType: () => optionalType,
        getPromiseType: () => getGlobalPromiseType(/*reportErrors*/ false),
        getPromiseLikeType: () => getGlobalPromiseLikeType(/*reportErrors*/ false),
        getAsyncIterableType: () => {
            const type = getGlobalAsyncIterableType(/*reportErrors*/ false);
            if (type === emptyGenericType) return undefined;
            return type;
        },
        isSymbolAccessible,
        isArrayType,
        isTupleType,
        isArrayLikeType,
        isTypeInvalidDueToUnionDiscriminant,
        getExactOptionalProperties,
        getAllPossiblePropertiesOfTypes,
        getSuggestedSymbolForNonexistentProperty,
        getSuggestionForNonexistentProperty,
        getSuggestedSymbolForNonexistentJSXAttribute,
        getSuggestedSymbolForNonexistentSymbol: (location, name, meaning) => getSuggestedSymbolForNonexistentSymbol(location, ts.escapeLeadingUnderscores(name), meaning),
        getSuggestionForNonexistentSymbol: (location, name, meaning) => getSuggestionForNonexistentSymbol(location, ts.escapeLeadingUnderscores(name), meaning),
        getSuggestedSymbolForNonexistentModule,
        getSuggestionForNonexistentExport,
        getSuggestedSymbolForNonexistentClassMember,
        getBaseConstraintOfType,
        getDefaultFromTypeParameter: type => type && type.flags & ts.TypeFlags.TypeParameter ? getDefaultFromTypeParameter(type as ts.TypeParameter) : undefined,
        resolveName(name, location, meaning, excludeGlobals) {
            return resolveName(location, ts.escapeLeadingUnderscores(name), meaning, /*nameNotFoundMessage*/ undefined, /*nameArg*/ undefined, /*isUse*/ false, excludeGlobals);
        },
        getJsxNamespace: n => ts.unescapeLeadingUnderscores(getJsxNamespace(n)),
        getJsxFragmentFactory: n => {
            const jsxFragmentFactory = getJsxFragmentFactoryEntity(n);
            return jsxFragmentFactory && ts.unescapeLeadingUnderscores(ts.getFirstIdentifier(jsxFragmentFactory).escapedText);
        },
        getAccessibleSymbolChain,
        getTypePredicateOfSignature,
        resolveExternalModuleName: moduleSpecifierIn => {
            const moduleSpecifier = ts.getParseTreeNode(moduleSpecifierIn, ts.isExpression);
            return moduleSpecifier && resolveExternalModuleName(moduleSpecifier, moduleSpecifier, /*ignoreErrors*/ true);
        },
        resolveExternalModuleSymbol,
        tryGetThisTypeAt: (nodeIn, includeGlobalThis, container) => {
            const node = ts.getParseTreeNode(nodeIn);
            return node && tryGetThisTypeAt(node, includeGlobalThis, container);
        },
        getTypeArgumentConstraint: nodeIn => {
            const node = ts.getParseTreeNode(nodeIn, ts.isTypeNode);
            return node && getTypeArgumentConstraint(node);
        },
        getSuggestionDiagnostics: (fileIn, ct) => {
            const file = ts.getParseTreeNode(fileIn, ts.isSourceFile) || ts.Debug.fail("Could not determine parsed source file.");
            if (ts.skipTypeChecking(file, compilerOptions, host)) {
                return ts.emptyArray;
            }

            let diagnostics: ts.DiagnosticWithLocation[] | undefined;
            try {
                // Record the cancellation token so it can be checked later on during checkSourceElement.
                // Do this in a finally block so we can ensure that it gets reset back to nothing after
                // this call is done.
                cancellationToken = ct;

                // Ensure file is type checked, with _eager_ diagnostic production, so identifiers are registered as potentially unused
                checkSourceFileWithEagerDiagnostics(file);
                ts.Debug.assert(!!(getNodeLinks(file).flags & ts.NodeCheckFlags.TypeChecked));

                diagnostics = ts.addRange(diagnostics, suggestionDiagnostics.getDiagnostics(file.fileName));
                checkUnusedIdentifiers(getPotentiallyUnusedIdentifiers(file), (containingNode, kind, diag) => {
                    if (!ts.containsParseError(containingNode) && !unusedIsError(kind, !!(containingNode.flags & ts.NodeFlags.Ambient))) {
                        (diagnostics || (diagnostics = [])).push({ ...diag, category: ts.DiagnosticCategory.Suggestion });
                    }
                });

                return diagnostics || ts.emptyArray;
            }
            finally {
                cancellationToken = undefined;
            }
        },

        runWithCancellationToken: (token, callback) => {
            try {
                cancellationToken = token;
                return callback(checker);
            }
            finally {
                cancellationToken = undefined;
            }
        },

        getLocalTypeParametersOfClassOrInterfaceOrTypeAlias,
        isDeclarationVisible,
        isPropertyAccessible,
        getTypeOnlyAliasDeclaration,
        getMemberOverrideModifierStatus,
        isTypeParameterPossiblyReferenced,
    };

    function runWithInferenceBlockedFromSourceNode<T>(node: ts.Node | undefined, fn: () => T): T {
        const containingCall = ts.findAncestor(node, ts.isCallLikeExpression);
        const containingCallResolvedSignature = containingCall && getNodeLinks(containingCall).resolvedSignature;
        if (containingCall) {
            let toMarkSkip = node!;
            do {
                getNodeLinks(toMarkSkip).skipDirectInference = true;
                toMarkSkip = toMarkSkip.parent;
            } while (toMarkSkip && toMarkSkip !== containingCall);
            getNodeLinks(containingCall).resolvedSignature = undefined;
        }
        const result = fn();
        if (containingCall) {
            let toMarkSkip = node!;
            do {
                getNodeLinks(toMarkSkip).skipDirectInference = undefined;
                toMarkSkip = toMarkSkip.parent;
            } while (toMarkSkip && toMarkSkip !== containingCall);
            getNodeLinks(containingCall).resolvedSignature = containingCallResolvedSignature;
        }
        return result;
    }

    function getResolvedSignatureWorker(nodeIn: ts.CallLikeExpression, candidatesOutArray: ts.Signature[] | undefined, argumentCount: number | undefined, checkMode: CheckMode, editingArgument?: ts.Node): ts.Signature | undefined {
        const node = ts.getParseTreeNode(nodeIn, ts.isCallLikeExpression);
        apparentArgumentCount = argumentCount;
        const res =
            !node ? undefined :
            editingArgument ? runWithInferenceBlockedFromSourceNode(editingArgument, () => getResolvedSignature(node, candidatesOutArray, checkMode)) :
            getResolvedSignature(node, candidatesOutArray, checkMode);
        apparentArgumentCount = undefined;
        return res;
    }

    const tupleTypes = new ts.Map<string, ts.GenericType>();
    const unionTypes = new ts.Map<string, ts.UnionType>();
    const intersectionTypes = new ts.Map<string, ts.Type>();
    const stringLiteralTypes = new ts.Map<string, ts.StringLiteralType>();
    const numberLiteralTypes = new ts.Map<number, ts.NumberLiteralType>();
    const bigIntLiteralTypes = new ts.Map<string, ts.BigIntLiteralType>();
    const enumLiteralTypes = new ts.Map<string, ts.LiteralType>();
    const indexedAccessTypes = new ts.Map<string, ts.IndexedAccessType>();
    const templateLiteralTypes = new ts.Map<string, ts.TemplateLiteralType>();
    const stringMappingTypes = new ts.Map<string, ts.StringMappingType>();
    const substitutionTypes = new ts.Map<string, ts.SubstitutionType>();
    const subtypeReductionCache = new ts.Map<string, ts.Type[]>();
    const cachedTypes = new ts.Map<string, ts.Type>();
    const evolvingArrayTypes: ts.EvolvingArrayType[] = [];
    const undefinedProperties: ts.SymbolTable = new ts.Map();
    const markerTypes = new ts.Set<number>();

    const unknownSymbol = createSymbol(ts.SymbolFlags.Property, "unknown" as ts.__String);
    const resolvingSymbol = createSymbol(0, ts.InternalSymbolName.Resolving);
    const unresolvedSymbols = new ts.Map<string, ts.TransientSymbol>();
    const errorTypes = new ts.Map<string, ts.Type>();

    const anyType = createIntrinsicType(ts.TypeFlags.Any, "any");
    const autoType = createIntrinsicType(ts.TypeFlags.Any, "any", ts.ObjectFlags.NonInferrableType);
    const wildcardType = createIntrinsicType(ts.TypeFlags.Any, "any");
    const errorType = createIntrinsicType(ts.TypeFlags.Any, "error");
    const unresolvedType = createIntrinsicType(ts.TypeFlags.Any, "unresolved");
    const nonInferrableAnyType = createIntrinsicType(ts.TypeFlags.Any, "any", ts.ObjectFlags.ContainsWideningType);
    const intrinsicMarkerType = createIntrinsicType(ts.TypeFlags.Any, "intrinsic");
    const unknownType = createIntrinsicType(ts.TypeFlags.Unknown, "unknown");
    const nonNullUnknownType = createIntrinsicType(ts.TypeFlags.Unknown, "unknown");
    const undefinedType = createIntrinsicType(ts.TypeFlags.Undefined, "undefined");
    const undefinedWideningType = strictNullChecks ? undefinedType : createIntrinsicType(ts.TypeFlags.Undefined, "undefined", ts.ObjectFlags.ContainsWideningType);
    const optionalType = createIntrinsicType(ts.TypeFlags.Undefined, "undefined");
    const missingType = exactOptionalPropertyTypes ? createIntrinsicType(ts.TypeFlags.Undefined, "undefined") : undefinedType;
    const nullType = createIntrinsicType(ts.TypeFlags.Null, "null");
    const nullWideningType = strictNullChecks ? nullType : createIntrinsicType(ts.TypeFlags.Null, "null", ts.ObjectFlags.ContainsWideningType);
    const stringType = createIntrinsicType(ts.TypeFlags.String, "string");
    const numberType = createIntrinsicType(ts.TypeFlags.Number, "number");
    const bigintType = createIntrinsicType(ts.TypeFlags.BigInt, "bigint");
    const falseType = createIntrinsicType(ts.TypeFlags.BooleanLiteral, "false") as ts.FreshableIntrinsicType;
    const regularFalseType = createIntrinsicType(ts.TypeFlags.BooleanLiteral, "false") as ts.FreshableIntrinsicType;
    const trueType = createIntrinsicType(ts.TypeFlags.BooleanLiteral, "true") as ts.FreshableIntrinsicType;
    const regularTrueType = createIntrinsicType(ts.TypeFlags.BooleanLiteral, "true") as ts.FreshableIntrinsicType;
    trueType.regularType = regularTrueType;
    trueType.freshType = trueType;
    regularTrueType.regularType = regularTrueType;
    regularTrueType.freshType = trueType;
    falseType.regularType = regularFalseType;
    falseType.freshType = falseType;
    regularFalseType.regularType = regularFalseType;
    regularFalseType.freshType = falseType;
    const booleanType = getUnionType([regularFalseType, regularTrueType]);
    const esSymbolType = createIntrinsicType(ts.TypeFlags.ESSymbol, "symbol");
    const voidType = createIntrinsicType(ts.TypeFlags.Void, "void");
    const neverType = createIntrinsicType(ts.TypeFlags.Never, "never");
    const silentNeverType = createIntrinsicType(ts.TypeFlags.Never, "never", ts.ObjectFlags.NonInferrableType);
    const implicitNeverType = createIntrinsicType(ts.TypeFlags.Never, "never");
    const unreachableNeverType = createIntrinsicType(ts.TypeFlags.Never, "never");
    const nonPrimitiveType = createIntrinsicType(ts.TypeFlags.NonPrimitive, "object");
    const stringOrNumberType = getUnionType([stringType, numberType]);
    const stringNumberSymbolType = getUnionType([stringType, numberType, esSymbolType]);
    const keyofConstraintType = keyofStringsOnly ? stringType : stringNumberSymbolType;
    const numberOrBigIntType = getUnionType([numberType, bigintType]);
    const templateConstraintType = getUnionType([stringType, numberType, booleanType, bigintType, nullType, undefinedType]) as ts.UnionType;
    const numericStringType = getTemplateLiteralType(["", ""], [numberType]);  // The `${number}` type

    const restrictiveMapper: ts.TypeMapper = makeFunctionTypeMapper(t => t.flags & ts.TypeFlags.TypeParameter ? getRestrictiveTypeParameter(t as ts.TypeParameter) : t, () => "(restrictive mapper)");
    const permissiveMapper: ts.TypeMapper = makeFunctionTypeMapper(t => t.flags & ts.TypeFlags.TypeParameter ? wildcardType : t, () => "(permissive mapper)");
    const uniqueLiteralType = createIntrinsicType(ts.TypeFlags.Never, "never"); // `uniqueLiteralType` is a special `never` flagged by union reduction to behave as a literal
    const uniqueLiteralMapper: ts.TypeMapper = makeFunctionTypeMapper(t => t.flags & ts.TypeFlags.TypeParameter ? uniqueLiteralType : t, () => "(unique literal mapper)"); // replace all type parameters with the unique literal type (disregarding constraints)
    let outofbandVarianceMarkerHandler: ((onlyUnreliable: boolean) => void) | undefined;
    const reportUnreliableMapper = makeFunctionTypeMapper(t => {
        if (outofbandVarianceMarkerHandler && (t === markerSuperType || t === markerSubType || t === markerOtherType)) {
            outofbandVarianceMarkerHandler(/*onlyUnreliable*/ true);
        }
        return t;
    }, () => "(unmeasurable reporter)");
    const reportUnmeasurableMapper = makeFunctionTypeMapper(t => {
        if (outofbandVarianceMarkerHandler && (t === markerSuperType || t === markerSubType || t === markerOtherType)) {
            outofbandVarianceMarkerHandler(/*onlyUnreliable*/ false);
        }
        return t;
    }, () => "(unreliable reporter)");

    const emptyObjectType = createAnonymousType(undefined, emptySymbols, ts.emptyArray, ts.emptyArray, ts.emptyArray);
    const emptyJsxObjectType = createAnonymousType(undefined, emptySymbols, ts.emptyArray, ts.emptyArray, ts.emptyArray);
    emptyJsxObjectType.objectFlags |= ts.ObjectFlags.JsxAttributes;

    const emptyTypeLiteralSymbol = createSymbol(ts.SymbolFlags.TypeLiteral, ts.InternalSymbolName.Type);
    emptyTypeLiteralSymbol.members = ts.createSymbolTable();
    const emptyTypeLiteralType = createAnonymousType(emptyTypeLiteralSymbol, emptySymbols, ts.emptyArray, ts.emptyArray, ts.emptyArray);

    const unknownEmptyObjectType = createAnonymousType(undefined, emptySymbols, ts.emptyArray, ts.emptyArray, ts.emptyArray);
    const unknownUnionType = strictNullChecks ? getUnionType([undefinedType, nullType, unknownEmptyObjectType]) : unknownType;

    const emptyGenericType = createAnonymousType(undefined, emptySymbols, ts.emptyArray, ts.emptyArray, ts.emptyArray) as ts.ObjectType as ts.GenericType;
    emptyGenericType.instantiations = new ts.Map<string, ts.TypeReference>();

    const anyFunctionType = createAnonymousType(undefined, emptySymbols, ts.emptyArray, ts.emptyArray, ts.emptyArray);
    // The anyFunctionType contains the anyFunctionType by definition. The flag is further propagated
    // in getPropagatingFlagsOfTypes, and it is checked in inferFromTypes.
    anyFunctionType.objectFlags |= ts.ObjectFlags.NonInferrableType;

    const noConstraintType = createAnonymousType(undefined, emptySymbols, ts.emptyArray, ts.emptyArray, ts.emptyArray);
    const circularConstraintType = createAnonymousType(undefined, emptySymbols, ts.emptyArray, ts.emptyArray, ts.emptyArray);
    const resolvingDefaultType = createAnonymousType(undefined, emptySymbols, ts.emptyArray, ts.emptyArray, ts.emptyArray);

    const markerSuperType = createTypeParameter();
    const markerSubType = createTypeParameter();
    markerSubType.constraint = markerSuperType;
    const markerOtherType = createTypeParameter();

    const markerSuperTypeForCheck = createTypeParameter();
    const markerSubTypeForCheck = createTypeParameter();
    markerSubTypeForCheck.constraint = markerSuperTypeForCheck;

    const noTypePredicate = createTypePredicate(ts.TypePredicateKind.Identifier, "<<unresolved>>", 0, anyType);

    const anySignature = createSignature(undefined, undefined, undefined, ts.emptyArray, anyType, /*resolvedTypePredicate*/ undefined, 0, ts.SignatureFlags.None);
    const unknownSignature = createSignature(undefined, undefined, undefined, ts.emptyArray, errorType, /*resolvedTypePredicate*/ undefined, 0, ts.SignatureFlags.None);
    const resolvingSignature = createSignature(undefined, undefined, undefined, ts.emptyArray, anyType, /*resolvedTypePredicate*/ undefined, 0, ts.SignatureFlags.None);
    const silentNeverSignature = createSignature(undefined, undefined, undefined, ts.emptyArray, silentNeverType, /*resolvedTypePredicate*/ undefined, 0, ts.SignatureFlags.None);

    const enumNumberIndexInfo = createIndexInfo(numberType, stringType, /*isReadonly*/ true);

    const iterationTypesCache = new ts.Map<string, ts.IterationTypes>(); // cache for common IterationTypes instances
    const noIterationTypes: ts.IterationTypes = {
        get yieldType(): ts.Type { return ts.Debug.fail("Not supported"); },
        get returnType(): ts.Type { return ts.Debug.fail("Not supported"); },
        get nextType(): ts.Type { return ts.Debug.fail("Not supported"); },
    };

    const anyIterationTypes = createIterationTypes(anyType, anyType, anyType);
    const anyIterationTypesExceptNext = createIterationTypes(anyType, anyType, unknownType);
    const defaultIterationTypes = createIterationTypes(neverType, anyType, undefinedType); // default iteration types for `Iterator`.

    const asyncIterationTypesResolver: IterationTypesResolver = {
        iterableCacheKey: "iterationTypesOfAsyncIterable",
        iteratorCacheKey: "iterationTypesOfAsyncIterator",
        iteratorSymbolName: "asyncIterator",
        getGlobalIteratorType: getGlobalAsyncIteratorType,
        getGlobalIterableType: getGlobalAsyncIterableType,
        getGlobalIterableIteratorType: getGlobalAsyncIterableIteratorType,
        getGlobalGeneratorType: getGlobalAsyncGeneratorType,
        resolveIterationType: getAwaitedType,
        mustHaveANextMethodDiagnostic: ts.Diagnostics.An_async_iterator_must_have_a_next_method,
        mustBeAMethodDiagnostic: ts.Diagnostics.The_0_property_of_an_async_iterator_must_be_a_method,
        mustHaveAValueDiagnostic: ts.Diagnostics.The_type_returned_by_the_0_method_of_an_async_iterator_must_be_a_promise_for_a_type_with_a_value_property,
    };

    const syncIterationTypesResolver: IterationTypesResolver = {
        iterableCacheKey: "iterationTypesOfIterable",
        iteratorCacheKey: "iterationTypesOfIterator",
        iteratorSymbolName: "iterator",
        getGlobalIteratorType,
        getGlobalIterableType,
        getGlobalIterableIteratorType,
        getGlobalGeneratorType,
        resolveIterationType: (type, _errorNode) => type,
        mustHaveANextMethodDiagnostic: ts.Diagnostics.An_iterator_must_have_a_next_method,
        mustBeAMethodDiagnostic: ts.Diagnostics.The_0_property_of_an_iterator_must_be_a_method,
        mustHaveAValueDiagnostic: ts.Diagnostics.The_type_returned_by_the_0_method_of_an_iterator_must_have_a_value_property,
    };

    interface DuplicateInfoForSymbol {
        readonly firstFileLocations: ts.Declaration[];
        readonly secondFileLocations: ts.Declaration[];
        readonly isBlockScoped: boolean;
    }
    interface DuplicateInfoForFiles {
        readonly firstFile: ts.SourceFile;
        readonly secondFile: ts.SourceFile;
        /** Key is symbol name. */
        readonly conflictingSymbols: ts.ESMap<string, DuplicateInfoForSymbol>;
    }
    /** Key is "/path/to/a.ts|/path/to/b.ts". */
    let amalgamatedDuplicates: ts.ESMap<string, DuplicateInfoForFiles> | undefined;
    const reverseMappedCache = new ts.Map<string, ts.Type | undefined>();
    let inInferTypeForHomomorphicMappedType = false;
    let ambientModulesCache: ts.Symbol[] | undefined;
    /**
     * List of every ambient module with a "*" wildcard.
     * Unlike other ambient modules, these can't be stored in `globals` because symbol tables only deal with exact matches.
     * This is only used if there is no exact match.
     */
    let patternAmbientModules: ts.PatternAmbientModule[];
    let patternAmbientModuleAugmentations: ts.ESMap<string, ts.Symbol> | undefined;

    let globalObjectType: ts.ObjectType;
    let globalFunctionType: ts.ObjectType;
    let globalCallableFunctionType: ts.ObjectType;
    let globalNewableFunctionType: ts.ObjectType;
    let globalArrayType: ts.GenericType;
    let globalReadonlyArrayType: ts.GenericType;
    let globalStringType: ts.ObjectType;
    let globalNumberType: ts.ObjectType;
    let globalBooleanType: ts.ObjectType;
    let globalRegExpType: ts.ObjectType;
    let globalThisType: ts.GenericType;
    let anyArrayType: ts.Type;
    let autoArrayType: ts.Type;
    let anyReadonlyArrayType: ts.Type;
    let deferredGlobalNonNullableTypeAlias: ts.Symbol;

    // The library files are only loaded when the feature is used.
    // This allows users to just specify library files they want to used through --lib
    // and they will not get an error from not having unrelated library files
    let deferredGlobalESSymbolConstructorSymbol: ts.Symbol | undefined;
    let deferredGlobalESSymbolConstructorTypeSymbol: ts.Symbol | undefined;
    let deferredGlobalESSymbolType: ts.ObjectType | undefined;
    let deferredGlobalTypedPropertyDescriptorType: ts.GenericType;
    let deferredGlobalPromiseType: ts.GenericType | undefined;
    let deferredGlobalPromiseLikeType: ts.GenericType | undefined;
    let deferredGlobalPromiseConstructorSymbol: ts.Symbol | undefined;
    let deferredGlobalPromiseConstructorLikeType: ts.ObjectType | undefined;
    let deferredGlobalIterableType: ts.GenericType | undefined;
    let deferredGlobalIteratorType: ts.GenericType | undefined;
    let deferredGlobalIterableIteratorType: ts.GenericType | undefined;
    let deferredGlobalGeneratorType: ts.GenericType | undefined;
    let deferredGlobalIteratorYieldResultType: ts.GenericType | undefined;
    let deferredGlobalIteratorReturnResultType: ts.GenericType | undefined;
    let deferredGlobalAsyncIterableType: ts.GenericType | undefined;
    let deferredGlobalAsyncIteratorType: ts.GenericType | undefined;
    let deferredGlobalAsyncIterableIteratorType: ts.GenericType | undefined;
    let deferredGlobalAsyncGeneratorType: ts.GenericType | undefined;
    let deferredGlobalTemplateStringsArrayType: ts.ObjectType | undefined;
    let deferredGlobalImportMetaType: ts.ObjectType;
    let deferredGlobalImportMetaExpressionType: ts.ObjectType;
    let deferredGlobalImportCallOptionsType: ts.ObjectType | undefined;
    let deferredGlobalExtractSymbol: ts.Symbol | undefined;
    let deferredGlobalOmitSymbol: ts.Symbol | undefined;
    let deferredGlobalAwaitedSymbol: ts.Symbol | undefined;
    let deferredGlobalBigIntType: ts.ObjectType | undefined;
    let deferredGlobalNaNSymbol: ts.Symbol | undefined;
    let deferredGlobalRecordSymbol: ts.Symbol | undefined;

    const allPotentiallyUnusedIdentifiers = new ts.Map<ts.Path, PotentiallyUnusedIdentifier[]>(); // key is file name

    let flowLoopStart = 0;
    let flowLoopCount = 0;
    let sharedFlowCount = 0;
    let flowAnalysisDisabled = false;
    let flowInvocationCount = 0;
    let lastFlowNode: ts.FlowNode | undefined;
    let lastFlowNodeReachable: boolean;
    let flowTypeCache: ts.Type[] | undefined;

    const emptyStringType = getStringLiteralType("");
    const zeroType = getNumberLiteralType(0);
    const zeroBigIntType = getBigIntLiteralType({ negative: false, base10Value: "0" });

    const resolutionTargets: TypeSystemEntity[] = [];
    const resolutionResults: boolean[] = [];
    const resolutionPropertyNames: TypeSystemPropertyName[] = [];

    let suggestionCount = 0;
    const maximumSuggestionCount = 10;
    const mergedSymbols: ts.Symbol[] = [];
    const symbolLinks: ts.SymbolLinks[] = [];
    const nodeLinks: ts.NodeLinks[] = [];
    const flowLoopCaches: ts.ESMap<string, ts.Type>[] = [];
    const flowLoopNodes: ts.FlowNode[] = [];
    const flowLoopKeys: string[] = [];
    const flowLoopTypes: ts.Type[][] = [];
    const sharedFlowNodes: ts.FlowNode[] = [];
    const sharedFlowTypes: ts.FlowType[] = [];
    const flowNodeReachable: (boolean | undefined)[] = [];
    const flowNodePostSuper: (boolean | undefined)[] = [];
    const potentialThisCollisions: ts.Node[] = [];
    const potentialNewTargetCollisions: ts.Node[] = [];
    const potentialWeakMapSetCollisions: ts.Node[] = [];
    const potentialReflectCollisions: ts.Node[] = [];
    const potentialUnusedRenamedBindingElementsInTypes: ts.BindingElement[] = [];
    const awaitedTypeStack: number[] = [];

    const diagnostics = ts.createDiagnosticCollection();
    const suggestionDiagnostics = ts.createDiagnosticCollection();

    const typeofType = createTypeofType();

    let _jsxNamespace: ts.__String;
    let _jsxFactoryEntity: ts.EntityName | undefined;

    const subtypeRelation = new ts.Map<string, ts.RelationComparisonResult>();
    const strictSubtypeRelation = new ts.Map<string, ts.RelationComparisonResult>();
    const assignableRelation = new ts.Map<string, ts.RelationComparisonResult>();
    const comparableRelation = new ts.Map<string, ts.RelationComparisonResult>();
    const identityRelation = new ts.Map<string, ts.RelationComparisonResult>();
    const enumRelation = new ts.Map<string, ts.RelationComparisonResult>();

    const builtinGlobals = ts.createSymbolTable();
    builtinGlobals.set(undefinedSymbol.escapedName, undefinedSymbol);

    // Extensions suggested for path imports when module resolution is node16 or higher.
    // The first element of each tuple is the extension a file has.
    // The second element of each tuple is the extension that should be used in a path import.
    // e.g. if we want to import file `foo.mts`, we should write `import {} from "./foo.mjs".
    const suggestedExtensions: [string, string][] = [
        [".mts", ".mjs"],
        [".ts", ".js"],
        [".cts", ".cjs"],
        [".mjs", ".mjs"],
        [".js", ".js"],
        [".cjs", ".cjs"],
        [".tsx", compilerOptions.jsx === ts.JsxEmit.Preserve ? ".jsx" : ".js"],
        [".jsx", ".jsx"],
        [".json", ".json"],
    ];

    initializeTypeChecker();

    return checker;

    function getCachedType(key: string | undefined) {
        return key ? cachedTypes.get(key) : undefined;
    }

    function setCachedType(key: string | undefined, type: ts.Type) {
        if (key) cachedTypes.set(key, type);
        return type;
    }

    function getJsxNamespace(location: ts.Node | undefined): ts.__String {
        if (location) {
            const file = ts.getSourceFileOfNode(location);
            if (file) {
                if (ts.isJsxOpeningFragment(location)) {
                    if (file.localJsxFragmentNamespace) {
                        return file.localJsxFragmentNamespace;
                    }
                    const jsxFragmentPragma = file.pragmas.get("jsxfrag");
                    if (jsxFragmentPragma) {
                        const chosenPragma = ts.isArray(jsxFragmentPragma) ? jsxFragmentPragma[0] : jsxFragmentPragma;
                        file.localJsxFragmentFactory = ts.parseIsolatedEntityName(chosenPragma.arguments.factory, languageVersion);
                        ts.visitNode(file.localJsxFragmentFactory, markAsSynthetic);
                        if (file.localJsxFragmentFactory) {
                            return file.localJsxFragmentNamespace = ts.getFirstIdentifier(file.localJsxFragmentFactory).escapedText;
                        }
                    }
                    const entity = getJsxFragmentFactoryEntity(location);
                    if (entity) {
                        file.localJsxFragmentFactory = entity;
                        return file.localJsxFragmentNamespace = ts.getFirstIdentifier(entity).escapedText;
                    }
                }
                else {
                    const localJsxNamespace = getLocalJsxNamespace(file);
                    if (localJsxNamespace) {
                        return file.localJsxNamespace = localJsxNamespace;
                    }
                }
            }
        }
        if (!_jsxNamespace) {
            _jsxNamespace = "React" as ts.__String;
            if (compilerOptions.jsxFactory) {
                _jsxFactoryEntity = ts.parseIsolatedEntityName(compilerOptions.jsxFactory, languageVersion);
                ts.visitNode(_jsxFactoryEntity, markAsSynthetic);
                if (_jsxFactoryEntity) {
                    _jsxNamespace = ts.getFirstIdentifier(_jsxFactoryEntity).escapedText;
                }
            }
            else if (compilerOptions.reactNamespace) {
                _jsxNamespace = ts.escapeLeadingUnderscores(compilerOptions.reactNamespace);
            }
        }
        if (!_jsxFactoryEntity) {
            _jsxFactoryEntity = ts.factory.createQualifiedName(ts.factory.createIdentifier(ts.unescapeLeadingUnderscores(_jsxNamespace)), "createElement");
        }
        return _jsxNamespace;
    }

    function getLocalJsxNamespace(file: ts.SourceFile): ts.__String | undefined {
        if (file.localJsxNamespace) {
            return file.localJsxNamespace;
        }
        const jsxPragma = file.pragmas.get("jsx");
        if (jsxPragma) {
            const chosenPragma = ts.isArray(jsxPragma) ? jsxPragma[0] : jsxPragma;
            file.localJsxFactory = ts.parseIsolatedEntityName(chosenPragma.arguments.factory, languageVersion);
            ts.visitNode(file.localJsxFactory, markAsSynthetic);
            if (file.localJsxFactory) {
                return file.localJsxNamespace = ts.getFirstIdentifier(file.localJsxFactory).escapedText;
            }
        }
    }

    function markAsSynthetic(node: ts.Node): ts.VisitResult<ts.Node> {
        ts.setTextRangePosEnd(node, -1, -1);
        return ts.visitEachChild(node, markAsSynthetic, ts.nullTransformationContext);
    }

    function getEmitResolver(sourceFile: ts.SourceFile, cancellationToken: ts.CancellationToken) {
        // Ensure we have all the type information in place for this file so that all the
        // emitter questions of this resolver will return the right information.
        getDiagnostics(sourceFile, cancellationToken);
        return emitResolver;
    }

    function lookupOrIssueError(location: ts.Node | undefined, message: ts.DiagnosticMessage, arg0?: string | number, arg1?: string | number, arg2?: string | number, arg3?: string | number): ts.Diagnostic {
        const diagnostic = location
            ? ts.createDiagnosticForNode(location, message, arg0, arg1, arg2, arg3)
            : ts.createCompilerDiagnostic(message, arg0, arg1, arg2, arg3);
        const existing = diagnostics.lookup(diagnostic);
        if (existing) {
            return existing;
        }
        else {
            diagnostics.add(diagnostic);
            return diagnostic;
        }
    }

    function errorSkippedOn(key: keyof ts.CompilerOptions, location: ts.Node | undefined, message: ts.DiagnosticMessage, arg0?: string | number, arg1?: string | number, arg2?: string | number, arg3?: string | number): ts.Diagnostic {
        const diagnostic = error(location, message, arg0, arg1, arg2, arg3);
        diagnostic.skippedOn = key;
        return diagnostic;
    }

    function createError(location: ts.Node | undefined, message: ts.DiagnosticMessage, arg0?: string | number, arg1?: string | number, arg2?: string | number, arg3?: string | number): ts.Diagnostic {
        return location
            ? ts.createDiagnosticForNode(location, message, arg0, arg1, arg2, arg3)
            : ts.createCompilerDiagnostic(message, arg0, arg1, arg2, arg3);
    }

    function error(location: ts.Node | undefined, message: ts.DiagnosticMessage, arg0?: string | number, arg1?: string | number, arg2?: string | number, arg3?: string | number): ts.Diagnostic {
        const diagnostic = createError(location, message, arg0, arg1, arg2, arg3);
        diagnostics.add(diagnostic);
        return diagnostic;
    }

    function addErrorOrSuggestion(isError: boolean, diagnostic: ts.Diagnostic) {
        if (isError) {
            diagnostics.add(diagnostic);
        }
        else {
            suggestionDiagnostics.add({ ...diagnostic, category: ts.DiagnosticCategory.Suggestion });
        }
    }
    function errorOrSuggestion(isError: boolean, location: ts.Node, message: ts.DiagnosticMessage | ts.DiagnosticMessageChain, arg0?: string | number, arg1?: string | number, arg2?: string | number, arg3?: string | number): void {
         // Pseudo-synthesized input node
        if (location.pos < 0 || location.end < 0) {
            if (!isError) {
                return; // Drop suggestions (we have no span to suggest on)
            }
            // Issue errors globally
            const file = ts.getSourceFileOfNode(location);
            addErrorOrSuggestion(isError, "message" in message ? ts.createFileDiagnostic(file, 0, 0, message, arg0, arg1, arg2, arg3) : ts.createDiagnosticForFileFromMessageChain(file, message)); // eslint-disable-line local/no-in-operator
            return;
        }
        addErrorOrSuggestion(isError, "message" in message ? ts.createDiagnosticForNode(location, message, arg0, arg1, arg2, arg3) : ts.createDiagnosticForNodeFromMessageChain(location, message)); // eslint-disable-line local/no-in-operator
    }

    function errorAndMaybeSuggestAwait(
        location: ts.Node,
        maybeMissingAwait: boolean,
        message: ts.DiagnosticMessage,
        arg0?: string | number | undefined, arg1?: string | number | undefined, arg2?: string | number | undefined, arg3?: string | number | undefined): ts.Diagnostic {
        const diagnostic = error(location, message, arg0, arg1, arg2, arg3);
        if (maybeMissingAwait) {
            const related = ts.createDiagnosticForNode(location, ts.Diagnostics.Did_you_forget_to_use_await);
            ts.addRelatedInfo(diagnostic, related);
        }
        return diagnostic;
    }

    function addDeprecatedSuggestionWorker(declarations: ts.Node | ts.Node[], diagnostic: ts.DiagnosticWithLocation) {
        const deprecatedTag = Array.isArray(declarations) ? ts.forEach(declarations, ts.getJSDocDeprecatedTag) : ts.getJSDocDeprecatedTag(declarations);
        if (deprecatedTag) {
            ts.addRelatedInfo(
                diagnostic,
                ts.createDiagnosticForNode(deprecatedTag, ts.Diagnostics.The_declaration_was_marked_as_deprecated_here)
            );
        }
        // We call `addRelatedInfo()` before adding the diagnostic to prevent duplicates.
        suggestionDiagnostics.add(diagnostic);
        return diagnostic;
    }

    function isDeprecatedSymbol(symbol: ts.Symbol) {
        return !!(getDeclarationNodeFlagsFromSymbol(symbol) & ts.NodeFlags.Deprecated);
    }

    function addDeprecatedSuggestion(location: ts.Node, declarations: ts.Node[], deprecatedEntity: string) {
        const diagnostic = ts.createDiagnosticForNode(location, ts.Diagnostics._0_is_deprecated, deprecatedEntity);
        return addDeprecatedSuggestionWorker(declarations, diagnostic);
    }

    function addDeprecatedSuggestionWithSignature(location: ts.Node, declaration: ts.Node, deprecatedEntity: string | undefined, signatureString: string) {
        const diagnostic = deprecatedEntity
            ? ts.createDiagnosticForNode(location, ts.Diagnostics.The_signature_0_of_1_is_deprecated, signatureString, deprecatedEntity)
            : ts.createDiagnosticForNode(location, ts.Diagnostics._0_is_deprecated, signatureString);
        return addDeprecatedSuggestionWorker(declaration, diagnostic);
    }

    function createSymbol(flags: ts.SymbolFlags, name: ts.__String, checkFlags?: ts.CheckFlags) {
        symbolCount++;
        const symbol = (new Symbol(flags | ts.SymbolFlags.Transient, name) as ts.TransientSymbol);
        symbol.checkFlags = checkFlags || 0;
        return symbol;
    }

    function getExcludedSymbolFlags(flags: ts.SymbolFlags): ts.SymbolFlags {
        let result: ts.SymbolFlags = 0;
        if (flags & ts.SymbolFlags.BlockScopedVariable) result |= ts.SymbolFlags.BlockScopedVariableExcludes;
        if (flags & ts.SymbolFlags.FunctionScopedVariable) result |= ts.SymbolFlags.FunctionScopedVariableExcludes;
        if (flags & ts.SymbolFlags.Property) result |= ts.SymbolFlags.PropertyExcludes;
        if (flags & ts.SymbolFlags.EnumMember) result |= ts.SymbolFlags.EnumMemberExcludes;
        if (flags & ts.SymbolFlags.Function) result |= ts.SymbolFlags.FunctionExcludes;
        if (flags & ts.SymbolFlags.Class) result |= ts.SymbolFlags.ClassExcludes;
        if (flags & ts.SymbolFlags.Interface) result |= ts.SymbolFlags.InterfaceExcludes;
        if (flags & ts.SymbolFlags.RegularEnum) result |= ts.SymbolFlags.RegularEnumExcludes;
        if (flags & ts.SymbolFlags.ConstEnum) result |= ts.SymbolFlags.ConstEnumExcludes;
        if (flags & ts.SymbolFlags.ValueModule) result |= ts.SymbolFlags.ValueModuleExcludes;
        if (flags & ts.SymbolFlags.Method) result |= ts.SymbolFlags.MethodExcludes;
        if (flags & ts.SymbolFlags.GetAccessor) result |= ts.SymbolFlags.GetAccessorExcludes;
        if (flags & ts.SymbolFlags.SetAccessor) result |= ts.SymbolFlags.SetAccessorExcludes;
        if (flags & ts.SymbolFlags.TypeParameter) result |= ts.SymbolFlags.TypeParameterExcludes;
        if (flags & ts.SymbolFlags.TypeAlias) result |= ts.SymbolFlags.TypeAliasExcludes;
        if (flags & ts.SymbolFlags.Alias) result |= ts.SymbolFlags.AliasExcludes;
        return result;
    }

    function recordMergedSymbol(target: ts.Symbol, source: ts.Symbol) {
        if (!source.mergeId) {
            source.mergeId = nextMergeId;
            nextMergeId++;
        }
        mergedSymbols[source.mergeId] = target;
    }

    function cloneSymbol(symbol: ts.Symbol): ts.Symbol {
        const result = createSymbol(symbol.flags, symbol.escapedName);
        result.declarations = symbol.declarations ? symbol.declarations.slice() : [];
        result.parent = symbol.parent;
        if (symbol.valueDeclaration) result.valueDeclaration = symbol.valueDeclaration;
        if (symbol.constEnumOnlyModule) result.constEnumOnlyModule = true;
        if (symbol.members) result.members = new ts.Map(symbol.members);
        if (symbol.exports) result.exports = new ts.Map(symbol.exports);
        recordMergedSymbol(result, symbol);
        return result;
    }

    /**
     * Note: if target is transient, then it is mutable, and mergeSymbol with both mutate and return it.
     * If target is not transient, mergeSymbol will produce a transient clone, mutate that and return it.
     */
    function mergeSymbol(target: ts.Symbol, source: ts.Symbol, unidirectional = false): ts.Symbol {
        if (!(target.flags & getExcludedSymbolFlags(source.flags)) ||
            (source.flags | target.flags) & ts.SymbolFlags.Assignment) {
            if (source === target) {
                // This can happen when an export assigned namespace exports something also erroneously exported at the top level
                // See `declarationFileNoCrashOnExtraExportModifier` for an example
                return target;
            }
            if (!(target.flags & ts.SymbolFlags.Transient)) {
                const resolvedTarget = resolveSymbol(target);
                if (resolvedTarget === unknownSymbol) {
                    return source;
                }
                target = cloneSymbol(resolvedTarget);
            }
            // Javascript static-property-assignment declarations always merge, even though they are also values
            if (source.flags & ts.SymbolFlags.ValueModule && target.flags & ts.SymbolFlags.ValueModule && target.constEnumOnlyModule && !source.constEnumOnlyModule) {
                // reset flag when merging instantiated module into value module that has only const enums
                target.constEnumOnlyModule = false;
            }
            target.flags |= source.flags;
            if (source.valueDeclaration) {
                ts.setValueDeclaration(target, source.valueDeclaration);
            }
            ts.addRange(target.declarations, source.declarations);
            if (source.members) {
                if (!target.members) target.members = ts.createSymbolTable();
                mergeSymbolTable(target.members, source.members, unidirectional);
            }
            if (source.exports) {
                if (!target.exports) target.exports = ts.createSymbolTable();
                mergeSymbolTable(target.exports, source.exports, unidirectional);
            }
            if (!unidirectional) {
                recordMergedSymbol(target, source);
            }
        }
        else if (target.flags & ts.SymbolFlags.NamespaceModule) {
            // Do not report an error when merging `var globalThis` with the built-in `globalThis`,
            // as we will already report a "Declaration name conflicts..." error, and this error
            // won't make much sense.
            if (target !== globalThisSymbol) {
                error(
                    source.declarations && ts.getNameOfDeclaration(source.declarations[0]),
                    ts.Diagnostics.Cannot_augment_module_0_with_value_exports_because_it_resolves_to_a_non_module_entity,
                    symbolToString(target));
            }
        }
        else { // error
            const isEitherEnum = !!(target.flags & ts.SymbolFlags.Enum || source.flags & ts.SymbolFlags.Enum);
            const isEitherBlockScoped = !!(target.flags & ts.SymbolFlags.BlockScopedVariable || source.flags & ts.SymbolFlags.BlockScopedVariable);
            const message = isEitherEnum ? ts.Diagnostics.Enum_declarations_can_only_merge_with_namespace_or_other_enum_declarations
                : isEitherBlockScoped ? ts.Diagnostics.Cannot_redeclare_block_scoped_variable_0
                : ts.Diagnostics.Duplicate_identifier_0;
            const sourceSymbolFile = source.declarations && ts.getSourceFileOfNode(source.declarations[0]);
            const targetSymbolFile = target.declarations && ts.getSourceFileOfNode(target.declarations[0]);

            const isSourcePlainJs = ts.isPlainJsFile(sourceSymbolFile, compilerOptions.checkJs);
            const isTargetPlainJs = ts.isPlainJsFile(targetSymbolFile, compilerOptions.checkJs);
            const symbolName = symbolToString(source);

            // Collect top-level duplicate identifier errors into one mapping, so we can then merge their diagnostics if there are a bunch
            if (sourceSymbolFile && targetSymbolFile && amalgamatedDuplicates && !isEitherEnum && sourceSymbolFile !== targetSymbolFile) {
                const firstFile = ts.comparePaths(sourceSymbolFile.path, targetSymbolFile.path) === ts.Comparison.LessThan ? sourceSymbolFile : targetSymbolFile;
                const secondFile = firstFile === sourceSymbolFile ? targetSymbolFile : sourceSymbolFile;
                const filesDuplicates = ts.getOrUpdate(amalgamatedDuplicates, `${firstFile.path}|${secondFile.path}`, () =>
                    ({ firstFile, secondFile, conflictingSymbols: new ts.Map() } as DuplicateInfoForFiles));
                const conflictingSymbolInfo = ts.getOrUpdate(filesDuplicates.conflictingSymbols, symbolName, () =>
                    ({ isBlockScoped: isEitherBlockScoped, firstFileLocations: [], secondFileLocations: [] } as DuplicateInfoForSymbol));
                if (!isSourcePlainJs) addDuplicateLocations(conflictingSymbolInfo.firstFileLocations, source);
                if (!isTargetPlainJs) addDuplicateLocations(conflictingSymbolInfo.secondFileLocations, target);
            }
            else {
                if (!isSourcePlainJs) addDuplicateDeclarationErrorsForSymbols(source, message, symbolName, target);
                if (!isTargetPlainJs) addDuplicateDeclarationErrorsForSymbols(target, message, symbolName, source);
            }
        }
        return target;

        function addDuplicateLocations(locs: ts.Declaration[], symbol: ts.Symbol): void {
            if (symbol.declarations) {
                for (const decl of symbol.declarations) {
                    ts.pushIfUnique(locs, decl);
                }
            }
        }
    }

    function addDuplicateDeclarationErrorsForSymbols(target: ts.Symbol, message: ts.DiagnosticMessage, symbolName: string, source: ts.Symbol) {
        ts.forEach(target.declarations, node => {
            addDuplicateDeclarationError(node, message, symbolName, source.declarations);
        });
    }

    function addDuplicateDeclarationError(node: ts.Declaration, message: ts.DiagnosticMessage, symbolName: string, relatedNodes: readonly ts.Declaration[] | undefined) {
        const errorNode = (ts.getExpandoInitializer(node, /*isPrototypeAssignment*/ false) ? ts.getNameOfExpando(node) : ts.getNameOfDeclaration(node)) || node;
        const err = lookupOrIssueError(errorNode, message, symbolName);
        for (const relatedNode of relatedNodes || ts.emptyArray) {
            const adjustedNode = (ts.getExpandoInitializer(relatedNode, /*isPrototypeAssignment*/ false) ? ts.getNameOfExpando(relatedNode) : ts.getNameOfDeclaration(relatedNode)) || relatedNode;
            if (adjustedNode === errorNode) continue;
            err.relatedInformation = err.relatedInformation || [];
            const leadingMessage = ts.createDiagnosticForNode(adjustedNode, ts.Diagnostics._0_was_also_declared_here, symbolName);
            const followOnMessage = ts.createDiagnosticForNode(adjustedNode, ts.Diagnostics.and_here);
            if (ts.length(err.relatedInformation) >= 5 || ts.some(err.relatedInformation, r => ts.compareDiagnostics(r, followOnMessage) === ts.Comparison.EqualTo || ts.compareDiagnostics(r, leadingMessage) === ts.Comparison.EqualTo)) continue;
            ts.addRelatedInfo(err, !ts.length(err.relatedInformation) ? leadingMessage : followOnMessage);
        }
    }

    function combineSymbolTables(first: ts.SymbolTable | undefined, second: ts.SymbolTable | undefined): ts.SymbolTable | undefined {
        if (!first?.size) return second;
        if (!second?.size) return first;
        const combined = ts.createSymbolTable();
        mergeSymbolTable(combined, first);
        mergeSymbolTable(combined, second);
        return combined;
    }

    function mergeSymbolTable(target: ts.SymbolTable, source: ts.SymbolTable, unidirectional = false) {
        source.forEach((sourceSymbol, id) => {
            const targetSymbol = target.get(id);
            target.set(id, targetSymbol ? mergeSymbol(targetSymbol, sourceSymbol, unidirectional) : getMergedSymbol(sourceSymbol));
        });
    }

    function mergeModuleAugmentation(moduleName: ts.StringLiteral | ts.Identifier): void {
        const moduleAugmentation = moduleName.parent as ts.ModuleDeclaration;
        if (moduleAugmentation.symbol.declarations?.[0] !== moduleAugmentation) {
            // this is a combined symbol for multiple augmentations within the same file.
            // its symbol already has accumulated information for all declarations
            // so we need to add it just once - do the work only for first declaration
            ts.Debug.assert(moduleAugmentation.symbol.declarations!.length > 1);
            return;
        }

        if (ts.isGlobalScopeAugmentation(moduleAugmentation)) {
            mergeSymbolTable(globals, moduleAugmentation.symbol.exports!);
        }
        else {
            // find a module that about to be augmented
            // do not validate names of augmentations that are defined in ambient context
            const moduleNotFoundError = !(moduleName.parent.parent.flags & ts.NodeFlags.Ambient)
                ? ts.Diagnostics.Invalid_module_name_in_augmentation_module_0_cannot_be_found
                : undefined;
            let mainModule = resolveExternalModuleNameWorker(moduleName, moduleName, moduleNotFoundError, /*isForAugmentation*/ true);
            if (!mainModule) {
                return;
            }
            // obtain item referenced by 'export='
            mainModule = resolveExternalModuleSymbol(mainModule);
            if (mainModule.flags & ts.SymbolFlags.Namespace) {
                // If we're merging an augmentation to a pattern ambient module, we want to
                // perform the merge unidirectionally from the augmentation ('a.foo') to
                // the pattern ('*.foo'), so that 'getMergedSymbol()' on a.foo gives you
                // all the exports both from the pattern and from the augmentation, but
                // 'getMergedSymbol()' on *.foo only gives you exports from *.foo.
                if (ts.some(patternAmbientModules, module => mainModule === module.symbol)) {
                    const merged = mergeSymbol(moduleAugmentation.symbol, mainModule, /*unidirectional*/ true);
                    if (!patternAmbientModuleAugmentations) {
                        patternAmbientModuleAugmentations = new ts.Map();
                    }
                    // moduleName will be a StringLiteral since this is not `declare global`.
                    patternAmbientModuleAugmentations.set((moduleName as ts.StringLiteral).text, merged);
                }
                else {
                    if (mainModule.exports?.get(ts.InternalSymbolName.ExportStar) && moduleAugmentation.symbol.exports?.size) {
                        // We may need to merge the module augmentation's exports into the target symbols of the resolved exports
                        const resolvedExports = getResolvedMembersOrExportsOfSymbol(mainModule, MembersOrExportsResolutionKind.resolvedExports);
                        for (const [key, value] of ts.arrayFrom(moduleAugmentation.symbol.exports.entries())) {
                            if (resolvedExports.has(key) && !mainModule.exports.has(key)) {
                                mergeSymbol(resolvedExports.get(key)!, value);
                            }
                        }
                    }
                    mergeSymbol(mainModule, moduleAugmentation.symbol);
                }
            }
            else {
                // moduleName will be a StringLiteral since this is not `declare global`.
                error(moduleName, ts.Diagnostics.Cannot_augment_module_0_because_it_resolves_to_a_non_module_entity, (moduleName as ts.StringLiteral).text);
            }
        }
    }

    function addToSymbolTable(target: ts.SymbolTable, source: ts.SymbolTable, message: ts.DiagnosticMessage) {
        source.forEach((sourceSymbol, id) => {
            const targetSymbol = target.get(id);
            if (targetSymbol) {
                // Error on redeclarations
                ts.forEach(targetSymbol.declarations, addDeclarationDiagnostic(ts.unescapeLeadingUnderscores(id), message));
            }
            else {
                target.set(id, sourceSymbol);
            }
        });

        function addDeclarationDiagnostic(id: string, message: ts.DiagnosticMessage) {
            return (declaration: ts.Declaration) => diagnostics.add(ts.createDiagnosticForNode(declaration, message, id));
        }
    }

    function getSymbolLinks(symbol: ts.Symbol): ts.SymbolLinks {
        if (symbol.flags & ts.SymbolFlags.Transient) return symbol as ts.TransientSymbol;
        const id = getSymbolId(symbol);
        return symbolLinks[id] || (symbolLinks[id] = new (SymbolLinks as any)());
    }

    function getNodeLinks(node: ts.Node): ts.NodeLinks {
        const nodeId = getNodeId(node);
        return nodeLinks[nodeId] || (nodeLinks[nodeId] = new (NodeLinks as any)());
    }

    function isGlobalSourceFile(node: ts.Node) {
        return node.kind === ts.SyntaxKind.SourceFile && !ts.isExternalOrCommonJsModule(node as ts.SourceFile);
    }

    function getSymbol(symbols: ts.SymbolTable, name: ts.__String, meaning: ts.SymbolFlags): ts.Symbol | undefined {
        if (meaning) {
            const symbol = getMergedSymbol(symbols.get(name));
            if (symbol) {
                ts.Debug.assert((ts.getCheckFlags(symbol) & ts.CheckFlags.Instantiated) === 0, "Should never get an instantiated symbol here.");
                if (symbol.flags & meaning) {
                    return symbol;
                }
                if (symbol.flags & ts.SymbolFlags.Alias) {
                    const targetFlags = getAllSymbolFlags(symbol);
                    // `targetFlags` will be `SymbolFlags.All` if an error occurred in alias resolution; this avoids cascading errors
                    if (targetFlags & meaning) {
                        return symbol;
                    }
                }
            }
        }
        // return undefined if we can't find a symbol.
    }

    /**
     * Get symbols that represent parameter-property-declaration as parameter and as property declaration
     * @param parameter a parameterDeclaration node
     * @param parameterName a name of the parameter to get the symbols for.
     * @return a tuple of two symbols
     */
    function getSymbolsOfParameterPropertyDeclaration(parameter: ts.ParameterDeclaration, parameterName: ts.__String): [ts.Symbol, ts.Symbol] {
        const constructorDeclaration = parameter.parent;
        const classDeclaration = parameter.parent.parent;

        const parameterSymbol = getSymbol(constructorDeclaration.locals!, parameterName, ts.SymbolFlags.Value);
        const propertySymbol = getSymbol(getMembersOfSymbol(classDeclaration.symbol), parameterName, ts.SymbolFlags.Value);

        if (parameterSymbol && propertySymbol) {
            return [parameterSymbol, propertySymbol];
        }

        return ts.Debug.fail("There should exist two symbols, one as property declaration and one as parameter declaration");
    }

    function isBlockScopedNameDeclaredBeforeUse(declaration: ts.Declaration, usage: ts.Node): boolean {
        const declarationFile = ts.getSourceFileOfNode(declaration);
        const useFile = ts.getSourceFileOfNode(usage);
        const declContainer = ts.getEnclosingBlockScopeContainer(declaration);
        if (declarationFile !== useFile) {
            if ((moduleKind && (declarationFile.externalModuleIndicator || useFile.externalModuleIndicator)) ||
                (!ts.outFile(compilerOptions)) ||
                isInTypeQuery(usage) ||
                declaration.flags & ts.NodeFlags.Ambient) {
                // nodes are in different files and order cannot be determined
                return true;
            }
            // declaration is after usage
            // can be legal if usage is deferred (i.e. inside function or in initializer of instance property)
            if (isUsedInFunctionOrInstanceProperty(usage, declaration)) {
                return true;
            }
            const sourceFiles = host.getSourceFiles();
            return sourceFiles.indexOf(declarationFile) <= sourceFiles.indexOf(useFile);
        }

        if (declaration.pos <= usage.pos && !(ts.isPropertyDeclaration(declaration) && ts.isThisProperty(usage.parent) && !declaration.initializer && !declaration.exclamationToken)) {
            // declaration is before usage
            if (declaration.kind === ts.SyntaxKind.BindingElement) {
                // still might be illegal if declaration and usage are both binding elements (eg var [a = b, b = b] = [1, 2])
                const errorBindingElement = ts.getAncestor(usage, ts.SyntaxKind.BindingElement) as ts.BindingElement;
                if (errorBindingElement) {
                    return ts.findAncestor(errorBindingElement, ts.isBindingElement) !== ts.findAncestor(declaration, ts.isBindingElement) ||
                        declaration.pos < errorBindingElement.pos;
                }
                // or it might be illegal if usage happens before parent variable is declared (eg var [a] = a)
                return isBlockScopedNameDeclaredBeforeUse(ts.getAncestor(declaration, ts.SyntaxKind.VariableDeclaration) as ts.Declaration, usage);
            }
            else if (declaration.kind === ts.SyntaxKind.VariableDeclaration) {
                // still might be illegal if usage is in the initializer of the variable declaration (eg var a = a)
                return !isImmediatelyUsedInInitializerOfBlockScopedVariable(declaration as ts.VariableDeclaration, usage);
            }
            else if (ts.isClassDeclaration(declaration)) {
                // still might be illegal if the usage is within a computed property name in the class (eg class A { static p = "a"; [A.p]() {} })
                return !ts.findAncestor(usage, n => ts.isComputedPropertyName(n) && n.parent.parent === declaration);
            }
            else if (ts.isPropertyDeclaration(declaration)) {
                // still might be illegal if a self-referencing property initializer (eg private x = this.x)
                return !isPropertyImmediatelyReferencedWithinDeclaration(declaration, usage, /*stopAtAnyPropertyDeclaration*/ false);
            }
            else if (ts.isParameterPropertyDeclaration(declaration, declaration.parent)) {
                // foo = this.bar is illegal in esnext+useDefineForClassFields when bar is a parameter property
                return !(ts.getEmitScriptTarget(compilerOptions) === ts.ScriptTarget.ESNext && useDefineForClassFields
                         && ts.getContainingClass(declaration) === ts.getContainingClass(usage)
                         && isUsedInFunctionOrInstanceProperty(usage, declaration));
            }
            return true;
        }


        // declaration is after usage, but it can still be legal if usage is deferred:
        // 1. inside an export specifier
        // 2. inside a function
        // 3. inside an instance property initializer, a reference to a non-instance property
        //    (except when target: "esnext" and useDefineForClassFields: true and the reference is to a parameter property)
        // 4. inside a static property initializer, a reference to a static method in the same class
        // 5. inside a TS export= declaration (since we will move the export statement during emit to avoid TDZ)
        // or if usage is in a type context:
        // 1. inside a type query (typeof in type position)
        // 2. inside a jsdoc comment
        if (usage.parent.kind === ts.SyntaxKind.ExportSpecifier || (usage.parent.kind === ts.SyntaxKind.ExportAssignment && (usage.parent as ts.ExportAssignment).isExportEquals)) {
            // export specifiers do not use the variable, they only make it available for use
            return true;
        }
        // When resolving symbols for exports, the `usage` location passed in can be the export site directly
        if (usage.kind === ts.SyntaxKind.ExportAssignment && (usage as ts.ExportAssignment).isExportEquals) {
            return true;
        }

        if (!!(usage.flags & ts.NodeFlags.JSDoc) || isInTypeQuery(usage) || usageInTypeDeclaration()) {
            return true;
        }
        if (isUsedInFunctionOrInstanceProperty(usage, declaration)) {
            if (ts.getEmitScriptTarget(compilerOptions) === ts.ScriptTarget.ESNext && useDefineForClassFields
                && ts.getContainingClass(declaration)
                && (ts.isPropertyDeclaration(declaration) || ts.isParameterPropertyDeclaration(declaration, declaration.parent))) {
                return !isPropertyImmediatelyReferencedWithinDeclaration(declaration, usage, /*stopAtAnyPropertyDeclaration*/ true);
            }
            else {
                return true;
            }
        }
        return false;

        function usageInTypeDeclaration() {
            return !!ts.findAncestor(usage, node => ts.isInterfaceDeclaration(node) || ts.isTypeAliasDeclaration(node));
        }

        function isImmediatelyUsedInInitializerOfBlockScopedVariable(declaration: ts.VariableDeclaration, usage: ts.Node): boolean {
            switch (declaration.parent.parent.kind) {
                case ts.SyntaxKind.VariableStatement:
                case ts.SyntaxKind.ForStatement:
                case ts.SyntaxKind.ForOfStatement:
                    // variable statement/for/for-of statement case,
                    // use site should not be inside variable declaration (initializer of declaration or binding element)
                    if (isSameScopeDescendentOf(usage, declaration, declContainer)) {
                        return true;
                    }
                    break;
            }

            // ForIn/ForOf case - use site should not be used in expression part
            const grandparent = declaration.parent.parent;
            return ts.isForInOrOfStatement(grandparent) && isSameScopeDescendentOf(usage, grandparent.expression, declContainer);
        }

        function isUsedInFunctionOrInstanceProperty(usage: ts.Node, declaration: ts.Node): boolean {
            return !!ts.findAncestor(usage, current => {
                if (current === declContainer) {
                    return "quit";
                }
                if (ts.isFunctionLike(current)) {
                    return true;
                }
                if (ts.isClassStaticBlockDeclaration(current)) {
                    return declaration.pos < usage.pos;
                }

                const propertyDeclaration = ts.tryCast(current.parent, ts.isPropertyDeclaration);
                if (propertyDeclaration) {
                    const initializerOfProperty = propertyDeclaration.initializer === current;
                    if (initializerOfProperty) {
                        if (ts.isStatic(current.parent)) {
                            if (declaration.kind === ts.SyntaxKind.MethodDeclaration) {
                                return true;
                            }
                            if (ts.isPropertyDeclaration(declaration) && ts.getContainingClass(usage) === ts.getContainingClass(declaration)) {
                                const propName = declaration.name;
                                if (ts.isIdentifier(propName) || ts.isPrivateIdentifier(propName)) {
                                    const type = getTypeOfSymbol(getSymbolOfNode(declaration));
                                    const staticBlocks = ts.filter(declaration.parent.members, ts.isClassStaticBlockDeclaration);
                                    if (isPropertyInitializedInStaticBlocks(propName, type, staticBlocks, declaration.parent.pos, current.pos)) {
                                        return true;
                                    }
                                }
                            }
                        }
                        else {
                            const isDeclarationInstanceProperty = declaration.kind === ts.SyntaxKind.PropertyDeclaration && !ts.isStatic(declaration);
                            if (!isDeclarationInstanceProperty || ts.getContainingClass(usage) !== ts.getContainingClass(declaration)) {
                                return true;
                            }
                        }
                    }
                }
                return false;
            });
        }

        /** stopAtAnyPropertyDeclaration is used for detecting ES-standard class field use-before-def errors */
        function isPropertyImmediatelyReferencedWithinDeclaration(declaration: ts.PropertyDeclaration | ts.ParameterPropertyDeclaration, usage: ts.Node, stopAtAnyPropertyDeclaration: boolean) {
            // always legal if usage is after declaration
            if (usage.end > declaration.end) {
                return false;
            }

            // still might be legal if usage is deferred (e.g. x: any = () => this.x)
            // otherwise illegal if immediately referenced within the declaration (e.g. x: any = this.x)
            const ancestorChangingReferenceScope = ts.findAncestor(usage, (node: ts.Node) => {
                if (node === declaration) {
                    return "quit";
                }

                switch (node.kind) {
                    case ts.SyntaxKind.ArrowFunction:
                        return true;
                    case ts.SyntaxKind.PropertyDeclaration:
                        // even when stopping at any property declaration, they need to come from the same class
                        return stopAtAnyPropertyDeclaration &&
                            (ts.isPropertyDeclaration(declaration) && node.parent === declaration.parent
                             || ts.isParameterPropertyDeclaration(declaration, declaration.parent) && node.parent === declaration.parent.parent)
                            ? "quit": true;
                    case ts.SyntaxKind.Block:
                        switch (node.parent.kind) {
                            case ts.SyntaxKind.GetAccessor:
                            case ts.SyntaxKind.MethodDeclaration:
                            case ts.SyntaxKind.SetAccessor:
                                return true;
                            default:
                                return false;
                        }
                    default:
                        return false;
                }
            });

            return ancestorChangingReferenceScope === undefined;
        }
    }

    function useOuterVariableScopeInParameter(result: ts.Symbol, location: ts.Node, lastLocation: ts.Node) {
        const target = ts.getEmitScriptTarget(compilerOptions);
        const functionLocation = location as ts.FunctionLikeDeclaration;
        if (ts.isParameter(lastLocation)
            && functionLocation.body
            && result.valueDeclaration
            && result.valueDeclaration.pos >= functionLocation.body.pos
            && result.valueDeclaration.end <= functionLocation.body.end) {
            // check for several cases where we introduce temporaries that require moving the name/initializer of the parameter to the body
            // - static field in a class expression
            // - optional chaining pre-es2020
            // - nullish coalesce pre-es2020
            // - spread assignment in binding pattern pre-es2017
            if (target >= ts.ScriptTarget.ES2015) {
                const links = getNodeLinks(functionLocation);
                if (links.declarationRequiresScopeChange === undefined) {
                    links.declarationRequiresScopeChange = ts.forEach(functionLocation.parameters, requiresScopeChange) || false;
                }
                return !links.declarationRequiresScopeChange;
            }
        }
        return false;

        function requiresScopeChange(node: ts.ParameterDeclaration): boolean {
            return requiresScopeChangeWorker(node.name)
                || !!node.initializer && requiresScopeChangeWorker(node.initializer);
        }

        function requiresScopeChangeWorker(node: ts.Node): boolean {
            switch (node.kind) {
                case ts.SyntaxKind.ArrowFunction:
                case ts.SyntaxKind.FunctionExpression:
                case ts.SyntaxKind.FunctionDeclaration:
                case ts.SyntaxKind.Constructor:
                    // do not descend into these
                    return false;
                case ts.SyntaxKind.MethodDeclaration:
                case ts.SyntaxKind.GetAccessor:
                case ts.SyntaxKind.SetAccessor:
                case ts.SyntaxKind.PropertyAssignment:
                    return requiresScopeChangeWorker((node as ts.MethodDeclaration | ts.AccessorDeclaration | ts.PropertyAssignment).name);
                case ts.SyntaxKind.PropertyDeclaration:
                    // static properties in classes introduce temporary variables
                    if (ts.hasStaticModifier(node)) {
                        return target < ts.ScriptTarget.ESNext || !useDefineForClassFields;
                    }
                    return requiresScopeChangeWorker((node as ts.PropertyDeclaration).name);
                default:
                    // null coalesce and optional chain pre-es2020 produce temporary variables
                    if (ts.isNullishCoalesce(node) || ts.isOptionalChain(node)) {
                        return target < ts.ScriptTarget.ES2020;
                    }
                    if (ts.isBindingElement(node) && node.dotDotDotToken && ts.isObjectBindingPattern(node.parent)) {
                        return target < ts.ScriptTarget.ES2017;
                    }
                    if (ts.isTypeNode(node)) return false;
                    return ts.forEachChild(node, requiresScopeChangeWorker) || false;
            }
        }
    }

    function isConstAssertion(location: ts.Node) {
        return (ts.isAssertionExpression(location) && ts.isConstTypeReference(location.type))
            || (ts.isJSDocTypeTag(location) && ts.isConstTypeReference(location.typeExpression));
    }

    /**
     * Resolve a given name for a given meaning at a given location. An error is reported if the name was not found and
     * the nameNotFoundMessage argument is not undefined. Returns the resolved symbol, or undefined if no symbol with
     * the given name can be found.
     *
     * @param nameNotFoundMessage If defined, we will report errors found during resolve.
     * @param isUse If true, this will count towards --noUnusedLocals / --noUnusedParameters.
     */
    function resolveName(
        location: ts.Node | undefined,
        name: ts.__String,
        meaning: ts.SymbolFlags,
        nameNotFoundMessage: ts.DiagnosticMessage | undefined,
        nameArg: ts.__String | ts.Identifier | undefined,
        isUse: boolean,
        excludeGlobals = false,
        getSpellingSuggestions = true): ts.Symbol | undefined {
        return resolveNameHelper(location, name, meaning, nameNotFoundMessage, nameArg, isUse, excludeGlobals, getSpellingSuggestions, getSymbol);
    }

    function resolveNameHelper(
        location: ts.Node | undefined,
        name: ts.__String,
        meaning: ts.SymbolFlags,
        nameNotFoundMessage: ts.DiagnosticMessage | undefined,
        nameArg: ts.__String | ts.Identifier | undefined,
        isUse: boolean,
        excludeGlobals: boolean,
        getSpellingSuggestions: boolean,
        lookup: typeof getSymbol): ts.Symbol | undefined {
        const originalLocation = location; // needed for did-you-mean error reporting, which gathers candidates starting from the original location
        let result: ts.Symbol | undefined;
        let lastLocation: ts.Node | undefined;
        let lastSelfReferenceLocation: ts.Node | undefined;
        let propertyWithInvalidInitializer: ts.PropertyDeclaration | undefined;
        let associatedDeclarationForContainingInitializerOrBindingName: ts.ParameterDeclaration | ts.BindingElement | undefined;
        let withinDeferredContext = false;
        const errorLocation = location;
        let grandparent: ts.Node;
        let isInExternalModule = false;

        loop: while (location) {
            if (name === "const" && isConstAssertion(location)) {
                // `const` in an `as const` has no symbol, but issues no error because there is no *actual* lookup of the type
                // (it refers to the constant type of the expression instead)
                return undefined;
            }
            // Locals of a source file are not in scope (because they get merged into the global symbol table)
            if (location.locals && !isGlobalSourceFile(location)) {
                if (result = lookup(location.locals, name, meaning)) {
                    let useResult = true;
                    if (ts.isFunctionLike(location) && lastLocation && lastLocation !== (location as ts.FunctionLikeDeclaration).body) {
                        // symbol lookup restrictions for function-like declarations
                        // - Type parameters of a function are in scope in the entire function declaration, including the parameter
                        //   list and return type. However, local types are only in scope in the function body.
                        // - parameters are only in the scope of function body
                        // This restriction does not apply to JSDoc comment types because they are parented
                        // at a higher level than type parameters would normally be
                        if (meaning & result.flags & ts.SymbolFlags.Type && lastLocation.kind !== ts.SyntaxKind.JSDoc) {
                            useResult = result.flags & ts.SymbolFlags.TypeParameter
                                // type parameters are visible in parameter list, return type and type parameter list
                                ? lastLocation === (location as ts.FunctionLikeDeclaration).type ||
                                lastLocation.kind === ts.SyntaxKind.Parameter ||
                                lastLocation.kind === ts.SyntaxKind.JSDocParameterTag ||
                                lastLocation.kind === ts.SyntaxKind.JSDocReturnTag ||
                                lastLocation.kind === ts.SyntaxKind.TypeParameter
                                // local types not visible outside the function body
                                : false;
                        }
                        if (meaning & result.flags & ts.SymbolFlags.Variable) {
                            // expression inside parameter will lookup as normal variable scope when targeting es2015+
                            if (useOuterVariableScopeInParameter(result, location, lastLocation)) {
                                useResult = false;
                            }
                            else if (result.flags & ts.SymbolFlags.FunctionScopedVariable) {
                                // parameters are visible only inside function body, parameter list and return type
                                // technically for parameter list case here we might mix parameters and variables declared in function,
                                // however it is detected separately when checking initializers of parameters
                                // to make sure that they reference no variables declared after them.
                                useResult =
                                    lastLocation.kind === ts.SyntaxKind.Parameter ||
                                    (
                                        lastLocation === (location as ts.FunctionLikeDeclaration).type &&
                                        !!ts.findAncestor(result.valueDeclaration, ts.isParameter)
                                    );
                            }
                        }
                    }
                    else if (location.kind === ts.SyntaxKind.ConditionalType) {
                        // A type parameter declared using 'infer T' in a conditional type is visible only in
                        // the true branch of the conditional type.
                        useResult = lastLocation === (location as ts.ConditionalTypeNode).trueType;
                    }

                    if (useResult) {
                        break loop;
                    }
                    else {
                        result = undefined;
                    }
                }
            }
            withinDeferredContext = withinDeferredContext || getIsDeferredContext(location, lastLocation);
            switch (location.kind) {
                case ts.SyntaxKind.SourceFile:
                    if (!ts.isExternalOrCommonJsModule(location as ts.SourceFile)) break;
                    isInExternalModule = true;
                    // falls through
                case ts.SyntaxKind.ModuleDeclaration:
                    const moduleExports = getSymbolOfNode(location as ts.SourceFile | ts.ModuleDeclaration)?.exports || emptySymbols;
                    if (location.kind === ts.SyntaxKind.SourceFile || (ts.isModuleDeclaration(location) && location.flags & ts.NodeFlags.Ambient && !ts.isGlobalScopeAugmentation(location))) {

                        // It's an external module. First see if the module has an export default and if the local
                        // name of that export default matches.
                        if (result = moduleExports.get(ts.InternalSymbolName.Default)) {
                            const localSymbol = ts.getLocalSymbolForExportDefault(result);
                            if (localSymbol && (result.flags & meaning) && localSymbol.escapedName === name) {
                                break loop;
                            }
                            result = undefined;
                        }

                        // Because of module/namespace merging, a module's exports are in scope,
                        // yet we never want to treat an export specifier as putting a member in scope.
                        // Therefore, if the name we find is purely an export specifier, it is not actually considered in scope.
                        // Two things to note about this:
                        //     1. We have to check this without calling getSymbol. The problem with calling getSymbol
                        //        on an export specifier is that it might find the export specifier itself, and try to
                        //        resolve it as an alias. This will cause the checker to consider the export specifier
                        //        a circular alias reference when it might not be.
                        //     2. We check === SymbolFlags.Alias in order to check that the symbol is *purely*
                        //        an alias. If we used &, we'd be throwing out symbols that have non alias aspects,
                        //        which is not the desired behavior.
                        const moduleExport = moduleExports.get(name);
                        if (moduleExport &&
                            moduleExport.flags === ts.SymbolFlags.Alias &&
                            (ts.getDeclarationOfKind(moduleExport, ts.SyntaxKind.ExportSpecifier) || ts.getDeclarationOfKind(moduleExport, ts.SyntaxKind.NamespaceExport))) {
                            break;
                        }
                    }

                    // ES6 exports are also visible locally (except for 'default'), but commonjs exports are not (except typedefs)
                    if (name !== ts.InternalSymbolName.Default && (result = lookup(moduleExports, name, meaning & ts.SymbolFlags.ModuleMember))) {
                        if (ts.isSourceFile(location) && location.commonJsModuleIndicator && !result.declarations?.some(ts.isJSDocTypeAlias)) {
                            result = undefined;
                        }
                        else {
                            break loop;
                        }
                    }
                    break;
                case ts.SyntaxKind.EnumDeclaration:
                    if (result = lookup(getSymbolOfNode(location)?.exports || emptySymbols, name, meaning & ts.SymbolFlags.EnumMember)) {
                        break loop;
                    }
                    break;
                case ts.SyntaxKind.PropertyDeclaration:
                    // TypeScript 1.0 spec (April 2014): 8.4.1
                    // Initializer expressions for instance member variables are evaluated in the scope
                    // of the class constructor body but are not permitted to reference parameters or
                    // local variables of the constructor. This effectively means that entities from outer scopes
                    // by the same name as a constructor parameter or local variable are inaccessible
                    // in initializer expressions for instance member variables.
                    if (!ts.isStatic(location)) {
                        const ctor = findConstructorDeclaration(location.parent as ts.ClassLikeDeclaration);
                        if (ctor && ctor.locals) {
                            if (lookup(ctor.locals, name, meaning & ts.SymbolFlags.Value)) {
                                // Remember the property node, it will be used later to report appropriate error
                                ts.Debug.assertNode(location, ts.isPropertyDeclaration);
                                propertyWithInvalidInitializer = location;
                            }
                        }
                    }
                    break;
                case ts.SyntaxKind.ClassDeclaration:
                case ts.SyntaxKind.ClassExpression:
                case ts.SyntaxKind.InterfaceDeclaration:
                    // The below is used to lookup type parameters within a class or interface, as they are added to the class/interface locals
                    // These can never be latebound, so the symbol's raw members are sufficient. `getMembersOfNode` cannot be used, as it would
                    // trigger resolving late-bound names, which we may already be in the process of doing while we're here!
                    if (result = lookup(getSymbolOfNode(location as ts.ClassLikeDeclaration | ts.InterfaceDeclaration).members || emptySymbols, name, meaning & ts.SymbolFlags.Type)) {
                        if (!isTypeParameterSymbolDeclaredInContainer(result, location)) {
                            // ignore type parameters not declared in this container
                            result = undefined;
                            break;
                        }
                        if (lastLocation && ts.isStatic(lastLocation)) {
                            // TypeScript 1.0 spec (April 2014): 3.4.1
                            // The scope of a type parameter extends over the entire declaration with which the type
                            // parameter list is associated, with the exception of static member declarations in classes.
                            if (nameNotFoundMessage) {
                                error(errorLocation, ts.Diagnostics.Static_members_cannot_reference_class_type_parameters);
                            }
                            return undefined;
                        }
                        break loop;
                    }
                    if (location.kind === ts.SyntaxKind.ClassExpression && meaning & ts.SymbolFlags.Class) {
                        const className = (location as ts.ClassExpression).name;
                        if (className && name === className.escapedText) {
                            result = location.symbol;
                            break loop;
                        }
                    }
                    break;
                case ts.SyntaxKind.ExpressionWithTypeArguments:
                    // The type parameters of a class are not in scope in the base class expression.
                    if (lastLocation === (location as ts.ExpressionWithTypeArguments).expression && (location.parent as ts.HeritageClause).token === ts.SyntaxKind.ExtendsKeyword) {
                        const container = location.parent.parent;
                        if (ts.isClassLike(container) && (result = lookup(getSymbolOfNode(container).members!, name, meaning & ts.SymbolFlags.Type))) {
                            if (nameNotFoundMessage) {
                                error(errorLocation, ts.Diagnostics.Base_class_expressions_cannot_reference_class_type_parameters);
                            }
                            return undefined;
                        }
                    }
                    break;
                // It is not legal to reference a class's own type parameters from a computed property name that
                // belongs to the class. For example:
                //
                //   function foo<T>() { return '' }
                //   class C<T> { // <-- Class's own type parameter T
                //       [foo<T>()]() { } // <-- Reference to T from class's own computed property
                //   }
                //
                case ts.SyntaxKind.ComputedPropertyName:
                    grandparent = location.parent.parent;
                    if (ts.isClassLike(grandparent) || grandparent.kind === ts.SyntaxKind.InterfaceDeclaration) {
                        // A reference to this grandparent's type parameters would be an error
                        if (result = lookup(getSymbolOfNode(grandparent as ts.ClassLikeDeclaration | ts.InterfaceDeclaration).members!, name, meaning & ts.SymbolFlags.Type)) {
                            if (nameNotFoundMessage) {
                                error(errorLocation, ts.Diagnostics.A_computed_property_name_cannot_reference_a_type_parameter_from_its_containing_type);
                            }
                            return undefined;
                        }
                    }
                    break;
                case ts.SyntaxKind.ArrowFunction:
                    // when targeting ES6 or higher there is no 'arguments' in an arrow function
                    // for lower compile targets the resolved symbol is used to emit an error
                    if (ts.getEmitScriptTarget(compilerOptions) >= ts.ScriptTarget.ES2015) {
                        break;
                    }
                    // falls through
                case ts.SyntaxKind.MethodDeclaration:
                case ts.SyntaxKind.Constructor:
                case ts.SyntaxKind.GetAccessor:
                case ts.SyntaxKind.SetAccessor:
                case ts.SyntaxKind.FunctionDeclaration:
                    if (meaning & ts.SymbolFlags.Variable && name === "arguments") {
                        result = argumentsSymbol;
                        break loop;
                    }
                    break;
                case ts.SyntaxKind.FunctionExpression:
                    if (meaning & ts.SymbolFlags.Variable && name === "arguments") {
                        result = argumentsSymbol;
                        break loop;
                    }

                    if (meaning & ts.SymbolFlags.Function) {
                        const functionName = (location as ts.FunctionExpression).name;
                        if (functionName && name === functionName.escapedText) {
                            result = location.symbol;
                            break loop;
                        }
                    }
                    break;
                case ts.SyntaxKind.Decorator:
                    // Decorators are resolved at the class declaration. Resolving at the parameter
                    // or member would result in looking up locals in the method.
                    //
                    //   function y() {}
                    //   class C {
                    //       method(@y x, y) {} // <-- decorator y should be resolved at the class declaration, not the parameter.
                    //   }
                    //
                    if (location.parent && location.parent.kind === ts.SyntaxKind.Parameter) {
                        location = location.parent;
                    }
                    //
                    //   function y() {}
                    //   class C {
                    //       @y method(x, y) {} // <-- decorator y should be resolved at the class declaration, not the method.
                    //   }
                    //

                    // class Decorators are resolved outside of the class to avoid referencing type parameters of that class.
                    //
                    //   type T = number;
                    //   declare function y(x: T): any;
                    //   @param(1 as T) // <-- T should resolve to the type alias outside of class C
                    //   class C<T> {}
                    if (location.parent && (ts.isClassElement(location.parent) || location.parent.kind === ts.SyntaxKind.ClassDeclaration)) {
                        location = location.parent;
                    }
                    break;
                case ts.SyntaxKind.JSDocTypedefTag:
                case ts.SyntaxKind.JSDocCallbackTag:
                case ts.SyntaxKind.JSDocEnumTag:
                    // js type aliases do not resolve names from their host, so skip past it
                    const root = ts.getJSDocRoot(location);
                    if (root) {
                        location = root.parent;
                    }
                    break;
                case ts.SyntaxKind.Parameter:
                    if (lastLocation && (
                        lastLocation === (location as ts.ParameterDeclaration).initializer ||
                        lastLocation === (location as ts.ParameterDeclaration).name && ts.isBindingPattern(lastLocation))) {
                        if (!associatedDeclarationForContainingInitializerOrBindingName) {
                            associatedDeclarationForContainingInitializerOrBindingName = location as ts.ParameterDeclaration;
                        }
                    }
                    break;
                case ts.SyntaxKind.BindingElement:
                    if (lastLocation && (
                        lastLocation === (location as ts.BindingElement).initializer ||
                        lastLocation === (location as ts.BindingElement).name && ts.isBindingPattern(lastLocation))) {
                        if (ts.isParameterDeclaration(location as ts.BindingElement) && !associatedDeclarationForContainingInitializerOrBindingName) {
                            associatedDeclarationForContainingInitializerOrBindingName = location as ts.BindingElement;
                        }
                    }
                    break;
                case ts.SyntaxKind.InferType:
                    if (meaning & ts.SymbolFlags.TypeParameter) {
                        const parameterName = (location as ts.InferTypeNode).typeParameter.name;
                        if (parameterName && name === parameterName.escapedText) {
                            result = (location as ts.InferTypeNode).typeParameter.symbol;
                            break loop;
                        }
                    }
                    break;
            }
            if (isSelfReferenceLocation(location)) {
                lastSelfReferenceLocation = location;
            }
            lastLocation = location;
            location = ts.isJSDocTemplateTag(location) ? ts.getEffectiveContainerForJSDocTemplateTag(location) || location.parent :
                ts.isJSDocParameterTag(location) || ts.isJSDocReturnTag(location) ? ts.getHostSignatureFromJSDoc(location) || location.parent :
                location.parent;
        }

        // We just climbed up parents looking for the name, meaning that we started in a descendant node of `lastLocation`.
        // If `result === lastSelfReferenceLocation.symbol`, that means that we are somewhere inside `lastSelfReferenceLocation` looking up a name, and resolving to `lastLocation` itself.
        // That means that this is a self-reference of `lastLocation`, and shouldn't count this when considering whether `lastLocation` is used.
        if (isUse && result && (!lastSelfReferenceLocation || result !== lastSelfReferenceLocation.symbol)) {
            result.isReferenced! |= meaning;
        }

        if (!result) {
            if (lastLocation) {
                ts.Debug.assert(lastLocation.kind === ts.SyntaxKind.SourceFile);
                if ((lastLocation as ts.SourceFile).commonJsModuleIndicator && name === "exports" && meaning & lastLocation.symbol.flags) {
                    return lastLocation.symbol;
                }
            }

            if (!excludeGlobals) {
                result = lookup(globals, name, meaning);
            }
        }
        if (!result) {
            if (originalLocation && ts.isInJSFile(originalLocation) && originalLocation.parent) {
                if (ts.isRequireCall(originalLocation.parent, /*checkArgumentIsStringLiteralLike*/ false)) {
                    return requireSymbol;
                }
            }
        }

        // The invalid initializer error is needed in two situation:
        // 1. When result is undefined, after checking for a missing "this."
        // 2. When result is defined
        function checkAndReportErrorForInvalidInitializer() {
            if (propertyWithInvalidInitializer && !(useDefineForClassFields && ts.getEmitScriptTarget(compilerOptions) >= ts.ScriptTarget.ES2022)) {
                // We have a match, but the reference occurred within a property initializer and the identifier also binds
                // to a local variable in the constructor where the code will be emitted. Note that this is actually allowed
                // with ESNext+useDefineForClassFields because the scope semantics are different.
                error(errorLocation,
                    errorLocation && propertyWithInvalidInitializer.type && ts.textRangeContainsPositionInclusive(propertyWithInvalidInitializer.type, errorLocation.pos)
                        ? ts.Diagnostics.Type_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor
                        : ts.Diagnostics.Initializer_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor,
                    ts.declarationNameToString(propertyWithInvalidInitializer.name), diagnosticName(nameArg!));
                return true;
            }
            return false;
        }

        if (!result) {
            if (nameNotFoundMessage) {
                addLazyDiagnostic(() => {
                    if (!errorLocation ||
                        !checkAndReportErrorForMissingPrefix(errorLocation, name, nameArg!) && // TODO: GH#18217
                        !checkAndReportErrorForInvalidInitializer() &&
                        !checkAndReportErrorForExtendingInterface(errorLocation) &&
                        !checkAndReportErrorForUsingTypeAsNamespace(errorLocation, name, meaning) &&
                        !checkAndReportErrorForExportingPrimitiveType(errorLocation, name) &&
                        !checkAndReportErrorForUsingNamespaceAsTypeOrValue(errorLocation, name, meaning) &&
                        !checkAndReportErrorForUsingTypeAsValue(errorLocation, name, meaning) &&
                        !checkAndReportErrorForUsingValueAsType(errorLocation, name, meaning)) {
                        let suggestion: ts.Symbol | undefined;
                        let suggestedLib: string | undefined;
                        // Report missing lib first
                        if (nameArg) {
                            suggestedLib = getSuggestedLibForNonExistentName(nameArg);
                            if (suggestedLib) {
                                error(errorLocation, nameNotFoundMessage, diagnosticName(nameArg), suggestedLib);
                            }
                        }
                        // then spelling suggestions
                        if (!suggestedLib && getSpellingSuggestions && suggestionCount < maximumSuggestionCount) {
                            suggestion = getSuggestedSymbolForNonexistentSymbol(originalLocation, name, meaning);
                            const isGlobalScopeAugmentationDeclaration = suggestion?.valueDeclaration && ts.isAmbientModule(suggestion.valueDeclaration) && ts.isGlobalScopeAugmentation(suggestion.valueDeclaration);
                            if (isGlobalScopeAugmentationDeclaration) {
                                suggestion = undefined;
                            }
                            if (suggestion) {
                                const suggestionName = symbolToString(suggestion);
                                const isUncheckedJS = isUncheckedJSSuggestion(originalLocation, suggestion, /*excludeClasses*/ false);
                                const message = meaning === ts.SymbolFlags.Namespace || nameArg && typeof nameArg !== "string" && ts.nodeIsSynthesized(nameArg) ? ts.Diagnostics.Cannot_find_namespace_0_Did_you_mean_1
                                    : isUncheckedJS ? ts.Diagnostics.Could_not_find_name_0_Did_you_mean_1
                                    : ts.Diagnostics.Cannot_find_name_0_Did_you_mean_1;
                                const diagnostic = createError(errorLocation, message, diagnosticName(nameArg!), suggestionName);
                                addErrorOrSuggestion(!isUncheckedJS, diagnostic);
                                if (suggestion.valueDeclaration) {
                                    ts.addRelatedInfo(
                                        diagnostic,
                                        ts.createDiagnosticForNode(suggestion.valueDeclaration, ts.Diagnostics._0_is_declared_here, suggestionName)
                                    );
                                }
                            }
                        }
                        // And then fall back to unspecified "not found"
                        if (!suggestion && !suggestedLib && nameArg) {
                            error(errorLocation, nameNotFoundMessage, diagnosticName(nameArg));
                        }
                        suggestionCount++;
                    }
                });
            }
            return undefined;
        }
        else if (nameNotFoundMessage && checkAndReportErrorForInvalidInitializer()) {
            return undefined;
        }

        // Perform extra checks only if error reporting was requested
        if (nameNotFoundMessage) {
            addLazyDiagnostic(() => {
                // Only check for block-scoped variable if we have an error location and are looking for the
                // name with variable meaning
                //      For example,
                //          declare module foo {
                //              interface bar {}
                //          }
                //      const foo/*1*/: foo/*2*/.bar;
                // The foo at /*1*/ and /*2*/ will share same symbol with two meanings:
                // block-scoped variable and namespace module. However, only when we
                // try to resolve name in /*1*/ which is used in variable position,
                // we want to check for block-scoped
                if (errorLocation &&
                    (meaning & ts.SymbolFlags.BlockScopedVariable ||
                     ((meaning & ts.SymbolFlags.Class || meaning & ts.SymbolFlags.Enum) && (meaning & ts.SymbolFlags.Value) === ts.SymbolFlags.Value))) {
                    const exportOrLocalSymbol = getExportSymbolOfValueSymbolIfExported(result!);
                    if (exportOrLocalSymbol.flags & ts.SymbolFlags.BlockScopedVariable || exportOrLocalSymbol.flags & ts.SymbolFlags.Class || exportOrLocalSymbol.flags & ts.SymbolFlags.Enum) {
                        checkResolvedBlockScopedVariable(exportOrLocalSymbol, errorLocation);
                    }
                }

                // If we're in an external module, we can't reference value symbols created from UMD export declarations
                if (result && isInExternalModule && (meaning & ts.SymbolFlags.Value) === ts.SymbolFlags.Value && !(originalLocation!.flags & ts.NodeFlags.JSDoc)) {
                    const merged = getMergedSymbol(result);
                    if (ts.length(merged.declarations) && ts.every(merged.declarations, d => ts.isNamespaceExportDeclaration(d) || ts.isSourceFile(d) && !!d.symbol.globalExports)) {
                        errorOrSuggestion(!compilerOptions.allowUmdGlobalAccess, errorLocation!, ts.Diagnostics._0_refers_to_a_UMD_global_but_the_current_file_is_a_module_Consider_adding_an_import_instead, ts.unescapeLeadingUnderscores(name));
                    }
                }

                // If we're in a parameter initializer or binding name, we can't reference the values of the parameter whose initializer we're within or parameters to the right
                if (result && associatedDeclarationForContainingInitializerOrBindingName && !withinDeferredContext && (meaning & ts.SymbolFlags.Value) === ts.SymbolFlags.Value) {
                    const candidate = getMergedSymbol(getLateBoundSymbol(result));
                    const root = (ts.getRootDeclaration(associatedDeclarationForContainingInitializerOrBindingName) as ts.ParameterDeclaration);
                    // A parameter initializer or binding pattern initializer within a parameter cannot refer to itself
                    if (candidate === getSymbolOfNode(associatedDeclarationForContainingInitializerOrBindingName)) {
                        error(errorLocation, ts.Diagnostics.Parameter_0_cannot_reference_itself, ts.declarationNameToString(associatedDeclarationForContainingInitializerOrBindingName.name));
                    }
                    // And it cannot refer to any declarations which come after it
                    else if (candidate.valueDeclaration && candidate.valueDeclaration.pos > associatedDeclarationForContainingInitializerOrBindingName.pos && root.parent.locals && lookup(root.parent.locals, candidate.escapedName, meaning) === candidate) {
                        error(errorLocation, ts.Diagnostics.Parameter_0_cannot_reference_identifier_1_declared_after_it, ts.declarationNameToString(associatedDeclarationForContainingInitializerOrBindingName.name), ts.declarationNameToString(errorLocation as ts.Identifier));
                    }
                }
                if (result && errorLocation && meaning & ts.SymbolFlags.Value && result.flags & ts.SymbolFlags.Alias && !(result.flags & ts.SymbolFlags.Value) && !ts.isValidTypeOnlyAliasUseSite(errorLocation)) {
                    const typeOnlyDeclaration = getTypeOnlyAliasDeclaration(result, ts.SymbolFlags.Value);
                    if (typeOnlyDeclaration) {
                        const message = typeOnlyDeclaration.kind === ts.SyntaxKind.ExportSpecifier
                            ? ts.Diagnostics._0_cannot_be_used_as_a_value_because_it_was_exported_using_export_type
                            : ts.Diagnostics._0_cannot_be_used_as_a_value_because_it_was_imported_using_import_type;
                        const unescapedName = ts.unescapeLeadingUnderscores(name);
                        addTypeOnlyDeclarationRelatedInfo(
                            error(errorLocation, message, unescapedName),
                            typeOnlyDeclaration,
                            unescapedName);
                    }
                }
            });
        }
        return result;
    }

    function addTypeOnlyDeclarationRelatedInfo(diagnostic: ts.Diagnostic, typeOnlyDeclaration: ts.TypeOnlyCompatibleAliasDeclaration | undefined, unescapedName: string) {
        if (!typeOnlyDeclaration) return diagnostic;
        return ts.addRelatedInfo(
            diagnostic,
            ts.createDiagnosticForNode(
                typeOnlyDeclaration,
                typeOnlyDeclaration.kind === ts.SyntaxKind.ExportSpecifier ? ts.Diagnostics._0_was_exported_here : ts.Diagnostics._0_was_imported_here,
                unescapedName));
    }

    function getIsDeferredContext(location: ts.Node, lastLocation: ts.Node | undefined): boolean {
        if (location.kind !== ts.SyntaxKind.ArrowFunction && location.kind !== ts.SyntaxKind.FunctionExpression) {
            // initializers in instance property declaration of class like entities are executed in constructor and thus deferred
            return ts.isTypeQueryNode(location) || ((
                ts.isFunctionLikeDeclaration(location) ||
                (location.kind === ts.SyntaxKind.PropertyDeclaration && !ts.isStatic(location))
            ) && (!lastLocation || lastLocation !== (location as ts.SignatureDeclaration | ts.PropertyDeclaration).name)); // A name is evaluated within the enclosing scope - so it shouldn't count as deferred
        }
        if (lastLocation && lastLocation === (location as ts.FunctionExpression | ts.ArrowFunction).name) {
            return false;
        }
        // generator functions and async functions are not inlined in control flow when immediately invoked
        if ((location as ts.FunctionExpression | ts.ArrowFunction).asteriskToken || ts.hasSyntacticModifier(location, ts.ModifierFlags.Async)) {
            return true;
        }
        return !ts.getImmediatelyInvokedFunctionExpression(location);
    }

    function isSelfReferenceLocation(node: ts.Node): boolean {
        switch (node.kind) {
            case ts.SyntaxKind.FunctionDeclaration:
            case ts.SyntaxKind.ClassDeclaration:
            case ts.SyntaxKind.InterfaceDeclaration:
            case ts.SyntaxKind.EnumDeclaration:
            case ts.SyntaxKind.TypeAliasDeclaration:
            case ts.SyntaxKind.ModuleDeclaration: // For `namespace N { N; }`
                return true;
            default:
                return false;
        }
    }

    function diagnosticName(nameArg: ts.__String | ts.Identifier | ts.PrivateIdentifier) {
        return ts.isString(nameArg) ? ts.unescapeLeadingUnderscores(nameArg as ts.__String) : ts.declarationNameToString(nameArg as ts.Identifier);
    }

    function isTypeParameterSymbolDeclaredInContainer(symbol: ts.Symbol, container: ts.Node) {
        if (symbol.declarations) {
            for (const decl of symbol.declarations) {
                if (decl.kind === ts.SyntaxKind.TypeParameter) {
                    const parent = ts.isJSDocTemplateTag(decl.parent) ? ts.getJSDocHost(decl.parent) : decl.parent;
                    if (parent === container) {
                        return !(ts.isJSDocTemplateTag(decl.parent) && ts.find((decl.parent.parent as ts.JSDoc).tags, ts.isJSDocTypeAlias));
                    }
                }
            }
        }

        return false;
    }

    function checkAndReportErrorForMissingPrefix(errorLocation: ts.Node, name: ts.__String, nameArg: ts.__String | ts.Identifier): boolean {
        if (!ts.isIdentifier(errorLocation) || errorLocation.escapedText !== name || isTypeReferenceIdentifier(errorLocation) || isInTypeQuery(errorLocation)) {
            return false;
        }

        const container = ts.getThisContainer(errorLocation, /*includeArrowFunctions*/ false);
        let location = container;
        while (location) {
            if (ts.isClassLike(location.parent)) {
                const classSymbol = getSymbolOfNode(location.parent);
                if (!classSymbol) {
                    break;
                }

                // Check to see if a static member exists.
                const constructorType = getTypeOfSymbol(classSymbol);
                if (getPropertyOfType(constructorType, name)) {
                    error(errorLocation, ts.Diagnostics.Cannot_find_name_0_Did_you_mean_the_static_member_1_0, diagnosticName(nameArg), symbolToString(classSymbol));
                    return true;
                }

                // No static member is present.
                // Check if we're in an instance method and look for a relevant instance member.
                if (location === container && !ts.isStatic(location)) {
                    const instanceType = (getDeclaredTypeOfSymbol(classSymbol) as ts.InterfaceType).thisType!; // TODO: GH#18217
                    if (getPropertyOfType(instanceType, name)) {
                        error(errorLocation, ts.Diagnostics.Cannot_find_name_0_Did_you_mean_the_instance_member_this_0, diagnosticName(nameArg));
                        return true;
                    }
                }
            }

            location = location.parent;
        }
        return false;
    }


    function checkAndReportErrorForExtendingInterface(errorLocation: ts.Node): boolean {
        const expression = getEntityNameForExtendingInterface(errorLocation);
        if (expression && resolveEntityName(expression, ts.SymbolFlags.Interface, /*ignoreErrors*/ true)) {
            error(errorLocation, ts.Diagnostics.Cannot_extend_an_interface_0_Did_you_mean_implements, ts.getTextOfNode(expression));
            return true;
        }
        return false;
    }
    /**
     * Climbs up parents to an ExpressionWithTypeArguments, and returns its expression,
     * but returns undefined if that expression is not an EntityNameExpression.
     */
    function getEntityNameForExtendingInterface(node: ts.Node): ts.EntityNameExpression | undefined {
        switch (node.kind) {
            case ts.SyntaxKind.Identifier:
            case ts.SyntaxKind.PropertyAccessExpression:
                return node.parent ? getEntityNameForExtendingInterface(node.parent) : undefined;
            case ts.SyntaxKind.ExpressionWithTypeArguments:
                if (ts.isEntityNameExpression((node as ts.ExpressionWithTypeArguments).expression)) {
                    return (node as ts.ExpressionWithTypeArguments).expression as ts.EntityNameExpression;
                }
                // falls through
            default:
                return undefined;
        }
    }

    function checkAndReportErrorForUsingTypeAsNamespace(errorLocation: ts.Node, name: ts.__String, meaning: ts.SymbolFlags): boolean {
        const namespaceMeaning = ts.SymbolFlags.Namespace | (ts.isInJSFile(errorLocation) ? ts.SymbolFlags.Value : 0);
        if (meaning === namespaceMeaning) {
            const symbol = resolveSymbol(resolveName(errorLocation, name, ts.SymbolFlags.Type & ~namespaceMeaning, /*nameNotFoundMessage*/undefined, /*nameArg*/ undefined, /*isUse*/ false));
            const parent = errorLocation.parent;
            if (symbol) {
                if (ts.isQualifiedName(parent)) {
                    ts.Debug.assert(parent.left === errorLocation, "Should only be resolving left side of qualified name as a namespace");
                    const propName = parent.right.escapedText;
                    const propType = getPropertyOfType(getDeclaredTypeOfSymbol(symbol), propName);
                    if (propType) {
                        error(
                            parent,
                            ts.Diagnostics.Cannot_access_0_1_because_0_is_a_type_but_not_a_namespace_Did_you_mean_to_retrieve_the_type_of_the_property_1_in_0_with_0_1,
                            ts.unescapeLeadingUnderscores(name),
                            ts.unescapeLeadingUnderscores(propName),
                        );
                        return true;
                    }
                }
                error(errorLocation, ts.Diagnostics._0_only_refers_to_a_type_but_is_being_used_as_a_namespace_here, ts.unescapeLeadingUnderscores(name));
                return true;
            }
        }

        return false;
    }

    function checkAndReportErrorForUsingValueAsType(errorLocation: ts.Node, name: ts.__String, meaning: ts.SymbolFlags): boolean {
        if (meaning & (ts.SymbolFlags.Type & ~ts.SymbolFlags.Namespace)) {
            const symbol = resolveSymbol(resolveName(errorLocation, name, ~ts.SymbolFlags.Type & ts.SymbolFlags.Value, /*nameNotFoundMessage*/undefined, /*nameArg*/ undefined, /*isUse*/ false));
            if (symbol && !(symbol.flags & ts.SymbolFlags.Namespace)) {
                error(errorLocation, ts.Diagnostics._0_refers_to_a_value_but_is_being_used_as_a_type_here_Did_you_mean_typeof_0, ts.unescapeLeadingUnderscores(name));
                return true;
            }
        }
        return false;
    }

    function isPrimitiveTypeName(name: ts.__String) {
        return name === "any" || name === "string" || name === "number" || name === "boolean" || name === "never" || name === "unknown";
    }

    function checkAndReportErrorForExportingPrimitiveType(errorLocation: ts.Node, name: ts.__String): boolean {
        if (isPrimitiveTypeName(name) && errorLocation.parent.kind === ts.SyntaxKind.ExportSpecifier) {
            error(errorLocation, ts.Diagnostics.Cannot_export_0_Only_local_declarations_can_be_exported_from_a_module, name as string);
            return true;
        }
        return false;
    }

    function checkAndReportErrorForUsingTypeAsValue(errorLocation: ts.Node, name: ts.__String, meaning: ts.SymbolFlags): boolean {
        if (meaning & ts.SymbolFlags.Value) {
            if (isPrimitiveTypeName(name)) {
                if (isExtendedByInterface(errorLocation)) {
                    error(errorLocation, ts.Diagnostics.An_interface_cannot_extend_a_primitive_type_like_0_an_interface_can_only_extend_named_types_and_classes, ts.unescapeLeadingUnderscores(name));
                }
                else {
                    error(errorLocation, ts.Diagnostics._0_only_refers_to_a_type_but_is_being_used_as_a_value_here, ts.unescapeLeadingUnderscores(name));
                }
                return true;
            }
            const symbol = resolveSymbol(resolveName(errorLocation, name, ts.SymbolFlags.Type & ~ts.SymbolFlags.Value, /*nameNotFoundMessage*/undefined, /*nameArg*/ undefined, /*isUse*/ false));
            const allFlags = symbol && getAllSymbolFlags(symbol);
            if (symbol && allFlags !== undefined && !(allFlags & ts.SymbolFlags.Value)) {
                const rawName = ts.unescapeLeadingUnderscores(name);
                if (isES2015OrLaterConstructorName(name)) {
                    error(errorLocation, ts.Diagnostics._0_only_refers_to_a_type_but_is_being_used_as_a_value_here_Do_you_need_to_change_your_target_library_Try_changing_the_lib_compiler_option_to_es2015_or_later, rawName);
                }
                else if (maybeMappedType(errorLocation, symbol)) {
                    error(errorLocation, ts.Diagnostics._0_only_refers_to_a_type_but_is_being_used_as_a_value_here_Did_you_mean_to_use_1_in_0, rawName, rawName === "K" ? "P" : "K");
                }
                else {
                    error(errorLocation, ts.Diagnostics._0_only_refers_to_a_type_but_is_being_used_as_a_value_here, rawName);
                }
                return true;
            }
        }
        return false;
    }

    function isExtendedByInterface(node: ts.Node): boolean {
        const grandparent = node.parent.parent;
        const parentOfGrandparent = grandparent.parent;
        if(grandparent && parentOfGrandparent){
            const isExtending = ts.isHeritageClause(grandparent) && grandparent.token === ts.SyntaxKind.ExtendsKeyword;
            const isInterface = ts.isInterfaceDeclaration(parentOfGrandparent);
            return isExtending && isInterface;
        }
        return false;
    }

    function maybeMappedType(node: ts.Node, symbol: ts.Symbol) {
        const container = ts.findAncestor(node.parent, n =>
            ts.isComputedPropertyName(n) || ts.isPropertySignature(n) ? false : ts.isTypeLiteralNode(n) || "quit") as ts.TypeLiteralNode | undefined;
        if (container && container.members.length === 1) {
            const type = getDeclaredTypeOfSymbol(symbol);
            return !!(type.flags & ts.TypeFlags.Union) && allTypesAssignableToKind(type, ts.TypeFlags.StringOrNumberLiteral, /*strict*/ true);
        }
        return false;
    }

    function isES2015OrLaterConstructorName(n: ts.__String) {
        switch (n) {
            case "Promise":
            case "Symbol":
            case "Map":
            case "WeakMap":
            case "Set":
            case "WeakSet":
                return true;
        }
        return false;
    }

    function checkAndReportErrorForUsingNamespaceAsTypeOrValue(errorLocation: ts.Node, name: ts.__String, meaning: ts.SymbolFlags): boolean {
        if (meaning & (ts.SymbolFlags.Value & ~ts.SymbolFlags.Type)) {
            const symbol = resolveSymbol(resolveName(errorLocation, name, ts.SymbolFlags.NamespaceModule, /*nameNotFoundMessage*/undefined, /*nameArg*/ undefined, /*isUse*/ false));
            if (symbol) {
                error(
                    errorLocation,
                    ts.Diagnostics.Cannot_use_namespace_0_as_a_value,
                    ts.unescapeLeadingUnderscores(name));
                return true;
            }
        }
        else if (meaning & (ts.SymbolFlags.Type & ~ts.SymbolFlags.Value)) {
            const symbol = resolveSymbol(resolveName(errorLocation, name, ts.SymbolFlags.Module, /*nameNotFoundMessage*/undefined, /*nameArg*/ undefined, /*isUse*/ false));
            if (symbol) {
                error(errorLocation, ts.Diagnostics.Cannot_use_namespace_0_as_a_type, ts.unescapeLeadingUnderscores(name));
                return true;
            }
        }
        return false;
    }

    function checkResolvedBlockScopedVariable(result: ts.Symbol, errorLocation: ts.Node): void {
        ts.Debug.assert(!!(result.flags & ts.SymbolFlags.BlockScopedVariable || result.flags & ts.SymbolFlags.Class || result.flags & ts.SymbolFlags.Enum));
        if (result.flags & (ts.SymbolFlags.Function | ts.SymbolFlags.FunctionScopedVariable | ts.SymbolFlags.Assignment) && result.flags & ts.SymbolFlags.Class) {
            // constructor functions aren't block scoped
            return;
        }
        // Block-scoped variables cannot be used before their definition
        const declaration = result.declarations?.find(
            d => ts.isBlockOrCatchScoped(d) || ts.isClassLike(d) || (d.kind === ts.SyntaxKind.EnumDeclaration));

        if (declaration === undefined) return ts.Debug.fail("checkResolvedBlockScopedVariable could not find block-scoped declaration");

        if (!(declaration.flags & ts.NodeFlags.Ambient) && !isBlockScopedNameDeclaredBeforeUse(declaration, errorLocation)) {
            let diagnosticMessage;
            const declarationName = ts.declarationNameToString(ts.getNameOfDeclaration(declaration));
            if (result.flags & ts.SymbolFlags.BlockScopedVariable) {
                diagnosticMessage = error(errorLocation, ts.Diagnostics.Block_scoped_variable_0_used_before_its_declaration, declarationName);
            }
            else if (result.flags & ts.SymbolFlags.Class) {
                diagnosticMessage = error(errorLocation, ts.Diagnostics.Class_0_used_before_its_declaration, declarationName);
            }
            else if (result.flags & ts.SymbolFlags.RegularEnum) {
                diagnosticMessage = error(errorLocation, ts.Diagnostics.Enum_0_used_before_its_declaration, declarationName);
            }
            else {
                ts.Debug.assert(!!(result.flags & ts.SymbolFlags.ConstEnum));
                if (ts.shouldPreserveConstEnums(compilerOptions)) {
                    diagnosticMessage = error(errorLocation, ts.Diagnostics.Enum_0_used_before_its_declaration, declarationName);
                }
            }

            if (diagnosticMessage) {
                ts.addRelatedInfo(diagnosticMessage,
                    ts.createDiagnosticForNode(declaration, ts.Diagnostics._0_is_declared_here, declarationName)
                );
            }
        }
    }

    /* Starting from 'initial' node walk up the parent chain until 'stopAt' node is reached.
     * If at any point current node is equal to 'parent' node - return true.
     * If current node is an IIFE, continue walking up.
     * Return false if 'stopAt' node is reached or isFunctionLike(current) === true.
     */
    function isSameScopeDescendentOf(initial: ts.Node, parent: ts.Node | undefined, stopAt: ts.Node): boolean {
        return !!parent && !!ts.findAncestor(initial, n => n === parent
            || (n === stopAt || ts.isFunctionLike(n) && (!ts.getImmediatelyInvokedFunctionExpression(n) || ts.isAsyncFunction(n)) ? "quit" : false));
    }

    function getAnyImportSyntax(node: ts.Node): ts.AnyImportSyntax | undefined {
        switch (node.kind) {
            case ts.SyntaxKind.ImportEqualsDeclaration:
                return node as ts.ImportEqualsDeclaration;
            case ts.SyntaxKind.ImportClause:
                return (node as ts.ImportClause).parent;
            case ts.SyntaxKind.NamespaceImport:
                return (node as ts.NamespaceImport).parent.parent;
            case ts.SyntaxKind.ImportSpecifier:
                return (node as ts.ImportSpecifier).parent.parent.parent;
            default:
                return undefined;
        }
    }

    function getDeclarationOfAliasSymbol(symbol: ts.Symbol): ts.Declaration | undefined {
        return symbol.declarations && ts.findLast<ts.Declaration>(symbol.declarations, isAliasSymbolDeclaration);
    }

    /**
     * An alias symbol is created by one of the following declarations:
     * import <symbol> = ...
     * import <symbol> from ...
     * import * as <symbol> from ...
     * import { x as <symbol> } from ...
     * export { x as <symbol> } from ...
     * export * as ns <symbol> from ...
     * export = <EntityNameExpression>
     * export default <EntityNameExpression>
     * module.exports = <EntityNameExpression>
     * {<Identifier>}
     * {name: <EntityNameExpression>}
     * const { x } = require ...
     */
    function isAliasSymbolDeclaration(node: ts.Node): boolean {
        return node.kind === ts.SyntaxKind.ImportEqualsDeclaration
            || node.kind === ts.SyntaxKind.NamespaceExportDeclaration
            || node.kind === ts.SyntaxKind.ImportClause && !!(node as ts.ImportClause).name
            || node.kind === ts.SyntaxKind.NamespaceImport
            || node.kind === ts.SyntaxKind.NamespaceExport
            || node.kind === ts.SyntaxKind.ImportSpecifier
            || node.kind === ts.SyntaxKind.ExportSpecifier
            || node.kind === ts.SyntaxKind.ExportAssignment && ts.exportAssignmentIsAlias(node as ts.ExportAssignment)
            || ts.isBinaryExpression(node) && ts.getAssignmentDeclarationKind(node) === ts.AssignmentDeclarationKind.ModuleExports && ts.exportAssignmentIsAlias(node)
            || ts.isAccessExpression(node)
                && ts.isBinaryExpression(node.parent)
                && node.parent.left === node
                && node.parent.operatorToken.kind === ts.SyntaxKind.EqualsToken
                && isAliasableOrJsExpression(node.parent.right)
            || node.kind === ts.SyntaxKind.ShorthandPropertyAssignment
            || node.kind === ts.SyntaxKind.PropertyAssignment && isAliasableOrJsExpression((node as ts.PropertyAssignment).initializer)
            || node.kind === ts.SyntaxKind.VariableDeclaration && ts.isVariableDeclarationInitializedToBareOrAccessedRequire(node)
            || node.kind === ts.SyntaxKind.BindingElement && ts.isVariableDeclarationInitializedToBareOrAccessedRequire(node.parent.parent);
    }

    function isAliasableOrJsExpression(e: ts.Expression) {
        return ts.isAliasableExpression(e) || ts.isFunctionExpression(e) && isJSConstructor(e);
    }

    function getTargetOfImportEqualsDeclaration(node: ts.ImportEqualsDeclaration | ts.VariableDeclaration, dontResolveAlias: boolean): ts.Symbol | undefined {
        const commonJSPropertyAccess = getCommonJSPropertyAccess(node);
        if (commonJSPropertyAccess) {
            const name = (ts.getLeftmostAccessExpression(commonJSPropertyAccess.expression) as ts.CallExpression).arguments[0] as ts.StringLiteral;
            return ts.isIdentifier(commonJSPropertyAccess.name)
                ? resolveSymbol(getPropertyOfType(resolveExternalModuleTypeByLiteral(name), commonJSPropertyAccess.name.escapedText))
                : undefined;
        }
        if (ts.isVariableDeclaration(node) || node.moduleReference.kind === ts.SyntaxKind.ExternalModuleReference) {
            const immediate = resolveExternalModuleName(
                node,
                ts.getExternalModuleRequireArgument(node) || ts.getExternalModuleImportEqualsDeclarationExpression(node));
            const resolved = resolveExternalModuleSymbol(immediate);
            markSymbolOfAliasDeclarationIfTypeOnly(node, immediate, resolved, /*overwriteEmpty*/ false);
            return resolved;
        }
        const resolved = getSymbolOfPartOfRightHandSideOfImportEquals(node.moduleReference, dontResolveAlias);
        checkAndReportErrorForResolvingImportAliasToTypeOnlySymbol(node, resolved);
        return resolved;
    }

    function checkAndReportErrorForResolvingImportAliasToTypeOnlySymbol(node: ts.ImportEqualsDeclaration, resolved: ts.Symbol | undefined) {
        if (markSymbolOfAliasDeclarationIfTypeOnly(node, /*immediateTarget*/ undefined, resolved, /*overwriteEmpty*/ false) && !node.isTypeOnly) {
            const typeOnlyDeclaration = getTypeOnlyAliasDeclaration(getSymbolOfNode(node))!;
            const isExport = typeOnlyDeclaration.kind === ts.SyntaxKind.ExportSpecifier;
            const message = isExport
                ? ts.Diagnostics.An_import_alias_cannot_reference_a_declaration_that_was_exported_using_export_type
                : ts.Diagnostics.An_import_alias_cannot_reference_a_declaration_that_was_imported_using_import_type;
            const relatedMessage = isExport
                ? ts.Diagnostics._0_was_exported_here
                : ts.Diagnostics._0_was_imported_here;

            const name = ts.unescapeLeadingUnderscores(typeOnlyDeclaration.name.escapedText);
            ts.addRelatedInfo(error(node.moduleReference, message), ts.createDiagnosticForNode(typeOnlyDeclaration, relatedMessage, name));
        }
    }

    function resolveExportByName(moduleSymbol: ts.Symbol, name: ts.__String, sourceNode: ts.TypeOnlyCompatibleAliasDeclaration | undefined, dontResolveAlias: boolean) {
        const exportValue = moduleSymbol.exports!.get(ts.InternalSymbolName.ExportEquals);
        const exportSymbol = exportValue ? getPropertyOfType(getTypeOfSymbol(exportValue), name) : moduleSymbol.exports!.get(name);
        const resolved = resolveSymbol(exportSymbol, dontResolveAlias);
        markSymbolOfAliasDeclarationIfTypeOnly(sourceNode, exportSymbol, resolved, /*overwriteEmpty*/ false);
        return resolved;
    }

    function isSyntacticDefault(node: ts.Node) {
        return ((ts.isExportAssignment(node) && !node.isExportEquals) || ts.hasSyntacticModifier(node, ts.ModifierFlags.Default) || ts.isExportSpecifier(node));
    }

    function getUsageModeForExpression(usage: ts.Expression) {
        return ts.isStringLiteralLike(usage) ? ts.getModeForUsageLocation(ts.getSourceFileOfNode(usage), usage) : undefined;
    }

    function isESMFormatImportImportingCommonjsFormatFile(usageMode: ts.SourceFile["impliedNodeFormat"], targetMode: ts.SourceFile["impliedNodeFormat"]) {
        return usageMode === ts.ModuleKind.ESNext && targetMode === ts.ModuleKind.CommonJS;
    }

    function isOnlyImportedAsDefault(usage: ts.Expression) {
        const usageMode = getUsageModeForExpression(usage);
        return usageMode === ts.ModuleKind.ESNext && ts.endsWith((usage as ts.StringLiteralLike).text, ts.Extension.Json);
    }

    function canHaveSyntheticDefault(file: ts.SourceFile | undefined, moduleSymbol: ts.Symbol, dontResolveAlias: boolean, usage: ts.Expression) {
        const usageMode = file && getUsageModeForExpression(usage);
        if (file && usageMode !== undefined) {
            const result = isESMFormatImportImportingCommonjsFormatFile(usageMode, file.impliedNodeFormat);
            if (usageMode === ts.ModuleKind.ESNext || result) {
                return result;
            }
            // fallthrough on cjs usages so we imply defaults for interop'd imports, too
        }
        if (!allowSyntheticDefaultImports) {
            return false;
        }
        // Declaration files (and ambient modules)
        if (!file || file.isDeclarationFile) {
            // Definitely cannot have a synthetic default if they have a syntactic default member specified
            const defaultExportSymbol = resolveExportByName(moduleSymbol, ts.InternalSymbolName.Default, /*sourceNode*/ undefined, /*dontResolveAlias*/ true); // Dont resolve alias because we want the immediately exported symbol's declaration
            if (defaultExportSymbol && ts.some(defaultExportSymbol.declarations, isSyntacticDefault)) {
                return false;
            }
            // It _might_ still be incorrect to assume there is no __esModule marker on the import at runtime, even if there is no `default` member
            // So we check a bit more,
            if (resolveExportByName(moduleSymbol, ts.escapeLeadingUnderscores("__esModule"), /*sourceNode*/ undefined, dontResolveAlias)) {
                // If there is an `__esModule` specified in the declaration (meaning someone explicitly added it or wrote it in their code),
                // it definitely is a module and does not have a synthetic default
                return false;
            }
            // There are _many_ declaration files not written with esmodules in mind that still get compiled into a format with __esModule set
            // Meaning there may be no default at runtime - however to be on the permissive side, we allow access to a synthetic default member
            // as there is no marker to indicate if the accompanying JS has `__esModule` or not, or is even native esm
            return true;
        }
        // TypeScript files never have a synthetic default (as they are always emitted with an __esModule marker) _unless_ they contain an export= statement
        if (!ts.isSourceFileJS(file)) {
            return hasExportAssignmentSymbol(moduleSymbol);
        }
        // JS files have a synthetic default if they do not contain ES2015+ module syntax (export = is not valid in js) _and_ do not have an __esModule marker
        return typeof file.externalModuleIndicator !== "object" && !resolveExportByName(moduleSymbol, ts.escapeLeadingUnderscores("__esModule"), /*sourceNode*/ undefined, dontResolveAlias);
    }

    function getTargetOfImportClause(node: ts.ImportClause, dontResolveAlias: boolean): ts.Symbol | undefined {
        const moduleSymbol = resolveExternalModuleName(node, node.parent.moduleSpecifier);
        if (moduleSymbol) {
            return getTargetofModuleDefault(moduleSymbol, node, dontResolveAlias);
        }
    }

    function getTargetofModuleDefault(moduleSymbol: ts.Symbol, node: ts.ImportClause | ts.ImportOrExportSpecifier, dontResolveAlias: boolean) {
        let exportDefaultSymbol: ts.Symbol | undefined;
        if (ts.isShorthandAmbientModuleSymbol(moduleSymbol)) {
            exportDefaultSymbol = moduleSymbol;
        }
        else {
            exportDefaultSymbol = resolveExportByName(moduleSymbol, ts.InternalSymbolName.Default, node, dontResolveAlias);
        }

        const file = moduleSymbol.declarations?.find(ts.isSourceFile);
        const specifier = getModuleSpecifierForImportOrExport(node);
        if (!specifier) {
            return exportDefaultSymbol;
        }
        const hasDefaultOnly = isOnlyImportedAsDefault(specifier);
        const hasSyntheticDefault = canHaveSyntheticDefault(file, moduleSymbol, dontResolveAlias, specifier);
        if (!exportDefaultSymbol && !hasSyntheticDefault && !hasDefaultOnly) {
            if (hasExportAssignmentSymbol(moduleSymbol)) {
                const compilerOptionName = moduleKind >= ts.ModuleKind.ES2015 ? "allowSyntheticDefaultImports" : "esModuleInterop";
                const exportEqualsSymbol = moduleSymbol.exports!.get(ts.InternalSymbolName.ExportEquals);
                const exportAssignment = exportEqualsSymbol!.valueDeclaration;
                const err = error(node.name, ts.Diagnostics.Module_0_can_only_be_default_imported_using_the_1_flag, symbolToString(moduleSymbol), compilerOptionName);

                if (exportAssignment) {
                    ts.addRelatedInfo(err, ts.createDiagnosticForNode(
                        exportAssignment,
                        ts.Diagnostics.This_module_is_declared_with_export_and_can_only_be_used_with_a_default_import_when_using_the_0_flag,
                        compilerOptionName
                    ));
                }
            }
            else if (ts.isImportClause(node)) {
                reportNonDefaultExport(moduleSymbol, node);
            }
            else {
                errorNoModuleMemberSymbol(moduleSymbol, moduleSymbol, node, ts.isImportOrExportSpecifier(node) && node.propertyName || node.name);
            }
        }
        else if (hasSyntheticDefault || hasDefaultOnly) {
            // per emit behavior, a synthetic default overrides a "real" .default member if `__esModule` is not present
            const resolved = resolveExternalModuleSymbol(moduleSymbol, dontResolveAlias) || resolveSymbol(moduleSymbol, dontResolveAlias);
            markSymbolOfAliasDeclarationIfTypeOnly(node, moduleSymbol, resolved, /*overwriteTypeOnly*/ false);
            return resolved;
        }
        markSymbolOfAliasDeclarationIfTypeOnly(node, exportDefaultSymbol, /*finalTarget*/ undefined, /*overwriteTypeOnly*/ false);
        return exportDefaultSymbol;
    }

    function getModuleSpecifierForImportOrExport(node: ts.ImportEqualsDeclaration | ts.ImportClause | ts.NamespaceImport | ts.ImportOrExportSpecifier): ts.Expression | undefined {
        switch (node.kind) {
            case ts.SyntaxKind.ImportClause: return node.parent.moduleSpecifier;
            case ts.SyntaxKind.ImportEqualsDeclaration: return ts.isExternalModuleReference(node.moduleReference) ? node.moduleReference.expression : undefined;
            case ts.SyntaxKind.NamespaceImport: return node.parent.parent.moduleSpecifier;
            case ts.SyntaxKind.ImportSpecifier: return node.parent.parent.parent.moduleSpecifier;
            case ts.SyntaxKind.ExportSpecifier: return node.parent.parent.moduleSpecifier;
            default: return ts.Debug.assertNever(node);
        }
    }

    function reportNonDefaultExport(moduleSymbol: ts.Symbol, node: ts.ImportClause) {
        if (moduleSymbol.exports?.has(node.symbol.escapedName)) {
            error(
                node.name,
                ts.Diagnostics.Module_0_has_no_default_export_Did_you_mean_to_use_import_1_from_0_instead,
                symbolToString(moduleSymbol),
                symbolToString(node.symbol),
            );
        }
        else {
            const diagnostic = error(node.name, ts.Diagnostics.Module_0_has_no_default_export, symbolToString(moduleSymbol));
            const exportStar = moduleSymbol.exports?.get(ts.InternalSymbolName.ExportStar);
            if (exportStar) {
                const defaultExport = exportStar.declarations?.find(decl => !!(
                    ts.isExportDeclaration(decl) && decl.moduleSpecifier &&
                        resolveExternalModuleName(decl, decl.moduleSpecifier)?.exports?.has(ts.InternalSymbolName.Default)
                ));
                if (defaultExport) {
                    ts.addRelatedInfo(diagnostic, ts.createDiagnosticForNode(defaultExport, ts.Diagnostics.export_Asterisk_does_not_re_export_a_default));
                }
            }
        }
    }

    function getTargetOfNamespaceImport(node: ts.NamespaceImport, dontResolveAlias: boolean): ts.Symbol | undefined {
        const moduleSpecifier = node.parent.parent.moduleSpecifier;
        const immediate = resolveExternalModuleName(node, moduleSpecifier);
        const resolved = resolveESModuleSymbol(immediate, moduleSpecifier, dontResolveAlias, /*suppressUsageError*/ false);
        markSymbolOfAliasDeclarationIfTypeOnly(node, immediate, resolved, /*overwriteEmpty*/ false);
        return resolved;
    }

    function getTargetOfNamespaceExport(node: ts.NamespaceExport, dontResolveAlias: boolean): ts.Symbol | undefined {
        const moduleSpecifier = node.parent.moduleSpecifier;
        const immediate = moduleSpecifier && resolveExternalModuleName(node, moduleSpecifier);
        const resolved = moduleSpecifier && resolveESModuleSymbol(immediate, moduleSpecifier, dontResolveAlias, /*suppressUsageError*/ false);
        markSymbolOfAliasDeclarationIfTypeOnly(node, immediate, resolved, /*overwriteEmpty*/ false);
        return resolved;
    }

    // This function creates a synthetic symbol that combines the value side of one symbol with the
    // type/namespace side of another symbol. Consider this example:
    //
    //   declare module graphics {
    //       interface Point {
    //           x: number;
    //           y: number;
    //       }
    //   }
    //   declare var graphics: {
    //       Point: new (x: number, y: number) => graphics.Point;
    //   }
    //   declare module "graphics" {
    //       export = graphics;
    //   }
    //
    // An 'import { Point } from "graphics"' needs to create a symbol that combines the value side 'Point'
    // property with the type/namespace side interface 'Point'.
    function combineValueAndTypeSymbols(valueSymbol: ts.Symbol, typeSymbol: ts.Symbol): ts.Symbol {
        if (valueSymbol === unknownSymbol && typeSymbol === unknownSymbol) {
            return unknownSymbol;
        }
        if (valueSymbol.flags & (ts.SymbolFlags.Type | ts.SymbolFlags.Namespace)) {
            return valueSymbol;
        }
        const result = createSymbol(valueSymbol.flags | typeSymbol.flags, valueSymbol.escapedName);
        result.declarations = ts.deduplicate(ts.concatenate(valueSymbol.declarations, typeSymbol.declarations), ts.equateValues);
        result.parent = valueSymbol.parent || typeSymbol.parent;
        if (valueSymbol.valueDeclaration) result.valueDeclaration = valueSymbol.valueDeclaration;
        if (typeSymbol.members) result.members = new ts.Map(typeSymbol.members);
        if (valueSymbol.exports) result.exports = new ts.Map(valueSymbol.exports);
        return result;
    }

    function getExportOfModule(symbol: ts.Symbol, name: ts.Identifier, specifier: ts.Declaration, dontResolveAlias: boolean): ts.Symbol | undefined {
        if (symbol.flags & ts.SymbolFlags.Module) {
            const exportSymbol = getExportsOfSymbol(symbol).get(name.escapedText);
            const resolved = resolveSymbol(exportSymbol, dontResolveAlias);
            markSymbolOfAliasDeclarationIfTypeOnly(specifier, exportSymbol, resolved, /*overwriteEmpty*/ false);
            return resolved;
        }
    }

    function getPropertyOfVariable(symbol: ts.Symbol, name: ts.__String): ts.Symbol | undefined {
        if (symbol.flags & ts.SymbolFlags.Variable) {
            const typeAnnotation = (symbol.valueDeclaration as ts.VariableDeclaration).type;
            if (typeAnnotation) {
                return resolveSymbol(getPropertyOfType(getTypeFromTypeNode(typeAnnotation), name));
            }
        }
    }

    function getExternalModuleMember(node: ts.ImportDeclaration | ts.ExportDeclaration | ts.VariableDeclaration, specifier: ts.ImportOrExportSpecifier | ts.BindingElement | ts.PropertyAccessExpression, dontResolveAlias = false): ts.Symbol | undefined {
        const moduleSpecifier = ts.getExternalModuleRequireArgument(node) || (node as ts.ImportDeclaration | ts.ExportDeclaration).moduleSpecifier!;
        const moduleSymbol = resolveExternalModuleName(node, moduleSpecifier)!; // TODO: GH#18217
        const name = !ts.isPropertyAccessExpression(specifier) && specifier.propertyName || specifier.name;
        if (!ts.isIdentifier(name)) {
            return undefined;
        }
        const suppressInteropError = name.escapedText === ts.InternalSymbolName.Default && !!(compilerOptions.allowSyntheticDefaultImports || ts.getESModuleInterop(compilerOptions));
        const targetSymbol = resolveESModuleSymbol(moduleSymbol, moduleSpecifier, /*dontResolveAlias*/ false, suppressInteropError);
        if (targetSymbol) {
            if (name.escapedText) {
                if (ts.isShorthandAmbientModuleSymbol(moduleSymbol)) {
                    return moduleSymbol;
                }

                let symbolFromVariable: ts.Symbol | undefined;
                // First check if module was specified with "export=". If so, get the member from the resolved type
                if (moduleSymbol && moduleSymbol.exports && moduleSymbol.exports.get(ts.InternalSymbolName.ExportEquals)) {
                    symbolFromVariable = getPropertyOfType(getTypeOfSymbol(targetSymbol), name.escapedText, /*skipObjectFunctionPropertyAugment*/ true);
                }
                else {
                    symbolFromVariable = getPropertyOfVariable(targetSymbol, name.escapedText);
                }
                // if symbolFromVariable is export - get its final target
                symbolFromVariable = resolveSymbol(symbolFromVariable, dontResolveAlias);

                let symbolFromModule = getExportOfModule(targetSymbol, name, specifier, dontResolveAlias);
                if (symbolFromModule === undefined && name.escapedText === ts.InternalSymbolName.Default) {
                    const file = moduleSymbol.declarations?.find(ts.isSourceFile);
                    if (isOnlyImportedAsDefault(moduleSpecifier) || canHaveSyntheticDefault(file, moduleSymbol, dontResolveAlias, moduleSpecifier)) {
                        symbolFromModule = resolveExternalModuleSymbol(moduleSymbol, dontResolveAlias) || resolveSymbol(moduleSymbol, dontResolveAlias);
                    }
                }

                const symbol = symbolFromModule && symbolFromVariable && symbolFromModule !== symbolFromVariable ?
                    combineValueAndTypeSymbols(symbolFromVariable, symbolFromModule) :
                    symbolFromModule || symbolFromVariable;
                if (!symbol) {
                    errorNoModuleMemberSymbol(moduleSymbol, targetSymbol, node, name);
                }
                return symbol;
            }
        }
    }

    function errorNoModuleMemberSymbol(moduleSymbol: ts.Symbol, targetSymbol: ts.Symbol, node: ts.Node, name: ts.Identifier) {
        const moduleName = getFullyQualifiedName(moduleSymbol, node);
        const declarationName = ts.declarationNameToString(name);
        const suggestion = getSuggestedSymbolForNonexistentModule(name, targetSymbol);
        if (suggestion !== undefined) {
            const suggestionName = symbolToString(suggestion);
            const diagnostic = error(name, ts.Diagnostics._0_has_no_exported_member_named_1_Did_you_mean_2, moduleName, declarationName, suggestionName);
            if (suggestion.valueDeclaration) {
                ts.addRelatedInfo(diagnostic,
                    ts.createDiagnosticForNode(suggestion.valueDeclaration, ts.Diagnostics._0_is_declared_here, suggestionName)
                );
            }
        }
        else {
            if (moduleSymbol.exports?.has(ts.InternalSymbolName.Default)) {
                error(
                    name,
                    ts.Diagnostics.Module_0_has_no_exported_member_1_Did_you_mean_to_use_import_1_from_0_instead,
                    moduleName,
                    declarationName
                );
            }
            else {
                reportNonExportedMember(node, name, declarationName, moduleSymbol, moduleName);
            }
        }
    }

    function reportNonExportedMember(node: ts.Node, name: ts.Identifier, declarationName: string, moduleSymbol: ts.Symbol, moduleName: string): void {
        const localSymbol = moduleSymbol.valueDeclaration?.locals?.get(name.escapedText);
        const exports = moduleSymbol.exports;
        if (localSymbol) {
            const exportedEqualsSymbol = exports?.get(ts.InternalSymbolName.ExportEquals);
            if (exportedEqualsSymbol) {
                getSymbolIfSameReference(exportedEqualsSymbol, localSymbol) ? reportInvalidImportEqualsExportMember(node, name, declarationName, moduleName) :
                    error(name, ts.Diagnostics.Module_0_has_no_exported_member_1, moduleName, declarationName);
            }
            else {
                const exportedSymbol = exports ? ts.find(symbolsToArray(exports), symbol => !!getSymbolIfSameReference(symbol, localSymbol)) : undefined;
                const diagnostic = exportedSymbol ? error(name, ts.Diagnostics.Module_0_declares_1_locally_but_it_is_exported_as_2, moduleName, declarationName, symbolToString(exportedSymbol)) :
                    error(name, ts.Diagnostics.Module_0_declares_1_locally_but_it_is_not_exported, moduleName, declarationName);
                if (localSymbol.declarations) {
                    ts.addRelatedInfo(diagnostic,
                        ...ts.map(localSymbol.declarations, (decl, index) =>
                            ts.createDiagnosticForNode(decl, index === 0 ? ts.Diagnostics._0_is_declared_here : ts.Diagnostics.and_here, declarationName)));
                }
            }
        }
        else {
            error(name, ts.Diagnostics.Module_0_has_no_exported_member_1, moduleName, declarationName);
        }
    }

    function reportInvalidImportEqualsExportMember(node: ts.Node, name: ts.Identifier, declarationName: string, moduleName: string) {
        if (moduleKind >= ts.ModuleKind.ES2015) {
            const message = ts.getESModuleInterop(compilerOptions) ? ts.Diagnostics._0_can_only_be_imported_by_using_a_default_import :
                ts.Diagnostics._0_can_only_be_imported_by_turning_on_the_esModuleInterop_flag_and_using_a_default_import;
            error(name, message, declarationName);
        }
        else {
            if (ts.isInJSFile(node)) {
                const message = ts.getESModuleInterop(compilerOptions) ? ts.Diagnostics._0_can_only_be_imported_by_using_a_require_call_or_by_using_a_default_import :
                    ts.Diagnostics._0_can_only_be_imported_by_using_a_require_call_or_by_turning_on_the_esModuleInterop_flag_and_using_a_default_import;
                error(name, message, declarationName);
            }
            else {
                const message = ts.getESModuleInterop(compilerOptions) ? ts.Diagnostics._0_can_only_be_imported_by_using_import_1_require_2_or_a_default_import :
                    ts.Diagnostics._0_can_only_be_imported_by_using_import_1_require_2_or_by_turning_on_the_esModuleInterop_flag_and_using_a_default_import;
                error(name, message, declarationName, declarationName, moduleName);
            }
        }
    }

    function getTargetOfImportSpecifier(node: ts.ImportSpecifier | ts.BindingElement, dontResolveAlias: boolean): ts.Symbol | undefined {
        if (ts.isImportSpecifier(node) && ts.idText(node.propertyName || node.name) === ts.InternalSymbolName.Default) {
            const specifier = getModuleSpecifierForImportOrExport(node);
            const moduleSymbol = specifier && resolveExternalModuleName(node, specifier);
            if (moduleSymbol) {
                return getTargetofModuleDefault(moduleSymbol, node, dontResolveAlias);
            }
        }
        const root = ts.isBindingElement(node) ? ts.getRootDeclaration(node) as ts.VariableDeclaration : node.parent.parent.parent;
        const commonJSPropertyAccess = getCommonJSPropertyAccess(root);
        const resolved = getExternalModuleMember(root, commonJSPropertyAccess || node, dontResolveAlias);
        const name = node.propertyName || node.name;
        if (commonJSPropertyAccess && resolved && ts.isIdentifier(name)) {
            return resolveSymbol(getPropertyOfType(getTypeOfSymbol(resolved), name.escapedText), dontResolveAlias);
        }
        markSymbolOfAliasDeclarationIfTypeOnly(node, /*immediateTarget*/ undefined, resolved, /*overwriteEmpty*/ false);
        return resolved;
    }

    function getCommonJSPropertyAccess(node: ts.Node) {
        if (ts.isVariableDeclaration(node) && node.initializer && ts.isPropertyAccessExpression(node.initializer)) {
            return node.initializer;
        }
    }

    function getTargetOfNamespaceExportDeclaration(node: ts.NamespaceExportDeclaration, dontResolveAlias: boolean): ts.Symbol {
        const resolved = resolveExternalModuleSymbol(node.parent.symbol, dontResolveAlias);
        markSymbolOfAliasDeclarationIfTypeOnly(node, /*immediateTarget*/ undefined, resolved, /*overwriteEmpty*/ false);
        return resolved;
    }

    function getTargetOfExportSpecifier(node: ts.ExportSpecifier, meaning: ts.SymbolFlags, dontResolveAlias?: boolean) {
        if (ts.idText(node.propertyName || node.name) === ts.InternalSymbolName.Default) {
            const specifier = getModuleSpecifierForImportOrExport(node);
            const moduleSymbol = specifier && resolveExternalModuleName(node, specifier);
            if (moduleSymbol) {
                return getTargetofModuleDefault(moduleSymbol, node, !!dontResolveAlias);
            }
        }
        const resolved = node.parent.parent.moduleSpecifier ?
            getExternalModuleMember(node.parent.parent, node, dontResolveAlias) :
            resolveEntityName(node.propertyName || node.name, meaning, /*ignoreErrors*/ false, dontResolveAlias);
        markSymbolOfAliasDeclarationIfTypeOnly(node, /*immediateTarget*/ undefined, resolved, /*overwriteEmpty*/ false);
        return resolved;
    }

    function getTargetOfExportAssignment(node: ts.ExportAssignment | ts.BinaryExpression, dontResolveAlias: boolean): ts.Symbol | undefined {
        const expression = ts.isExportAssignment(node) ? node.expression : node.right;
        const resolved = getTargetOfAliasLikeExpression(expression, dontResolveAlias);
        markSymbolOfAliasDeclarationIfTypeOnly(node, /*immediateTarget*/ undefined, resolved, /*overwriteEmpty*/ false);
        return resolved;
    }

    function getTargetOfAliasLikeExpression(expression: ts.Expression, dontResolveAlias: boolean) {
        if (ts.isClassExpression(expression)) {
            return checkExpressionCached(expression).symbol;
        }
        if (!ts.isEntityName(expression) && !ts.isEntityNameExpression(expression)) {
            return undefined;
        }
        const aliasLike = resolveEntityName(expression, ts.SymbolFlags.Value | ts.SymbolFlags.Type | ts.SymbolFlags.Namespace, /*ignoreErrors*/ true, dontResolveAlias);
        if (aliasLike) {
            return aliasLike;
        }
        checkExpressionCached(expression);
        return getNodeLinks(expression).resolvedSymbol;
    }

    function getTargetOfAccessExpression(node: ts.AccessExpression, dontRecursivelyResolve: boolean): ts.Symbol | undefined {
        if (!(ts.isBinaryExpression(node.parent) && node.parent.left === node && node.parent.operatorToken.kind === ts.SyntaxKind.EqualsToken)) {
            return undefined;
        }

        return getTargetOfAliasLikeExpression(node.parent.right, dontRecursivelyResolve);
    }

    function getTargetOfAliasDeclaration(node: ts.Declaration, dontRecursivelyResolve = false): ts.Symbol | undefined {
        switch (node.kind) {
            case ts.SyntaxKind.ImportEqualsDeclaration:
            case ts.SyntaxKind.VariableDeclaration:
                return getTargetOfImportEqualsDeclaration(node as ts.ImportEqualsDeclaration | ts.VariableDeclaration, dontRecursivelyResolve);
            case ts.SyntaxKind.ImportClause:
                return getTargetOfImportClause(node as ts.ImportClause, dontRecursivelyResolve);
            case ts.SyntaxKind.NamespaceImport:
                return getTargetOfNamespaceImport(node as ts.NamespaceImport, dontRecursivelyResolve);
            case ts.SyntaxKind.NamespaceExport:
                return getTargetOfNamespaceExport(node as ts.NamespaceExport, dontRecursivelyResolve);
            case ts.SyntaxKind.ImportSpecifier:
            case ts.SyntaxKind.BindingElement:
                return getTargetOfImportSpecifier(node as ts.ImportSpecifier | ts.BindingElement, dontRecursivelyResolve);
            case ts.SyntaxKind.ExportSpecifier:
                return getTargetOfExportSpecifier(node as ts.ExportSpecifier, ts.SymbolFlags.Value | ts.SymbolFlags.Type | ts.SymbolFlags.Namespace, dontRecursivelyResolve);
            case ts.SyntaxKind.ExportAssignment:
            case ts.SyntaxKind.BinaryExpression:
                return getTargetOfExportAssignment((node as ts.ExportAssignment | ts.BinaryExpression), dontRecursivelyResolve);
            case ts.SyntaxKind.NamespaceExportDeclaration:
                return getTargetOfNamespaceExportDeclaration(node as ts.NamespaceExportDeclaration, dontRecursivelyResolve);
            case ts.SyntaxKind.ShorthandPropertyAssignment:
                return resolveEntityName((node as ts.ShorthandPropertyAssignment).name, ts.SymbolFlags.Value | ts.SymbolFlags.Type | ts.SymbolFlags.Namespace, /*ignoreErrors*/ true, dontRecursivelyResolve);
            case ts.SyntaxKind.PropertyAssignment:
                return getTargetOfAliasLikeExpression((node as ts.PropertyAssignment).initializer, dontRecursivelyResolve);
            case ts.SyntaxKind.ElementAccessExpression:
            case ts.SyntaxKind.PropertyAccessExpression:
                return getTargetOfAccessExpression(node as ts.AccessExpression, dontRecursivelyResolve);
            default:
                return ts.Debug.fail();
        }
    }

    /**
     * Indicates that a symbol is an alias that does not merge with a local declaration.
     * OR Is a JSContainer which may merge an alias with a local declaration
     */
    function isNonLocalAlias(symbol: ts.Symbol | undefined, excludes = ts.SymbolFlags.Value | ts.SymbolFlags.Type | ts.SymbolFlags.Namespace): symbol is ts.Symbol {
        if (!symbol) return false;
        return (symbol.flags & (ts.SymbolFlags.Alias | excludes)) === ts.SymbolFlags.Alias || !!(symbol.flags & ts.SymbolFlags.Alias && symbol.flags & ts.SymbolFlags.Assignment);
    }

    function resolveSymbol(symbol: ts.Symbol, dontResolveAlias?: boolean): ts.Symbol;
    function resolveSymbol(symbol: ts.Symbol | undefined, dontResolveAlias?: boolean): ts.Symbol | undefined;
    function resolveSymbol(symbol: ts.Symbol | undefined, dontResolveAlias?: boolean): ts.Symbol | undefined {
        return !dontResolveAlias && isNonLocalAlias(symbol) ? resolveAlias(symbol) : symbol;
    }

    function resolveAlias(symbol: ts.Symbol): ts.Symbol {
        ts.Debug.assert((symbol.flags & ts.SymbolFlags.Alias) !== 0, "Should only get Alias here.");
        const links = getSymbolLinks(symbol);
        if (!links.aliasTarget) {
            links.aliasTarget = resolvingSymbol;
            const node = getDeclarationOfAliasSymbol(symbol);
            if (!node) return ts.Debug.fail();
            const target = getTargetOfAliasDeclaration(node);
            if (links.aliasTarget === resolvingSymbol) {
                links.aliasTarget = target || unknownSymbol;
            }
            else {
                error(node, ts.Diagnostics.Circular_definition_of_import_alias_0, symbolToString(symbol));
            }
        }
        else if (links.aliasTarget === resolvingSymbol) {
            links.aliasTarget = unknownSymbol;
        }
        return links.aliasTarget;
    }

    function tryResolveAlias(symbol: ts.Symbol): ts.Symbol | undefined {
        const links = getSymbolLinks(symbol);
        if (links.aliasTarget !== resolvingSymbol) {
            return resolveAlias(symbol);
        }

        return undefined;
    }

    /**
     * Gets combined flags of a `symbol` and all alias targets it resolves to. `resolveAlias`
     * is typically recursive over chains of aliases, but stops mid-chain if an alias is merged
     * with another exported symbol, e.g.
     * ```ts
     * // a.ts
     * export const a = 0;
     * // b.ts
     * export { a } from "./a";
     * export type a = number;
     * // c.ts
     * import { a } from "./b";
     * ```
     * Calling `resolveAlias` on the `a` in c.ts would stop at the merged symbol exported
     * from b.ts, even though there is still more alias to resolve. Consequently, if we were
     * trying to determine if the `a` in c.ts has a value meaning, looking at the flags on
     * the local symbol and on the symbol returned by `resolveAlias` is not enough.
     * @returns SymbolFlags.All if `symbol` is an alias that ultimately resolves to `unknown`;
     * combined flags of all alias targets otherwise.
     */
    function getAllSymbolFlags(symbol: ts.Symbol): ts.SymbolFlags {
      let flags = symbol.flags;
      let seenSymbols;
      while (symbol.flags & ts.SymbolFlags.Alias) {
          const target = resolveAlias(symbol);
          if (target === unknownSymbol) {
              return ts.SymbolFlags.All;
          }

          // Optimizations - try to avoid creating or adding to
          // `seenSymbols` if possible
          if (target === symbol || seenSymbols?.has(target)) {
              break;
          }
          if (target.flags & ts.SymbolFlags.Alias) {
              if (seenSymbols) {
                  seenSymbols.add(target);
              }
              else {
                  seenSymbols = new ts.Set([symbol, target]);
              }
          }
          flags |= target.flags;
          symbol = target;
      }
      return flags;
    }

    /**
     * Marks a symbol as type-only if its declaration is syntactically type-only.
     * If it is not itself marked type-only, but resolves to a type-only alias
     * somewhere in its resolution chain, save a reference to the type-only alias declaration
     * so the alias _not_ marked type-only can be identified as _transitively_ type-only.
     *
     * This function is called on each alias declaration that could be type-only or resolve to
     * another type-only alias during `resolveAlias`, so that later, when an alias is used in a
     * JS-emitting expression, we can quickly determine if that symbol is effectively type-only
     * and issue an error if so.
     *
     * @param aliasDeclaration The alias declaration not marked as type-only
     * @param immediateTarget The symbol to which the alias declaration immediately resolves
     * @param finalTarget The symbol to which the alias declaration ultimately resolves
     * @param overwriteEmpty Checks `resolvesToSymbol` for type-only declarations even if `aliasDeclaration`
     * has already been marked as not resolving to a type-only alias. Used when recursively resolving qualified
     * names of import aliases, e.g. `import C = a.b.C`. If namespace `a` is not found to be type-only, the
     * import declaration will initially be marked as not resolving to a type-only symbol. But, namespace `b`
     * must still be checked for a type-only marker, overwriting the previous negative result if found.
     */
    function markSymbolOfAliasDeclarationIfTypeOnly(
        aliasDeclaration: ts.Declaration | undefined,
        immediateTarget: ts.Symbol | undefined,
        finalTarget: ts.Symbol | undefined,
        overwriteEmpty: boolean,
    ): boolean {
        if (!aliasDeclaration || ts.isPropertyAccessExpression(aliasDeclaration)) return false;

        // If the declaration itself is type-only, mark it and return.
        // No need to check what it resolves to.
        const sourceSymbol = getSymbolOfNode(aliasDeclaration);
        if (ts.isTypeOnlyImportOrExportDeclaration(aliasDeclaration)) {
            const links = getSymbolLinks(sourceSymbol);
            links.typeOnlyDeclaration = aliasDeclaration;
            return true;
        }

        const links = getSymbolLinks(sourceSymbol);
        return markSymbolOfAliasDeclarationIfTypeOnlyWorker(links, immediateTarget, overwriteEmpty)
            || markSymbolOfAliasDeclarationIfTypeOnlyWorker(links, finalTarget, overwriteEmpty);
    }

    function markSymbolOfAliasDeclarationIfTypeOnlyWorker(aliasDeclarationLinks: ts.SymbolLinks, target: ts.Symbol | undefined, overwriteEmpty: boolean): boolean {
        if (target && (aliasDeclarationLinks.typeOnlyDeclaration === undefined || overwriteEmpty && aliasDeclarationLinks.typeOnlyDeclaration === false)) {
            const exportSymbol = target.exports?.get(ts.InternalSymbolName.ExportEquals) ?? target;
            const typeOnly = exportSymbol.declarations && ts.find(exportSymbol.declarations, ts.isTypeOnlyImportOrExportDeclaration);
            aliasDeclarationLinks.typeOnlyDeclaration = typeOnly ?? getSymbolLinks(exportSymbol).typeOnlyDeclaration ?? false;
        }
        return !!aliasDeclarationLinks.typeOnlyDeclaration;
    }

    /** Indicates that a symbol directly or indirectly resolves to a type-only import or export. */
    function getTypeOnlyAliasDeclaration(symbol: ts.Symbol, include?: ts.SymbolFlags): ts.TypeOnlyAliasDeclaration | undefined {
        if (!(symbol.flags & ts.SymbolFlags.Alias)) {
            return undefined;
        }
        const links = getSymbolLinks(symbol);
        if (include === undefined) {
            return links.typeOnlyDeclaration || undefined;
        }
        if (links.typeOnlyDeclaration) {
            return getAllSymbolFlags(resolveAlias(links.typeOnlyDeclaration.symbol)) & include ? links.typeOnlyDeclaration : undefined;
        }
        return undefined;
    }

    function markExportAsReferenced(node: ts.ImportEqualsDeclaration | ts.ExportSpecifier) {
        const symbol = getSymbolOfNode(node);
        const target = resolveAlias(symbol);
        if (target) {
            const markAlias = target === unknownSymbol ||
                ((getAllSymbolFlags(target) & ts.SymbolFlags.Value) && !isConstEnumOrConstEnumOnlyModule(target) && !getTypeOnlyAliasDeclaration(symbol, ts.SymbolFlags.Value));

            if (markAlias) {
                markAliasSymbolAsReferenced(symbol);
            }
        }
    }

    // When an alias symbol is referenced, we need to mark the entity it references as referenced and in turn repeat that until
    // we reach a non-alias or an exported entity (which is always considered referenced). We do this by checking the target of
    // the alias as an expression (which recursively takes us back here if the target references another alias).
    function markAliasSymbolAsReferenced(symbol: ts.Symbol) {
        const links = getSymbolLinks(symbol);
        if (!links.referenced) {
            links.referenced = true;
            const node = getDeclarationOfAliasSymbol(symbol);
            if (!node) return ts.Debug.fail();
            // We defer checking of the reference of an `import =` until the import itself is referenced,
            // This way a chain of imports can be elided if ultimately the final input is only used in a type
            // position.
            if (ts.isInternalModuleImportEqualsDeclaration(node)) {
                if (getAllSymbolFlags(resolveSymbol(symbol)) & ts.SymbolFlags.Value) {
                    // import foo = <symbol>
                    checkExpressionCached(node.moduleReference as ts.Expression);
                }
            }
        }
    }

    // Aliases that resolve to const enums are not marked as referenced because they are not emitted,
    // but their usage in value positions must be tracked to determine if the import can be type-only.
    function markConstEnumAliasAsReferenced(symbol: ts.Symbol) {
        const links = getSymbolLinks(symbol);
        if (!links.constEnumReferenced) {
            links.constEnumReferenced = true;
        }
    }

    // This function is only for imports with entity names
    function getSymbolOfPartOfRightHandSideOfImportEquals(entityName: ts.EntityName, dontResolveAlias?: boolean): ts.Symbol | undefined {
        // There are three things we might try to look for. In the following examples,
        // the search term is enclosed in |...|:
        //
        //     import a = |b|; // Namespace
        //     import a = |b.c|; // Value, type, namespace
        //     import a = |b.c|.d; // Namespace
        if (entityName.kind === ts.SyntaxKind.Identifier && ts.isRightSideOfQualifiedNameOrPropertyAccess(entityName)) {
            entityName = entityName.parent as ts.QualifiedName;
        }
        // Check for case 1 and 3 in the above example
        if (entityName.kind === ts.SyntaxKind.Identifier || entityName.parent.kind === ts.SyntaxKind.QualifiedName) {
            return resolveEntityName(entityName, ts.SymbolFlags.Namespace, /*ignoreErrors*/ false, dontResolveAlias);
        }
        else {
            // Case 2 in above example
            // entityName.kind could be a QualifiedName or a Missing identifier
            ts.Debug.assert(entityName.parent.kind === ts.SyntaxKind.ImportEqualsDeclaration);
            return resolveEntityName(entityName, ts.SymbolFlags.Value | ts.SymbolFlags.Type | ts.SymbolFlags.Namespace, /*ignoreErrors*/ false, dontResolveAlias);
        }
    }

    function getFullyQualifiedName(symbol: ts.Symbol, containingLocation?: ts.Node): string {
        return symbol.parent ? getFullyQualifiedName(symbol.parent, containingLocation) + "." + symbolToString(symbol) : symbolToString(symbol, containingLocation, /*meaning*/ undefined, ts.SymbolFormatFlags.DoNotIncludeSymbolChain | ts.SymbolFormatFlags.AllowAnyNodeKind);
    }

    function getContainingQualifiedNameNode(node: ts.QualifiedName) {
        while (ts.isQualifiedName(node.parent)) {
            node = node.parent;
        }
        return node;
    }

    function tryGetQualifiedNameAsValue(node: ts.QualifiedName) {
        let left: ts.Identifier | ts.QualifiedName = ts.getFirstIdentifier(node);
        let symbol = resolveName(left, left.escapedText, ts.SymbolFlags.Value, undefined, left, /*isUse*/ true);
        if (!symbol) {
            return undefined;
        }
        while (ts.isQualifiedName(left.parent)) {
            const type = getTypeOfSymbol(symbol);
            symbol = getPropertyOfType(type, left.parent.right.escapedText);
            if (!symbol) {
                return undefined;
            }
            left = left.parent;
        }
        return symbol;
    }

    /**
     * Resolves a qualified name and any involved aliases.
     */
    function resolveEntityName(name: ts.EntityNameOrEntityNameExpression, meaning: ts.SymbolFlags, ignoreErrors?: boolean, dontResolveAlias?: boolean, location?: ts.Node): ts.Symbol | undefined {
        if (ts.nodeIsMissing(name)) {
            return undefined;
        }

        const namespaceMeaning = ts.SymbolFlags.Namespace | (ts.isInJSFile(name) ? meaning & ts.SymbolFlags.Value : 0);
        let symbol: ts.Symbol | undefined;
        if (name.kind === ts.SyntaxKind.Identifier) {
            const message = meaning === namespaceMeaning || ts.nodeIsSynthesized(name) ? ts.Diagnostics.Cannot_find_namespace_0 : getCannotFindNameDiagnosticForName(ts.getFirstIdentifier(name));
            const symbolFromJSPrototype = ts.isInJSFile(name) && !ts.nodeIsSynthesized(name) ? resolveEntityNameFromAssignmentDeclaration(name, meaning) : undefined;
            symbol = getMergedSymbol(resolveName(location || name, name.escapedText, meaning, ignoreErrors || symbolFromJSPrototype ? undefined : message, name, /*isUse*/ true, false));
            if (!symbol) {
                return getMergedSymbol(symbolFromJSPrototype);
            }
        }
        else if (name.kind === ts.SyntaxKind.QualifiedName || name.kind === ts.SyntaxKind.PropertyAccessExpression) {
            const left = name.kind === ts.SyntaxKind.QualifiedName ? name.left : name.expression;
            const right = name.kind === ts.SyntaxKind.QualifiedName ? name.right : name.name;
            let namespace = resolveEntityName(left, namespaceMeaning, ignoreErrors, /*dontResolveAlias*/ false, location);
            if (!namespace || ts.nodeIsMissing(right)) {
                return undefined;
            }
            else if (namespace === unknownSymbol) {
                return namespace;
            }
            if (
                namespace.valueDeclaration &&
                ts.isInJSFile(namespace.valueDeclaration) &&
                ts.isVariableDeclaration(namespace.valueDeclaration) &&
                namespace.valueDeclaration.initializer &&
                isCommonJsRequire(namespace.valueDeclaration.initializer)
            ) {
                const moduleName = (namespace.valueDeclaration.initializer as ts.CallExpression).arguments[0] as ts.StringLiteral;
                const moduleSym = resolveExternalModuleName(moduleName, moduleName);
                if (moduleSym) {
                    const resolvedModuleSymbol = resolveExternalModuleSymbol(moduleSym);
                    if (resolvedModuleSymbol) {
                        namespace = resolvedModuleSymbol;
                    }
                }
            }
            symbol = getMergedSymbol(getSymbol(getExportsOfSymbol(namespace), right.escapedText, meaning));
            if (!symbol) {
                if (!ignoreErrors) {
                    const namespaceName = getFullyQualifiedName(namespace);
                    const declarationName = ts.declarationNameToString(right);
                    const suggestionForNonexistentModule = getSuggestedSymbolForNonexistentModule(right, namespace);
                    if (suggestionForNonexistentModule) {
                        error(right, ts.Diagnostics._0_has_no_exported_member_named_1_Did_you_mean_2, namespaceName, declarationName, symbolToString(suggestionForNonexistentModule));
                        return undefined;
                    }

                    const containingQualifiedName = ts.isQualifiedName(name) && getContainingQualifiedNameNode(name);
                    const canSuggestTypeof = globalObjectType // <-- can't pull on types if global types aren't initialized yet
                        && (meaning & ts.SymbolFlags.Type)
                        && containingQualifiedName
                        && !ts.isTypeOfExpression(containingQualifiedName.parent)
                        && tryGetQualifiedNameAsValue(containingQualifiedName);
                    if (canSuggestTypeof) {
                        error(
                            containingQualifiedName,
                            ts.Diagnostics._0_refers_to_a_value_but_is_being_used_as_a_type_here_Did_you_mean_typeof_0,
                            ts.entityNameToString(containingQualifiedName)
                        );
                        return undefined;
                    }

                    if (meaning & ts.SymbolFlags.Namespace && ts.isQualifiedName(name.parent)) {
                        const exportedTypeSymbol = getMergedSymbol(getSymbol(getExportsOfSymbol(namespace), right.escapedText, ts.SymbolFlags.Type));
                        if (exportedTypeSymbol) {
                            error(
                                name.parent.right,
                                ts.Diagnostics.Cannot_access_0_1_because_0_is_a_type_but_not_a_namespace_Did_you_mean_to_retrieve_the_type_of_the_property_1_in_0_with_0_1,
                                symbolToString(exportedTypeSymbol),
                                ts.unescapeLeadingUnderscores(name.parent.right.escapedText)
                            );
                            return undefined;
                        }
                    }

                    error(right, ts.Diagnostics.Namespace_0_has_no_exported_member_1, namespaceName, declarationName);
                }
                return undefined;
            }
        }
        else {
            throw ts.Debug.assertNever(name, "Unknown entity name kind.");
        }
        ts.Debug.assert((ts.getCheckFlags(symbol) & ts.CheckFlags.Instantiated) === 0, "Should never get an instantiated symbol here.");
        if (!ts.nodeIsSynthesized(name) && ts.isEntityName(name) && (symbol.flags & ts.SymbolFlags.Alias || name.parent.kind === ts.SyntaxKind.ExportAssignment)) {
            markSymbolOfAliasDeclarationIfTypeOnly(ts.getAliasDeclarationFromName(name), symbol, /*finalTarget*/ undefined, /*overwriteEmpty*/ true);
        }
        return (symbol.flags & meaning) || dontResolveAlias ? symbol : resolveAlias(symbol);
    }

    /**
     * 1. For prototype-property methods like `A.prototype.m = function () ...`, try to resolve names in the scope of `A` too.
     * Note that prototype-property assignment to locations outside the current file (eg globals) doesn't work, so
     * name resolution won't work either.
     * 2. For property assignments like `{ x: function f () { } }`, try to resolve names in the scope of `f` too.
     */
    function resolveEntityNameFromAssignmentDeclaration(name: ts.Identifier, meaning: ts.SymbolFlags) {
        if (isJSDocTypeReference(name.parent)) {
            const secondaryLocation = getAssignmentDeclarationLocation(name.parent);
            if (secondaryLocation) {
                return resolveName(secondaryLocation, name.escapedText, meaning, /*nameNotFoundMessage*/ undefined, name, /*isUse*/ true);
            }
        }
    }

    function getAssignmentDeclarationLocation(node: ts.TypeReferenceNode): ts.Node | undefined {
        const typeAlias = ts.findAncestor(node, node => !(ts.isJSDocNode(node) || node.flags & ts.NodeFlags.JSDoc) ? "quit" : ts.isJSDocTypeAlias(node));
        if (typeAlias) {
            return;
        }
        const host = ts.getJSDocHost(node);
        if (host && ts.isExpressionStatement(host) && ts.isPrototypePropertyAssignment(host.expression)) {
            // /** @param {K} p */ X.prototype.m = function () { } <-- look for K on X's declaration
            const symbol = getSymbolOfNode(host.expression.left);
            if (symbol) {
                return getDeclarationOfJSPrototypeContainer(symbol);
            }
        }
        if (host && ts.isFunctionExpression(host) && ts.isPrototypePropertyAssignment(host.parent) && ts.isExpressionStatement(host.parent.parent)) {
            // X.prototype.m = /** @param {K} p */ function () { } <-- look for K on X's declaration
            const symbol = getSymbolOfNode(host.parent.left);
            if (symbol) {
                return getDeclarationOfJSPrototypeContainer(symbol);
            }
        }
        if (host && (ts.isObjectLiteralMethod(host) || ts.isPropertyAssignment(host)) &&
            ts.isBinaryExpression(host.parent.parent) &&
            ts.getAssignmentDeclarationKind(host.parent.parent) === ts.AssignmentDeclarationKind.Prototype) {
            // X.prototype = { /** @param {K} p */m() { } } <-- look for K on X's declaration
            const symbol = getSymbolOfNode(host.parent.parent.left);
            if (symbol) {
                return getDeclarationOfJSPrototypeContainer(symbol);
            }
        }
        const sig = ts.getEffectiveJSDocHost(node);
        if (sig && ts.isFunctionLike(sig)) {
            const symbol = getSymbolOfNode(sig);
            return symbol && symbol.valueDeclaration;
        }
    }

    function getDeclarationOfJSPrototypeContainer(symbol: ts.Symbol) {
        const decl = symbol.parent!.valueDeclaration;
        if (!decl) {
            return undefined;
        }
        const initializer = ts.isAssignmentDeclaration(decl) ? ts.getAssignedExpandoInitializer(decl) :
            ts.hasOnlyExpressionInitializer(decl) ? ts.getDeclaredExpandoInitializer(decl) :
            undefined;
        return initializer || decl;
    }

    /**
     * Get the real symbol of a declaration with an expando initializer.
     *
     * Normally, declarations have an associated symbol, but when a declaration has an expando
     * initializer, the expando's symbol is the one that has all the members merged into it.
     */
    function getExpandoSymbol(symbol: ts.Symbol): ts.Symbol | undefined {
        const decl = symbol.valueDeclaration;
        if (!decl || !ts.isInJSFile(decl) || symbol.flags & ts.SymbolFlags.TypeAlias || ts.getExpandoInitializer(decl, /*isPrototypeAssignment*/ false)) {
            return undefined;
        }
        const init = ts.isVariableDeclaration(decl) ? ts.getDeclaredExpandoInitializer(decl) : ts.getAssignedExpandoInitializer(decl);
        if (init) {
            const initSymbol = getSymbolOfNode(init);
            if (initSymbol) {
                return mergeJSSymbols(initSymbol, symbol);
            }
        }
    }

    function resolveExternalModuleName(location: ts.Node, moduleReferenceExpression: ts.Expression, ignoreErrors?: boolean): ts.Symbol | undefined {
        const isClassic = ts.getEmitModuleResolutionKind(compilerOptions) === ts.ModuleResolutionKind.Classic;
        const errorMessage = isClassic?
                                ts.Diagnostics.Cannot_find_module_0_Did_you_mean_to_set_the_moduleResolution_option_to_node_or_to_add_aliases_to_the_paths_option
                              : ts.Diagnostics.Cannot_find_module_0_or_its_corresponding_type_declarations;
        return resolveExternalModuleNameWorker(location, moduleReferenceExpression, ignoreErrors ? undefined : errorMessage);
    }

    function resolveExternalModuleNameWorker(location: ts.Node, moduleReferenceExpression: ts.Expression, moduleNotFoundError: ts.DiagnosticMessage | undefined, isForAugmentation = false): ts.Symbol | undefined {
        return ts.isStringLiteralLike(moduleReferenceExpression)
            ? resolveExternalModule(location, moduleReferenceExpression.text, moduleNotFoundError, moduleReferenceExpression, isForAugmentation)
            : undefined;
    }

    function resolveExternalModule(location: ts.Node, moduleReference: string, moduleNotFoundError: ts.DiagnosticMessage | undefined, errorNode: ts.Node, isForAugmentation = false): ts.Symbol | undefined {
        if (ts.startsWith(moduleReference, "@types/")) {
            const diag = ts.Diagnostics.Cannot_import_type_declaration_files_Consider_importing_0_instead_of_1;
            const withoutAtTypePrefix = ts.removePrefix(moduleReference, "@types/");
            error(errorNode, diag, withoutAtTypePrefix, moduleReference);
        }

        const ambientModule = tryFindAmbientModule(moduleReference, /*withAugmentations*/ true);
        if (ambientModule) {
            return ambientModule;
        }
        const currentSourceFile = ts.getSourceFileOfNode(location);
        const contextSpecifier = ts.isStringLiteralLike(location)
            ? location
            :   ts.findAncestor(location, ts.isImportCall)?.arguments[0] ||
                ts.findAncestor(location, ts.isImportDeclaration)?.moduleSpecifier ||
                ts.findAncestor(location, ts.isExternalModuleImportEqualsDeclaration)?.moduleReference.expression ||
                ts.findAncestor(location, ts.isExportDeclaration)?.moduleSpecifier ||
                (ts.isModuleDeclaration(location) ? location : location.parent && ts.isModuleDeclaration(location.parent) && location.parent.name === location ? location.parent : undefined)?.name ||
                (ts.isLiteralImportTypeNode(location) ? location : undefined)?.argument.literal;
        const mode = contextSpecifier && ts.isStringLiteralLike(contextSpecifier) ? ts.getModeForUsageLocation(currentSourceFile, contextSpecifier) : currentSourceFile.impliedNodeFormat;
        const resolvedModule = ts.getResolvedModule(currentSourceFile, moduleReference, mode);
        const resolutionDiagnostic = resolvedModule && ts.getResolutionDiagnostic(compilerOptions, resolvedModule);
        const sourceFile = resolvedModule
            && (!resolutionDiagnostic || resolutionDiagnostic === ts.Diagnostics.Module_0_was_resolved_to_1_but_jsx_is_not_set)
            && host.getSourceFile(resolvedModule.resolvedFileName);
        if (sourceFile) {
            // If there's a resolutionDiagnostic we need to report it even if a sourceFile is found.
            if (resolutionDiagnostic) {
                error(errorNode, resolutionDiagnostic, moduleReference, resolvedModule.resolvedFileName);
            }
            if (sourceFile.symbol) {
                if (resolvedModule.isExternalLibraryImport && !ts.resolutionExtensionIsTSOrJson(resolvedModule.extension)) {
                    errorOnImplicitAnyModule(/*isError*/ false, errorNode, resolvedModule, moduleReference);
                }
                if (ts.getEmitModuleResolutionKind(compilerOptions) === ts.ModuleResolutionKind.Node16 || ts.getEmitModuleResolutionKind(compilerOptions) === ts.ModuleResolutionKind.NodeNext) {
                    const isSyncImport = (currentSourceFile.impliedNodeFormat === ts.ModuleKind.CommonJS && !ts.findAncestor(location, ts.isImportCall)) || !!ts.findAncestor(location, ts.isImportEqualsDeclaration);
                    const overrideClauseHost = ts.findAncestor(location, l => ts.isImportTypeNode(l) || ts.isExportDeclaration(l) || ts.isImportDeclaration(l)) as ts.ImportTypeNode | ts.ImportDeclaration | ts.ExportDeclaration | undefined;
                    const overrideClause = overrideClauseHost && ts.isImportTypeNode(overrideClauseHost) ? overrideClauseHost.assertions?.assertClause : overrideClauseHost?.assertClause;
                    // An override clause will take effect for type-only imports and import types, and allows importing the types across formats, regardless of
                    // normal mode restrictions
                    if (isSyncImport && sourceFile.impliedNodeFormat === ts.ModuleKind.ESNext && !ts.getResolutionModeOverrideForClause(overrideClause)) {
                        if (ts.findAncestor(location, ts.isImportEqualsDeclaration)) {
                            // ImportEquals in a ESM file resolving to another ESM file
                            error(errorNode, ts.Diagnostics.Module_0_cannot_be_imported_using_this_construct_The_specifier_only_resolves_to_an_ES_module_which_cannot_be_imported_with_require_Use_an_ECMAScript_import_instead, moduleReference);
                        }
                        else {
                            // CJS file resolving to an ESM file
                            let diagnosticDetails;
                            const ext = ts.tryGetExtensionFromPath(currentSourceFile.fileName);
                            if (ext === ts.Extension.Ts || ext === ts.Extension.Js || ext === ts.Extension.Tsx || ext === ts.Extension.Jsx) {
                                const scope = currentSourceFile.packageJsonScope;
                                const targetExt = ext === ts.Extension.Ts ? ts.Extension.Mts : ext === ts.Extension.Js ? ts.Extension.Mjs : undefined;
                                if (scope && !scope.contents.packageJsonContent.type) {
                                    if (targetExt) {
                                        diagnosticDetails = ts.chainDiagnosticMessages(
                                            /*details*/ undefined,
                                            ts.Diagnostics.To_convert_this_file_to_an_ECMAScript_module_change_its_file_extension_to_0_or_add_the_field_type_Colon_module_to_1,
                                            targetExt,
                                            ts.combinePaths(scope.packageDirectory, "package.json"));
                                    }
                                    else {
                                        diagnosticDetails = ts.chainDiagnosticMessages(
                                            /*details*/ undefined,
                                            ts.Diagnostics.To_convert_this_file_to_an_ECMAScript_module_add_the_field_type_Colon_module_to_0,
                                            ts.combinePaths(scope.packageDirectory, "package.json"));
                                    }
                                }
                                else {
                                    if (targetExt) {
                                        diagnosticDetails = ts.chainDiagnosticMessages(
                                            /*details*/ undefined,
                                            ts.Diagnostics.To_convert_this_file_to_an_ECMAScript_module_change_its_file_extension_to_0_or_create_a_local_package_json_file_with_type_Colon_module,
                                            targetExt);
                                    }
                                    else {
                                        diagnosticDetails = ts.chainDiagnosticMessages(
                                            /*details*/ undefined,
                                            ts.Diagnostics.To_convert_this_file_to_an_ECMAScript_module_create_a_local_package_json_file_with_type_Colon_module);
                                    }
                                }
                            }
                            diagnostics.add(ts.createDiagnosticForNodeFromMessageChain(errorNode, ts.chainDiagnosticMessages(
                                diagnosticDetails,
                                ts.Diagnostics.The_current_file_is_a_CommonJS_module_whose_imports_will_produce_require_calls_however_the_referenced_file_is_an_ECMAScript_module_and_cannot_be_imported_with_require_Consider_writing_a_dynamic_import_0_call_instead,
                                moduleReference)));
                        }
                    }
                }
                // merged symbol is module declaration symbol combined with all augmentations
                return getMergedSymbol(sourceFile.symbol);
            }
            if (moduleNotFoundError) {
                // report errors only if it was requested
                error(errorNode, ts.Diagnostics.File_0_is_not_a_module, sourceFile.fileName);
            }
            return undefined;
        }

        if (patternAmbientModules) {
            const pattern = ts.findBestPatternMatch(patternAmbientModules, _ => _.pattern, moduleReference);
            if (pattern) {
                // If the module reference matched a pattern ambient module ('*.foo') but there's also a
                // module augmentation by the specific name requested ('a.foo'), we store the merged symbol
                // by the augmentation name ('a.foo'), because asking for *.foo should not give you exports
                // from a.foo.
                const augmentation = patternAmbientModuleAugmentations && patternAmbientModuleAugmentations.get(moduleReference);
                if (augmentation) {
                    return getMergedSymbol(augmentation);
                }
                return getMergedSymbol(pattern.symbol);
            }
        }

        // May be an untyped module. If so, ignore resolutionDiagnostic.
        if (resolvedModule && !ts.resolutionExtensionIsTSOrJson(resolvedModule.extension) && resolutionDiagnostic === undefined || resolutionDiagnostic === ts.Diagnostics.Could_not_find_a_declaration_file_for_module_0_1_implicitly_has_an_any_type) {
            if (isForAugmentation) {
                const diag = ts.Diagnostics.Invalid_module_name_in_augmentation_Module_0_resolves_to_an_untyped_module_at_1_which_cannot_be_augmented;
                error(errorNode, diag, moduleReference, resolvedModule!.resolvedFileName);
            }
            else {
                errorOnImplicitAnyModule(/*isError*/ noImplicitAny && !!moduleNotFoundError, errorNode, resolvedModule!, moduleReference);
            }
            // Failed imports and untyped modules are both treated in an untyped manner; only difference is whether we give a diagnostic first.
            return undefined;
        }

        if (moduleNotFoundError) {
            // See if this was possibly a projectReference redirect
            if (resolvedModule) {
                const redirect = host.getProjectReferenceRedirect(resolvedModule.resolvedFileName);
                if (redirect) {
                    error(errorNode, ts.Diagnostics.Output_file_0_has_not_been_built_from_source_file_1, redirect, resolvedModule.resolvedFileName);
                    return undefined;
                }
            }

            if (resolutionDiagnostic) {
                error(errorNode, resolutionDiagnostic, moduleReference, resolvedModule.resolvedFileName);
            }
            else {
                const tsExtension = ts.tryExtractTSExtension(moduleReference);
                const isExtensionlessRelativePathImport = ts.pathIsRelative(moduleReference) && !ts.hasExtension(moduleReference);
                const moduleResolutionKind = ts.getEmitModuleResolutionKind(compilerOptions);
                const resolutionIsNode16OrNext = moduleResolutionKind === ts.ModuleResolutionKind.Node16 ||
                    moduleResolutionKind === ts.ModuleResolutionKind.NodeNext;
                if (tsExtension) {
                    const diag = ts.Diagnostics.An_import_path_cannot_end_with_a_0_extension_Consider_importing_1_instead;
                    const importSourceWithoutExtension = ts.removeExtension(moduleReference, tsExtension);
                    let replacedImportSource = importSourceWithoutExtension;
                    /**
                     * Direct users to import source with .js extension if outputting an ES module.
                     * @see https://github.com/microsoft/TypeScript/issues/42151
                     */
                    if (moduleKind >= ts.ModuleKind.ES2015) {
                        replacedImportSource += tsExtension === ts.Extension.Mts ? ".mjs" : tsExtension === ts.Extension.Cts ? ".cjs" : ".js";
                    }
                    error(errorNode, diag, tsExtension, replacedImportSource);
                }
                else if (!compilerOptions.resolveJsonModule &&
                    ts.fileExtensionIs(moduleReference, ts.Extension.Json) &&
                    ts.getEmitModuleResolutionKind(compilerOptions) !== ts.ModuleResolutionKind.Classic &&
                    ts.hasJsonModuleEmitEnabled(compilerOptions)) {
                    error(errorNode, ts.Diagnostics.Cannot_find_module_0_Consider_using_resolveJsonModule_to_import_module_with_json_extension, moduleReference);
                }
                else if (mode === ts.ModuleKind.ESNext && resolutionIsNode16OrNext && isExtensionlessRelativePathImport) {
                    const absoluteRef = ts.getNormalizedAbsolutePath(moduleReference, ts.getDirectoryPath(currentSourceFile.path));
                    const suggestedExt = suggestedExtensions.find(([actualExt, _importExt]) => host.fileExists(absoluteRef + actualExt))?.[1];
                    if (suggestedExt) {
                        error(errorNode,
                            ts.Diagnostics.Relative_import_paths_need_explicit_file_extensions_in_EcmaScript_imports_when_moduleResolution_is_node16_or_nodenext_Did_you_mean_0,
                            moduleReference + suggestedExt);
                    }
                    else {
                        error(errorNode, ts.Diagnostics.Relative_import_paths_need_explicit_file_extensions_in_EcmaScript_imports_when_moduleResolution_is_node16_or_nodenext_Consider_adding_an_extension_to_the_import_path);
                    }
                }
                else {
                    error(errorNode, moduleNotFoundError, moduleReference);
                }
            }
        }
        return undefined;
    }

    function errorOnImplicitAnyModule(isError: boolean, errorNode: ts.Node, { packageId, resolvedFileName }: ts.ResolvedModuleFull, moduleReference: string): void {
        const errorInfo = !ts.isExternalModuleNameRelative(moduleReference) && packageId
            ? typesPackageExists(packageId.name)
                ? ts.chainDiagnosticMessages(
                    /*details*/ undefined,
                    ts.Diagnostics.If_the_0_package_actually_exposes_this_module_consider_sending_a_pull_request_to_amend_https_Colon_Slash_Slashgithub_com_SlashDefinitelyTyped_SlashDefinitelyTyped_Slashtree_Slashmaster_Slashtypes_Slash_1,
                    packageId.name, ts.mangleScopedPackageName(packageId.name))
                : packageBundlesTypes(packageId.name)
                    ? ts.chainDiagnosticMessages(
                        /*details*/ undefined,
                        ts.Diagnostics.If_the_0_package_actually_exposes_this_module_try_adding_a_new_declaration_d_ts_file_containing_declare_module_1,
                        packageId.name,
                        moduleReference)
                    : ts.chainDiagnosticMessages(
                        /*details*/ undefined,
                        ts.Diagnostics.Try_npm_i_save_dev_types_Slash_1_if_it_exists_or_add_a_new_declaration_d_ts_file_containing_declare_module_0,
                        moduleReference,
                        ts.mangleScopedPackageName(packageId.name))
            : undefined;
        errorOrSuggestion(isError, errorNode, ts.chainDiagnosticMessages(
            errorInfo,
            ts.Diagnostics.Could_not_find_a_declaration_file_for_module_0_1_implicitly_has_an_any_type,
            moduleReference,
            resolvedFileName));
    }
    function typesPackageExists(packageName: string): boolean {
        return getPackagesMap().has(ts.getTypesPackageName(packageName));
    }
    function packageBundlesTypes(packageName: string): boolean {
        return !!getPackagesMap().get(packageName);
    }

    function resolveExternalModuleSymbol(moduleSymbol: ts.Symbol, dontResolveAlias?: boolean): ts.Symbol;
    function resolveExternalModuleSymbol(moduleSymbol: ts.Symbol | undefined, dontResolveAlias?: boolean): ts.Symbol | undefined;
    function resolveExternalModuleSymbol(moduleSymbol: ts.Symbol, dontResolveAlias?: boolean): ts.Symbol | undefined {
        if (moduleSymbol?.exports) {
            const exportEquals = resolveSymbol(moduleSymbol.exports.get(ts.InternalSymbolName.ExportEquals), dontResolveAlias);
            const exported = getCommonJsExportEquals(getMergedSymbol(exportEquals), getMergedSymbol(moduleSymbol));
            return getMergedSymbol(exported) || moduleSymbol;
        }
        return undefined;
    }

    function getCommonJsExportEquals(exported: ts.Symbol | undefined, moduleSymbol: ts.Symbol): ts.Symbol | undefined {
        if (!exported || exported === unknownSymbol || exported === moduleSymbol || moduleSymbol.exports!.size === 1 || exported.flags & ts.SymbolFlags.Alias) {
            return exported;
        }
        const links = getSymbolLinks(exported);
        if (links.cjsExportMerged) {
            return links.cjsExportMerged;
        }
        const merged = exported.flags & ts.SymbolFlags.Transient ? exported : cloneSymbol(exported);
        merged.flags = merged.flags | ts.SymbolFlags.ValueModule;
        if (merged.exports === undefined) {
            merged.exports = ts.createSymbolTable();
        }
        moduleSymbol.exports!.forEach((s, name) => {
            if (name === ts.InternalSymbolName.ExportEquals) return;
            merged.exports!.set(name, merged.exports!.has(name) ? mergeSymbol(merged.exports!.get(name)!, s) : s);
        });
        getSymbolLinks(merged).cjsExportMerged = merged;
        return links.cjsExportMerged = merged;
    }

    // An external module with an 'export =' declaration may be referenced as an ES6 module provided the 'export ='
    // references a symbol that is at least declared as a module or a variable. The target of the 'export =' may
    // combine other declarations with the module or variable (e.g. a class/module, function/module, interface/variable).
    function resolveESModuleSymbol(moduleSymbol: ts.Symbol | undefined, referencingLocation: ts.Node, dontResolveAlias: boolean, suppressInteropError: boolean): ts.Symbol | undefined {
        const symbol = resolveExternalModuleSymbol(moduleSymbol, dontResolveAlias);

        if (!dontResolveAlias && symbol) {
            if (!suppressInteropError && !(symbol.flags & (ts.SymbolFlags.Module | ts.SymbolFlags.Variable)) && !ts.getDeclarationOfKind(symbol, ts.SyntaxKind.SourceFile)) {
                const compilerOptionName = moduleKind >= ts.ModuleKind.ES2015
                    ? "allowSyntheticDefaultImports"
                    : "esModuleInterop";

                error(referencingLocation, ts.Diagnostics.This_module_can_only_be_referenced_with_ECMAScript_imports_Slashexports_by_turning_on_the_0_flag_and_referencing_its_default_export, compilerOptionName);

                return symbol;
            }

            const referenceParent = referencingLocation.parent;
            if (
                (ts.isImportDeclaration(referenceParent) && ts.getNamespaceDeclarationNode(referenceParent)) ||
                ts.isImportCall(referenceParent)
            ) {
                const reference = ts.isImportCall(referenceParent) ? referenceParent.arguments[0] : referenceParent.moduleSpecifier;
                const type = getTypeOfSymbol(symbol);
                const defaultOnlyType = getTypeWithSyntheticDefaultOnly(type, symbol, moduleSymbol!, reference);
                if (defaultOnlyType) {
                    return cloneTypeAsModuleType(symbol, defaultOnlyType, referenceParent);
                }

                const targetFile = moduleSymbol?.declarations?.find(ts.isSourceFile);
                const isEsmCjsRef = targetFile && isESMFormatImportImportingCommonjsFormatFile(getUsageModeForExpression(reference), targetFile.impliedNodeFormat);
                if (ts.getESModuleInterop(compilerOptions) || isEsmCjsRef) {
                    let sigs = getSignaturesOfStructuredType(type, ts.SignatureKind.Call);
                    if (!sigs || !sigs.length) {
                        sigs = getSignaturesOfStructuredType(type, ts.SignatureKind.Construct);
                    }
                    if (
                        (sigs && sigs.length) ||
                        getPropertyOfType(type, ts.InternalSymbolName.Default, /*skipObjectFunctionPropertyAugment*/ true) ||
                        isEsmCjsRef
                    ) {
                        const moduleType = getTypeWithSyntheticDefaultImportType(type, symbol, moduleSymbol!, reference);
                        return cloneTypeAsModuleType(symbol, moduleType, referenceParent);
                    }
                }
            }
        }
        return symbol;
    }

    /**
     * Create a new symbol which has the module's type less the call and construct signatures
     */
    function cloneTypeAsModuleType(symbol: ts.Symbol, moduleType: ts.Type, referenceParent: ts.ImportDeclaration | ts.ImportCall) {
        const result = createSymbol(symbol.flags, symbol.escapedName);
        result.declarations = symbol.declarations ? symbol.declarations.slice() : [];
        result.parent = symbol.parent;
        result.target = symbol;
        result.originatingImport = referenceParent;
        if (symbol.valueDeclaration) result.valueDeclaration = symbol.valueDeclaration;
        if (symbol.constEnumOnlyModule) result.constEnumOnlyModule = true;
        if (symbol.members) result.members = new ts.Map(symbol.members);
        if (symbol.exports) result.exports = new ts.Map(symbol.exports);
        const resolvedModuleType = resolveStructuredTypeMembers(moduleType as ts.StructuredType); // Should already be resolved from the signature checks above
        result.type = createAnonymousType(result, resolvedModuleType.members, ts.emptyArray, ts.emptyArray, resolvedModuleType.indexInfos);
        return result;
    }

    function hasExportAssignmentSymbol(moduleSymbol: ts.Symbol): boolean {
        return moduleSymbol.exports!.get(ts.InternalSymbolName.ExportEquals) !== undefined;
    }

    function getExportsOfModuleAsArray(moduleSymbol: ts.Symbol): ts.Symbol[] {
        return symbolsToArray(getExportsOfModule(moduleSymbol));
    }

    function getExportsAndPropertiesOfModule(moduleSymbol: ts.Symbol): ts.Symbol[] {
        const exports = getExportsOfModuleAsArray(moduleSymbol);
        const exportEquals = resolveExternalModuleSymbol(moduleSymbol);
        if (exportEquals !== moduleSymbol) {
            const type = getTypeOfSymbol(exportEquals);
            if (shouldTreatPropertiesOfExternalModuleAsExports(type)) {
                ts.addRange(exports, getPropertiesOfType(type));
            }
        }
        return exports;
    }

    function forEachExportAndPropertyOfModule(moduleSymbol: ts.Symbol, cb: (symbol: ts.Symbol, key: ts.__String) => void): void {
        const exports = getExportsOfModule(moduleSymbol);
        exports.forEach((symbol, key) => {
            if (!isReservedMemberName(key)) {
                cb(symbol, key);
            }
        });
        const exportEquals = resolveExternalModuleSymbol(moduleSymbol);
        if (exportEquals !== moduleSymbol) {
            const type = getTypeOfSymbol(exportEquals);
            if (shouldTreatPropertiesOfExternalModuleAsExports(type)) {
                forEachPropertyOfType(type, (symbol, escapedName) => {
                    cb(symbol, escapedName);
                });
            }
        }
    }

    function tryGetMemberInModuleExports(memberName: ts.__String, moduleSymbol: ts.Symbol): ts.Symbol | undefined {
        const symbolTable = getExportsOfModule(moduleSymbol);
        if (symbolTable) {
            return symbolTable.get(memberName);
        }
    }

    function tryGetMemberInModuleExportsAndProperties(memberName: ts.__String, moduleSymbol: ts.Symbol): ts.Symbol | undefined {
        const symbol = tryGetMemberInModuleExports(memberName, moduleSymbol);
        if (symbol) {
            return symbol;
        }

        const exportEquals = resolveExternalModuleSymbol(moduleSymbol);
        if (exportEquals === moduleSymbol) {
            return undefined;
        }

        const type = getTypeOfSymbol(exportEquals);
        return shouldTreatPropertiesOfExternalModuleAsExports(type) ? getPropertyOfType(type, memberName) : undefined;
    }

    function shouldTreatPropertiesOfExternalModuleAsExports(resolvedExternalModuleType: ts.Type) {
        return !(resolvedExternalModuleType.flags & ts.TypeFlags.Primitive ||
                ts.getObjectFlags(resolvedExternalModuleType) & ts.ObjectFlags.Class ||
                // `isArrayOrTupleLikeType` is too expensive to use in this auto-imports hot path
                isArrayType(resolvedExternalModuleType) ||
                isTupleType(resolvedExternalModuleType));
    }

    function getExportsOfSymbol(symbol: ts.Symbol): ts.SymbolTable {
        return symbol.flags & ts.SymbolFlags.LateBindingContainer ? getResolvedMembersOrExportsOfSymbol(symbol, MembersOrExportsResolutionKind.resolvedExports) :
            symbol.flags & ts.SymbolFlags.Module ? getExportsOfModule(symbol) :
            symbol.exports || emptySymbols;
    }

    function getExportsOfModule(moduleSymbol: ts.Symbol): ts.SymbolTable {
        const links = getSymbolLinks(moduleSymbol);
        return links.resolvedExports || (links.resolvedExports = getExportsOfModuleWorker(moduleSymbol));
    }

    interface ExportCollisionTracker {
        specifierText: string;
        exportsWithDuplicate: ts.ExportDeclaration[];
    }

    type ExportCollisionTrackerTable = ts.UnderscoreEscapedMap<ExportCollisionTracker>;

    /**
     * Extends one symbol table with another while collecting information on name collisions for error message generation into the `lookupTable` argument
     * Not passing `lookupTable` and `exportNode` disables this collection, and just extends the tables
     */
    function extendExportSymbols(target: ts.SymbolTable, source: ts.SymbolTable | undefined, lookupTable?: ExportCollisionTrackerTable, exportNode?: ts.ExportDeclaration) {
        if (!source) return;
        source.forEach((sourceSymbol, id) => {
            if (id === ts.InternalSymbolName.Default) return;

            const targetSymbol = target.get(id);
            if (!targetSymbol) {
                target.set(id, sourceSymbol);
                if (lookupTable && exportNode) {
                    lookupTable.set(id, {
                        specifierText: ts.getTextOfNode(exportNode.moduleSpecifier!)
                    } as ExportCollisionTracker);
                }
            }
            else if (lookupTable && exportNode && targetSymbol && resolveSymbol(targetSymbol) !== resolveSymbol(sourceSymbol)) {
                const collisionTracker = lookupTable.get(id)!;
                if (!collisionTracker.exportsWithDuplicate) {
                    collisionTracker.exportsWithDuplicate = [exportNode];
                }
                else {
                    collisionTracker.exportsWithDuplicate.push(exportNode);
                }
            }
        });
    }

    function getExportsOfModuleWorker(moduleSymbol: ts.Symbol): ts.SymbolTable {
        const visitedSymbols: ts.Symbol[] = [];

        // A module defined by an 'export=' consists of one export that needs to be resolved
        moduleSymbol = resolveExternalModuleSymbol(moduleSymbol);

        return visit(moduleSymbol) || emptySymbols;

        // The ES6 spec permits export * declarations in a module to circularly reference the module itself. For example,
        // module 'a' can 'export * from "b"' and 'b' can 'export * from "a"' without error.
        function visit(symbol: ts.Symbol | undefined): ts.SymbolTable | undefined {
            if (!(symbol && symbol.exports && ts.pushIfUnique(visitedSymbols, symbol))) {
                return;
            }
            const symbols = new ts.Map(symbol.exports);
            // All export * declarations are collected in an __export symbol by the binder
            const exportStars = symbol.exports.get(ts.InternalSymbolName.ExportStar);
            if (exportStars) {
                const nestedSymbols = ts.createSymbolTable();
                const lookupTable: ExportCollisionTrackerTable = new ts.Map();
                if (exportStars.declarations) {
                    for (const node of exportStars.declarations) {
                        const resolvedModule = resolveExternalModuleName(node, (node as ts.ExportDeclaration).moduleSpecifier!);
                        const exportedSymbols = visit(resolvedModule);
                        extendExportSymbols(
                            nestedSymbols,
                            exportedSymbols,
                            lookupTable,
                            node as ts.ExportDeclaration
                        );
                    }
                }
                lookupTable.forEach(({ exportsWithDuplicate }, id) => {
                    // It's not an error if the file with multiple `export *`s with duplicate names exports a member with that name itself
                    if (id === "export=" || !(exportsWithDuplicate && exportsWithDuplicate.length) || symbols.has(id)) {
                        return;
                    }
                    for (const node of exportsWithDuplicate) {
                        diagnostics.add(ts.createDiagnosticForNode(
                            node,
                            ts.Diagnostics.Module_0_has_already_exported_a_member_named_1_Consider_explicitly_re_exporting_to_resolve_the_ambiguity,
                            lookupTable.get(id)!.specifierText,
                            ts.unescapeLeadingUnderscores(id)
                        ));
                    }
                });
                extendExportSymbols(symbols, nestedSymbols);
            }
            return symbols;
        }
    }

    function getMergedSymbol(symbol: ts.Symbol): ts.Symbol;
    function getMergedSymbol(symbol: ts.Symbol | undefined): ts.Symbol | undefined;
    function getMergedSymbol(symbol: ts.Symbol | undefined): ts.Symbol | undefined {
        let merged: ts.Symbol;
        return symbol && symbol.mergeId && (merged = mergedSymbols[symbol.mergeId]) ? merged : symbol;
    }

    function getSymbolOfNode(node: ts.Declaration): ts.Symbol;
    function getSymbolOfNode(node: ts.Node): ts.Symbol | undefined;
    function getSymbolOfNode(node: ts.Node): ts.Symbol | undefined {
        return getMergedSymbol(node.symbol && getLateBoundSymbol(node.symbol));
    }

    function getParentOfSymbol(symbol: ts.Symbol): ts.Symbol | undefined {
        return getMergedSymbol(symbol.parent && getLateBoundSymbol(symbol.parent));
    }

    function getAlternativeContainingModules(symbol: ts.Symbol, enclosingDeclaration: ts.Node): ts.Symbol[] {
        const containingFile = ts.getSourceFileOfNode(enclosingDeclaration);
        const id = getNodeId(containingFile);
        const links = getSymbolLinks(symbol);
        let results: ts.Symbol[] | undefined;
        if (links.extendedContainersByFile && (results = links.extendedContainersByFile.get(id))) {
            return results;
        }
        if (containingFile && containingFile.imports) {
            // Try to make an import using an import already in the enclosing file, if possible
            for (const importRef of containingFile.imports) {
                if (ts.nodeIsSynthesized(importRef)) continue; // Synthetic names can't be resolved by `resolveExternalModuleName` - they'll cause a debug assert if they error
                const resolvedModule = resolveExternalModuleName(enclosingDeclaration, importRef, /*ignoreErrors*/ true);
                if (!resolvedModule) continue;
                const ref = getAliasForSymbolInContainer(resolvedModule, symbol);
                if (!ref) continue;
                results = ts.append(results, resolvedModule);
            }
            if (ts.length(results)) {
                (links.extendedContainersByFile || (links.extendedContainersByFile = new ts.Map())).set(id, results!);
                return results!;
            }
        }
        if (links.extendedContainers) {
            return links.extendedContainers;
        }
        // No results from files already being imported by this file - expand search (expensive, but not location-specific, so cached)
        const otherFiles = host.getSourceFiles();
        for (const file of otherFiles) {
            if (!ts.isExternalModule(file)) continue;
            const sym = getSymbolOfNode(file);
            const ref = getAliasForSymbolInContainer(sym, symbol);
            if (!ref) continue;
            results = ts.append(results, sym);
        }
        return links.extendedContainers = results || ts.emptyArray;
    }

    /**
     * Attempts to find the symbol corresponding to the container a symbol is in - usually this
     * is just its' `.parent`, but for locals, this value is `undefined`
     */
    function getContainersOfSymbol(symbol: ts.Symbol, enclosingDeclaration: ts.Node | undefined, meaning: ts.SymbolFlags): ts.Symbol[] | undefined {
        const container = getParentOfSymbol(symbol);
        // Type parameters end up in the `members` lists but are not externally visible
        if (container && !(symbol.flags & ts.SymbolFlags.TypeParameter)) {
            const additionalContainers = ts.mapDefined(container.declarations, fileSymbolIfFileSymbolExportEqualsContainer);
            const reexportContainers = enclosingDeclaration && getAlternativeContainingModules(symbol, enclosingDeclaration);
            const objectLiteralContainer = getVariableDeclarationOfObjectLiteral(container, meaning);
            if (
                enclosingDeclaration &&
                container.flags & getQualifiedLeftMeaning(meaning) &&
                getAccessibleSymbolChain(container, enclosingDeclaration, ts.SymbolFlags.Namespace, /*externalOnly*/ false)
            ) {
                return ts.append(ts.concatenate(ts.concatenate([container], additionalContainers), reexportContainers), objectLiteralContainer); // This order expresses a preference for the real container if it is in scope
            }
            // we potentially have a symbol which is a member of the instance side of something - look for a variable in scope with the container's type
            // which may be acting like a namespace (eg, `Symbol` acts like a namespace when looking up `Symbol.toStringTag`)
            const firstVariableMatch = !(container.flags & getQualifiedLeftMeaning(meaning))
                && container.flags & ts.SymbolFlags.Type
                && getDeclaredTypeOfSymbol(container).flags & ts.TypeFlags.Object
                && meaning === ts.SymbolFlags.Value
            ? forEachSymbolTableInScope(enclosingDeclaration, t => {
                return ts.forEachEntry(t, s => {
                    if (s.flags & getQualifiedLeftMeaning(meaning) && getTypeOfSymbol(s) === getDeclaredTypeOfSymbol(container)) {
                        return s;
                    }
                });
            }) : undefined;
            let res = firstVariableMatch ? [firstVariableMatch, ...additionalContainers, container] : [...additionalContainers, container];
            res = ts.append(res, objectLiteralContainer);
            res = ts.addRange(res, reexportContainers);
            return res;
        }
        const candidates = ts.mapDefined(symbol.declarations, d => {
            if (!ts.isAmbientModule(d) && d.parent){
                // direct children of a module
                if (hasNonGlobalAugmentationExternalModuleSymbol(d.parent)) {
                    return getSymbolOfNode(d.parent);
                }
                // export ='d member of an ambient module
                if (ts.isModuleBlock(d.parent) && d.parent.parent && resolveExternalModuleSymbol(getSymbolOfNode(d.parent.parent)) === symbol) {
                    return getSymbolOfNode(d.parent.parent);
                }
            }
            if (ts.isClassExpression(d) && ts.isBinaryExpression(d.parent) && d.parent.operatorToken.kind === ts.SyntaxKind.EqualsToken && ts.isAccessExpression(d.parent.left) && ts.isEntityNameExpression(d.parent.left.expression)) {
                if (ts.isModuleExportsAccessExpression(d.parent.left) || ts.isExportsIdentifier(d.parent.left.expression)) {
                    return getSymbolOfNode(ts.getSourceFileOfNode(d));
                }
                checkExpressionCached(d.parent.left.expression);
                return getNodeLinks(d.parent.left.expression).resolvedSymbol;
            }
        });
        if (!ts.length(candidates)) {
            return undefined;
        }
        return ts.mapDefined(candidates, candidate => getAliasForSymbolInContainer(candidate, symbol) ? candidate : undefined);

        function fileSymbolIfFileSymbolExportEqualsContainer(d: ts.Declaration) {
            return container && getFileSymbolIfFileSymbolExportEqualsContainer(d, container);
        }
    }

    function getVariableDeclarationOfObjectLiteral(symbol: ts.Symbol, meaning: ts.SymbolFlags) {
        // If we're trying to reference some object literal in, eg `var a = { x: 1 }`, the symbol for the literal, `__object`, is distinct
        // from the symbol of the declaration it is being assigned to. Since we can use the declaration to refer to the literal, however,
        // we'd like to make that connection here - potentially causing us to paint the declaration's visibility, and therefore the literal.
        const firstDecl: ts.Node | false = !!ts.length(symbol.declarations) && ts.first(symbol.declarations!);
        if (meaning & ts.SymbolFlags.Value && firstDecl && firstDecl.parent && ts.isVariableDeclaration(firstDecl.parent)) {
            if (ts.isObjectLiteralExpression(firstDecl) && firstDecl === firstDecl.parent.initializer || ts.isTypeLiteralNode(firstDecl) && firstDecl === firstDecl.parent.type) {
                return getSymbolOfNode(firstDecl.parent);
            }
        }
    }

    function getFileSymbolIfFileSymbolExportEqualsContainer(d: ts.Declaration, container: ts.Symbol) {
        const fileSymbol = getExternalModuleContainer(d);
        const exported = fileSymbol && fileSymbol.exports && fileSymbol.exports.get(ts.InternalSymbolName.ExportEquals);
        return exported && getSymbolIfSameReference(exported, container) ? fileSymbol : undefined;
    }

    function getAliasForSymbolInContainer(container: ts.Symbol, symbol: ts.Symbol) {
        if (container === getParentOfSymbol(symbol)) {
            // fast path, `symbol` is either already the alias or isn't aliased
            return symbol;
        }
        // Check if container is a thing with an `export=` which points directly at `symbol`, and if so, return
        // the container itself as the alias for the symbol
        const exportEquals = container.exports && container.exports.get(ts.InternalSymbolName.ExportEquals);
        if (exportEquals && getSymbolIfSameReference(exportEquals, symbol)) {
            return container;
        }
        const exports = getExportsOfSymbol(container);
        const quick = exports.get(symbol.escapedName);
        if (quick && getSymbolIfSameReference(quick, symbol)) {
            return quick;
        }
        return ts.forEachEntry(exports, exported => {
            if (getSymbolIfSameReference(exported, symbol)) {
                return exported;
            }
        });
    }

    /**
     * Checks if two symbols, through aliasing and/or merging, refer to the same thing
     */
    function getSymbolIfSameReference(s1: ts.Symbol, s2: ts.Symbol) {
        if (getMergedSymbol(resolveSymbol(getMergedSymbol(s1))) === getMergedSymbol(resolveSymbol(getMergedSymbol(s2)))) {
            return s1;
        }
    }

    function getExportSymbolOfValueSymbolIfExported(symbol: ts.Symbol): ts.Symbol;
    function getExportSymbolOfValueSymbolIfExported(symbol: ts.Symbol | undefined): ts.Symbol | undefined;
    function getExportSymbolOfValueSymbolIfExported(symbol: ts.Symbol | undefined): ts.Symbol | undefined {
        return getMergedSymbol(symbol && (symbol.flags & ts.SymbolFlags.ExportValue) !== 0 && symbol.exportSymbol || symbol);
    }

    function symbolIsValue(symbol: ts.Symbol, includeTypeOnlyMembers?: boolean): boolean {
        return !!(
            symbol.flags & ts.SymbolFlags.Value ||
            symbol.flags & ts.SymbolFlags.Alias && getAllSymbolFlags(symbol) & ts.SymbolFlags.Value && (includeTypeOnlyMembers || !getTypeOnlyAliasDeclaration(symbol)));
    }

    function findConstructorDeclaration(node: ts.ClassLikeDeclaration): ts.ConstructorDeclaration | undefined {
        const members = node.members;
        for (const member of members) {
            if (member.kind === ts.SyntaxKind.Constructor && ts.nodeIsPresent((member as ts.ConstructorDeclaration).body)) {
                return member as ts.ConstructorDeclaration;
            }
        }
    }

    function createType(flags: ts.TypeFlags): ts.Type {
        const result = new Type(checker, flags);
        typeCount++;
        result.id = typeCount;
        ts.tracing?.recordType(result);
        return result;
    }

    function createTypeWithSymbol(flags: ts.TypeFlags, symbol: ts.Symbol): ts.Type {
        const result = createType(flags);
        result.symbol = symbol;
        return result;
    }

    function createOriginType(flags: ts.TypeFlags): ts.Type {
        return new Type(checker, flags);
    }

    function createIntrinsicType(kind: ts.TypeFlags, intrinsicName: string, objectFlags: ts.ObjectFlags = 0): ts.IntrinsicType {
        const type = createType(kind) as ts.IntrinsicType;
        type.intrinsicName = intrinsicName;
        type.objectFlags = objectFlags;
        return type;
    }

    function createObjectType(objectFlags: ts.ObjectFlags, symbol?: ts.Symbol): ts.ObjectType {
        const type = createTypeWithSymbol(ts.TypeFlags.Object, symbol!) as ts.ObjectType;
        type.objectFlags = objectFlags;
        type.members = undefined;
        type.properties = undefined;
        type.callSignatures = undefined;
        type.constructSignatures = undefined;
        type.indexInfos = undefined;
        return type;
    }

    function createTypeofType() {
        return getUnionType(ts.arrayFrom(typeofNEFacts.keys(), getStringLiteralType));
    }

    function createTypeParameter(symbol?: ts.Symbol) {
        return createTypeWithSymbol(ts.TypeFlags.TypeParameter, symbol!) as ts.TypeParameter;
    }

    // A reserved member name starts with two underscores, but the third character cannot be an underscore,
    // @, or #. A third underscore indicates an escaped form of an identifier that started
    // with at least two underscores. The @ character indicates that the name is denoted by a well known ES
    // Symbol instance and the # character indicates that the name is a PrivateIdentifier.
    function isReservedMemberName(name: ts.__String) {
        return (name as string).charCodeAt(0) === ts.CharacterCodes._ &&
            (name as string).charCodeAt(1) === ts.CharacterCodes._ &&
            (name as string).charCodeAt(2) !== ts.CharacterCodes._ &&
            (name as string).charCodeAt(2) !== ts.CharacterCodes.at &&
            (name as string).charCodeAt(2) !== ts.CharacterCodes.hash;
    }

    function getNamedMembers(members: ts.SymbolTable): ts.Symbol[] {
        let result: ts.Symbol[] | undefined;
        members.forEach((symbol, id) => {
            if (isNamedMember(symbol, id)) {
                (result || (result = [])).push(symbol);
            }
        });
        return result || ts.emptyArray;
    }

    function isNamedMember(member: ts.Symbol, escapedName: ts.__String) {
        return !isReservedMemberName(escapedName) && symbolIsValue(member);
    }

    function getNamedOrIndexSignatureMembers(members: ts.SymbolTable): ts.Symbol[] {
        const result = getNamedMembers(members);
        const index = getIndexSymbolFromSymbolTable(members);
        return index ? ts.concatenate(result, [index]) : result;
    }

    function setStructuredTypeMembers(type: ts.StructuredType, members: ts.SymbolTable, callSignatures: readonly ts.Signature[], constructSignatures: readonly ts.Signature[], indexInfos: readonly ts.IndexInfo[]): ts.ResolvedType {
        const resolved = type as ts.ResolvedType;
        resolved.members = members;
        resolved.properties = ts.emptyArray;
        resolved.callSignatures = callSignatures;
        resolved.constructSignatures = constructSignatures;
        resolved.indexInfos = indexInfos;
        // This can loop back to getPropertyOfType() which would crash if `callSignatures` & `constructSignatures` are not initialized.
        if (members !== emptySymbols) resolved.properties = getNamedMembers(members);
        return resolved;
    }

    function createAnonymousType(symbol: ts.Symbol | undefined, members: ts.SymbolTable, callSignatures: readonly ts.Signature[], constructSignatures: readonly ts.Signature[], indexInfos: readonly ts.IndexInfo[]): ts.ResolvedType {
        return setStructuredTypeMembers(createObjectType(ts.ObjectFlags.Anonymous, symbol),
            members, callSignatures, constructSignatures, indexInfos);
    }

    function getResolvedTypeWithoutAbstractConstructSignatures(type: ts.ResolvedType) {
        if (type.constructSignatures.length === 0) return type;
        if (type.objectTypeWithoutAbstractConstructSignatures) return type.objectTypeWithoutAbstractConstructSignatures;
        const constructSignatures = ts.filter(type.constructSignatures, signature => !(signature.flags & ts.SignatureFlags.Abstract));
        if (type.constructSignatures === constructSignatures) return type;
        const typeCopy = createAnonymousType(
            type.symbol,
            type.members,
            type.callSignatures,
            ts.some(constructSignatures) ? constructSignatures : ts.emptyArray,
            type.indexInfos);
        type.objectTypeWithoutAbstractConstructSignatures = typeCopy;
        typeCopy.objectTypeWithoutAbstractConstructSignatures = typeCopy;
        return typeCopy;
    }

    function forEachSymbolTableInScope<T>(enclosingDeclaration: ts.Node | undefined, callback: (symbolTable: ts.SymbolTable, ignoreQualification?: boolean, isLocalNameLookup?: boolean, scopeNode?: ts.Node) => T): T {
        let result: T;
        for (let location = enclosingDeclaration; location; location = location.parent) {
            // Locals of a source file are not in scope (because they get merged into the global symbol table)
            if (location.locals && !isGlobalSourceFile(location)) {
                if (result = callback(location.locals, /*ignoreQualification*/ undefined, /*isLocalNameLookup*/ true, location)) {
                    return result;
                }
            }
            switch (location.kind) {
                case ts.SyntaxKind.SourceFile:
                    if (!ts.isExternalOrCommonJsModule(location as ts.SourceFile)) {
                        break;
                    }
                    // falls through
                case ts.SyntaxKind.ModuleDeclaration:
                    const sym = getSymbolOfNode(location as ts.ModuleDeclaration);
                    // `sym` may not have exports if this module declaration is backed by the symbol for a `const` that's being rewritten
                    // into a namespace - in such cases, it's best to just let the namespace appear empty (the const members couldn't have referred
                    // to one another anyway)
                    if (result = callback(sym?.exports || emptySymbols, /*ignoreQualification*/ undefined, /*isLocalNameLookup*/ true, location)) {
                        return result;
                    }
                    break;
                case ts.SyntaxKind.ClassDeclaration:
                case ts.SyntaxKind.ClassExpression:
                case ts.SyntaxKind.InterfaceDeclaration:
                    // Type parameters are bound into `members` lists so they can merge across declarations
                    // This is troublesome, since in all other respects, they behave like locals :cries:
                    // TODO: the below is shared with similar code in `resolveName` - in fact, rephrasing all this symbol
                    // lookup logic in terms of `resolveName` would be nice
                    // The below is used to lookup type parameters within a class or interface, as they are added to the class/interface locals
                    // These can never be latebound, so the symbol's raw members are sufficient. `getMembersOfNode` cannot be used, as it would
                    // trigger resolving late-bound names, which we may already be in the process of doing while we're here!
                    let table: ts.UnderscoreEscapedMap<ts.Symbol> | undefined;
                    // TODO: Should this filtered table be cached in some way?
                    (getSymbolOfNode(location as ts.ClassLikeDeclaration | ts.InterfaceDeclaration).members || emptySymbols).forEach((memberSymbol, key) => {
                        if (memberSymbol.flags & (ts.SymbolFlags.Type & ~ts.SymbolFlags.Assignment)) {
                            (table || (table = ts.createSymbolTable())).set(key, memberSymbol);
                        }
                    });
                    if (table && (result = callback(table, /*ignoreQualification*/ undefined, /*isLocalNameLookup*/ false, location))) {
                        return result;
                    }
                    break;
            }
        }

        return callback(globals, /*ignoreQualification*/ undefined, /*isLocalNameLookup*/ true);
    }

    function getQualifiedLeftMeaning(rightMeaning: ts.SymbolFlags) {
        // If we are looking in value space, the parent meaning is value, other wise it is namespace
        return rightMeaning === ts.SymbolFlags.Value ? ts.SymbolFlags.Value : ts.SymbolFlags.Namespace;
    }

    function getAccessibleSymbolChain(symbol: ts.Symbol | undefined, enclosingDeclaration: ts.Node | undefined, meaning: ts.SymbolFlags, useOnlyExternalAliasing: boolean, visitedSymbolTablesMap: ts.ESMap<ts.SymbolId, ts.SymbolTable[]> = new ts.Map()): ts.Symbol[] | undefined {
        if (!(symbol && !isPropertyOrMethodDeclarationSymbol(symbol))) {
            return undefined;
        }
        const links = getSymbolLinks(symbol);
        const cache = (links.accessibleChainCache ||= new ts.Map());
        // Go from enclosingDeclaration to the first scope we check, so the cache is keyed off the scope and thus shared more
        const firstRelevantLocation = forEachSymbolTableInScope(enclosingDeclaration, (_, __, ___, node) => node);
        const key = `${useOnlyExternalAliasing ? 0 : 1}|${firstRelevantLocation && getNodeId(firstRelevantLocation)}|${meaning}`;
        if (cache.has(key)) {
            return cache.get(key);
        }

        const id = getSymbolId(symbol);
        let visitedSymbolTables = visitedSymbolTablesMap.get(id);
        if (!visitedSymbolTables) {
            visitedSymbolTablesMap.set(id, visitedSymbolTables = []);
        }
        const result = forEachSymbolTableInScope(enclosingDeclaration, getAccessibleSymbolChainFromSymbolTable);
        cache.set(key, result);
        return result;

        /**
         * @param {ignoreQualification} boolean Set when a symbol is being looked for through the exports of another symbol (meaning we have a route to qualify it already)
         */
        function getAccessibleSymbolChainFromSymbolTable(symbols: ts.SymbolTable, ignoreQualification?: boolean, isLocalNameLookup?: boolean): ts.Symbol[] | undefined {
            if (!ts.pushIfUnique(visitedSymbolTables!, symbols)) {
                return undefined;
            }

            const result = trySymbolTable(symbols, ignoreQualification, isLocalNameLookup);
            visitedSymbolTables!.pop();
            return result;
        }

        function canQualifySymbol(symbolFromSymbolTable: ts.Symbol, meaning: ts.SymbolFlags) {
            // If the symbol is equivalent and doesn't need further qualification, this symbol is accessible
            return !needsQualification(symbolFromSymbolTable, enclosingDeclaration, meaning) ||
                // If symbol needs qualification, make sure that parent is accessible, if it is then this symbol is accessible too
                !!getAccessibleSymbolChain(symbolFromSymbolTable.parent, enclosingDeclaration, getQualifiedLeftMeaning(meaning), useOnlyExternalAliasing, visitedSymbolTablesMap);
        }

        function isAccessible(symbolFromSymbolTable: ts.Symbol, resolvedAliasSymbol?: ts.Symbol, ignoreQualification?: boolean) {
            return (symbol === (resolvedAliasSymbol || symbolFromSymbolTable) || getMergedSymbol(symbol) === getMergedSymbol(resolvedAliasSymbol || symbolFromSymbolTable)) &&
                // if the symbolFromSymbolTable is not external module (it could be if it was determined as ambient external module and would be in globals table)
                // and if symbolFromSymbolTable or alias resolution matches the symbol,
                // check the symbol can be qualified, it is only then this symbol is accessible
                !ts.some(symbolFromSymbolTable.declarations, hasNonGlobalAugmentationExternalModuleSymbol) &&
                (ignoreQualification || canQualifySymbol(getMergedSymbol(symbolFromSymbolTable), meaning));
        }

        function trySymbolTable(symbols: ts.SymbolTable, ignoreQualification: boolean | undefined, isLocalNameLookup: boolean | undefined): ts.Symbol[] | undefined {
            // If symbol is directly available by its name in the symbol table
            if (isAccessible(symbols.get(symbol!.escapedName)!, /*resolvedAliasSymbol*/ undefined, ignoreQualification)) {
                return [symbol!];
            }

            // Check if symbol is any of the aliases in scope
            const result = ts.forEachEntry(symbols, symbolFromSymbolTable => {
                if (symbolFromSymbolTable.flags & ts.SymbolFlags.Alias
                    && symbolFromSymbolTable.escapedName !== ts.InternalSymbolName.ExportEquals
                    && symbolFromSymbolTable.escapedName !== ts.InternalSymbolName.Default
                    && !(ts.isUMDExportSymbol(symbolFromSymbolTable) && enclosingDeclaration && ts.isExternalModule(ts.getSourceFileOfNode(enclosingDeclaration)))
                    // If `!useOnlyExternalAliasing`, we can use any type of alias to get the name
                    && (!useOnlyExternalAliasing || ts.some(symbolFromSymbolTable.declarations, ts.isExternalModuleImportEqualsDeclaration))
                    // If we're looking up a local name to reference directly, omit namespace reexports, otherwise when we're trawling through an export list to make a dotted name, we can keep it
                    && (isLocalNameLookup ? !ts.some(symbolFromSymbolTable.declarations, ts.isNamespaceReexportDeclaration) : true)
                    // While exports are generally considered to be in scope, export-specifier declared symbols are _not_
                    // See similar comment in `resolveName` for details
                    && (ignoreQualification || !ts.getDeclarationOfKind(symbolFromSymbolTable, ts.SyntaxKind.ExportSpecifier))
                ) {

                    const resolvedImportedSymbol = resolveAlias(symbolFromSymbolTable);
                    const candidate = getCandidateListForSymbol(symbolFromSymbolTable, resolvedImportedSymbol, ignoreQualification);
                    if (candidate) {
                        return candidate;
                    }
                }
                if (symbolFromSymbolTable.escapedName === symbol!.escapedName && symbolFromSymbolTable.exportSymbol) {
                    if (isAccessible(getMergedSymbol(symbolFromSymbolTable.exportSymbol), /*aliasSymbol*/ undefined, ignoreQualification)) {
                        return [symbol!];
                    }
                }
            });

            // If there's no result and we're looking at the global symbol table, treat `globalThis` like an alias and try to lookup thru that
            return result || (symbols === globals ? getCandidateListForSymbol(globalThisSymbol, globalThisSymbol, ignoreQualification) : undefined);
        }

        function getCandidateListForSymbol(symbolFromSymbolTable: ts.Symbol, resolvedImportedSymbol: ts.Symbol, ignoreQualification: boolean | undefined) {
            if (isAccessible(symbolFromSymbolTable, resolvedImportedSymbol, ignoreQualification)) {
                return [symbolFromSymbolTable];
            }

            // Look in the exported members, if we can find accessibleSymbolChain, symbol is accessible using this chain
            // but only if the symbolFromSymbolTable can be qualified
            const candidateTable = getExportsOfSymbol(resolvedImportedSymbol);
            const accessibleSymbolsFromExports = candidateTable && getAccessibleSymbolChainFromSymbolTable(candidateTable, /*ignoreQualification*/ true);
            if (accessibleSymbolsFromExports && canQualifySymbol(symbolFromSymbolTable, getQualifiedLeftMeaning(meaning))) {
                return [symbolFromSymbolTable].concat(accessibleSymbolsFromExports);
            }
        }
    }

    function needsQualification(symbol: ts.Symbol, enclosingDeclaration: ts.Node | undefined, meaning: ts.SymbolFlags) {
        let qualify = false;
        forEachSymbolTableInScope(enclosingDeclaration, symbolTable => {
            // If symbol of this name is not available in the symbol table we are ok
            let symbolFromSymbolTable = getMergedSymbol(symbolTable.get(symbol.escapedName));
            if (!symbolFromSymbolTable) {
                // Continue to the next symbol table
                return false;
            }
            // If the symbol with this name is present it should refer to the symbol
            if (symbolFromSymbolTable === symbol) {
                // No need to qualify
                return true;
            }

            // Qualify if the symbol from symbol table has same meaning as expected
            const shouldResolveAlias = (symbolFromSymbolTable.flags & ts.SymbolFlags.Alias && !ts.getDeclarationOfKind(symbolFromSymbolTable, ts.SyntaxKind.ExportSpecifier));
            symbolFromSymbolTable = shouldResolveAlias ? resolveAlias(symbolFromSymbolTable) : symbolFromSymbolTable;
            const flags = shouldResolveAlias ? getAllSymbolFlags(symbolFromSymbolTable) : symbolFromSymbolTable.flags;
            if (flags & meaning) {
                qualify = true;
                return true;
            }

            // Continue to the next symbol table
            return false;
        });

        return qualify;
    }

    function isPropertyOrMethodDeclarationSymbol(symbol: ts.Symbol) {
        if (symbol.declarations && symbol.declarations.length) {
            for (const declaration of symbol.declarations) {
                switch (declaration.kind) {
                    case ts.SyntaxKind.PropertyDeclaration:
                    case ts.SyntaxKind.MethodDeclaration:
                    case ts.SyntaxKind.GetAccessor:
                    case ts.SyntaxKind.SetAccessor:
                        continue;
                    default:
                        return false;
                }
            }
            return true;
        }
        return false;
    }

    function isTypeSymbolAccessible(typeSymbol: ts.Symbol, enclosingDeclaration: ts.Node | undefined): boolean {
        const access = isSymbolAccessibleWorker(typeSymbol, enclosingDeclaration, ts.SymbolFlags.Type, /*shouldComputeAliasesToMakeVisible*/ false, /*allowModules*/ true);
        return access.accessibility === ts.SymbolAccessibility.Accessible;
    }

    function isValueSymbolAccessible(typeSymbol: ts.Symbol, enclosingDeclaration: ts.Node | undefined): boolean {
        const access = isSymbolAccessibleWorker(typeSymbol, enclosingDeclaration, ts.SymbolFlags.Value, /*shouldComputeAliasesToMakeVisible*/ false, /*allowModules*/ true);
        return access.accessibility === ts.SymbolAccessibility.Accessible;
    }

    function isSymbolAccessibleByFlags(typeSymbol: ts.Symbol, enclosingDeclaration: ts.Node | undefined, flags: ts.SymbolFlags): boolean {
        const access = isSymbolAccessibleWorker(typeSymbol, enclosingDeclaration, flags, /*shouldComputeAliasesToMakeVisible*/ false, /*allowModules*/ false);
        return access.accessibility === ts.SymbolAccessibility.Accessible;
    }

    function isAnySymbolAccessible(symbols: ts.Symbol[] | undefined, enclosingDeclaration: ts.Node | undefined, initialSymbol: ts.Symbol, meaning: ts.SymbolFlags, shouldComputeAliasesToMakeVisible: boolean, allowModules: boolean): ts.SymbolAccessibilityResult | undefined {
        if (!ts.length(symbols)) return;

        let hadAccessibleChain: ts.Symbol | undefined;
        let earlyModuleBail = false;
        for (const symbol of symbols!) {
            // Symbol is accessible if it by itself is accessible
            const accessibleSymbolChain = getAccessibleSymbolChain(symbol, enclosingDeclaration, meaning, /*useOnlyExternalAliasing*/ false);
            if (accessibleSymbolChain) {
                hadAccessibleChain = symbol;
                const hasAccessibleDeclarations = hasVisibleDeclarations(accessibleSymbolChain[0], shouldComputeAliasesToMakeVisible);
                if (hasAccessibleDeclarations) {
                    return hasAccessibleDeclarations;
                }
            }
            if (allowModules) {
                if (ts.some(symbol.declarations, hasNonGlobalAugmentationExternalModuleSymbol)) {
                    if (shouldComputeAliasesToMakeVisible) {
                        earlyModuleBail = true;
                        // Generally speaking, we want to use the aliases that already exist to refer to a module, if present
                        // In order to do so, we need to find those aliases in order to retain them in declaration emit; so
                        // if we are in declaration emit, we cannot use the fast path for module visibility until we've exhausted
                        // all other visibility options (in order to capture the possible aliases used to reference the module)
                        continue;
                    }
                    // Any meaning of a module symbol is always accessible via an `import` type
                    return {
                        accessibility: ts.SymbolAccessibility.Accessible
                    };
                }
            }

            // If we haven't got the accessible symbol, it doesn't mean the symbol is actually inaccessible.
            // It could be a qualified symbol and hence verify the path
            // e.g.:
            // module m {
            //     export class c {
            //     }
            // }
            // const x: typeof m.c
            // In the above example when we start with checking if typeof m.c symbol is accessible,
            // we are going to see if c can be accessed in scope directly.
            // But it can't, hence the accessible is going to be undefined, but that doesn't mean m.c is inaccessible
            // It is accessible if the parent m is accessible because then m.c can be accessed through qualification

            const containers = getContainersOfSymbol(symbol, enclosingDeclaration, meaning);
            const parentResult = isAnySymbolAccessible(containers, enclosingDeclaration, initialSymbol, initialSymbol === symbol ? getQualifiedLeftMeaning(meaning) : meaning, shouldComputeAliasesToMakeVisible, allowModules);
            if (parentResult) {
                return parentResult;
            }
        }

        if (earlyModuleBail) {
            return {
                accessibility: ts.SymbolAccessibility.Accessible
            };
        }

        if (hadAccessibleChain) {
            return {
                accessibility: ts.SymbolAccessibility.NotAccessible,
                errorSymbolName: symbolToString(initialSymbol, enclosingDeclaration, meaning),
                errorModuleName: hadAccessibleChain !== initialSymbol ? symbolToString(hadAccessibleChain, enclosingDeclaration, ts.SymbolFlags.Namespace) : undefined,
            };
        }
    }

    /**
     * Check if the given symbol in given enclosing declaration is accessible and mark all associated alias to be visible if requested
     *
     * @param symbol a Symbol to check if accessible
     * @param enclosingDeclaration a Node containing reference to the symbol
     * @param meaning a SymbolFlags to check if such meaning of the symbol is accessible
     * @param shouldComputeAliasToMakeVisible a boolean value to indicate whether to return aliases to be mark visible in case the symbol is accessible
     */
    function isSymbolAccessible(symbol: ts.Symbol | undefined, enclosingDeclaration: ts.Node | undefined, meaning: ts.SymbolFlags, shouldComputeAliasesToMakeVisible: boolean): ts.SymbolAccessibilityResult {
        return isSymbolAccessibleWorker(symbol, enclosingDeclaration, meaning, shouldComputeAliasesToMakeVisible, /*allowModules*/ true);
    }

    function isSymbolAccessibleWorker(symbol: ts.Symbol | undefined, enclosingDeclaration: ts.Node | undefined, meaning: ts.SymbolFlags, shouldComputeAliasesToMakeVisible: boolean, allowModules: boolean): ts.SymbolAccessibilityResult {
        if (symbol && enclosingDeclaration) {
            const result = isAnySymbolAccessible([symbol], enclosingDeclaration, symbol, meaning, shouldComputeAliasesToMakeVisible, allowModules);
            if (result) {
                return result;
            }

            // This could be a symbol that is not exported in the external module
            // or it could be a symbol from different external module that is not aliased and hence cannot be named
            const symbolExternalModule = ts.forEach(symbol.declarations, getExternalModuleContainer);
            if (symbolExternalModule) {
                const enclosingExternalModule = getExternalModuleContainer(enclosingDeclaration);
                if (symbolExternalModule !== enclosingExternalModule) {
                    // name from different external module that is not visible
                    return {
                        accessibility: ts.SymbolAccessibility.CannotBeNamed,
                        errorSymbolName: symbolToString(symbol, enclosingDeclaration, meaning),
                        errorModuleName: symbolToString(symbolExternalModule),
                        errorNode: ts.isInJSFile(enclosingDeclaration) ? enclosingDeclaration : undefined,
                    };
                }
            }

            // Just a local name that is not accessible
            return {
                accessibility: ts.SymbolAccessibility.NotAccessible,
                errorSymbolName: symbolToString(symbol, enclosingDeclaration, meaning),
            };
        }

        return { accessibility: ts.SymbolAccessibility.Accessible };
    }

    function getExternalModuleContainer(declaration: ts.Node) {
        const node = ts.findAncestor(declaration, hasExternalModuleSymbol);
        return node && getSymbolOfNode(node);
    }

    function hasExternalModuleSymbol(declaration: ts.Node) {
        return ts.isAmbientModule(declaration) || (declaration.kind === ts.SyntaxKind.SourceFile && ts.isExternalOrCommonJsModule(declaration as ts.SourceFile));
    }

    function hasNonGlobalAugmentationExternalModuleSymbol(declaration: ts.Node) {
        return ts.isModuleWithStringLiteralName(declaration) || (declaration.kind === ts.SyntaxKind.SourceFile && ts.isExternalOrCommonJsModule(declaration as ts.SourceFile));
    }

    function hasVisibleDeclarations(symbol: ts.Symbol, shouldComputeAliasToMakeVisible: boolean): ts.SymbolVisibilityResult | undefined {
        let aliasesToMakeVisible: ts.LateVisibilityPaintedStatement[] | undefined;
        if (!ts.every(ts.filter(symbol.declarations, d => d.kind !== ts.SyntaxKind.Identifier), getIsDeclarationVisible)) {
            return undefined;
        }
        return { accessibility: ts.SymbolAccessibility.Accessible, aliasesToMakeVisible };

        function getIsDeclarationVisible(declaration: ts.Declaration) {
            if (!isDeclarationVisible(declaration)) {
                // Mark the unexported alias as visible if its parent is visible
                // because these kind of aliases can be used to name types in declaration file

                const anyImportSyntax = getAnyImportSyntax(declaration);
                if (anyImportSyntax &&
                    !ts.hasSyntacticModifier(anyImportSyntax, ts.ModifierFlags.Export) && // import clause without export
                    isDeclarationVisible(anyImportSyntax.parent)) {
                    return addVisibleAlias(declaration, anyImportSyntax);
                }
                else if (ts.isVariableDeclaration(declaration) && ts.isVariableStatement(declaration.parent.parent) &&
                    !ts.hasSyntacticModifier(declaration.parent.parent, ts.ModifierFlags.Export) && // unexported variable statement
                    isDeclarationVisible(declaration.parent.parent.parent)) {
                    return addVisibleAlias(declaration, declaration.parent.parent);
                }
                else if (ts.isLateVisibilityPaintedStatement(declaration) // unexported top-level statement
                    && !ts.hasSyntacticModifier(declaration, ts.ModifierFlags.Export)
                    && isDeclarationVisible(declaration.parent)) {
                    return addVisibleAlias(declaration, declaration);
                }
                else if (ts.isBindingElement(declaration)) {
                    if (symbol.flags & ts.SymbolFlags.Alias && ts.isInJSFile(declaration) && declaration.parent?.parent // exported import-like top-level JS require statement
                        && ts.isVariableDeclaration(declaration.parent.parent)
                        && declaration.parent.parent.parent?.parent && ts.isVariableStatement(declaration.parent.parent.parent.parent)
                        && !ts.hasSyntacticModifier(declaration.parent.parent.parent.parent, ts.ModifierFlags.Export)
                        && declaration.parent.parent.parent.parent.parent // check if the thing containing the variable statement is visible (ie, the file)
                        && isDeclarationVisible(declaration.parent.parent.parent.parent.parent)) {
                        return addVisibleAlias(declaration, declaration.parent.parent.parent.parent);
                    }
                    else if (symbol.flags & ts.SymbolFlags.BlockScopedVariable) {
                        const variableStatement = ts.findAncestor(declaration, ts.isVariableStatement)!;
                        if (ts.hasSyntacticModifier(variableStatement, ts.ModifierFlags.Export)) {
                            return true;
                        }
                        if (!isDeclarationVisible(variableStatement.parent)) {
                            return false;
                        }
                        return addVisibleAlias(declaration, variableStatement);
                    }
                }

                // Declaration is not visible
                return false;
            }

            return true;
        }

        function addVisibleAlias(declaration: ts.Declaration, aliasingStatement: ts.LateVisibilityPaintedStatement) {
            // In function "buildTypeDisplay" where we decide whether to write type-alias or serialize types,
            // we want to just check if type- alias is accessible or not but we don't care about emitting those alias at that time
            // since we will do the emitting later in trackSymbol.
            if (shouldComputeAliasToMakeVisible) {
                getNodeLinks(declaration).isVisible = true;
                aliasesToMakeVisible = ts.appendIfUnique(aliasesToMakeVisible, aliasingStatement);
            }
            return true;
        }
    }

    function isEntityNameVisible(entityName: ts.EntityNameOrEntityNameExpression, enclosingDeclaration: ts.Node): ts.SymbolVisibilityResult {
        // get symbol of the first identifier of the entityName
        let meaning: ts.SymbolFlags;
        if (entityName.parent.kind === ts.SyntaxKind.TypeQuery ||
            entityName.parent.kind === ts.SyntaxKind.ExpressionWithTypeArguments && !ts.isPartOfTypeNode(entityName.parent) ||
            entityName.parent.kind === ts.SyntaxKind.ComputedPropertyName) {
            // Typeof value
            meaning = ts.SymbolFlags.Value | ts.SymbolFlags.ExportValue;
        }
        else if (entityName.kind === ts.SyntaxKind.QualifiedName || entityName.kind === ts.SyntaxKind.PropertyAccessExpression ||
            entityName.parent.kind === ts.SyntaxKind.ImportEqualsDeclaration) {
            // Left identifier from type reference or TypeAlias
            // Entity name of the import declaration
            meaning = ts.SymbolFlags.Namespace;
        }
        else {
            // Type Reference or TypeAlias entity = Identifier
            meaning = ts.SymbolFlags.Type;
        }

        const firstIdentifier = ts.getFirstIdentifier(entityName);
        const symbol = resolveName(enclosingDeclaration, firstIdentifier.escapedText, meaning, /*nodeNotFoundErrorMessage*/ undefined, /*nameArg*/ undefined, /*isUse*/ false);
        if (symbol && symbol.flags & ts.SymbolFlags.TypeParameter && meaning & ts.SymbolFlags.Type) {
            return { accessibility: ts.SymbolAccessibility.Accessible };
        }
        if (!symbol && ts.isThisIdentifier(firstIdentifier) && isSymbolAccessible(getSymbolOfNode(ts.getThisContainer(firstIdentifier, /*includeArrowFunctions*/ false)), firstIdentifier, meaning, /*computeAliases*/ false).accessibility === ts.SymbolAccessibility.Accessible) {
            return { accessibility: ts.SymbolAccessibility.Accessible };
        }

        // Verify if the symbol is accessible
        return (symbol && hasVisibleDeclarations(symbol, /*shouldComputeAliasToMakeVisible*/ true)) || {
            accessibility: ts.SymbolAccessibility.NotAccessible,
            errorSymbolName: ts.getTextOfNode(firstIdentifier),
            errorNode: firstIdentifier
        };
    }

    function symbolToString(symbol: ts.Symbol, enclosingDeclaration?: ts.Node, meaning?: ts.SymbolFlags, flags: ts.SymbolFormatFlags = ts.SymbolFormatFlags.AllowAnyNodeKind, writer?: ts.EmitTextWriter): string {
        let nodeFlags = ts.NodeBuilderFlags.IgnoreErrors;
        if (flags & ts.SymbolFormatFlags.UseOnlyExternalAliasing) {
            nodeFlags |= ts.NodeBuilderFlags.UseOnlyExternalAliasing;
        }
        if (flags & ts.SymbolFormatFlags.WriteTypeParametersOrArguments) {
            nodeFlags |= ts.NodeBuilderFlags.WriteTypeParametersInQualifiedName;
        }
        if (flags & ts.SymbolFormatFlags.UseAliasDefinedOutsideCurrentScope) {
            nodeFlags |= ts.NodeBuilderFlags.UseAliasDefinedOutsideCurrentScope;
        }
        if (flags & ts.SymbolFormatFlags.DoNotIncludeSymbolChain) {
            nodeFlags |= ts.NodeBuilderFlags.DoNotIncludeSymbolChain;
        }
        if (flags & ts.SymbolFormatFlags.WriteComputedProps) {
            nodeFlags |= ts.NodeBuilderFlags.WriteComputedProps;
        }
        const builder = flags & ts.SymbolFormatFlags.AllowAnyNodeKind ? nodeBuilder.symbolToNode : nodeBuilder.symbolToEntityName;
        return writer ? symbolToStringWorker(writer).getText() : ts.usingSingleLineStringWriter(symbolToStringWorker);

        function symbolToStringWorker(writer: ts.EmitTextWriter) {
            const entity = builder(symbol, meaning!, enclosingDeclaration, nodeFlags)!; // TODO: GH#18217
            // add neverAsciiEscape for GH#39027
            const printer = enclosingDeclaration?.kind === ts.SyntaxKind.SourceFile ? ts.createPrinter({ removeComments: true, neverAsciiEscape: true }) : ts.createPrinter({ removeComments: true });
            const sourceFile = enclosingDeclaration && ts.getSourceFileOfNode(enclosingDeclaration);
            printer.writeNode(ts.EmitHint.Unspecified, entity, /*sourceFile*/ sourceFile, writer);
            return writer;
        }
    }

    function signatureToString(signature: ts.Signature, enclosingDeclaration?: ts.Node, flags = ts.TypeFormatFlags.None, kind?: ts.SignatureKind, writer?: ts.EmitTextWriter): string {
        return writer ? signatureToStringWorker(writer).getText() : ts.usingSingleLineStringWriter(signatureToStringWorker);

        function signatureToStringWorker(writer: ts.EmitTextWriter) {
            let sigOutput: ts.SyntaxKind;
            if (flags & ts.TypeFormatFlags.WriteArrowStyleSignature) {
                sigOutput = kind === ts.SignatureKind.Construct ? ts.SyntaxKind.ConstructorType : ts.SyntaxKind.FunctionType;
            }
            else {
                sigOutput = kind === ts.SignatureKind.Construct ? ts.SyntaxKind.ConstructSignature : ts.SyntaxKind.CallSignature;
            }
            const sig = nodeBuilder.signatureToSignatureDeclaration(signature, sigOutput, enclosingDeclaration, toNodeBuilderFlags(flags) | ts.NodeBuilderFlags.IgnoreErrors | ts.NodeBuilderFlags.WriteTypeParametersInQualifiedName);
            const printer = ts.createPrinter({ removeComments: true, omitTrailingSemicolon: true });
            const sourceFile = enclosingDeclaration && ts.getSourceFileOfNode(enclosingDeclaration);
            printer.writeNode(ts.EmitHint.Unspecified, sig!, /*sourceFile*/ sourceFile, ts.getTrailingSemicolonDeferringWriter(writer)); // TODO: GH#18217
            return writer;
        }
    }

    function typeToString(type: ts.Type, enclosingDeclaration?: ts.Node, flags: ts.TypeFormatFlags = ts.TypeFormatFlags.AllowUniqueESSymbolType | ts.TypeFormatFlags.UseAliasDefinedOutsideCurrentScope, writer: ts.EmitTextWriter = ts.createTextWriter("")): string {
        const noTruncation = compilerOptions.noErrorTruncation || flags & ts.TypeFormatFlags.NoTruncation;
        const typeNode = nodeBuilder.typeToTypeNode(type, enclosingDeclaration, toNodeBuilderFlags(flags) | ts.NodeBuilderFlags.IgnoreErrors | (noTruncation ? ts.NodeBuilderFlags.NoTruncation : 0), writer);
        if (typeNode === undefined) return ts.Debug.fail("should always get typenode");
        // The unresolved type gets a synthesized comment on `any` to hint to users that it's not a plain `any`.
        // Otherwise, we always strip comments out.
        const options = { removeComments: type !== unresolvedType };
        const printer = ts.createPrinter(options);
        const sourceFile = enclosingDeclaration && ts.getSourceFileOfNode(enclosingDeclaration);
        printer.writeNode(ts.EmitHint.Unspecified, typeNode, /*sourceFile*/ sourceFile, writer);
        const result = writer.getText();

        const maxLength = noTruncation ? ts.noTruncationMaximumTruncationLength * 2 : ts.defaultMaximumTruncationLength * 2;
        if (maxLength && result && result.length >= maxLength) {
            return result.substr(0, maxLength - "...".length) + "...";
        }
        return result;
    }

    function getTypeNamesForErrorDisplay(left: ts.Type, right: ts.Type): [string, string] {
        let leftStr = symbolValueDeclarationIsContextSensitive(left.symbol) ? typeToString(left, left.symbol.valueDeclaration) : typeToString(left);
        let rightStr = symbolValueDeclarationIsContextSensitive(right.symbol) ? typeToString(right, right.symbol.valueDeclaration) : typeToString(right);
        if (leftStr === rightStr) {
            leftStr = getTypeNameForErrorDisplay(left);
            rightStr = getTypeNameForErrorDisplay(right);
        }
        return [leftStr, rightStr];
    }

    function getTypeNameForErrorDisplay(type: ts.Type) {
        return typeToString(type, /*enclosingDeclaration*/ undefined, ts.TypeFormatFlags.UseFullyQualifiedType);
    }

    function symbolValueDeclarationIsContextSensitive(symbol: ts.Symbol): boolean {
        return symbol && !!symbol.valueDeclaration && ts.isExpression(symbol.valueDeclaration) && !isContextSensitive(symbol.valueDeclaration);
    }

    function toNodeBuilderFlags(flags = ts.TypeFormatFlags.None): ts.NodeBuilderFlags {
        return flags & ts.TypeFormatFlags.NodeBuilderFlagsMask;
    }

    function isClassInstanceSide(type: ts.Type) {
        return !!type.symbol && !!(type.symbol.flags & ts.SymbolFlags.Class) && (type === getDeclaredTypeOfClassOrInterface(type.symbol) || (!!(type.flags & ts.TypeFlags.Object) && !!(ts.getObjectFlags(type) & ts.ObjectFlags.IsClassInstanceClone)));
    }

    function createNodeBuilder() {
        return {
            typeToTypeNode: (type: ts.Type, enclosingDeclaration?: ts.Node, flags?: ts.NodeBuilderFlags, tracker?: ts.SymbolTracker) =>
                withContext(enclosingDeclaration, flags, tracker, context => typeToTypeNodeHelper(type, context)),
            indexInfoToIndexSignatureDeclaration: (indexInfo: ts.IndexInfo, enclosingDeclaration?: ts.Node, flags?: ts.NodeBuilderFlags, tracker?: ts.SymbolTracker) =>
                withContext(enclosingDeclaration, flags, tracker, context => indexInfoToIndexSignatureDeclarationHelper(indexInfo, context, /*typeNode*/ undefined)),
            signatureToSignatureDeclaration: (signature: ts.Signature, kind: ts.SignatureDeclaration["kind"], enclosingDeclaration?: ts.Node, flags?: ts.NodeBuilderFlags, tracker?: ts.SymbolTracker) =>
                withContext(enclosingDeclaration, flags, tracker, context => signatureToSignatureDeclarationHelper(signature, kind, context)),
            symbolToEntityName: (symbol: ts.Symbol, meaning: ts.SymbolFlags, enclosingDeclaration?: ts.Node, flags?: ts.NodeBuilderFlags, tracker?: ts.SymbolTracker) =>
                withContext(enclosingDeclaration, flags, tracker, context => symbolToName(symbol, context, meaning, /*expectsIdentifier*/ false)),
            symbolToExpression: (symbol: ts.Symbol, meaning: ts.SymbolFlags, enclosingDeclaration?: ts.Node, flags?: ts.NodeBuilderFlags, tracker?: ts.SymbolTracker) =>
                withContext(enclosingDeclaration, flags, tracker, context => symbolToExpression(symbol, context, meaning)),
            symbolToTypeParameterDeclarations: (symbol: ts.Symbol, enclosingDeclaration?: ts.Node, flags?: ts.NodeBuilderFlags, tracker?: ts.SymbolTracker) =>
                withContext(enclosingDeclaration, flags, tracker, context => typeParametersToTypeParameterDeclarations(symbol, context)),
            symbolToParameterDeclaration: (symbol: ts.Symbol, enclosingDeclaration?: ts.Node, flags?: ts.NodeBuilderFlags, tracker?: ts.SymbolTracker) =>
                withContext(enclosingDeclaration, flags, tracker, context => symbolToParameterDeclaration(symbol, context)),
            typeParameterToDeclaration: (parameter: ts.TypeParameter, enclosingDeclaration?: ts.Node, flags?: ts.NodeBuilderFlags, tracker?: ts.SymbolTracker) =>
                withContext(enclosingDeclaration, flags, tracker, context => typeParameterToDeclaration(parameter, context)),
            symbolTableToDeclarationStatements: (symbolTable: ts.SymbolTable, enclosingDeclaration?: ts.Node, flags?: ts.NodeBuilderFlags, tracker?: ts.SymbolTracker, bundled?: boolean) =>
                withContext(enclosingDeclaration, flags, tracker, context => symbolTableToDeclarationStatements(symbolTable, context, bundled)),
            symbolToNode: (symbol: ts.Symbol, meaning: ts.SymbolFlags, enclosingDeclaration?: ts.Node, flags?: ts.NodeBuilderFlags, tracker?: ts.SymbolTracker) =>
                withContext(enclosingDeclaration, flags, tracker, context => symbolToNode(symbol, context, meaning)),
        };

        function symbolToNode(symbol: ts.Symbol, context: NodeBuilderContext, meaning: ts.SymbolFlags) {
            if (context.flags & ts.NodeBuilderFlags.WriteComputedProps) {
                if (symbol.valueDeclaration) {
                    const name = ts.getNameOfDeclaration(symbol.valueDeclaration);
                    if (name && ts.isComputedPropertyName(name)) return name;
                }
                const nameType = getSymbolLinks(symbol).nameType;
                if (nameType && nameType.flags & (ts.TypeFlags.EnumLiteral | ts.TypeFlags.UniqueESSymbol)) {
                   context.enclosingDeclaration = nameType.symbol.valueDeclaration;
                   return ts.factory.createComputedPropertyName(symbolToExpression(nameType.symbol, context, meaning));
                }
            }
            return symbolToExpression(symbol, context, meaning);
        }

        function withContext<T>(enclosingDeclaration: ts.Node | undefined, flags: ts.NodeBuilderFlags | undefined, tracker: ts.SymbolTracker | undefined, cb: (context: NodeBuilderContext) => T): T | undefined {
            ts.Debug.assert(enclosingDeclaration === undefined || (enclosingDeclaration.flags & ts.NodeFlags.Synthesized) === 0);
            const context: NodeBuilderContext = {
                enclosingDeclaration,
                flags: flags || ts.NodeBuilderFlags.None,
                // If no full tracker is provided, fake up a dummy one with a basic limited-functionality moduleResolverHost
                tracker: tracker && tracker.trackSymbol ? tracker : { trackSymbol: () => false, moduleResolverHost: flags! & ts.NodeBuilderFlags.DoNotIncludeSymbolChain ? {
                    getCommonSourceDirectory: !!(host as ts.Program).getCommonSourceDirectory ? () => (host as ts.Program).getCommonSourceDirectory() : () => "",
                    getCurrentDirectory: () => host.getCurrentDirectory(),
                    getSymlinkCache: ts.maybeBind(host, host.getSymlinkCache),
                    getPackageJsonInfoCache: () => host.getPackageJsonInfoCache?.(),
                    useCaseSensitiveFileNames: ts.maybeBind(host, host.useCaseSensitiveFileNames),
                    redirectTargetsMap: host.redirectTargetsMap,
                    getProjectReferenceRedirect: fileName => host.getProjectReferenceRedirect(fileName),
                    isSourceOfProjectReferenceRedirect: fileName => host.isSourceOfProjectReferenceRedirect(fileName),
                    fileExists: fileName => host.fileExists(fileName),
                    getFileIncludeReasons: () => host.getFileIncludeReasons(),
                    readFile: host.readFile ? (fileName => host.readFile!(fileName)) : undefined,
                } : undefined },
                encounteredError: false,
                reportedDiagnostic: false,
                visitedTypes: undefined,
                symbolDepth: undefined,
                inferTypeParameters: undefined,
                approximateLength: 0
            };
            context.tracker = wrapSymbolTrackerToReportForContext(context, context.tracker);
            const resultingNode = cb(context);
            if (context.truncating && context.flags & ts.NodeBuilderFlags.NoTruncation) {
                context.tracker?.reportTruncationError?.();
            }
            return context.encounteredError ? undefined : resultingNode;
        }

        function wrapSymbolTrackerToReportForContext(context: NodeBuilderContext, tracker: ts.SymbolTracker): ts.SymbolTracker {
            const oldTrackSymbol = tracker.trackSymbol;
            return {
                ...tracker,
                reportCyclicStructureError: wrapReportedDiagnostic(tracker.reportCyclicStructureError),
                reportInaccessibleThisError: wrapReportedDiagnostic(tracker.reportInaccessibleThisError),
                reportInaccessibleUniqueSymbolError: wrapReportedDiagnostic(tracker.reportInaccessibleUniqueSymbolError),
                reportLikelyUnsafeImportRequiredError: wrapReportedDiagnostic(tracker.reportLikelyUnsafeImportRequiredError),
                reportNonlocalAugmentation: wrapReportedDiagnostic(tracker.reportNonlocalAugmentation),
                reportPrivateInBaseOfClassExpression: wrapReportedDiagnostic(tracker.reportPrivateInBaseOfClassExpression),
                reportNonSerializableProperty: wrapReportedDiagnostic(tracker.reportNonSerializableProperty),
                trackSymbol: oldTrackSymbol && ((...args) => {
                    const result = oldTrackSymbol(...args);
                    if (result) {
                        context.reportedDiagnostic = true;
                    }
                    return result;
                }),
            };

            function wrapReportedDiagnostic<T extends (...args: any[]) => any>(method: T | undefined): T | undefined {
                if (!method) {
                    return method;
                }
                return (((...args) => {
                    context.reportedDiagnostic = true;
                    return method(...args);
                }) as T);
            }
        }

        function checkTruncationLength(context: NodeBuilderContext): boolean {
            if (context.truncating) return context.truncating;
            return context.truncating = context.approximateLength > ((context.flags & ts.NodeBuilderFlags.NoTruncation) ? ts.noTruncationMaximumTruncationLength : ts.defaultMaximumTruncationLength);
        }

        function typeToTypeNodeHelper(type: ts.Type, context: NodeBuilderContext): ts.TypeNode {
            const savedFlags = context.flags;
            const typeNode = typeToTypeNodeWorker(type, context);
            context.flags = savedFlags;
            return typeNode;
        }

        function typeToTypeNodeWorker(type: ts.Type, context: NodeBuilderContext): ts.TypeNode {
            if (cancellationToken && cancellationToken.throwIfCancellationRequested) {
                cancellationToken.throwIfCancellationRequested();
            }
            const inTypeAlias = context.flags & ts.NodeBuilderFlags.InTypeAlias;
            context.flags &= ~ts.NodeBuilderFlags.InTypeAlias;

            if (!type) {
                if (!(context.flags & ts.NodeBuilderFlags.AllowEmptyUnionOrIntersection)) {
                    context.encounteredError = true;
                    return undefined!; // TODO: GH#18217
                }
                context.approximateLength += 3;
                return ts.factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword);
            }

            if (!(context.flags & ts.NodeBuilderFlags.NoTypeReduction)) {
                type = getReducedType(type);
            }

            if (type.flags & ts.TypeFlags.Any) {
                if (type.aliasSymbol) {
                    return ts.factory.createTypeReferenceNode(symbolToEntityNameNode(type.aliasSymbol), mapToTypeNodes(type.aliasTypeArguments, context));
                }
                if (type === unresolvedType) {
                    return ts.addSyntheticLeadingComment(ts.factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword), ts.SyntaxKind.MultiLineCommentTrivia, "unresolved");
                }
                context.approximateLength += 3;
                return ts.factory.createKeywordTypeNode(type === intrinsicMarkerType ? ts.SyntaxKind.IntrinsicKeyword : ts.SyntaxKind.AnyKeyword);
            }
            if (type.flags & ts.TypeFlags.Unknown) {
                return ts.factory.createKeywordTypeNode(ts.SyntaxKind.UnknownKeyword);
            }
            if (type.flags & ts.TypeFlags.String) {
                context.approximateLength += 6;
                return ts.factory.createKeywordTypeNode(ts.SyntaxKind.StringKeyword);
            }
            if (type.flags & ts.TypeFlags.Number) {
                context.approximateLength += 6;
                return ts.factory.createKeywordTypeNode(ts.SyntaxKind.NumberKeyword);
            }
            if (type.flags & ts.TypeFlags.BigInt) {
                context.approximateLength += 6;
                return ts.factory.createKeywordTypeNode(ts.SyntaxKind.BigIntKeyword);
            }
            if (type.flags & ts.TypeFlags.Boolean && !type.aliasSymbol) {
                context.approximateLength += 7;
                return ts.factory.createKeywordTypeNode(ts.SyntaxKind.BooleanKeyword);
            }
            if (type.flags & ts.TypeFlags.EnumLike) {
                if (type.symbol.flags & ts.SymbolFlags.EnumMember) {
                    const parentSymbol = getParentOfSymbol(type.symbol)!;
                    const parentName = symbolToTypeNode(parentSymbol, context, ts.SymbolFlags.Type);
                    if (getDeclaredTypeOfSymbol(parentSymbol) === type) {
                        return parentName;
                    }
                    const memberName = ts.symbolName(type.symbol);
                    if (ts.isIdentifierText(memberName, ts.ScriptTarget.ES3)) {
                        return appendReferenceToType(
                            parentName as ts.TypeReferenceNode | ts.ImportTypeNode,
                            ts.factory.createTypeReferenceNode(memberName, /*typeArguments*/ undefined)
                        );
                    }
                    if (ts.isImportTypeNode(parentName)) {
                        (parentName as any).isTypeOf = true; // mutably update, node is freshly manufactured anyhow
                        return ts.factory.createIndexedAccessTypeNode(parentName, ts.factory.createLiteralTypeNode(ts.factory.createStringLiteral(memberName)));
                    }
                    else if (ts.isTypeReferenceNode(parentName)) {
                        return ts.factory.createIndexedAccessTypeNode(ts.factory.createTypeQueryNode(parentName.typeName), ts.factory.createLiteralTypeNode(ts.factory.createStringLiteral(memberName)));
                    }
                    else {
                        return ts.Debug.fail("Unhandled type node kind returned from `symbolToTypeNode`.");
                    }
                }
                return symbolToTypeNode(type.symbol, context, ts.SymbolFlags.Type);
            }
            if (type.flags & ts.TypeFlags.StringLiteral) {
                context.approximateLength += ((type as ts.StringLiteralType).value.length + 2);
                return ts.factory.createLiteralTypeNode(ts.setEmitFlags(ts.factory.createStringLiteral((type as ts.StringLiteralType).value, !!(context.flags & ts.NodeBuilderFlags.UseSingleQuotesForStringLiteralType)), ts.EmitFlags.NoAsciiEscaping));
            }
            if (type.flags & ts.TypeFlags.NumberLiteral) {
                const value = (type as ts.NumberLiteralType).value;
                context.approximateLength += ("" + value).length;
                return ts.factory.createLiteralTypeNode(value < 0 ? ts.factory.createPrefixUnaryExpression(ts.SyntaxKind.MinusToken, ts.factory.createNumericLiteral(-value)) : ts.factory.createNumericLiteral(value));
            }
            if (type.flags & ts.TypeFlags.BigIntLiteral) {
                context.approximateLength += (ts.pseudoBigIntToString((type as ts.BigIntLiteralType).value).length) + 1;
                return ts.factory.createLiteralTypeNode((ts.factory.createBigIntLiteral((type as ts.BigIntLiteralType).value)));
            }
            if (type.flags & ts.TypeFlags.BooleanLiteral) {
                context.approximateLength += (type as ts.IntrinsicType).intrinsicName.length;
                return ts.factory.createLiteralTypeNode((type as ts.IntrinsicType).intrinsicName === "true" ? ts.factory.createTrue() : ts.factory.createFalse());
            }
            if (type.flags & ts.TypeFlags.UniqueESSymbol) {
                if (!(context.flags & ts.NodeBuilderFlags.AllowUniqueESSymbolType)) {
                    if (isValueSymbolAccessible(type.symbol, context.enclosingDeclaration)) {
                        context.approximateLength += 6;
                        return symbolToTypeNode(type.symbol, context, ts.SymbolFlags.Value);
                    }
                    if (context.tracker.reportInaccessibleUniqueSymbolError) {
                        context.tracker.reportInaccessibleUniqueSymbolError();
                    }
                }
                context.approximateLength += 13;
                return ts.factory.createTypeOperatorNode(ts.SyntaxKind.UniqueKeyword, ts.factory.createKeywordTypeNode(ts.SyntaxKind.SymbolKeyword));
            }
            if (type.flags & ts.TypeFlags.Void) {
                context.approximateLength += 4;
                return ts.factory.createKeywordTypeNode(ts.SyntaxKind.VoidKeyword);
            }
            if (type.flags & ts.TypeFlags.Undefined) {
                context.approximateLength += 9;
                return ts.factory.createKeywordTypeNode(ts.SyntaxKind.UndefinedKeyword);
            }
            if (type.flags & ts.TypeFlags.Null) {
                context.approximateLength += 4;
                return ts.factory.createLiteralTypeNode(ts.factory.createNull());
            }
            if (type.flags & ts.TypeFlags.Never) {
                context.approximateLength += 5;
                return ts.factory.createKeywordTypeNode(ts.SyntaxKind.NeverKeyword);
            }
            if (type.flags & ts.TypeFlags.ESSymbol) {
                context.approximateLength += 6;
                return ts.factory.createKeywordTypeNode(ts.SyntaxKind.SymbolKeyword);
            }
            if (type.flags & ts.TypeFlags.NonPrimitive) {
                context.approximateLength += 6;
                return ts.factory.createKeywordTypeNode(ts.SyntaxKind.ObjectKeyword);
            }
            if (ts.isThisTypeParameter(type)) {
                if (context.flags & ts.NodeBuilderFlags.InObjectTypeLiteral) {
                    if (!context.encounteredError && !(context.flags & ts.NodeBuilderFlags.AllowThisInObjectLiteral)) {
                        context.encounteredError = true;
                    }
                    if (context.tracker.reportInaccessibleThisError) {
                        context.tracker.reportInaccessibleThisError();
                    }
                }
                context.approximateLength += 4;
                return ts.factory.createThisTypeNode();
            }

            if (!inTypeAlias && type.aliasSymbol && (context.flags & ts.NodeBuilderFlags.UseAliasDefinedOutsideCurrentScope || isTypeSymbolAccessible(type.aliasSymbol, context.enclosingDeclaration))) {
                const typeArgumentNodes = mapToTypeNodes(type.aliasTypeArguments, context);
                if (isReservedMemberName(type.aliasSymbol.escapedName) && !(type.aliasSymbol.flags & ts.SymbolFlags.Class)) return ts.factory.createTypeReferenceNode(ts.factory.createIdentifier(""), typeArgumentNodes);
                if (ts.length(typeArgumentNodes) === 1 && type.aliasSymbol === globalArrayType.symbol) {
                    return ts.factory.createArrayTypeNode(typeArgumentNodes![0]);
                }
                return symbolToTypeNode(type.aliasSymbol, context, ts.SymbolFlags.Type, typeArgumentNodes);
            }

            const objectFlags = ts.getObjectFlags(type);

            if (objectFlags & ts.ObjectFlags.Reference) {
                ts.Debug.assert(!!(type.flags & ts.TypeFlags.Object));
                return (type as ts.TypeReference).node ? visitAndTransformType(type, typeReferenceToTypeNode) : typeReferenceToTypeNode(type as ts.TypeReference);
            }
            if (type.flags & ts.TypeFlags.TypeParameter || objectFlags & ts.ObjectFlags.ClassOrInterface) {
                if (type.flags & ts.TypeFlags.TypeParameter && ts.contains(context.inferTypeParameters, type)) {
                    context.approximateLength += (ts.symbolName(type.symbol).length + 6);
                    let constraintNode: ts.TypeNode | undefined;
                    const constraint = getConstraintOfTypeParameter(type as ts.TypeParameter);
                    if (constraint) {
                        // If the infer type has a constraint that is not the same as the constraint
                        // we would have normally inferred based on context, we emit the constraint
                        // using `infer T extends ?`. We omit inferred constraints from type references
                        // as they may be elided.
                        const inferredConstraint = getInferredTypeParameterConstraint(type as ts.TypeParameter, /*omitTypeReferences*/ true);
                        if (!(inferredConstraint && isTypeIdenticalTo(constraint, inferredConstraint))) {
                            context.approximateLength += 9;
                            constraintNode = constraint && typeToTypeNodeHelper(constraint, context);
                        }
                    }
                    return ts.factory.createInferTypeNode(typeParameterToDeclarationWithConstraint(type as ts.TypeParameter, context, constraintNode));
                }
                if (context.flags & ts.NodeBuilderFlags.GenerateNamesForShadowedTypeParams &&
                    type.flags & ts.TypeFlags.TypeParameter &&
                    !isTypeSymbolAccessible(type.symbol, context.enclosingDeclaration)) {
                    const name = typeParameterToName(type, context);
                    context.approximateLength += ts.idText(name).length;
                    return ts.factory.createTypeReferenceNode(ts.factory.createIdentifier(ts.idText(name)), /*typeArguments*/ undefined);
                }
                // Ignore constraint/default when creating a usage (as opposed to declaration) of a type parameter.
                if (type.symbol) {
                    return symbolToTypeNode(type.symbol, context, ts.SymbolFlags.Type);
                }
                const name = (type === markerSuperTypeForCheck || type === markerSubTypeForCheck) && varianceTypeParameter && varianceTypeParameter.symbol ?
                    (type === markerSubTypeForCheck ? "sub-" : "super-") + ts.symbolName(varianceTypeParameter.symbol) : "?";
                return ts.factory.createTypeReferenceNode(ts.factory.createIdentifier(name), /*typeArguments*/ undefined);
            }
            if (type.flags & ts.TypeFlags.Union && (type as ts.UnionType).origin) {
                type = (type as ts.UnionType).origin!;
            }
            if (type.flags & (ts.TypeFlags.Union | ts.TypeFlags.Intersection)) {
                const types = type.flags & ts.TypeFlags.Union ? formatUnionTypes((type as ts.UnionType).types) : (type as ts.IntersectionType).types;
                if (ts.length(types) === 1) {
                    return typeToTypeNodeHelper(types[0], context);
                }
                const typeNodes = mapToTypeNodes(types, context, /*isBareList*/ true);
                if (typeNodes && typeNodes.length > 0) {
                    return type.flags & ts.TypeFlags.Union ? ts.factory.createUnionTypeNode(typeNodes) : ts.factory.createIntersectionTypeNode(typeNodes);
                }
                else {
                    if (!context.encounteredError && !(context.flags & ts.NodeBuilderFlags.AllowEmptyUnionOrIntersection)) {
                        context.encounteredError = true;
                    }
                    return undefined!; // TODO: GH#18217
                }
            }
            if (objectFlags & (ts.ObjectFlags.Anonymous | ts.ObjectFlags.Mapped)) {
                ts.Debug.assert(!!(type.flags & ts.TypeFlags.Object));
                // The type is an object literal type.
                return createAnonymousTypeNode(type as ts.ObjectType);
            }
            if (type.flags & ts.TypeFlags.Index) {
                const indexedType = (type as ts.IndexType).type;
                context.approximateLength += 6;
                const indexTypeNode = typeToTypeNodeHelper(indexedType, context);
                return ts.factory.createTypeOperatorNode(ts.SyntaxKind.KeyOfKeyword, indexTypeNode);
            }
            if (type.flags & ts.TypeFlags.TemplateLiteral) {
                const texts = (type as ts.TemplateLiteralType).texts;
                const types = (type as ts.TemplateLiteralType).types;
                const templateHead = ts.factory.createTemplateHead(texts[0]);
                const templateSpans = ts.factory.createNodeArray(
                    ts.map(types, (t, i) => ts.factory.createTemplateLiteralTypeSpan(
                        typeToTypeNodeHelper(t, context),
                        (i < types.length - 1 ? ts.factory.createTemplateMiddle : ts.factory.createTemplateTail)(texts[i + 1]))));
                context.approximateLength += 2;
                return ts.factory.createTemplateLiteralType(templateHead, templateSpans);
            }
            if (type.flags & ts.TypeFlags.StringMapping) {
                const typeNode = typeToTypeNodeHelper((type as ts.StringMappingType).type, context);
                return symbolToTypeNode((type as ts.StringMappingType).symbol, context, ts.SymbolFlags.Type, [typeNode]);
            }
            if (type.flags & ts.TypeFlags.IndexedAccess) {
                const objectTypeNode = typeToTypeNodeHelper((type as ts.IndexedAccessType).objectType, context);
                const indexTypeNode = typeToTypeNodeHelper((type as ts.IndexedAccessType).indexType, context);
                context.approximateLength += 2;
                return ts.factory.createIndexedAccessTypeNode(objectTypeNode, indexTypeNode);
            }
            if (type.flags & ts.TypeFlags.Conditional) {
                return visitAndTransformType(type, type => conditionalTypeToTypeNode(type as ts.ConditionalType));
            }
            if (type.flags & ts.TypeFlags.Substitution) {
                return typeToTypeNodeHelper((type as ts.SubstitutionType).baseType, context);
            }

            return ts.Debug.fail("Should be unreachable.");


            function conditionalTypeToTypeNode(type: ts.ConditionalType) {
                const checkTypeNode = typeToTypeNodeHelper(type.checkType, context);
                context.approximateLength += 15;
                if (context.flags & ts.NodeBuilderFlags.GenerateNamesForShadowedTypeParams && type.root.isDistributive && !(type.checkType.flags & ts.TypeFlags.TypeParameter)) {
                    const newParam = createTypeParameter(createSymbol(ts.SymbolFlags.TypeParameter, "T" as ts.__String));
                    const name = typeParameterToName(newParam, context);
                    const newTypeVariable = ts.factory.createTypeReferenceNode(name);
                    context.approximateLength += 37; // 15 each for two added conditionals, 7 for an added infer type
                    const newMapper = prependTypeMapping(type.root.checkType, newParam, type.mapper);
                    const saveInferTypeParameters = context.inferTypeParameters;
                    context.inferTypeParameters = type.root.inferTypeParameters;
                    const extendsTypeNode = typeToTypeNodeHelper(instantiateType(type.root.extendsType, newMapper), context);
                    context.inferTypeParameters = saveInferTypeParameters;
                    const trueTypeNode = typeToTypeNodeOrCircularityElision(instantiateType(getTypeFromTypeNode(type.root.node.trueType), newMapper));
                    const falseTypeNode = typeToTypeNodeOrCircularityElision(instantiateType(getTypeFromTypeNode(type.root.node.falseType), newMapper));


                    // outermost conditional makes `T` a type parameter, allowing the inner conditionals to be distributive
                    // second conditional makes `T` have `T & checkType` substitution, so it is correctly usable as the checkType
                    // inner conditional runs the check the user provided on the check type (distributively) and returns the result
                    // checkType extends infer T ? T extends checkType ? T extends extendsType<T> ? trueType<T> : falseType<T> : never : never;
                    // this is potentially simplifiable to
                    // checkType extends infer T ? T extends checkType & extendsType<T> ? trueType<T> : falseType<T> : never;
                    // but that may confuse users who read the output more.
                    // On the other hand,
                    // checkType extends infer T extends checkType ? T extends extendsType<T> ? trueType<T> : falseType<T> : never;
                    // may also work with `infer ... extends ...` in, but would produce declarations only compatible with the latest TS.
                    return ts.factory.createConditionalTypeNode(
                        checkTypeNode,
                        ts.factory.createInferTypeNode(ts.factory.createTypeParameterDeclaration(/*modifiers*/ undefined, ts.factory.cloneNode(newTypeVariable.typeName) as ts.Identifier)),
                        ts.factory.createConditionalTypeNode(
                            ts.factory.createTypeReferenceNode(ts.factory.cloneNode(name)),
                            typeToTypeNodeHelper(type.checkType, context),
                            ts.factory.createConditionalTypeNode(newTypeVariable, extendsTypeNode, trueTypeNode, falseTypeNode),
                            ts.factory.createKeywordTypeNode(ts.SyntaxKind.NeverKeyword)
                        ),
                        ts.factory.createKeywordTypeNode(ts.SyntaxKind.NeverKeyword)
                    );
                }
                const saveInferTypeParameters = context.inferTypeParameters;
                context.inferTypeParameters = type.root.inferTypeParameters;
                const extendsTypeNode = typeToTypeNodeHelper(type.extendsType, context);
                context.inferTypeParameters = saveInferTypeParameters;
                const trueTypeNode = typeToTypeNodeOrCircularityElision(getTrueTypeFromConditionalType(type));
                const falseTypeNode = typeToTypeNodeOrCircularityElision(getFalseTypeFromConditionalType(type));
                return ts.factory.createConditionalTypeNode(checkTypeNode, extendsTypeNode, trueTypeNode, falseTypeNode);
            }

            function typeToTypeNodeOrCircularityElision(type: ts.Type) {
                if (type.flags & ts.TypeFlags.Union) {
                    if (context.visitedTypes?.has(getTypeId(type))) {
                        if (!(context.flags & ts.NodeBuilderFlags.AllowAnonymousIdentifier)) {
                            context.encounteredError = true;
                            context.tracker?.reportCyclicStructureError?.();
                        }
                        return createElidedInformationPlaceholder(context);
                    }
                    return visitAndTransformType(type, type => typeToTypeNodeHelper(type, context));
                }
                return typeToTypeNodeHelper(type, context);
            }

            function isHomomorphicMappedTypeWithNonHomomorphicInstantiation(type: ts.MappedType) {
                return isMappedTypeWithKeyofConstraintDeclaration(type)
                    && !(getModifiersTypeFromMappedType(type).flags & ts.TypeFlags.TypeParameter);
            }

            function createMappedTypeNodeFromType(type: ts.MappedType) {
                ts.Debug.assert(!!(type.flags & ts.TypeFlags.Object));
                const readonlyToken = type.declaration.readonlyToken ? ts.factory.createToken(type.declaration.readonlyToken.kind) as ts.ReadonlyKeyword | ts.PlusToken | ts.MinusToken : undefined;
                const questionToken = type.declaration.questionToken ? ts.factory.createToken(type.declaration.questionToken.kind) as ts.QuestionToken | ts.PlusToken | ts.MinusToken : undefined;
                let appropriateConstraintTypeNode: ts.TypeNode;
                let newTypeVariable: ts.TypeReferenceNode | undefined;
                if (isMappedTypeWithKeyofConstraintDeclaration(type)) {
                    // We have a { [P in keyof T]: X }
                    // We do this to ensure we retain the toplevel keyof-ness of the type which may be lost due to keyof distribution during `getConstraintTypeFromMappedType`
                    if (isHomomorphicMappedTypeWithNonHomomorphicInstantiation(type) && context.flags & ts.NodeBuilderFlags.GenerateNamesForShadowedTypeParams) {
                        const newParam = createTypeParameter(createSymbol(ts.SymbolFlags.TypeParameter, "T" as ts.__String));
                        const name = typeParameterToName(newParam, context);
                        newTypeVariable = ts.factory.createTypeReferenceNode(name);
                    }
                    appropriateConstraintTypeNode = ts.factory.createTypeOperatorNode(ts.SyntaxKind.KeyOfKeyword, newTypeVariable || typeToTypeNodeHelper(getModifiersTypeFromMappedType(type), context));
                }
                else {
                    appropriateConstraintTypeNode = typeToTypeNodeHelper(getConstraintTypeFromMappedType(type), context);
                }
                const typeParameterNode = typeParameterToDeclarationWithConstraint(getTypeParameterFromMappedType(type), context, appropriateConstraintTypeNode);
                const nameTypeNode = type.declaration.nameType ? typeToTypeNodeHelper(getNameTypeFromMappedType(type)!, context) : undefined;
                const templateTypeNode = typeToTypeNodeHelper(removeMissingType(getTemplateTypeFromMappedType(type), !!(getMappedTypeModifiers(type) & MappedTypeModifiers.IncludeOptional)), context);
                const mappedTypeNode = ts.factory.createMappedTypeNode(readonlyToken, typeParameterNode, nameTypeNode, questionToken, templateTypeNode, /*members*/ undefined);
                context.approximateLength += 10;
                const result = ts.setEmitFlags(mappedTypeNode, ts.EmitFlags.SingleLine);
                if (isHomomorphicMappedTypeWithNonHomomorphicInstantiation(type) && context.flags & ts.NodeBuilderFlags.GenerateNamesForShadowedTypeParams) {
                    // homomorphic mapped type with a non-homomorphic naive inlining
                    // wrap it with a conditional like `SomeModifiersType extends infer U ? {..the mapped type...} : never` to ensure the resulting
                    // type stays homomorphic
                    const originalConstraint = instantiateType(getConstraintOfTypeParameter(getTypeFromTypeNode((type.declaration.typeParameter.constraint! as ts.TypeOperatorNode).type) as ts.TypeParameter) || unknownType, type.mapper);
                    return ts.factory.createConditionalTypeNode(
                        typeToTypeNodeHelper(getModifiersTypeFromMappedType(type), context),
                        ts.factory.createInferTypeNode(ts.factory.createTypeParameterDeclaration(/*modifiers*/ undefined, ts.factory.cloneNode(newTypeVariable!.typeName) as ts.Identifier, originalConstraint.flags & ts.TypeFlags.Unknown ? undefined : typeToTypeNodeHelper(originalConstraint, context))),
                        result,
                        ts.factory.createKeywordTypeNode(ts.SyntaxKind.NeverKeyword)
                    );
                }
                return result;
            }

            function createAnonymousTypeNode(type: ts.ObjectType): ts.TypeNode {
                const typeId = type.id;
                const symbol = type.symbol;
                if (symbol) {
                    const isInstanceType = isClassInstanceSide(type) ? ts.SymbolFlags.Type : ts.SymbolFlags.Value;
                    if (isJSConstructor(symbol.valueDeclaration)) {
                        // Instance and static types share the same symbol; only add 'typeof' for the static side.
                        return symbolToTypeNode(symbol, context, isInstanceType);
                    }
                    // Always use 'typeof T' for type of class, enum, and module objects
                    else if (symbol.flags & ts.SymbolFlags.Class
                        && !getBaseTypeVariableOfClass(symbol)
                        && !(symbol.valueDeclaration && ts.isClassLike(symbol.valueDeclaration) && context.flags & ts.NodeBuilderFlags.WriteClassExpressionAsTypeLiteral && (!ts.isClassDeclaration(symbol.valueDeclaration) || isSymbolAccessible(symbol, context.enclosingDeclaration, isInstanceType, /*computeAliases*/ false).accessibility !== ts.SymbolAccessibility.Accessible)) ||
                        symbol.flags & (ts.SymbolFlags.Enum | ts.SymbolFlags.ValueModule) ||
                        shouldWriteTypeOfFunctionSymbol()) {
                        return symbolToTypeNode(symbol, context, isInstanceType);
                    }
                    else if (context.visitedTypes?.has(typeId)) {
                        // If type is an anonymous type literal in a type alias declaration, use type alias name
                        const typeAlias = getTypeAliasForTypeLiteral(type);
                        if (typeAlias) {
                            // The specified symbol flags need to be reinterpreted as type flags
                            return symbolToTypeNode(typeAlias, context, ts.SymbolFlags.Type);
                        }
                        else {
                            return createElidedInformationPlaceholder(context);
                        }
                    }
                    else {
                        return visitAndTransformType(type, createTypeNodeFromObjectType);
                    }
                }
                else {
                    // Anonymous types without a symbol are never circular.
                    return createTypeNodeFromObjectType(type);
                }
                function shouldWriteTypeOfFunctionSymbol() {
                    const isStaticMethodSymbol = !!(symbol.flags & ts.SymbolFlags.Method) &&  // typeof static method
                        ts.some(symbol.declarations, declaration => ts.isStatic(declaration));
                    const isNonLocalFunctionSymbol = !!(symbol.flags & ts.SymbolFlags.Function) &&
                        (symbol.parent || // is exported function symbol
                            ts.forEach(symbol.declarations, declaration =>
                                declaration.parent.kind === ts.SyntaxKind.SourceFile || declaration.parent.kind === ts.SyntaxKind.ModuleBlock));
                    if (isStaticMethodSymbol || isNonLocalFunctionSymbol) {
                        // typeof is allowed only for static/non local functions
                        return (!!(context.flags & ts.NodeBuilderFlags.UseTypeOfFunction) || (context.visitedTypes?.has(typeId))) && // it is type of the symbol uses itself recursively
                            (!(context.flags & ts.NodeBuilderFlags.UseStructuralFallback) || isValueSymbolAccessible(symbol, context.enclosingDeclaration)); // And the build is going to succeed without visibility error or there is no structural fallback allowed
                    }
                }
            }

            function visitAndTransformType<T extends ts.TypeNode>(type: ts.Type, transform: (type: ts.Type) => T) {
                const typeId = type.id;
                const isConstructorObject = ts.getObjectFlags(type) & ts.ObjectFlags.Anonymous && type.symbol && type.symbol.flags & ts.SymbolFlags.Class;
                const id = ts.getObjectFlags(type) & ts.ObjectFlags.Reference && (type as ts.TypeReference).node ? "N" + getNodeId((type as ts.TypeReference).node!) :
                    type.flags & ts.TypeFlags.Conditional ? "N" + getNodeId((type as ts.ConditionalType).root.node) :
                    type.symbol ? (isConstructorObject ? "+" : "") + getSymbolId(type.symbol) :
                    undefined;
                // Since instantiations of the same anonymous type have the same symbol, tracking symbols instead
                // of types allows us to catch circular references to instantiations of the same anonymous type
                if (!context.visitedTypes) {
                    context.visitedTypes = new ts.Set();
                }
                if (id && !context.symbolDepth) {
                    context.symbolDepth = new ts.Map();
                }

                const links = context.enclosingDeclaration && getNodeLinks(context.enclosingDeclaration);
                const key = `${getTypeId(type)}|${context.flags}`;
                if (links) {
                    links.serializedTypes ||= new ts.Map();
                }
                const cachedResult = links?.serializedTypes?.get(key);
                if (cachedResult) {
                    if (cachedResult.truncating) {
                        context.truncating = true;
                    }
                    context.approximateLength += cachedResult.addedLength;
                    return deepCloneOrReuseNode(cachedResult) as ts.TypeNode as T;
                }

                let depth: number | undefined;
                if (id) {
                    depth = context.symbolDepth!.get(id) || 0;
                    if (depth > 10) {
                        return createElidedInformationPlaceholder(context);
                    }
                    context.symbolDepth!.set(id, depth + 1);
                }
                context.visitedTypes.add(typeId);
                const startLength = context.approximateLength;
                const result = transform(type);
                const addedLength = context.approximateLength - startLength;
                if (!context.reportedDiagnostic && !context.encounteredError) {
                    if (context.truncating) {
                        (result as any).truncating = true;
                    }
                    (result as any).addedLength = addedLength;
                    links?.serializedTypes?.set(key, result as ts.TypeNode as ts.TypeNode & {truncating?: boolean, addedLength: number});
                }
                context.visitedTypes.delete(typeId);
                if (id) {
                    context.symbolDepth!.set(id, depth!);
                }
                return result;

                function deepCloneOrReuseNode(node: ts.Node): ts.Node {
                    if (!ts.nodeIsSynthesized(node) && ts.getParseTreeNode(node) === node) {
                        return node;
                    }
                    return ts.setTextRange(ts.factory.cloneNode(ts.visitEachChild(node, deepCloneOrReuseNode, ts.nullTransformationContext, deepCloneOrReuseNodes)), node);
                }

                function deepCloneOrReuseNodes<T extends ts.Node>(nodes: ts.NodeArray<T>, visitor: ts.Visitor | undefined, test?: (node: ts.Node) => boolean, start?: number, count?: number): ts.NodeArray<T>;
                function deepCloneOrReuseNodes<T extends ts.Node>(nodes: ts.NodeArray<T> | undefined, visitor: ts.Visitor | undefined, test?: (node: ts.Node) => boolean, start?: number, count?: number): ts.NodeArray<T> | undefined;
                function deepCloneOrReuseNodes<T extends ts.Node>(nodes: ts.NodeArray<T> | undefined, visitor: ts.Visitor | undefined, test?: (node: ts.Node) => boolean, start?: number, count?: number): ts.NodeArray<T> | undefined {
                    if (nodes && nodes.length === 0) {
                        // Ensure we explicitly make a copy of an empty array; visitNodes will not do this unless the array has elements,
                        // which can lead to us reusing the same empty NodeArray more than once within the same AST during type noding.
                        return ts.setTextRange(ts.factory.createNodeArray<T>(/*nodes*/ undefined, nodes.hasTrailingComma), nodes);
                    }
                    return ts.visitNodes(nodes, visitor, test, start, count);
                }
            }

            function createTypeNodeFromObjectType(type: ts.ObjectType): ts.TypeNode {
                if (isGenericMappedType(type) || (type as ts.MappedType).containsError) {
                    return createMappedTypeNodeFromType(type as ts.MappedType);
                }

                const resolved = resolveStructuredTypeMembers(type);
                if (!resolved.properties.length && !resolved.indexInfos.length) {
                    if (!resolved.callSignatures.length && !resolved.constructSignatures.length) {
                        context.approximateLength += 2;
                        return ts.setEmitFlags(ts.factory.createTypeLiteralNode(/*members*/ undefined), ts.EmitFlags.SingleLine);
                    }

                    if (resolved.callSignatures.length === 1 && !resolved.constructSignatures.length) {
                        const signature = resolved.callSignatures[0];
                        const signatureNode = signatureToSignatureDeclarationHelper(signature, ts.SyntaxKind.FunctionType, context) as ts.FunctionTypeNode;
                        return signatureNode;

                    }

                    if (resolved.constructSignatures.length === 1 && !resolved.callSignatures.length) {
                        const signature = resolved.constructSignatures[0];
                        const signatureNode = signatureToSignatureDeclarationHelper(signature, ts.SyntaxKind.ConstructorType, context) as ts.ConstructorTypeNode;
                        return signatureNode;
                    }
                }

                const abstractSignatures = ts.filter(resolved.constructSignatures, signature => !!(signature.flags & ts.SignatureFlags.Abstract));
                if (ts.some(abstractSignatures)) {
                    const types = ts.map(abstractSignatures, getOrCreateTypeFromSignature);
                    // count the number of type elements excluding abstract constructors
                    const typeElementCount =
                        resolved.callSignatures.length +
                        (resolved.constructSignatures.length - abstractSignatures.length) +
                        resolved.indexInfos.length +
                        // exclude `prototype` when writing a class expression as a type literal, as per
                        // the logic in `createTypeNodesFromResolvedType`.
                        (context.flags & ts.NodeBuilderFlags.WriteClassExpressionAsTypeLiteral ?
                            ts.countWhere(resolved.properties, p => !(p.flags & ts.SymbolFlags.Prototype)) :
                            ts.length(resolved.properties));
                    // don't include an empty object literal if there were no other static-side
                    // properties to write, i.e. `abstract class C { }` becomes `abstract new () => {}`
                    // and not `(abstract new () => {}) & {}`
                    if (typeElementCount) {
                        // create a copy of the object type without any abstract construct signatures.
                        types.push(getResolvedTypeWithoutAbstractConstructSignatures(resolved));
                    }
                    return typeToTypeNodeHelper(getIntersectionType(types), context);
                }

                const savedFlags = context.flags;
                context.flags |= ts.NodeBuilderFlags.InObjectTypeLiteral;
                const members = createTypeNodesFromResolvedType(resolved);
                context.flags = savedFlags;
                const typeLiteralNode = ts.factory.createTypeLiteralNode(members);
                context.approximateLength += 2;
                ts.setEmitFlags(typeLiteralNode, (context.flags & ts.NodeBuilderFlags.MultilineObjectLiterals) ? 0 : ts.EmitFlags.SingleLine);
                return typeLiteralNode;
            }

            function typeReferenceToTypeNode(type: ts.TypeReference) {
                let typeArguments: readonly ts.Type[] = getTypeArguments(type);
                if (type.target === globalArrayType || type.target === globalReadonlyArrayType) {
                    if (context.flags & ts.NodeBuilderFlags.WriteArrayAsGenericType) {
                        const typeArgumentNode = typeToTypeNodeHelper(typeArguments[0], context);
                        return ts.factory.createTypeReferenceNode(type.target === globalArrayType ? "Array" : "ReadonlyArray", [typeArgumentNode]);
                    }
                    const elementType = typeToTypeNodeHelper(typeArguments[0], context);
                    const arrayType = ts.factory.createArrayTypeNode(elementType);
                    return type.target === globalArrayType ? arrayType : ts.factory.createTypeOperatorNode(ts.SyntaxKind.ReadonlyKeyword, arrayType);
                }
                else if (type.target.objectFlags & ts.ObjectFlags.Tuple) {
                    typeArguments = ts.sameMap(typeArguments, (t, i) => removeMissingType(t, !!((type.target as ts.TupleType).elementFlags[i] & ts.ElementFlags.Optional)));
                    if (typeArguments.length > 0) {
                        const arity = getTypeReferenceArity(type);
                        const tupleConstituentNodes = mapToTypeNodes(typeArguments.slice(0, arity), context);
                        if (tupleConstituentNodes) {
                            if ((type.target as ts.TupleType).labeledElementDeclarations) {
                                for (let i = 0; i < tupleConstituentNodes.length; i++) {
                                    const flags = (type.target as ts.TupleType).elementFlags[i];
                                    tupleConstituentNodes[i] = ts.factory.createNamedTupleMember(
                                        flags & ts.ElementFlags.Variable ? ts.factory.createToken(ts.SyntaxKind.DotDotDotToken) : undefined,
                                        ts.factory.createIdentifier(ts.unescapeLeadingUnderscores(getTupleElementLabel((type.target as ts.TupleType).labeledElementDeclarations![i]))),
                                        flags & ts.ElementFlags.Optional ? ts.factory.createToken(ts.SyntaxKind.QuestionToken) : undefined,
                                        flags & ts.ElementFlags.Rest ? ts.factory.createArrayTypeNode(tupleConstituentNodes[i]) :
                                        tupleConstituentNodes[i]
                                    );
                                }
                            }
                            else {
                                for (let i = 0; i < Math.min(arity, tupleConstituentNodes.length); i++) {
                                    const flags = (type.target as ts.TupleType).elementFlags[i];
                                    tupleConstituentNodes[i] =
                                        flags & ts.ElementFlags.Variable ? ts.factory.createRestTypeNode(flags & ts.ElementFlags.Rest ? ts.factory.createArrayTypeNode(tupleConstituentNodes[i]) : tupleConstituentNodes[i]) :
                                        flags & ts.ElementFlags.Optional ? ts.factory.createOptionalTypeNode(tupleConstituentNodes[i]) :
                                        tupleConstituentNodes[i];
                                }
                            }
                            const tupleTypeNode = ts.setEmitFlags(ts.factory.createTupleTypeNode(tupleConstituentNodes), ts.EmitFlags.SingleLine);
                            return (type.target as ts.TupleType).readonly ? ts.factory.createTypeOperatorNode(ts.SyntaxKind.ReadonlyKeyword, tupleTypeNode) : tupleTypeNode;
                        }
                    }
                    if (context.encounteredError || (context.flags & ts.NodeBuilderFlags.AllowEmptyTuple)) {
                        const tupleTypeNode = ts.setEmitFlags(ts.factory.createTupleTypeNode([]), ts.EmitFlags.SingleLine);
                        return (type.target as ts.TupleType).readonly ? ts.factory.createTypeOperatorNode(ts.SyntaxKind.ReadonlyKeyword, tupleTypeNode) : tupleTypeNode;
                    }
                    context.encounteredError = true;
                    return undefined!; // TODO: GH#18217
                }
                else if (context.flags & ts.NodeBuilderFlags.WriteClassExpressionAsTypeLiteral &&
                    type.symbol.valueDeclaration &&
                    ts.isClassLike(type.symbol.valueDeclaration) &&
                    !isValueSymbolAccessible(type.symbol, context.enclosingDeclaration)
                ) {
                    return createAnonymousTypeNode(type);
                }
                else {
                    const outerTypeParameters = type.target.outerTypeParameters;
                    let i = 0;
                    let resultType: ts.TypeReferenceNode | ts.ImportTypeNode | undefined;
                    if (outerTypeParameters) {
                        const length = outerTypeParameters.length;
                        while (i < length) {
                            // Find group of type arguments for type parameters with the same declaring container.
                            const start = i;
                            const parent = getParentSymbolOfTypeParameter(outerTypeParameters[i])!;
                            do {
                                i++;
                            } while (i < length && getParentSymbolOfTypeParameter(outerTypeParameters[i]) === parent);
                            // When type parameters are their own type arguments for the whole group (i.e. we have
                            // the default outer type arguments), we don't show the group.
                            if (!ts.rangeEquals(outerTypeParameters, typeArguments, start, i)) {
                                const typeArgumentSlice = mapToTypeNodes(typeArguments.slice(start, i), context);
                                const flags = context.flags;
                                context.flags |= ts.NodeBuilderFlags.ForbidIndexedAccessSymbolReferences;
                                const ref = symbolToTypeNode(parent, context, ts.SymbolFlags.Type, typeArgumentSlice) as ts.TypeReferenceNode | ts.ImportTypeNode;
                                context.flags = flags;
                                resultType = !resultType ? ref : appendReferenceToType(resultType, ref as ts.TypeReferenceNode);
                            }
                        }
                    }
                    let typeArgumentNodes: readonly ts.TypeNode[] | undefined;
                    if (typeArguments.length > 0) {
                        const typeParameterCount = (type.target.typeParameters || ts.emptyArray).length;
                        typeArgumentNodes = mapToTypeNodes(typeArguments.slice(i, typeParameterCount), context);
                    }
                    const flags = context.flags;
                    context.flags |= ts.NodeBuilderFlags.ForbidIndexedAccessSymbolReferences;
                    const finalRef = symbolToTypeNode(type.symbol, context, ts.SymbolFlags.Type, typeArgumentNodes);
                    context.flags = flags;
                    return !resultType ? finalRef : appendReferenceToType(resultType, finalRef as ts.TypeReferenceNode);
                }
            }


            function appendReferenceToType(root: ts.TypeReferenceNode | ts.ImportTypeNode, ref: ts.TypeReferenceNode): ts.TypeReferenceNode | ts.ImportTypeNode {
                if (ts.isImportTypeNode(root)) {
                    // first shift type arguments
                    let typeArguments = root.typeArguments;
                    let qualifier = root.qualifier;
                    if (qualifier) {
                        if (ts.isIdentifier(qualifier)) {
                            qualifier = ts.factory.updateIdentifier(qualifier, typeArguments);
                        }
                        else {
                            qualifier = ts.factory.updateQualifiedName(qualifier,
                                qualifier.left,
                                ts.factory.updateIdentifier(qualifier.right, typeArguments));
                        }
                    }
                    typeArguments = ref.typeArguments;
                    // then move qualifiers
                    const ids = getAccessStack(ref);
                    for (const id of ids) {
                        qualifier = qualifier ? ts.factory.createQualifiedName(qualifier, id) : id;
                    }
                    return ts.factory.updateImportTypeNode(
                        root,
                        root.argument,
                        root.assertions,
                        qualifier,
                        typeArguments,
                        root.isTypeOf);
                }
                else {
                    // first shift type arguments
                    let typeArguments = root.typeArguments;
                    let typeName = root.typeName;
                    if (ts.isIdentifier(typeName)) {
                        typeName = ts.factory.updateIdentifier(typeName, typeArguments);
                    }
                    else {
                        typeName = ts.factory.updateQualifiedName(typeName,
                            typeName.left,
                            ts.factory.updateIdentifier(typeName.right, typeArguments));
                    }
                    typeArguments = ref.typeArguments;
                    // then move qualifiers
                    const ids = getAccessStack(ref);
                    for (const id of ids) {
                        typeName = ts.factory.createQualifiedName(typeName, id);
                    }
                    return ts.factory.updateTypeReferenceNode(
                        root,
                        typeName,
                        typeArguments);
                }
            }

            function getAccessStack(ref: ts.TypeReferenceNode): ts.Identifier[] {
                let state = ref.typeName;
                const ids = [];
                while (!ts.isIdentifier(state)) {
                    ids.unshift(state.right);
                    state = state.left;
                }
                ids.unshift(state);
                return ids;
            }

            function createTypeNodesFromResolvedType(resolvedType: ts.ResolvedType): ts.TypeElement[] | undefined {
                if (checkTruncationLength(context)) {
                    return [ts.factory.createPropertySignature(/*modifiers*/ undefined, "...", /*questionToken*/ undefined, /*type*/ undefined)];
                }
                const typeElements: ts.TypeElement[] = [];
                for (const signature of resolvedType.callSignatures) {
                    typeElements.push(signatureToSignatureDeclarationHelper(signature, ts.SyntaxKind.CallSignature, context) as ts.CallSignatureDeclaration);
                }
                for (const signature of resolvedType.constructSignatures) {
                    if (signature.flags & ts.SignatureFlags.Abstract) continue;
                    typeElements.push(signatureToSignatureDeclarationHelper(signature, ts.SyntaxKind.ConstructSignature, context) as ts.ConstructSignatureDeclaration);
                }
                for (const info of resolvedType.indexInfos) {
                    typeElements.push(indexInfoToIndexSignatureDeclarationHelper(info, context, resolvedType.objectFlags & ts.ObjectFlags.ReverseMapped ? createElidedInformationPlaceholder(context) : undefined));
                }

                const properties = resolvedType.properties;
                if (!properties) {
                    return typeElements;
                }

                let i = 0;
                for (const propertySymbol of properties) {
                    i++;
                    if (context.flags & ts.NodeBuilderFlags.WriteClassExpressionAsTypeLiteral) {
                        if (propertySymbol.flags & ts.SymbolFlags.Prototype) {
                            continue;
                        }
                        if (ts.getDeclarationModifierFlagsFromSymbol(propertySymbol) & (ts.ModifierFlags.Private | ts.ModifierFlags.Protected) && context.tracker.reportPrivateInBaseOfClassExpression) {
                            context.tracker.reportPrivateInBaseOfClassExpression(ts.unescapeLeadingUnderscores(propertySymbol.escapedName));
                        }
                    }
                    if (checkTruncationLength(context) && (i + 2 < properties.length - 1)) {
                        typeElements.push(ts.factory.createPropertySignature(/*modifiers*/ undefined, `... ${properties.length - i} more ...`, /*questionToken*/ undefined, /*type*/ undefined));
                        addPropertyToElementList(properties[properties.length - 1], context, typeElements);
                        break;
                    }
                    addPropertyToElementList(propertySymbol, context, typeElements);

                }
                return typeElements.length ? typeElements : undefined;
            }
        }

        function createElidedInformationPlaceholder(context: NodeBuilderContext) {
            context.approximateLength += 3;
            if (!(context.flags & ts.NodeBuilderFlags.NoTruncation)) {
                return ts.factory.createTypeReferenceNode(ts.factory.createIdentifier("..."), /*typeArguments*/ undefined);
            }
            return ts.factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword);
        }

        function shouldUsePlaceholderForProperty(propertySymbol: ts.Symbol, context: NodeBuilderContext) {
            // Use placeholders for reverse mapped types we've either already descended into, or which
            // are nested reverse mappings within a mapping over a non-anonymous type. The later is a restriction mostly just to
            // reduce the blowup in printback size from doing, eg, a deep reverse mapping over `Window`.
            // Since anonymous types usually come from expressions, this allows us to preserve the output
            // for deep mappings which likely come from expressions, while truncating those parts which
            // come from mappings over library functions.
            return !!(ts.getCheckFlags(propertySymbol) & ts.CheckFlags.ReverseMapped)
                && (
                    ts.contains(context.reverseMappedStack, propertySymbol as ts.ReverseMappedSymbol)
                    || (
                        context.reverseMappedStack?.[0]
                        && !(ts.getObjectFlags(ts.last(context.reverseMappedStack).propertyType) & ts.ObjectFlags.Anonymous)
                    )
                );
        }

        function addPropertyToElementList(propertySymbol: ts.Symbol, context: NodeBuilderContext, typeElements: ts.TypeElement[]) {
            const propertyIsReverseMapped = !!(ts.getCheckFlags(propertySymbol) & ts.CheckFlags.ReverseMapped);
            const propertyType = shouldUsePlaceholderForProperty(propertySymbol, context) ?
                anyType : getNonMissingTypeOfSymbol(propertySymbol);
            const saveEnclosingDeclaration = context.enclosingDeclaration;
            context.enclosingDeclaration = undefined;
            if (context.tracker.trackSymbol && isLateBoundName(propertySymbol.escapedName)) {
                if (propertySymbol.declarations) {
                    const decl = ts.first(propertySymbol.declarations);
                    if (hasLateBindableName(decl)) {
                        if (ts.isBinaryExpression(decl)) {
                            const name = ts.getNameOfDeclaration(decl);
                            if (name && ts.isElementAccessExpression(name) && ts.isPropertyAccessEntityNameExpression(name.argumentExpression)) {
                                trackComputedName(name.argumentExpression, saveEnclosingDeclaration, context);
                            }
                        }
                        else {
                            trackComputedName(decl.name.expression, saveEnclosingDeclaration, context);
                        }
                    }
                }
                else if (context.tracker?.reportNonSerializableProperty) {
                    context.tracker.reportNonSerializableProperty(symbolToString(propertySymbol));
                }
            }
            context.enclosingDeclaration = propertySymbol.valueDeclaration || propertySymbol.declarations?.[0] || saveEnclosingDeclaration;
            const propertyName = getPropertyNameNodeForSymbol(propertySymbol, context);
            context.enclosingDeclaration = saveEnclosingDeclaration;
            context.approximateLength += (ts.symbolName(propertySymbol).length + 1);
            const optionalToken = propertySymbol.flags & ts.SymbolFlags.Optional ? ts.factory.createToken(ts.SyntaxKind.QuestionToken) : undefined;
            if (propertySymbol.flags & (ts.SymbolFlags.Function | ts.SymbolFlags.Method) && !getPropertiesOfObjectType(propertyType).length && !isReadonlySymbol(propertySymbol)) {
                const signatures = getSignaturesOfType(filterType(propertyType, t => !(t.flags & ts.TypeFlags.Undefined)), ts.SignatureKind.Call);
                for (const signature of signatures) {
                    const methodDeclaration = signatureToSignatureDeclarationHelper(signature, ts.SyntaxKind.MethodSignature, context, { name: propertyName, questionToken: optionalToken }) as ts.MethodSignature;
                    typeElements.push(preserveCommentsOn(methodDeclaration));
                }
            }
            else {
                let propertyTypeNode: ts.TypeNode;
                if (shouldUsePlaceholderForProperty(propertySymbol, context)) {
                    propertyTypeNode = createElidedInformationPlaceholder(context);
                }
                else {
                    if (propertyIsReverseMapped) {
                        context.reverseMappedStack ||= [];
                        context.reverseMappedStack.push(propertySymbol as ts.ReverseMappedSymbol);
                    }
                    propertyTypeNode = propertyType ? serializeTypeForDeclaration(context, propertyType, propertySymbol, saveEnclosingDeclaration) : ts.factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword);
                    if (propertyIsReverseMapped) {
                        context.reverseMappedStack!.pop();
                    }
                }

                const modifiers = isReadonlySymbol(propertySymbol) ? [ts.factory.createToken(ts.SyntaxKind.ReadonlyKeyword)] : undefined;
                if (modifiers) {
                    context.approximateLength += 9;
                }
                const propertySignature = ts.factory.createPropertySignature(
                    modifiers,
                    propertyName,
                    optionalToken,
                    propertyTypeNode);

                typeElements.push(preserveCommentsOn(propertySignature));
            }

            function preserveCommentsOn<T extends ts.Node>(node: T) {
                if (ts.some(propertySymbol.declarations, d => d.kind === ts.SyntaxKind.JSDocPropertyTag)) {
                    const d = propertySymbol.declarations?.find(d => d.kind === ts.SyntaxKind.JSDocPropertyTag)! as ts.JSDocPropertyTag;
                    const commentText = ts.getTextOfJSDocComment(d.comment);
                    if (commentText) {
                        ts.setSyntheticLeadingComments(node, [{ kind: ts.SyntaxKind.MultiLineCommentTrivia, text: "*\n * " + commentText.replace(/\n/g, "\n * ") + "\n ", pos: -1, end: -1, hasTrailingNewLine: true }]);
                    }
                }
                else if (propertySymbol.valueDeclaration) {
                    // Copy comments to node for declaration emit
                    ts.setCommentRange(node, propertySymbol.valueDeclaration);
                }
                return node;
            }
        }

        function mapToTypeNodes(types: readonly ts.Type[] | undefined, context: NodeBuilderContext, isBareList?: boolean): ts.TypeNode[] | undefined {
            if (ts.some(types)) {
                if (checkTruncationLength(context)) {
                    if (!isBareList) {
                        return [ts.factory.createTypeReferenceNode("...", /*typeArguments*/ undefined)];
                    }
                    else if (types.length > 2) {
                        return [
                            typeToTypeNodeHelper(types[0], context),
                            ts.factory.createTypeReferenceNode(`... ${types.length - 2} more ...`, /*typeArguments*/ undefined),
                            typeToTypeNodeHelper(types[types.length - 1], context)
                        ];
                    }
                }
                const mayHaveNameCollisions = !(context.flags & ts.NodeBuilderFlags.UseFullyQualifiedType);
                /** Map from type reference identifier text to [type, index in `result` where the type node is] */
                const seenNames = mayHaveNameCollisions ? ts.createUnderscoreEscapedMultiMap<[ts.Type, number]>() : undefined;
                const result: ts.TypeNode[] = [];
                let i = 0;
                for (const type of types) {
                    i++;
                    if (checkTruncationLength(context) && (i + 2 < types.length - 1)) {
                        result.push(ts.factory.createTypeReferenceNode(`... ${types.length - i} more ...`, /*typeArguments*/ undefined));
                        const typeNode = typeToTypeNodeHelper(types[types.length - 1], context);
                        if (typeNode) {
                            result.push(typeNode);
                        }
                        break;
                    }
                    context.approximateLength += 2; // Account for whitespace + separator
                    const typeNode = typeToTypeNodeHelper(type, context);
                    if (typeNode) {
                        result.push(typeNode);
                        if (seenNames && ts.isIdentifierTypeReference(typeNode)) {
                            seenNames.add(typeNode.typeName.escapedText, [type, result.length - 1]);
                        }
                    }
                }

                if (seenNames) {
                    // To avoid printing types like `[Foo, Foo]` or `Bar & Bar` where
                    // occurrences of the same name actually come from different
                    // namespaces, go through the single-identifier type reference nodes
                    // we just generated, and see if any names were generated more than
                    // once while referring to different types. If so, regenerate the
                    // type node for each entry by that name with the
                    // `UseFullyQualifiedType` flag enabled.
                    const saveContextFlags = context.flags;
                    context.flags |= ts.NodeBuilderFlags.UseFullyQualifiedType;
                    seenNames.forEach(types => {
                        if (!ts.arrayIsHomogeneous(types, ([a], [b]) => typesAreSameReference(a, b))) {
                            for (const [type, resultIndex] of types) {
                                result[resultIndex] = typeToTypeNodeHelper(type, context);
                            }
                        }
                    });
                    context.flags = saveContextFlags;
                }

                return result;
            }
        }

        function typesAreSameReference(a: ts.Type, b: ts.Type): boolean {
            return a === b
                || !!a.symbol && a.symbol === b.symbol
                || !!a.aliasSymbol && a.aliasSymbol === b.aliasSymbol;
        }

        function indexInfoToIndexSignatureDeclarationHelper(indexInfo: ts.IndexInfo, context: NodeBuilderContext, typeNode: ts.TypeNode | undefined): ts.IndexSignatureDeclaration {
            const name = ts.getNameFromIndexInfo(indexInfo) || "x";
            const indexerTypeNode = typeToTypeNodeHelper(indexInfo.keyType, context);

            const indexingParameter = ts.factory.createParameterDeclaration(
                /*modifiers*/ undefined,
                /*dotDotDotToken*/ undefined,
                name,
                /*questionToken*/ undefined,
                indexerTypeNode,
                /*initializer*/ undefined);
            if (!typeNode) {
                typeNode = typeToTypeNodeHelper(indexInfo.type || anyType, context);
            }
            if (!indexInfo.type && !(context.flags & ts.NodeBuilderFlags.AllowEmptyIndexInfoType)) {
                context.encounteredError = true;
            }
            context.approximateLength += (name.length + 4);
            return ts.factory.createIndexSignature(
                indexInfo.isReadonly ? [ts.factory.createToken(ts.SyntaxKind.ReadonlyKeyword)] : undefined,
                [indexingParameter],
                typeNode);
        }

        interface SignatureToSignatureDeclarationOptions {
            modifiers?: readonly ts.Modifier[];
            name?: ts.PropertyName;
            questionToken?: ts.QuestionToken;
            privateSymbolVisitor?: (s: ts.Symbol) => void;
            bundledImports?: boolean;
        }

        function signatureToSignatureDeclarationHelper(signature: ts.Signature, kind: ts.SignatureDeclaration["kind"], context: NodeBuilderContext, options?: SignatureToSignatureDeclarationOptions): ts.SignatureDeclaration {
            const suppressAny = context.flags & ts.NodeBuilderFlags.SuppressAnyReturnType;
            if (suppressAny) context.flags &= ~ts.NodeBuilderFlags.SuppressAnyReturnType; // suppress only toplevel `any`s
            context.approximateLength += 3; // Usually a signature contributes a few more characters than this, but 3 is the minimum
            let typeParameters: ts.TypeParameterDeclaration[] | undefined;
            let typeArguments: ts.TypeNode[] | undefined;
            if (context.flags & ts.NodeBuilderFlags.WriteTypeArgumentsOfSignature && signature.target && signature.mapper && signature.target.typeParameters) {
                typeArguments = signature.target.typeParameters.map(parameter => typeToTypeNodeHelper(instantiateType(parameter, signature.mapper), context));
            }
            else {
                typeParameters = signature.typeParameters && signature.typeParameters.map(parameter => typeParameterToDeclaration(parameter, context));
            }

            const expandedParams = getExpandedParameters(signature, /*skipUnionExpanding*/ true)[0];
            // If the expanded parameter list had a variadic in a non-trailing position, don't expand it
            const parameters = (ts.some(expandedParams, p => p !== expandedParams[expandedParams.length - 1] && !!(ts.getCheckFlags(p) & ts.CheckFlags.RestParameter)) ? signature.parameters : expandedParams).map(parameter => symbolToParameterDeclaration(parameter, context, kind === ts.SyntaxKind.Constructor, options?.privateSymbolVisitor, options?.bundledImports));
            const thisParameter = context.flags & ts.NodeBuilderFlags.OmitThisParameter ? undefined : tryGetThisParameterDeclaration(signature, context);
            if (thisParameter) {
                parameters.unshift(thisParameter);
            }

            let returnTypeNode: ts.TypeNode | undefined;
            const typePredicate = getTypePredicateOfSignature(signature);
            if (typePredicate) {
                const assertsModifier = typePredicate.kind === ts.TypePredicateKind.AssertsThis || typePredicate.kind === ts.TypePredicateKind.AssertsIdentifier ?
                    ts.factory.createToken(ts.SyntaxKind.AssertsKeyword) :
                    undefined;
                const parameterName = typePredicate.kind === ts.TypePredicateKind.Identifier || typePredicate.kind === ts.TypePredicateKind.AssertsIdentifier ?
                    ts.setEmitFlags(ts.factory.createIdentifier(typePredicate.parameterName), ts.EmitFlags.NoAsciiEscaping) :
                    ts.factory.createThisTypeNode();
                const typeNode = typePredicate.type && typeToTypeNodeHelper(typePredicate.type, context);
                returnTypeNode = ts.factory.createTypePredicateNode(assertsModifier, parameterName, typeNode);
            }
            else {
                const returnType = getReturnTypeOfSignature(signature);
                if (returnType && !(suppressAny && isTypeAny(returnType))) {
                    returnTypeNode = serializeReturnTypeForSignature(context, returnType, signature, options?.privateSymbolVisitor, options?.bundledImports);
                }
                else if (!suppressAny) {
                    returnTypeNode = ts.factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword);
                }
            }
            let modifiers = options?.modifiers;
            if ((kind === ts.SyntaxKind.ConstructorType) && signature.flags & ts.SignatureFlags.Abstract) {
                const flags = ts.modifiersToFlags(modifiers);
                modifiers = ts.factory.createModifiersFromModifierFlags(flags | ts.ModifierFlags.Abstract);
            }

            const node =
                kind === ts.SyntaxKind.CallSignature ? ts.factory.createCallSignature(typeParameters, parameters, returnTypeNode) :
                kind === ts.SyntaxKind.ConstructSignature ? ts.factory.createConstructSignature(typeParameters, parameters, returnTypeNode) :
                kind === ts.SyntaxKind.MethodSignature ? ts.factory.createMethodSignature(modifiers, options?.name ?? ts.factory.createIdentifier(""), options?.questionToken, typeParameters, parameters, returnTypeNode) :
                kind === ts.SyntaxKind.MethodDeclaration ? ts.factory.createMethodDeclaration(modifiers, /*asteriskToken*/ undefined, options?.name ?? ts.factory.createIdentifier(""), /*questionToken*/ undefined, typeParameters, parameters, returnTypeNode, /*body*/ undefined) :
                kind === ts.SyntaxKind.Constructor ? ts.factory.createConstructorDeclaration(modifiers, parameters, /*body*/ undefined) :
                kind === ts.SyntaxKind.GetAccessor ? ts.factory.createGetAccessorDeclaration(modifiers, options?.name ?? ts.factory.createIdentifier(""), parameters, returnTypeNode, /*body*/ undefined) :
                kind === ts.SyntaxKind.SetAccessor ? ts.factory.createSetAccessorDeclaration(modifiers, options?.name ?? ts.factory.createIdentifier(""), parameters, /*body*/ undefined) :
                kind === ts.SyntaxKind.IndexSignature ? ts.factory.createIndexSignature(modifiers, parameters, returnTypeNode) :
                kind === ts.SyntaxKind.JSDocFunctionType ? ts.factory.createJSDocFunctionType(parameters, returnTypeNode) :
                kind === ts.SyntaxKind.FunctionType ? ts.factory.createFunctionTypeNode(typeParameters, parameters, returnTypeNode ?? ts.factory.createTypeReferenceNode(ts.factory.createIdentifier(""))) :
                kind === ts.SyntaxKind.ConstructorType ? ts.factory.createConstructorTypeNode(modifiers, typeParameters, parameters, returnTypeNode ?? ts.factory.createTypeReferenceNode(ts.factory.createIdentifier(""))) :
                kind === ts.SyntaxKind.FunctionDeclaration ? ts.factory.createFunctionDeclaration(modifiers, /*asteriskToken*/ undefined, options?.name ? ts.cast(options.name, ts.isIdentifier) : ts.factory.createIdentifier(""), typeParameters, parameters, returnTypeNode, /*body*/ undefined) :
                kind === ts.SyntaxKind.FunctionExpression ? ts.factory.createFunctionExpression(modifiers, /*asteriskToken*/ undefined, options?.name ? ts.cast(options.name, ts.isIdentifier) : ts.factory.createIdentifier(""), typeParameters, parameters, returnTypeNode, ts.factory.createBlock([])) :
                kind === ts.SyntaxKind.ArrowFunction ? ts.factory.createArrowFunction(modifiers, typeParameters, parameters, returnTypeNode, /*equalsGreaterThanToken*/ undefined, ts.factory.createBlock([])) :
                ts.Debug.assertNever(kind);

            if (typeArguments) {
                node.typeArguments = ts.factory.createNodeArray(typeArguments);
            }

            return node;
        }

        function tryGetThisParameterDeclaration(signature: ts.Signature, context: NodeBuilderContext) {
            if (signature.thisParameter) {
                return symbolToParameterDeclaration(signature.thisParameter, context);
            }
            if (signature.declaration) {
                const thisTag = ts.getJSDocThisTag(signature.declaration);
                if (thisTag && thisTag.typeExpression) {
                    return ts.factory.createParameterDeclaration(
                        /* modifiers */ undefined,
                        /* dotDotDotToken */ undefined,
                        "this",
                        /* questionToken */ undefined,
                        typeToTypeNodeHelper(getTypeFromTypeNode(thisTag.typeExpression), context)
                    );
                }
            }
        }

        function typeParameterToDeclarationWithConstraint(type: ts.TypeParameter, context: NodeBuilderContext, constraintNode: ts.TypeNode | undefined): ts.TypeParameterDeclaration {
            const savedContextFlags = context.flags;
            context.flags &= ~ts.NodeBuilderFlags.WriteTypeParametersInQualifiedName; // Avoids potential infinite loop when building for a claimspace with a generic
            const modifiers = ts.factory.createModifiersFromModifierFlags(getVarianceModifiers(type));
            const name = typeParameterToName(type, context);
            const defaultParameter = getDefaultFromTypeParameter(type);
            const defaultParameterNode = defaultParameter && typeToTypeNodeHelper(defaultParameter, context);
            context.flags = savedContextFlags;
            return ts.factory.createTypeParameterDeclaration(modifiers, name, constraintNode, defaultParameterNode);
        }

        function typeParameterToDeclaration(type: ts.TypeParameter, context: NodeBuilderContext, constraint = getConstraintOfTypeParameter(type)): ts.TypeParameterDeclaration {
            const constraintNode = constraint && typeToTypeNodeHelper(constraint, context);
            return typeParameterToDeclarationWithConstraint(type, context, constraintNode);
        }

        function symbolToParameterDeclaration(parameterSymbol: ts.Symbol, context: NodeBuilderContext, preserveModifierFlags?: boolean, privateSymbolVisitor?: (s: ts.Symbol) => void, bundledImports?: boolean): ts.ParameterDeclaration {
            let parameterDeclaration: ts.ParameterDeclaration | ts.JSDocParameterTag | undefined = ts.getDeclarationOfKind<ts.ParameterDeclaration>(parameterSymbol, ts.SyntaxKind.Parameter);
            if (!parameterDeclaration && !ts.isTransientSymbol(parameterSymbol)) {
                parameterDeclaration = ts.getDeclarationOfKind<ts.JSDocParameterTag>(parameterSymbol, ts.SyntaxKind.JSDocParameterTag);
            }

            let parameterType = getTypeOfSymbol(parameterSymbol);
            if (parameterDeclaration && isRequiredInitializedParameter(parameterDeclaration)) {
                parameterType = getOptionalType(parameterType);
            }
            const parameterTypeNode = serializeTypeForDeclaration(context, parameterType, parameterSymbol, context.enclosingDeclaration, privateSymbolVisitor, bundledImports);

            const modifiers = !(context.flags & ts.NodeBuilderFlags.OmitParameterModifiers) && preserveModifierFlags && parameterDeclaration && ts.canHaveModifiers(parameterDeclaration) ? ts.map(ts.getModifiers(parameterDeclaration), ts.factory.cloneNode) : undefined;
            const isRest = parameterDeclaration && ts.isRestParameter(parameterDeclaration) || ts.getCheckFlags(parameterSymbol) & ts.CheckFlags.RestParameter;
            const dotDotDotToken = isRest ? ts.factory.createToken(ts.SyntaxKind.DotDotDotToken) : undefined;
            const name = parameterDeclaration ? parameterDeclaration.name ?
                parameterDeclaration.name.kind === ts.SyntaxKind.Identifier ? ts.setEmitFlags(ts.factory.cloneNode(parameterDeclaration.name), ts.EmitFlags.NoAsciiEscaping) :
                parameterDeclaration.name.kind === ts.SyntaxKind.QualifiedName ? ts.setEmitFlags(ts.factory.cloneNode(parameterDeclaration.name.right), ts.EmitFlags.NoAsciiEscaping) :
                cloneBindingName(parameterDeclaration.name) :
                ts.symbolName(parameterSymbol) :
                ts.symbolName(parameterSymbol);
            const isOptional = parameterDeclaration && isOptionalParameter(parameterDeclaration) || ts.getCheckFlags(parameterSymbol) & ts.CheckFlags.OptionalParameter;
            const questionToken = isOptional ? ts.factory.createToken(ts.SyntaxKind.QuestionToken) : undefined;
            const parameterNode = ts.factory.createParameterDeclaration(
                modifiers,
                dotDotDotToken,
                name,
                questionToken,
                parameterTypeNode,
                /*initializer*/ undefined);
            context.approximateLength += ts.symbolName(parameterSymbol).length + 3;
            return parameterNode;

            function cloneBindingName(node: ts.BindingName): ts.BindingName {
                return elideInitializerAndSetEmitFlags(node) as ts.BindingName;
                function elideInitializerAndSetEmitFlags(node: ts.Node): ts.Node {
                    if (context.tracker.trackSymbol && ts.isComputedPropertyName(node) && isLateBindableName(node)) {
                        trackComputedName(node.expression, context.enclosingDeclaration, context);
                    }
                    let visited = ts.visitEachChild(node, elideInitializerAndSetEmitFlags, ts.nullTransformationContext, /*nodesVisitor*/ undefined, elideInitializerAndSetEmitFlags)!;
                    if (ts.isBindingElement(visited)) {
                        visited = ts.factory.updateBindingElement(
                            visited,
                            visited.dotDotDotToken,
                            visited.propertyName,
                            visited.name,
                            /*initializer*/ undefined);
                    }
                    if (!ts.nodeIsSynthesized(visited)) {
                        visited = ts.factory.cloneNode(visited);
                    }
                    return ts.setEmitFlags(visited, ts.EmitFlags.SingleLine | ts.EmitFlags.NoAsciiEscaping);
                }
            }
        }

        function trackComputedName(accessExpression: ts.EntityNameOrEntityNameExpression, enclosingDeclaration: ts.Node | undefined, context: NodeBuilderContext) {
            if (!context.tracker.trackSymbol) return;
            // get symbol of the first identifier of the entityName
            const firstIdentifier = ts.getFirstIdentifier(accessExpression);
            const name = resolveName(firstIdentifier, firstIdentifier.escapedText, ts.SymbolFlags.Value | ts.SymbolFlags.ExportValue, /*nodeNotFoundErrorMessage*/ undefined, /*nameArg*/ undefined, /*isUse*/ true);
            if (name) {
                context.tracker.trackSymbol(name, enclosingDeclaration, ts.SymbolFlags.Value);
            }
        }

        function lookupSymbolChain(symbol: ts.Symbol, context: NodeBuilderContext, meaning: ts.SymbolFlags, yieldModuleSymbol?: boolean) {
            context.tracker.trackSymbol!(symbol, context.enclosingDeclaration, meaning); // TODO: GH#18217
            return lookupSymbolChainWorker(symbol, context, meaning, yieldModuleSymbol);
        }

        function lookupSymbolChainWorker(symbol: ts.Symbol, context: NodeBuilderContext, meaning: ts.SymbolFlags, yieldModuleSymbol?: boolean) {
            // Try to get qualified name if the symbol is not a type parameter and there is an enclosing declaration.
            let chain: ts.Symbol[];
            const isTypeParameter = symbol.flags & ts.SymbolFlags.TypeParameter;
            if (!isTypeParameter && (context.enclosingDeclaration || context.flags & ts.NodeBuilderFlags.UseFullyQualifiedType) && !(context.flags & ts.NodeBuilderFlags.DoNotIncludeSymbolChain)) {
                chain = ts.Debug.checkDefined(getSymbolChain(symbol, meaning, /*endOfChain*/ true));
                ts.Debug.assert(chain && chain.length > 0);
            }
            else {
                chain = [symbol];
            }
            return chain;

            /** @param endOfChain Set to false for recursive calls; non-recursive calls should always output something. */
            function getSymbolChain(symbol: ts.Symbol, meaning: ts.SymbolFlags, endOfChain: boolean): ts.Symbol[] | undefined {
                let accessibleSymbolChain = getAccessibleSymbolChain(symbol, context.enclosingDeclaration, meaning, !!(context.flags & ts.NodeBuilderFlags.UseOnlyExternalAliasing));
                let parentSpecifiers: (string | undefined)[];
                if (!accessibleSymbolChain ||
                    needsQualification(accessibleSymbolChain[0], context.enclosingDeclaration, accessibleSymbolChain.length === 1 ? meaning : getQualifiedLeftMeaning(meaning))) {

                    // Go up and add our parent.
                    const parents = getContainersOfSymbol(accessibleSymbolChain ? accessibleSymbolChain[0] : symbol, context.enclosingDeclaration, meaning);
                    if (ts.length(parents)) {
                        parentSpecifiers = parents!.map(symbol =>
                            ts.some(symbol.declarations, hasNonGlobalAugmentationExternalModuleSymbol)
                                ? getSpecifierForModuleSymbol(symbol, context)
                                : undefined);
                        const indices = parents!.map((_, i) => i);
                        indices.sort(sortByBestName);
                        const sortedParents = indices.map(i => parents![i]);
                        for (const parent of sortedParents) {
                            const parentChain = getSymbolChain(parent, getQualifiedLeftMeaning(meaning), /*endOfChain*/ false);
                            if (parentChain) {
                                if (parent.exports && parent.exports.get(ts.InternalSymbolName.ExportEquals) &&
                                    getSymbolIfSameReference(parent.exports.get(ts.InternalSymbolName.ExportEquals)!, symbol)) {
                                    // parentChain root _is_ symbol - symbol is a module export=, so it kinda looks like it's own parent
                                    // No need to lookup an alias for the symbol in itself
                                    accessibleSymbolChain = parentChain;
                                    break;
                                }
                                accessibleSymbolChain = parentChain.concat(accessibleSymbolChain || [getAliasForSymbolInContainer(parent, symbol) || symbol]);
                                break;
                            }
                        }
                    }
                }

                if (accessibleSymbolChain) {
                    return accessibleSymbolChain;
                }
                if (
                    // If this is the last part of outputting the symbol, always output. The cases apply only to parent symbols.
                    endOfChain ||
                    // If a parent symbol is an anonymous type, don't write it.
                    !(symbol.flags & (ts.SymbolFlags.TypeLiteral | ts.SymbolFlags.ObjectLiteral))) {
                    // If a parent symbol is an external module, don't write it. (We prefer just `x` vs `"foo/bar".x`.)
                    if (!endOfChain && !yieldModuleSymbol && !!ts.forEach(symbol.declarations, hasNonGlobalAugmentationExternalModuleSymbol)) {
                        return;
                    }
                    return [symbol];
                }

                function sortByBestName(a: number, b: number) {
                    const specifierA = parentSpecifiers[a];
                    const specifierB = parentSpecifiers[b];
                    if (specifierA && specifierB) {
                        const isBRelative = ts.pathIsRelative(specifierB);
                        if (ts.pathIsRelative(specifierA) === isBRelative) {
                            // Both relative or both non-relative, sort by number of parts
                            return ts.moduleSpecifiers.countPathComponents(specifierA) - ts.moduleSpecifiers.countPathComponents(specifierB);
                        }
                        if (isBRelative) {
                            // A is non-relative, B is relative: prefer A
                            return -1;
                        }
                        // A is relative, B is non-relative: prefer B
                        return 1;
                    }
                    return 0;
                }
            }
        }

        function typeParametersToTypeParameterDeclarations(symbol: ts.Symbol, context: NodeBuilderContext) {
            let typeParameterNodes: ts.NodeArray<ts.TypeParameterDeclaration> | undefined;
            const targetSymbol = getTargetSymbol(symbol);
            if (targetSymbol.flags & (ts.SymbolFlags.Class | ts.SymbolFlags.Interface | ts.SymbolFlags.TypeAlias)) {
                typeParameterNodes = ts.factory.createNodeArray(ts.map(getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol), tp => typeParameterToDeclaration(tp, context)));
            }
            return typeParameterNodes;
        }

        function lookupTypeParameterNodes(chain: ts.Symbol[], index: number, context: NodeBuilderContext) {
            ts.Debug.assert(chain && 0 <= index && index < chain.length);
            const symbol = chain[index];
            const symbolId = getSymbolId(symbol);
            if (context.typeParameterSymbolList?.has(symbolId)) {
                return undefined;
            }
            (context.typeParameterSymbolList || (context.typeParameterSymbolList = new ts.Set())).add(symbolId);
            let typeParameterNodes: readonly ts.TypeNode[] | readonly ts.TypeParameterDeclaration[] | undefined;
            if (context.flags & ts.NodeBuilderFlags.WriteTypeParametersInQualifiedName && index < (chain.length - 1)) {
                const parentSymbol = symbol;
                const nextSymbol = chain[index + 1];
                if (ts.getCheckFlags(nextSymbol) & ts.CheckFlags.Instantiated) {
                    const params = getTypeParametersOfClassOrInterface(
                        parentSymbol.flags & ts.SymbolFlags.Alias ? resolveAlias(parentSymbol) : parentSymbol
                    );
                    typeParameterNodes = mapToTypeNodes(ts.map(params, t => getMappedType(t, (nextSymbol as ts.TransientSymbol).mapper!)), context);
                }
                else {
                    typeParameterNodes = typeParametersToTypeParameterDeclarations(symbol, context);
                }
            }
            return typeParameterNodes;
        }

        /**
         * Given A[B][C][D], finds A[B]
         */
        function getTopmostIndexedAccessType(top: ts.IndexedAccessTypeNode): ts.IndexedAccessTypeNode {
            if (ts.isIndexedAccessTypeNode(top.objectType)) {
                return getTopmostIndexedAccessType(top.objectType);
            }
            return top;
        }

        function getSpecifierForModuleSymbol(symbol: ts.Symbol, context: NodeBuilderContext, overrideImportMode?: ts.SourceFile["impliedNodeFormat"]) {
            let file = ts.getDeclarationOfKind<ts.SourceFile>(symbol, ts.SyntaxKind.SourceFile);
            if (!file) {
                const equivalentFileSymbol = ts.firstDefined(symbol.declarations, d => getFileSymbolIfFileSymbolExportEqualsContainer(d, symbol));
                if (equivalentFileSymbol) {
                    file = ts.getDeclarationOfKind<ts.SourceFile>(equivalentFileSymbol, ts.SyntaxKind.SourceFile);
                }
            }
            if (file && file.moduleName !== undefined) {
                // Use the amd name if it is available
                return file.moduleName;
            }
            if (!file) {
                if (context.tracker.trackReferencedAmbientModule) {
                    const ambientDecls = ts.filter(symbol.declarations, ts.isAmbientModule);
                    if (ts.length(ambientDecls)) {
                        for (const decl of ambientDecls!) {
                            context.tracker.trackReferencedAmbientModule(decl, symbol);
                        }
                    }
                }
                if (ambientModuleSymbolRegex.test(symbol.escapedName as string)) {
                    return (symbol.escapedName as string).substring(1, (symbol.escapedName as string).length - 1);
                }
            }
            if (!context.enclosingDeclaration || !context.tracker.moduleResolverHost) {
                // If there's no context declaration, we can't lookup a non-ambient specifier, so we just use the symbol name
                if (ambientModuleSymbolRegex.test(symbol.escapedName as string)) {
                    return (symbol.escapedName as string).substring(1, (symbol.escapedName as string).length - 1);
                }
                return ts.getSourceFileOfNode(ts.getNonAugmentationDeclaration(symbol)!).fileName; // A resolver may not be provided for baselines and errors - in those cases we use the fileName in full
            }
            const contextFile = ts.getSourceFileOfNode(ts.getOriginalNode(context.enclosingDeclaration));
            const resolutionMode = overrideImportMode || contextFile?.impliedNodeFormat;
            const cacheKey = getSpecifierCacheKey(contextFile.path, resolutionMode);
            const links = getSymbolLinks(symbol);
            let specifier = links.specifierCache && links.specifierCache.get(cacheKey);
            if (!specifier) {
                const isBundle = !!ts.outFile(compilerOptions);
                // For declaration bundles, we need to generate absolute paths relative to the common source dir for imports,
                // just like how the declaration emitter does for the ambient module declarations - we can easily accomplish this
                // using the `baseUrl` compiler option (which we would otherwise never use in declaration emit) and a non-relative
                // specifier preference
                const { moduleResolverHost } = context.tracker;
                const specifierCompilerOptions = isBundle ? { ...compilerOptions, baseUrl: moduleResolverHost.getCommonSourceDirectory() } : compilerOptions;
                specifier = ts.first(ts.moduleSpecifiers.getModuleSpecifiers(
                    symbol,
                    checker,
                    specifierCompilerOptions,
                    contextFile,
                    moduleResolverHost,
                    {
                        importModuleSpecifierPreference: isBundle ? "non-relative" : "project-relative",
                        importModuleSpecifierEnding: isBundle ? "minimal"
                            : resolutionMode === ts.ModuleKind.ESNext ? "js"
                            : undefined,
                    },
                    { overrideImportMode }
                ));
                links.specifierCache ??= new ts.Map();
                links.specifierCache.set(cacheKey, specifier);
            }
            return specifier;

            function getSpecifierCacheKey(path: string, mode: ts.SourceFile["impliedNodeFormat"] | undefined) {
                return mode === undefined ? path : `${mode}|${path}`;
            }
        }

        function symbolToEntityNameNode(symbol: ts.Symbol): ts.EntityName {
            const identifier = ts.factory.createIdentifier(ts.unescapeLeadingUnderscores(symbol.escapedName));
            return symbol.parent ? ts.factory.createQualifiedName(symbolToEntityNameNode(symbol.parent), identifier) : identifier;
        }

        function symbolToTypeNode(symbol: ts.Symbol, context: NodeBuilderContext, meaning: ts.SymbolFlags, overrideTypeArguments?: readonly ts.TypeNode[]): ts.TypeNode {
            const chain = lookupSymbolChain(symbol, context, meaning, !(context.flags & ts.NodeBuilderFlags.UseAliasDefinedOutsideCurrentScope)); // If we're using aliases outside the current scope, dont bother with the module

            const isTypeOf = meaning === ts.SymbolFlags.Value;
            if (ts.some(chain[0].declarations, hasNonGlobalAugmentationExternalModuleSymbol)) {
                // module is root, must use `ImportTypeNode`
                const nonRootParts = chain.length > 1 ? createAccessFromSymbolChain(chain, chain.length - 1, 1) : undefined;
                const typeParameterNodes = overrideTypeArguments || lookupTypeParameterNodes(chain, 0, context);
                const contextFile = ts.getSourceFileOfNode(ts.getOriginalNode(context.enclosingDeclaration));
                const targetFile = ts.getSourceFileOfModule(chain[0]);
                let specifier: string | undefined;
                let assertion: ts.ImportTypeAssertionContainer | undefined;
                if (ts.getEmitModuleResolutionKind(compilerOptions) === ts.ModuleResolutionKind.Node16 || ts.getEmitModuleResolutionKind(compilerOptions) === ts.ModuleResolutionKind.NodeNext) {
                    // An `import` type directed at an esm format file is only going to resolve in esm mode - set the esm mode assertion
                    if (targetFile?.impliedNodeFormat === ts.ModuleKind.ESNext && targetFile.impliedNodeFormat !== contextFile?.impliedNodeFormat) {
                        specifier = getSpecifierForModuleSymbol(chain[0], context, ts.ModuleKind.ESNext);
                        assertion = ts.factory.createImportTypeAssertionContainer(ts.factory.createAssertClause(ts.factory.createNodeArray([
                            ts.factory.createAssertEntry(
                                ts.factory.createStringLiteral("resolution-mode"),
                                ts.factory.createStringLiteral("import")
                            )
                        ])));
                        context.tracker.reportImportTypeNodeResolutionModeOverride?.();
                    }
                }
                if (!specifier) {
                    specifier = getSpecifierForModuleSymbol(chain[0], context);
                }
                if (!(context.flags & ts.NodeBuilderFlags.AllowNodeModulesRelativePaths) && ts.getEmitModuleResolutionKind(compilerOptions) !== ts.ModuleResolutionKind.Classic && specifier.indexOf("/node_modules/") >= 0) {
                    const oldSpecifier = specifier;
                    if (ts.getEmitModuleResolutionKind(compilerOptions) === ts.ModuleResolutionKind.Node16 || ts.getEmitModuleResolutionKind(compilerOptions) === ts.ModuleResolutionKind.NodeNext) {
                        // We might be able to write a portable import type using a mode override; try specifier generation again, but with a different mode set
                        const swappedMode = contextFile?.impliedNodeFormat === ts.ModuleKind.ESNext ? ts.ModuleKind.CommonJS : ts.ModuleKind.ESNext;
                        specifier = getSpecifierForModuleSymbol(chain[0], context, swappedMode);

                        if (specifier.indexOf("/node_modules/") >= 0) {
                            // Still unreachable :(
                            specifier = oldSpecifier;
                        }
                        else {
                            assertion = ts.factory.createImportTypeAssertionContainer(ts.factory.createAssertClause(ts.factory.createNodeArray([
                                ts.factory.createAssertEntry(
                                    ts.factory.createStringLiteral("resolution-mode"),
                                    ts.factory.createStringLiteral(swappedMode === ts.ModuleKind.ESNext ? "import" : "require")
                                )
                            ])));
                            context.tracker.reportImportTypeNodeResolutionModeOverride?.();
                        }
                    }

                    if (!assertion) {
                        // If ultimately we can only name the symbol with a reference that dives into a `node_modules` folder, we should error
                        // since declaration files with these kinds of references are liable to fail when published :(
                        context.encounteredError = true;
                        if (context.tracker.reportLikelyUnsafeImportRequiredError) {
                            context.tracker.reportLikelyUnsafeImportRequiredError(oldSpecifier);
                        }
                    }
                }
                const lit = ts.factory.createLiteralTypeNode(ts.factory.createStringLiteral(specifier));
                if (context.tracker.trackExternalModuleSymbolOfImportTypeNode) context.tracker.trackExternalModuleSymbolOfImportTypeNode(chain[0]);
                context.approximateLength += specifier.length + 10; // specifier + import("")
                if (!nonRootParts || ts.isEntityName(nonRootParts)) {
                    if (nonRootParts) {
                        const lastId = ts.isIdentifier(nonRootParts) ? nonRootParts : nonRootParts.right;
                        lastId.typeArguments = undefined;
                    }
                    return ts.factory.createImportTypeNode(lit, assertion, nonRootParts as ts.EntityName, typeParameterNodes as readonly ts.TypeNode[], isTypeOf);
                }
                else {
                    const splitNode = getTopmostIndexedAccessType(nonRootParts);
                    const qualifier = (splitNode.objectType as ts.TypeReferenceNode).typeName;
                    return ts.factory.createIndexedAccessTypeNode(ts.factory.createImportTypeNode(lit, assertion, qualifier, typeParameterNodes as readonly ts.TypeNode[], isTypeOf), splitNode.indexType);
                }
            }

            const entityName = createAccessFromSymbolChain(chain, chain.length - 1, 0);
            if (ts.isIndexedAccessTypeNode(entityName)) {
                return entityName; // Indexed accesses can never be `typeof`
            }
            if (isTypeOf) {
                return ts.factory.createTypeQueryNode(entityName);
            }
            else {
                const lastId = ts.isIdentifier(entityName) ? entityName : entityName.right;
                const lastTypeArgs = lastId.typeArguments;
                lastId.typeArguments = undefined;
                return ts.factory.createTypeReferenceNode(entityName, lastTypeArgs as ts.NodeArray<ts.TypeNode>);
            }

            function createAccessFromSymbolChain(chain: ts.Symbol[], index: number, stopper: number): ts.EntityName | ts.IndexedAccessTypeNode {
                const typeParameterNodes = index === (chain.length - 1) ? overrideTypeArguments : lookupTypeParameterNodes(chain, index, context);
                const symbol = chain[index];
                const parent = chain[index - 1];

                let symbolName: string | undefined;
                if (index === 0) {
                    context.flags |= ts.NodeBuilderFlags.InInitialEntityName;
                    symbolName = getNameOfSymbolAsWritten(symbol, context);
                    context.approximateLength += (symbolName ? symbolName.length : 0) + 1;
                    context.flags ^= ts.NodeBuilderFlags.InInitialEntityName;
                }
                else {
                    if (parent && getExportsOfSymbol(parent)) {
                        const exports = getExportsOfSymbol(parent);
                        ts.forEachEntry(exports, (ex, name) => {
                            if (getSymbolIfSameReference(ex, symbol) && !isLateBoundName(name) && name !== ts.InternalSymbolName.ExportEquals) {
                                symbolName = ts.unescapeLeadingUnderscores(name);
                                return true;
                            }
                        });
                    }
                }

                if (symbolName === undefined) {
                    const name = ts.firstDefined(symbol.declarations, ts.getNameOfDeclaration);
                    if (name && ts.isComputedPropertyName(name) && ts.isEntityName(name.expression)) {
                        const LHS = createAccessFromSymbolChain(chain, index - 1, stopper);
                        if (ts.isEntityName(LHS)) {
                            return ts.factory.createIndexedAccessTypeNode(ts.factory.createParenthesizedType(ts.factory.createTypeQueryNode(LHS)), ts.factory.createTypeQueryNode(name.expression));
                        }
                        return LHS;
                    }
                    symbolName = getNameOfSymbolAsWritten(symbol, context);
                }
                context.approximateLength += symbolName.length + 1;

                if (!(context.flags & ts.NodeBuilderFlags.ForbidIndexedAccessSymbolReferences) && parent &&
                    getMembersOfSymbol(parent) && getMembersOfSymbol(parent).get(symbol.escapedName) &&
                    getSymbolIfSameReference(getMembersOfSymbol(parent).get(symbol.escapedName)!, symbol)) {
                    // Should use an indexed access
                    const LHS = createAccessFromSymbolChain(chain, index - 1, stopper);
                    if (ts.isIndexedAccessTypeNode(LHS)) {
                        return ts.factory.createIndexedAccessTypeNode(LHS, ts.factory.createLiteralTypeNode(ts.factory.createStringLiteral(symbolName)));
                    }
                    else {
                        return ts.factory.createIndexedAccessTypeNode(ts.factory.createTypeReferenceNode(LHS, typeParameterNodes as readonly ts.TypeNode[]), ts.factory.createLiteralTypeNode(ts.factory.createStringLiteral(symbolName)));
                    }
                }

                const identifier = ts.setEmitFlags(ts.factory.createIdentifier(symbolName, typeParameterNodes), ts.EmitFlags.NoAsciiEscaping);
                identifier.symbol = symbol;

                if (index > stopper) {
                    const LHS = createAccessFromSymbolChain(chain, index - 1, stopper);
                    if (!ts.isEntityName(LHS)) {
                        return ts.Debug.fail("Impossible construct - an export of an indexed access cannot be reachable");
                    }
                    return ts.factory.createQualifiedName(LHS, identifier);
                }
                return identifier;
            }
        }

        function typeParameterShadowsNameInScope(escapedName: ts.__String, context: NodeBuilderContext, type: ts.TypeParameter) {
            const result = resolveName(context.enclosingDeclaration, escapedName, ts.SymbolFlags.Type, /*nameNotFoundArg*/ undefined, escapedName, /*isUse*/ false);
            if (result) {
                if (result.flags & ts.SymbolFlags.TypeParameter && result === type.symbol) {
                    return false;
                }
                return true;
            }
            return false;
        }

        function typeParameterToName(type: ts.TypeParameter, context: NodeBuilderContext) {
            if (context.flags & ts.NodeBuilderFlags.GenerateNamesForShadowedTypeParams && context.typeParameterNames) {
                const cached = context.typeParameterNames.get(getTypeId(type));
                if (cached) {
                    return cached;
                }
            }
            let result = symbolToName(type.symbol, context, ts.SymbolFlags.Type, /*expectsIdentifier*/ true);
            if (!(result.kind & ts.SyntaxKind.Identifier)) {
                return ts.factory.createIdentifier("(Missing type parameter)");
            }
            if (context.flags & ts.NodeBuilderFlags.GenerateNamesForShadowedTypeParams) {
                const rawtext = result.escapedText as string;
                let i = context.typeParameterNamesByTextNextNameCount?.get(rawtext) || 0;
                let text = rawtext;
                while (context.typeParameterNamesByText?.has(text) || typeParameterShadowsNameInScope(text as ts.__String, context, type)) {
                    i++;
                    text = `${rawtext}_${i}`;
                }
                if (text !== rawtext) {
                    result = ts.factory.createIdentifier(text, result.typeArguments);
                }
                // avoiding iterations of the above loop turns out to be worth it when `i` starts to get large, so we cache the max
                // `i` we've used thus far, to save work later
                (context.typeParameterNamesByTextNextNameCount ||= new ts.Map()).set(rawtext, i);
                (context.typeParameterNames ||= new ts.Map()).set(getTypeId(type), result);
                (context.typeParameterNamesByText ||= new ts.Set()).add(rawtext);
            }
            return result;
        }

        function symbolToName(symbol: ts.Symbol, context: NodeBuilderContext, meaning: ts.SymbolFlags, expectsIdentifier: true): ts.Identifier;
        function symbolToName(symbol: ts.Symbol, context: NodeBuilderContext, meaning: ts.SymbolFlags, expectsIdentifier: false): ts.EntityName;
        function symbolToName(symbol: ts.Symbol, context: NodeBuilderContext, meaning: ts.SymbolFlags, expectsIdentifier: boolean): ts.EntityName {
            const chain = lookupSymbolChain(symbol, context, meaning);

            if (expectsIdentifier && chain.length !== 1
                && !context.encounteredError
                && !(context.flags & ts.NodeBuilderFlags.AllowQualifiedNameInPlaceOfIdentifier)) {
                context.encounteredError = true;
            }
            return createEntityNameFromSymbolChain(chain, chain.length - 1);

            function createEntityNameFromSymbolChain(chain: ts.Symbol[], index: number): ts.EntityName {
                const typeParameterNodes = lookupTypeParameterNodes(chain, index, context);
                const symbol = chain[index];

                if (index === 0) {
                    context.flags |= ts.NodeBuilderFlags.InInitialEntityName;
                }
                const symbolName = getNameOfSymbolAsWritten(symbol, context);
                if (index === 0) {
                    context.flags ^= ts.NodeBuilderFlags.InInitialEntityName;
                }

                const identifier = ts.setEmitFlags(ts.factory.createIdentifier(symbolName, typeParameterNodes), ts.EmitFlags.NoAsciiEscaping);
                identifier.symbol = symbol;

                return index > 0 ? ts.factory.createQualifiedName(createEntityNameFromSymbolChain(chain, index - 1), identifier) : identifier;
            }
        }

        function symbolToExpression(symbol: ts.Symbol, context: NodeBuilderContext, meaning: ts.SymbolFlags) {
            const chain = lookupSymbolChain(symbol, context, meaning);

            return createExpressionFromSymbolChain(chain, chain.length - 1);

            function createExpressionFromSymbolChain(chain: ts.Symbol[], index: number): ts.Expression {
                const typeParameterNodes = lookupTypeParameterNodes(chain, index, context);
                const symbol = chain[index];

                if (index === 0) {
                    context.flags |= ts.NodeBuilderFlags.InInitialEntityName;
                }
                let symbolName = getNameOfSymbolAsWritten(symbol, context);
                if (index === 0) {
                    context.flags ^= ts.NodeBuilderFlags.InInitialEntityName;
                }
                let firstChar = symbolName.charCodeAt(0);

                if (ts.isSingleOrDoubleQuote(firstChar) && ts.some(symbol.declarations, hasNonGlobalAugmentationExternalModuleSymbol)) {
                    return ts.factory.createStringLiteral(getSpecifierForModuleSymbol(symbol, context));
                }
                const canUsePropertyAccess = firstChar === ts.CharacterCodes.hash ?
                    symbolName.length > 1 && ts.isIdentifierStart(symbolName.charCodeAt(1), languageVersion) :
                    ts.isIdentifierStart(firstChar, languageVersion);
                if (index === 0 || canUsePropertyAccess) {
                    const identifier = ts.setEmitFlags(ts.factory.createIdentifier(symbolName, typeParameterNodes), ts.EmitFlags.NoAsciiEscaping);
                    identifier.symbol = symbol;

                    return index > 0 ? ts.factory.createPropertyAccessExpression(createExpressionFromSymbolChain(chain, index - 1), identifier) : identifier;
                }
                else {
                    if (firstChar === ts.CharacterCodes.openBracket) {
                        symbolName = symbolName.substring(1, symbolName.length - 1);
                        firstChar = symbolName.charCodeAt(0);
                    }
                    let expression: ts.Expression | undefined;
                    if (ts.isSingleOrDoubleQuote(firstChar) && !(symbol.flags & ts.SymbolFlags.EnumMember)) {
                       expression = ts.factory.createStringLiteral(ts.stripQuotes(symbolName).replace(/\\./g, s => s.substring(1)), firstChar === ts.CharacterCodes.singleQuote);
                    }
                    else if (("" + +symbolName) === symbolName) {
                        expression = ts.factory.createNumericLiteral(+symbolName);
                    }
                    if (!expression) {
                        expression = ts.setEmitFlags(ts.factory.createIdentifier(symbolName, typeParameterNodes), ts.EmitFlags.NoAsciiEscaping);
                        expression.symbol = symbol;
                    }
                    return ts.factory.createElementAccessExpression(createExpressionFromSymbolChain(chain, index - 1), expression);
                }
            }
        }

        function isStringNamed(d: ts.Declaration) {
            const name = ts.getNameOfDeclaration(d);
            return !!name && ts.isStringLiteral(name);
        }

        function isSingleQuotedStringNamed(d: ts.Declaration) {
            const name = ts.getNameOfDeclaration(d);
            return !!(name && ts.isStringLiteral(name) && (name.singleQuote || !ts.nodeIsSynthesized(name) && ts.startsWith(ts.getTextOfNode(name, /*includeTrivia*/ false), "'")));
        }

        function getPropertyNameNodeForSymbol(symbol: ts.Symbol, context: NodeBuilderContext) {
            const singleQuote = !!ts.length(symbol.declarations) && ts.every(symbol.declarations, isSingleQuotedStringNamed);
            const fromNameType = getPropertyNameNodeForSymbolFromNameType(symbol, context, singleQuote);
            if (fromNameType) {
                return fromNameType;
            }
            const rawName = ts.unescapeLeadingUnderscores(symbol.escapedName);
            const stringNamed = !!ts.length(symbol.declarations) && ts.every(symbol.declarations, isStringNamed);
            return ts.createPropertyNameNodeForIdentifierOrLiteral(rawName, ts.getEmitScriptTarget(compilerOptions), singleQuote, stringNamed);
        }

        // See getNameForSymbolFromNameType for a stringy equivalent
        function getPropertyNameNodeForSymbolFromNameType(symbol: ts.Symbol, context: NodeBuilderContext, singleQuote?: boolean) {
            const nameType = getSymbolLinks(symbol).nameType;
            if (nameType) {
                if (nameType.flags & ts.TypeFlags.StringOrNumberLiteral) {
                    const name = "" + (nameType as ts.StringLiteralType | ts.NumberLiteralType).value;
                    if (!ts.isIdentifierText(name, ts.getEmitScriptTarget(compilerOptions)) && !ts.isNumericLiteralName(name)) {
                        return ts.factory.createStringLiteral(name, !!singleQuote);
                    }
                    if (ts.isNumericLiteralName(name) && ts.startsWith(name, "-")) {
                        return ts.factory.createComputedPropertyName(ts.factory.createNumericLiteral(+name));
                    }
                    return ts.createPropertyNameNodeForIdentifierOrLiteral(name, ts.getEmitScriptTarget(compilerOptions));
                }
                if (nameType.flags & ts.TypeFlags.UniqueESSymbol) {
                    return ts.factory.createComputedPropertyName(symbolToExpression((nameType as ts.UniqueESSymbolType).symbol, context, ts.SymbolFlags.Value));
                }
            }
        }

        function cloneNodeBuilderContext(context: NodeBuilderContext): NodeBuilderContext {
            const initial: NodeBuilderContext = { ...context };
            // Make type parameters created within this context not consume the name outside this context
            // The symbol serializer ends up creating many sibling scopes that all need "separate" contexts when
            // it comes to naming things - within a normal `typeToTypeNode` call, the node builder only ever descends
            // through the type tree, so the only cases where we could have used distinct sibling scopes was when there
            // were multiple generic overloads with similar generated type parameter names
            // The effect:
            // When we write out
            // export const x: <T>(x: T) => T
            // export const y: <T>(x: T) => T
            // we write it out like that, rather than as
            // export const x: <T>(x: T) => T
            // export const y: <T_1>(x: T_1) => T_1
            if (initial.typeParameterNames) {
                initial.typeParameterNames = new ts.Map(initial.typeParameterNames);
            }
            if (initial.typeParameterNamesByText) {
                initial.typeParameterNamesByText = new ts.Set(initial.typeParameterNamesByText);
            }
            if (initial.typeParameterSymbolList) {
                initial.typeParameterSymbolList = new ts.Set(initial.typeParameterSymbolList);
            }
            initial.tracker = wrapSymbolTrackerToReportForContext(initial, initial.tracker);
            return initial;
        }


        function getDeclarationWithTypeAnnotation(symbol: ts.Symbol, enclosingDeclaration: ts.Node | undefined) {
            return symbol.declarations && ts.find(symbol.declarations, s => !!ts.getEffectiveTypeAnnotationNode(s) && (!enclosingDeclaration || !!ts.findAncestor(s, n => n === enclosingDeclaration)));
        }

        function existingTypeNodeIsNotReferenceOrIsReferenceWithCompatibleTypeArgumentCount(existing: ts.TypeNode, type: ts.Type) {
            return !(ts.getObjectFlags(type) & ts.ObjectFlags.Reference) || !ts.isTypeReferenceNode(existing) || ts.length(existing.typeArguments) >= getMinTypeArgumentCount((type as ts.TypeReference).target.typeParameters);
        }

        /**
         * Unlike `typeToTypeNodeHelper`, this handles setting up the `AllowUniqueESSymbolType` flag
         * so a `unique symbol` is returned when appropriate for the input symbol, rather than `typeof sym`
         */
        function serializeTypeForDeclaration(context: NodeBuilderContext, type: ts.Type, symbol: ts.Symbol, enclosingDeclaration: ts.Node | undefined, includePrivateSymbol?: (s: ts.Symbol) => void, bundled?: boolean) {
            if (!isErrorType(type) && enclosingDeclaration) {
                const declWithExistingAnnotation = getDeclarationWithTypeAnnotation(symbol, enclosingDeclaration);
                if (declWithExistingAnnotation && !ts.isFunctionLikeDeclaration(declWithExistingAnnotation) && !ts.isGetAccessorDeclaration(declWithExistingAnnotation)) {
                    // try to reuse the existing annotation
                    const existing = ts.getEffectiveTypeAnnotationNode(declWithExistingAnnotation)!;
                    if (typeNodeIsEquivalentToType(existing, declWithExistingAnnotation, type) && existingTypeNodeIsNotReferenceOrIsReferenceWithCompatibleTypeArgumentCount(existing, type)) {
                        const result = serializeExistingTypeNode(context, existing, includePrivateSymbol, bundled);
                        if (result) {
                            return result;
                        }
                    }
                }
            }
            const oldFlags = context.flags;
            if (type.flags & ts.TypeFlags.UniqueESSymbol &&
                type.symbol === symbol && (!context.enclosingDeclaration || ts.some(symbol.declarations, d => ts.getSourceFileOfNode(d) === ts.getSourceFileOfNode(context.enclosingDeclaration!)))) {
                context.flags |= ts.NodeBuilderFlags.AllowUniqueESSymbolType;
            }
            const result = typeToTypeNodeHelper(type, context);
            context.flags = oldFlags;
            return result;
        }

        function typeNodeIsEquivalentToType(typeNode: ts.TypeNode, annotatedDeclaration: ts.Declaration, type: ts.Type) {
            const typeFromTypeNode = getTypeFromTypeNode(typeNode);
            if (typeFromTypeNode === type) {
                return true;
            }
            if (ts.isParameter(annotatedDeclaration) && annotatedDeclaration.questionToken) {
                return getTypeWithFacts(type, TypeFacts.NEUndefined) === typeFromTypeNode;
            }
            return false;
        }

        function serializeReturnTypeForSignature(context: NodeBuilderContext, type: ts.Type, signature: ts.Signature, includePrivateSymbol?: (s: ts.Symbol) => void, bundled?: boolean) {
            if (!isErrorType(type) && context.enclosingDeclaration) {
                const annotation = signature.declaration && ts.getEffectiveReturnTypeNode(signature.declaration);
                if (!!ts.findAncestor(annotation, n => n === context.enclosingDeclaration) && annotation) {
                    const annotated = getTypeFromTypeNode(annotation);
                    const thisInstantiated = annotated.flags & ts.TypeFlags.TypeParameter && (annotated as ts.TypeParameter).isThisType ? instantiateType(annotated, signature.mapper) : annotated;
                    if (thisInstantiated === type && existingTypeNodeIsNotReferenceOrIsReferenceWithCompatibleTypeArgumentCount(annotation, type)) {
                        const result = serializeExistingTypeNode(context, annotation, includePrivateSymbol, bundled);
                        if (result) {
                            return result;
                        }
                    }
                }
            }
            return typeToTypeNodeHelper(type, context);
        }

        function trackExistingEntityName<T extends ts.EntityNameOrEntityNameExpression>(node: T, context: NodeBuilderContext, includePrivateSymbol?: (s: ts.Symbol) => void) {
            let introducesError = false;
            const leftmost = ts.getFirstIdentifier(node);
            if (ts.isInJSFile(node) && (ts.isExportsIdentifier(leftmost) || ts.isModuleExportsAccessExpression(leftmost.parent) || (ts.isQualifiedName(leftmost.parent) && ts.isModuleIdentifier(leftmost.parent.left) && ts.isExportsIdentifier(leftmost.parent.right)))) {
                introducesError = true;
                return { introducesError, node };
            }
            const sym = resolveEntityName(leftmost, ts.SymbolFlags.All, /*ignoreErrors*/ true, /*dontResolveALias*/ true);
            if (sym) {
                if (isSymbolAccessible(sym, context.enclosingDeclaration, ts.SymbolFlags.All, /*shouldComputeAliasesToMakeVisible*/ false).accessibility !== ts.SymbolAccessibility.Accessible) {
                    introducesError = true;
                }
                else {
                    context.tracker?.trackSymbol?.(sym, context.enclosingDeclaration, ts.SymbolFlags.All);
                    includePrivateSymbol?.(sym);
                }
                if (ts.isIdentifier(node)) {
                    const type = getDeclaredTypeOfSymbol(sym);
                    const name = sym.flags & ts.SymbolFlags.TypeParameter && !isTypeSymbolAccessible(type.symbol, context.enclosingDeclaration) ? typeParameterToName(type, context) : ts.factory.cloneNode(node);
                    name.symbol = sym; // for quickinfo, which uses identifier symbol information
                    return { introducesError, node: ts.setEmitFlags(ts.setOriginalNode(name, node), ts.EmitFlags.NoAsciiEscaping) };
                }
            }

            return { introducesError, node };
        }

        function serializeExistingTypeNode(context: NodeBuilderContext, existing: ts.TypeNode, includePrivateSymbol?: (s: ts.Symbol) => void, bundled?: boolean) {
            if (cancellationToken && cancellationToken.throwIfCancellationRequested) {
                cancellationToken.throwIfCancellationRequested();
            }
            let hadError = false;
            const file = ts.getSourceFileOfNode(existing);
            const transformed = ts.visitNode(existing, visitExistingNodeTreeSymbols);
            if (hadError) {
                return undefined;
            }
            return transformed === existing ? ts.setTextRange(ts.factory.cloneNode(existing), existing) : transformed;

            function visitExistingNodeTreeSymbols<T extends ts.Node>(node: T): ts.Node {
                // We don't _actually_ support jsdoc namepath types, emit `any` instead
                if (ts.isJSDocAllType(node) || node.kind === ts.SyntaxKind.JSDocNamepathType) {
                    return ts.factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword);
                }
                if (ts.isJSDocUnknownType(node)) {
                    return ts.factory.createKeywordTypeNode(ts.SyntaxKind.UnknownKeyword);
                }
                if (ts.isJSDocNullableType(node)) {
                    return ts.factory.createUnionTypeNode([ts.visitNode(node.type, visitExistingNodeTreeSymbols), ts.factory.createLiteralTypeNode(ts.factory.createNull())]);
                }
                if (ts.isJSDocOptionalType(node)) {
                    return ts.factory.createUnionTypeNode([ts.visitNode(node.type, visitExistingNodeTreeSymbols), ts.factory.createKeywordTypeNode(ts.SyntaxKind.UndefinedKeyword)]);
                }
                if (ts.isJSDocNonNullableType(node)) {
                    return ts.visitNode(node.type, visitExistingNodeTreeSymbols);
                }
                if (ts.isJSDocVariadicType(node)) {
                    return ts.factory.createArrayTypeNode(ts.visitNode((node as ts.JSDocVariadicType).type, visitExistingNodeTreeSymbols));
                }
                if (ts.isJSDocTypeLiteral(node)) {
                    return ts.factory.createTypeLiteralNode(ts.map(node.jsDocPropertyTags, t => {
                        const name = ts.isIdentifier(t.name) ? t.name : t.name.right;
                        const typeViaParent = getTypeOfPropertyOfType(getTypeFromTypeNode(node), name.escapedText);
                        const overrideTypeNode = typeViaParent && t.typeExpression && getTypeFromTypeNode(t.typeExpression.type) !== typeViaParent ? typeToTypeNodeHelper(typeViaParent, context) : undefined;

                        return ts.factory.createPropertySignature(
                            /*modifiers*/ undefined,
                            name,
                            t.isBracketed || t.typeExpression && ts.isJSDocOptionalType(t.typeExpression.type) ? ts.factory.createToken(ts.SyntaxKind.QuestionToken) : undefined,
                            overrideTypeNode || (t.typeExpression && ts.visitNode(t.typeExpression.type, visitExistingNodeTreeSymbols)) || ts.factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword)
                        );
                    }));
                }
                if (ts.isTypeReferenceNode(node) && ts.isIdentifier(node.typeName) && node.typeName.escapedText === "") {
                    return ts.setOriginalNode(ts.factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword), node);
                }
                if ((ts.isExpressionWithTypeArguments(node) || ts.isTypeReferenceNode(node)) && ts.isJSDocIndexSignature(node)) {
                    return ts.factory.createTypeLiteralNode([ts.factory.createIndexSignature(
                        /*modifiers*/ undefined,
                        [ts.factory.createParameterDeclaration(
                                        /*modifiers*/ undefined,
                            /*dotdotdotToken*/ undefined,
                            "x",
                            /*questionToken*/ undefined,
                            ts.visitNode(node.typeArguments![0], visitExistingNodeTreeSymbols)
                        )],
                        ts.visitNode(node.typeArguments![1], visitExistingNodeTreeSymbols)
                    )]);
                }
                if (ts.isJSDocFunctionType(node)) {
                    if (ts.isJSDocConstructSignature(node)) {
                        let newTypeNode: ts.TypeNode | undefined;
                        return ts.factory.createConstructorTypeNode(
                            /*modifiers*/ undefined,
                            ts.visitNodes(node.typeParameters, visitExistingNodeTreeSymbols),
                            ts.mapDefined(node.parameters, (p, i) => p.name && ts.isIdentifier(p.name) && p.name.escapedText === "new" ? (newTypeNode = p.type, undefined) : ts.factory.createParameterDeclaration(
                                /*modifiers*/ undefined,
                                getEffectiveDotDotDotForParameter(p),
                                getNameForJSDocFunctionParameter(p, i),
                                p.questionToken,
                                ts.visitNode(p.type, visitExistingNodeTreeSymbols),
                                /*initializer*/ undefined
                            )),
                            ts.visitNode(newTypeNode || node.type, visitExistingNodeTreeSymbols) || ts.factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword)
                        );
                    }
                    else {
                        return ts.factory.createFunctionTypeNode(
                            ts.visitNodes(node.typeParameters, visitExistingNodeTreeSymbols),
                            ts.map(node.parameters, (p, i) => ts.factory.createParameterDeclaration(
                                /*modifiers*/ undefined,
                                getEffectiveDotDotDotForParameter(p),
                                getNameForJSDocFunctionParameter(p, i),
                                p.questionToken,
                                ts.visitNode(p.type, visitExistingNodeTreeSymbols),
                                /*initializer*/ undefined
                            )),
                            ts.visitNode(node.type, visitExistingNodeTreeSymbols) || ts.factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword)
                        );
                    }
                }
                if (ts.isTypeReferenceNode(node) && ts.isInJSDoc(node) && (!existingTypeNodeIsNotReferenceOrIsReferenceWithCompatibleTypeArgumentCount(node, getTypeFromTypeNode(node)) || getIntendedTypeFromJSDocTypeReference(node) || unknownSymbol === resolveTypeReferenceName(node, ts.SymbolFlags.Type, /*ignoreErrors*/ true))) {
                    return ts.setOriginalNode(typeToTypeNodeHelper(getTypeFromTypeNode(node), context), node);
                }
                if (ts.isLiteralImportTypeNode(node)) {
                    const nodeSymbol = getNodeLinks(node).resolvedSymbol;
                    if (ts.isInJSDoc(node) &&
                        nodeSymbol &&
                        (
                            // The import type resolved using jsdoc fallback logic
                            (!node.isTypeOf && !(nodeSymbol.flags & ts.SymbolFlags.Type)) ||
                            // The import type had type arguments autofilled by js fallback logic
                            !(ts.length(node.typeArguments) >= getMinTypeArgumentCount(getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(nodeSymbol)))
                        )
                    ) {
                        return ts.setOriginalNode(typeToTypeNodeHelper(getTypeFromTypeNode(node), context), node);
                    }
                    return ts.factory.updateImportTypeNode(
                        node,
                        ts.factory.updateLiteralTypeNode(node.argument, rewriteModuleSpecifier(node, node.argument.literal)),
                        node.assertions,
                        node.qualifier,
                        ts.visitNodes(node.typeArguments, visitExistingNodeTreeSymbols, ts.isTypeNode),
                        node.isTypeOf
                    );
                }

                if (ts.isEntityName(node) || ts.isEntityNameExpression(node)) {
                    const { introducesError, node: result } = trackExistingEntityName(node, context, includePrivateSymbol);
                    hadError = hadError || introducesError;
                    if (result !== node) {
                        return result;
                    }
                }

                if (file && ts.isTupleTypeNode(node) && (ts.getLineAndCharacterOfPosition(file, node.pos).line === ts.getLineAndCharacterOfPosition(file, node.end).line)) {
                    ts.setEmitFlags(node, ts.EmitFlags.SingleLine);
                }

                return ts.visitEachChild(node, visitExistingNodeTreeSymbols, ts.nullTransformationContext);

                function getEffectiveDotDotDotForParameter(p: ts.ParameterDeclaration) {
                    return p.dotDotDotToken || (p.type && ts.isJSDocVariadicType(p.type) ? ts.factory.createToken(ts.SyntaxKind.DotDotDotToken) : undefined);
                }

                /** Note that `new:T` parameters are not handled, but should be before calling this function. */
                function getNameForJSDocFunctionParameter(p: ts.ParameterDeclaration, index: number) {
                    return p.name && ts.isIdentifier(p.name) && p.name.escapedText === "this" ? "this"
                        : getEffectiveDotDotDotForParameter(p) ? `args`
                        : `arg${index}`;
                }

                function rewriteModuleSpecifier(parent: ts.ImportTypeNode, lit: ts.StringLiteral) {
                    if (bundled) {
                        if (context.tracker && context.tracker.moduleResolverHost) {
                            const targetFile = getExternalModuleFileFromDeclaration(parent);
                            if (targetFile) {
                                const getCanonicalFileName = ts.createGetCanonicalFileName(!!host.useCaseSensitiveFileNames);
                                const resolverHost = {
                                    getCanonicalFileName,
                                    getCurrentDirectory: () => context.tracker.moduleResolverHost!.getCurrentDirectory(),
                                    getCommonSourceDirectory: () => context.tracker.moduleResolverHost!.getCommonSourceDirectory()
                                };
                                const newName = ts.getResolvedExternalModuleName(resolverHost, targetFile);
                                return ts.factory.createStringLiteral(newName);
                            }
                        }
                    }
                    else {
                        if (context.tracker && context.tracker.trackExternalModuleSymbolOfImportTypeNode) {
                            const moduleSym = resolveExternalModuleNameWorker(lit, lit, /*moduleNotFoundError*/ undefined);
                            if (moduleSym) {
                                context.tracker.trackExternalModuleSymbolOfImportTypeNode(moduleSym);
                            }
                        }
                    }
                    return lit;
                }
            }
        }

        function symbolTableToDeclarationStatements(symbolTable: ts.SymbolTable, context: NodeBuilderContext, bundled?: boolean): ts.Statement[] {
            const serializePropertySymbolForClass = makeSerializePropertySymbol<ts.ClassElement>(ts.factory.createPropertyDeclaration, ts.SyntaxKind.MethodDeclaration, /*useAcessors*/ true);
            const serializePropertySymbolForInterfaceWorker = makeSerializePropertySymbol<ts.TypeElement>((mods, name, question, type) => ts.factory.createPropertySignature(mods, name, question, type), ts.SyntaxKind.MethodSignature, /*useAcessors*/ false);

            // TODO: Use `setOriginalNode` on original declaration names where possible so these declarations see some kind of
            // declaration mapping

            // We save the enclosing declaration off here so it's not adjusted by well-meaning declaration
            // emit codepaths which want to apply more specific contexts (so we can still refer to the root real declaration
            // we're trying to emit from later on)
            const enclosingDeclaration = context.enclosingDeclaration!;
            let results: ts.Statement[] = [];
            const visitedSymbols = new ts.Set<number>();
            const deferredPrivatesStack: ts.ESMap<ts.SymbolId, ts.Symbol>[] = [];
            const oldcontext = context;
            context = {
                ...oldcontext,
                usedSymbolNames: new ts.Set(oldcontext.usedSymbolNames),
                remappedSymbolNames: new ts.Map(),
                tracker: {
                    ...oldcontext.tracker,
                    trackSymbol: (sym, decl, meaning) => {
                        const accessibleResult = isSymbolAccessible(sym, decl, meaning, /*computeAliases*/ false);
                        if (accessibleResult.accessibility === ts.SymbolAccessibility.Accessible) {
                            // Lookup the root symbol of the chain of refs we'll use to access it and serialize it
                            const chain = lookupSymbolChainWorker(sym, context, meaning);
                            if (!(sym.flags & ts.SymbolFlags.Property)) {
                                includePrivateSymbol(chain[0]);
                            }
                        }
                        else if (oldcontext.tracker && oldcontext.tracker.trackSymbol) {
                            return oldcontext.tracker.trackSymbol(sym, decl, meaning);
                        }
                        return false;
                    },
                },
            };
            context.tracker = wrapSymbolTrackerToReportForContext(context, context.tracker);
            ts.forEachEntry(symbolTable, (symbol, name) => {
                const baseName = ts.unescapeLeadingUnderscores(name);
                void getInternalSymbolName(symbol, baseName); // Called to cache values into `usedSymbolNames` and `remappedSymbolNames`
            });
            let addingDeclare = !bundled;
            const exportEquals = symbolTable.get(ts.InternalSymbolName.ExportEquals);
            if (exportEquals && symbolTable.size > 1 && exportEquals.flags & ts.SymbolFlags.Alias) {
                symbolTable = ts.createSymbolTable();
                // Remove extraneous elements from root symbol table (they'll be mixed back in when the target of the `export=` is looked up)
                symbolTable.set(ts.InternalSymbolName.ExportEquals, exportEquals);
            }

            visitSymbolTable(symbolTable);
            return mergeRedundantStatements(results);

            function isIdentifierAndNotUndefined(node: ts.Node | undefined): node is ts.Identifier {
                return !!node && node.kind === ts.SyntaxKind.Identifier;
            }

            function getNamesOfDeclaration(statement: ts.Statement): ts.Identifier[] {
                if (ts.isVariableStatement(statement)) {
                    return ts.filter(ts.map(statement.declarationList.declarations, ts.getNameOfDeclaration), isIdentifierAndNotUndefined);
                }
                return ts.filter([ts.getNameOfDeclaration(statement as ts.DeclarationStatement)], isIdentifierAndNotUndefined);
            }

            function flattenExportAssignedNamespace(statements: ts.Statement[]) {
                const exportAssignment = ts.find(statements, ts.isExportAssignment);
                const nsIndex = ts.findIndex(statements, ts.isModuleDeclaration);
                let ns = nsIndex !== -1 ? statements[nsIndex] as ts.ModuleDeclaration : undefined;
                if (ns && exportAssignment && exportAssignment.isExportEquals &&
                    ts.isIdentifier(exportAssignment.expression) && ts.isIdentifier(ns.name) && ts.idText(ns.name) === ts.idText(exportAssignment.expression) &&
                    ns.body && ts.isModuleBlock(ns.body)) {
                    // Pass 0: Correct situations where a module has both an `export = ns` and multiple top-level exports by stripping the export modifiers from
                    //  the top-level exports and exporting them in the targeted ns, as can occur when a js file has both typedefs and `module.export` assignments
                    const excessExports = ts.filter(statements, s => !!(ts.getEffectiveModifierFlags(s) & ts.ModifierFlags.Export));
                    const name = ns.name;
                    let body = ns.body;
                    if (ts.length(excessExports)) {
                        ns = ts.factory.updateModuleDeclaration(
                            ns,
                            ns.modifiers,
                            ns.name,
                            body = ts.factory.updateModuleBlock(
                                body,
                                ts.factory.createNodeArray([...ns.body.statements, ts.factory.createExportDeclaration(
                                    /*modifiers*/ undefined,
                                    /*isTypeOnly*/ false,
                                    ts.factory.createNamedExports(ts.map(ts.flatMap(excessExports, e => getNamesOfDeclaration(e)), id => ts.factory.createExportSpecifier(/*isTypeOnly*/ false, /*alias*/ undefined, id))),
                                    /*moduleSpecifier*/ undefined
                                )])
                            )
                        );
                        statements = [...statements.slice(0, nsIndex), ns, ...statements.slice(nsIndex + 1)];
                    }

                    // Pass 1: Flatten `export namespace _exports {} export = _exports;` so long as the `export=` only points at a single namespace declaration
                    if (!ts.find(statements, s => s !== ns && ts.nodeHasName(s, name))) {
                        results = [];
                        // If the namespace contains no export assignments or declarations, and no declarations flagged with `export`, then _everything_ is exported -
                        // to respect this as the top level, we need to add an `export` modifier to everything
                        const mixinExportFlag = !ts.some(body.statements, s => ts.hasSyntacticModifier(s, ts.ModifierFlags.Export) || ts.isExportAssignment(s) || ts.isExportDeclaration(s));
                        ts.forEach(body.statements, s => {
                            addResult(s, mixinExportFlag ? ts.ModifierFlags.Export : ts.ModifierFlags.None); // Recalculates the ambient (and export, if applicable from above) flag
                        });
                        statements = [...ts.filter(statements, s => s !== ns && s !== exportAssignment), ...results];
                    }
                }
                return statements;
            }

            function mergeExportDeclarations(statements: ts.Statement[]) {
                // Pass 2: Combine all `export {}` declarations
                const exports = ts.filter(statements, d => ts.isExportDeclaration(d) && !d.moduleSpecifier && !!d.exportClause && ts.isNamedExports(d.exportClause)) as ts.ExportDeclaration[];
                if (ts.length(exports) > 1) {
                    const nonExports = ts.filter(statements, d => !ts.isExportDeclaration(d) || !!d.moduleSpecifier || !d.exportClause);
                    statements = [...nonExports, ts.factory.createExportDeclaration(
                        /*modifiers*/ undefined,
                        /*isTypeOnly*/ false,
                        ts.factory.createNamedExports(ts.flatMap(exports, e => ts.cast(e.exportClause, ts.isNamedExports).elements)),
                        /*moduleSpecifier*/ undefined
                    )];
                }
                // Pass 2b: Also combine all `export {} from "..."` declarations as needed
                const reexports = ts.filter(statements, d => ts.isExportDeclaration(d) && !!d.moduleSpecifier && !!d.exportClause && ts.isNamedExports(d.exportClause)) as ts.ExportDeclaration[];
                if (ts.length(reexports) > 1) {
                    const groups = ts.group(reexports, decl => ts.isStringLiteral(decl.moduleSpecifier!) ? ">" + decl.moduleSpecifier.text : ">");
                    if (groups.length !== reexports.length) {
                        for (const group of groups) {
                            if (group.length > 1) {
                                // remove group members from statements and then merge group members and add back to statements
                                statements = [
                                    ...ts.filter(statements, s => group.indexOf(s as ts.ExportDeclaration) === -1),
                                    ts.factory.createExportDeclaration(
                                        /*modifiers*/ undefined,
                                        /*isTypeOnly*/ false,
                                        ts.factory.createNamedExports(ts.flatMap(group, e => ts.cast(e.exportClause, ts.isNamedExports).elements)),
                                        group[0].moduleSpecifier
                                    )
                                ];
                            }
                        }
                    }
                }
                return statements;
            }

            function inlineExportModifiers(statements: ts.Statement[]) {
                // Pass 3: Move all `export {}`'s to `export` modifiers where possible
                const index = ts.findIndex(statements, d => ts.isExportDeclaration(d) && !d.moduleSpecifier && !d.assertClause && !!d.exportClause && ts.isNamedExports(d.exportClause));
                if (index >= 0) {
                    const exportDecl = statements[index] as ts.ExportDeclaration & { readonly exportClause: ts.NamedExports };
                    const replacements = ts.mapDefined(exportDecl.exportClause.elements, e => {
                        if (!e.propertyName) {
                            // export {name} - look thru `statements` for `name`, and if all results can take an `export` modifier, do so and filter it
                            const indices = ts.indicesOf(statements);
                            const associatedIndices = ts.filter(indices, i => ts.nodeHasName(statements[i], e.name));
                            if (ts.length(associatedIndices) && ts.every(associatedIndices, i => ts.canHaveExportModifier(statements[i]))) {
                                for (const index of associatedIndices) {
                                    statements[index] = addExportModifier(statements[index] as Extract<ts.HasModifiers, ts.Statement>);
                                }
                                return undefined;
                            }
                        }
                        return e;
                    });
                    if (!ts.length(replacements)) {
                        // all clauses removed, remove the export declaration
                        ts.orderedRemoveItemAt(statements, index);
                    }
                    else {
                        // some items filtered, others not - update the export declaration
                        statements[index] = ts.factory.updateExportDeclaration(
                            exportDecl,
                            exportDecl.modifiers,
                            exportDecl.isTypeOnly,
                            ts.factory.updateNamedExports(
                                exportDecl.exportClause,
                                replacements
                            ),
                            exportDecl.moduleSpecifier,
                            exportDecl.assertClause
                        );
                    }
                }
                return statements;
            }

            function mergeRedundantStatements(statements: ts.Statement[]) {
                statements = flattenExportAssignedNamespace(statements);
                statements = mergeExportDeclarations(statements);
                statements = inlineExportModifiers(statements);

                // Not a cleanup, but as a final step: If there is a mix of `export` and non-`export` declarations, but no `export =` or `export {}` add a `export {};` so
                // declaration privacy is respected.
                if (enclosingDeclaration &&
                    ((ts.isSourceFile(enclosingDeclaration) && ts.isExternalOrCommonJsModule(enclosingDeclaration)) || ts.isModuleDeclaration(enclosingDeclaration)) &&
                    (!ts.some(statements, ts.isExternalModuleIndicator) || (!ts.hasScopeMarker(statements) && ts.some(statements, ts.needsScopeMarker)))) {
                    statements.push(ts.createEmptyExports(ts.factory));
                }
                return statements;
            }

            function addExportModifier(node: Extract<ts.HasModifiers, ts.Statement>) {
                const flags = (ts.getEffectiveModifierFlags(node) | ts.ModifierFlags.Export) & ~ts.ModifierFlags.Ambient;
                return ts.factory.updateModifiers(node, flags);
            }

            function removeExportModifier(node: Extract<ts.HasModifiers, ts.Statement>) {
                const flags = ts.getEffectiveModifierFlags(node) & ~ts.ModifierFlags.Export;
                return ts.factory.updateModifiers(node, flags);
            }

            function visitSymbolTable(symbolTable: ts.SymbolTable, suppressNewPrivateContext?: boolean, propertyAsAlias?: boolean) {
                if (!suppressNewPrivateContext) {
                    deferredPrivatesStack.push(new ts.Map());
                }
                symbolTable.forEach((symbol: ts.Symbol) => {
                    serializeSymbol(symbol, /*isPrivate*/ false, !!propertyAsAlias);
                });
                if (!suppressNewPrivateContext) {
                    // deferredPrivates will be filled up by visiting the symbol table
                    // And will continue to iterate as elements are added while visited `deferredPrivates`
                    // (As that's how a map iterator is defined to work)
                    deferredPrivatesStack[deferredPrivatesStack.length - 1].forEach((symbol: ts.Symbol) => {
                        serializeSymbol(symbol, /*isPrivate*/ true, !!propertyAsAlias);
                    });
                    deferredPrivatesStack.pop();
                }
            }

            function serializeSymbol(symbol: ts.Symbol, isPrivate: boolean, propertyAsAlias: boolean): void {
                // cache visited list based on merged symbol, since we want to use the unmerged top-level symbol, but
                // still skip reserializing it if we encounter the merged product later on
                const visitedSym = getMergedSymbol(symbol);
                if (visitedSymbols.has(getSymbolId(visitedSym))) {
                    return; // Already printed
                }
                visitedSymbols.add(getSymbolId(visitedSym));
                // Only actually serialize symbols within the correct enclosing declaration, otherwise do nothing with the out-of-context symbol
                const skipMembershipCheck = !isPrivate; // We only call this on exported symbols when we know they're in the correct scope
                if (skipMembershipCheck || (!!ts.length(symbol.declarations) && ts.some(symbol.declarations, d => !!ts.findAncestor(d, n => n === enclosingDeclaration)))) {
                    const oldContext = context;
                    context = cloneNodeBuilderContext(context);
                    serializeSymbolWorker(symbol, isPrivate, propertyAsAlias);
                    if (context.reportedDiagnostic) {
                        oldcontext.reportedDiagnostic = context.reportedDiagnostic; // hoist diagnostic result into outer context
                    }
                    context = oldContext;
                }
            }


            // Synthesize declarations for a symbol - might be an Interface, a Class, a Namespace, a Type, a Variable (const, let, or var), an Alias
            // or a merge of some number of those.
            // An interesting challenge is ensuring that when classes merge with namespaces and interfaces, is keeping
            // each symbol in only one of the representations
            // Also, synthesizing a default export of some kind
            // If it's an alias: emit `export default ref`
            // If it's a property: emit `export default _default` with a `_default` prop
            // If it's a class/interface/function: emit a class/interface/function with a `default` modifier
            // These forms can merge, eg (`export default 12; export default interface A {}`)
            function serializeSymbolWorker(symbol: ts.Symbol, isPrivate: boolean, propertyAsAlias: boolean): void {
                const symbolName = ts.unescapeLeadingUnderscores(symbol.escapedName);
                const isDefault = symbol.escapedName === ts.InternalSymbolName.Default;
                if (isPrivate && !(context.flags & ts.NodeBuilderFlags.AllowAnonymousIdentifier) && ts.isStringANonContextualKeyword(symbolName) && !isDefault) {
                    // Oh no. We cannot use this symbol's name as it's name... It's likely some jsdoc had an invalid name like `export` or `default` :(
                    context.encounteredError = true;
                    // TODO: Issue error via symbol tracker?
                    return; // If we need to emit a private with a keyword name, we're done for, since something else will try to refer to it by that name
                }
                let needsPostExportDefault = isDefault && !!(
                       symbol.flags & ts.SymbolFlags.ExportDoesNotSupportDefaultModifier
                    || (symbol.flags & ts.SymbolFlags.Function && ts.length(getPropertiesOfType(getTypeOfSymbol(symbol))))
                ) && !(symbol.flags & ts.SymbolFlags.Alias); // An alias symbol should preclude needing to make an alias ourselves
                let needsExportDeclaration = !needsPostExportDefault && !isPrivate && ts.isStringANonContextualKeyword(symbolName) && !isDefault;
                // `serializeVariableOrProperty` will handle adding the export declaration if it is run (since `getInternalSymbolName` will create the name mapping), so we need to ensuer we unset `needsExportDeclaration` if it is
                if (needsPostExportDefault || needsExportDeclaration) {
                    isPrivate = true;
                }
                const modifierFlags = (!isPrivate ? ts.ModifierFlags.Export : 0) | (isDefault && !needsPostExportDefault ? ts.ModifierFlags.Default : 0);
                const isConstMergedWithNS = symbol.flags & ts.SymbolFlags.Module &&
                    symbol.flags & (ts.SymbolFlags.BlockScopedVariable | ts.SymbolFlags.FunctionScopedVariable | ts.SymbolFlags.Property) &&
                    symbol.escapedName !== ts.InternalSymbolName.ExportEquals;
                const isConstMergedWithNSPrintableAsSignatureMerge = isConstMergedWithNS && isTypeRepresentableAsFunctionNamespaceMerge(getTypeOfSymbol(symbol), symbol);
                if (symbol.flags & (ts.SymbolFlags.Function | ts.SymbolFlags.Method) || isConstMergedWithNSPrintableAsSignatureMerge) {
                    serializeAsFunctionNamespaceMerge(getTypeOfSymbol(symbol), symbol, getInternalSymbolName(symbol, symbolName), modifierFlags);
                }
                if (symbol.flags & ts.SymbolFlags.TypeAlias) {
                    serializeTypeAlias(symbol, symbolName, modifierFlags);
                }
                // Need to skip over export= symbols below - json source files get a single `Property` flagged
                // symbol of name `export=` which needs to be handled like an alias. It's not great, but it is what it is.
                if (symbol.flags & (ts.SymbolFlags.BlockScopedVariable | ts.SymbolFlags.FunctionScopedVariable | ts.SymbolFlags.Property)
                    && symbol.escapedName !== ts.InternalSymbolName.ExportEquals
                    && !(symbol.flags & ts.SymbolFlags.Prototype)
                    && !(symbol.flags & ts.SymbolFlags.Class)
                    && !(symbol.flags & ts.SymbolFlags.Method)
                    && !isConstMergedWithNSPrintableAsSignatureMerge) {
                    if (propertyAsAlias) {
                        const createdExport = serializeMaybeAliasAssignment(symbol);
                        if (createdExport) {
                            needsExportDeclaration = false;
                            needsPostExportDefault = false;
                        }
                    }
                    else {
                        const type = getTypeOfSymbol(symbol);
                        const localName = getInternalSymbolName(symbol, symbolName);
                        if (!(symbol.flags & ts.SymbolFlags.Function) && isTypeRepresentableAsFunctionNamespaceMerge(type, symbol)) {
                            // If the type looks like a function declaration + ns could represent it, and it's type is sourced locally, rewrite it into a function declaration + ns
                            serializeAsFunctionNamespaceMerge(type, symbol, localName, modifierFlags);
                        }
                        else {
                            // A Class + Property merge is made for a `module.exports.Member = class {}`, and it doesn't serialize well as either a class _or_ a property symbol - in fact, _it behaves like an alias!_
                            // `var` is `FunctionScopedVariable`, `const` and `let` are `BlockScopedVariable`, and `module.exports.thing =` is `Property`
                            const flags = !(symbol.flags & ts.SymbolFlags.BlockScopedVariable)
                                ? symbol.parent?.valueDeclaration && ts.isSourceFile(symbol.parent?.valueDeclaration)
                                    ? ts.NodeFlags.Const // exports are immutable in es6, which is what we emulate and check; so it's safe to mark all exports as `const` (there's no difference to consumers, but it allows unique symbol type declarations)
                                    : undefined
                                : isConstVariable(symbol)
                                    ? ts.NodeFlags.Const
                                    : ts.NodeFlags.Let;
                            const name = (needsPostExportDefault || !(symbol.flags & ts.SymbolFlags.Property)) ? localName : getUnusedName(localName, symbol);
                            let textRange: ts.Node | undefined = symbol.declarations && ts.find(symbol.declarations, d => ts.isVariableDeclaration(d));
                            if (textRange && ts.isVariableDeclarationList(textRange.parent) && textRange.parent.declarations.length === 1) {
                                textRange = textRange.parent.parent;
                            }
                            const propertyAccessRequire = symbol.declarations?.find(ts.isPropertyAccessExpression);
                            if (propertyAccessRequire && ts.isBinaryExpression(propertyAccessRequire.parent) && ts.isIdentifier(propertyAccessRequire.parent.right)
                                && type.symbol?.valueDeclaration && ts.isSourceFile(type.symbol.valueDeclaration)) {
                                const alias = localName === propertyAccessRequire.parent.right.escapedText ? undefined : propertyAccessRequire.parent.right;
                                addResult(
                                    ts.factory.createExportDeclaration(
                                        /*modifiers*/ undefined,
                                        /*isTypeOnly*/ false,
                                        ts.factory.createNamedExports([ts.factory.createExportSpecifier(/*isTypeOnly*/ false, alias, localName)])
                                    ),
                                    ts.ModifierFlags.None
                                );
                                context.tracker.trackSymbol!(type.symbol, context.enclosingDeclaration, ts.SymbolFlags.Value);
                            }
                            else {
                                const statement = ts.setTextRange(ts.factory.createVariableStatement(/*modifiers*/ undefined, ts.factory.createVariableDeclarationList([
                                    ts.factory.createVariableDeclaration(name, /*exclamationToken*/ undefined, serializeTypeForDeclaration(context, type, symbol, enclosingDeclaration, includePrivateSymbol, bundled))
                                ], flags)), textRange);
                                addResult(statement, name !== localName ? modifierFlags & ~ts.ModifierFlags.Export : modifierFlags);
                                if (name !== localName && !isPrivate) {
                                    // We rename the variable declaration we generate for Property symbols since they may have a name which
                                    // conflicts with a local declaration. For example, given input:
                                    // ```
                                    // function g() {}
                                    // module.exports.g = g
                                    // ```
                                    // In such a situation, we have a local variable named `g`, and a separate exported variable named `g`.
                                    // Naively, we would emit
                                    // ```
                                    // function g() {}
                                    // export const g: typeof g;
                                    // ```
                                    // That's obviously incorrect - the `g` in the type annotation needs to refer to the local `g`, but
                                    // the export declaration shadows it.
                                    // To work around that, we instead write
                                    // ```
                                    // function g() {}
                                    // const g_1: typeof g;
                                    // export { g_1 as g };
                                    // ```
                                    // To create an export named `g` that does _not_ shadow the local `g`
                                    addResult(
                                        ts.factory.createExportDeclaration(
                                            /*modifiers*/ undefined,
                                            /*isTypeOnly*/ false,
                                            ts.factory.createNamedExports([ts.factory.createExportSpecifier(/*isTypeOnly*/ false, name, localName)])
                                        ),
                                        ts.ModifierFlags.None
                                    );
                                    needsExportDeclaration = false;
                                    needsPostExportDefault = false;
                                }
                            }
                        }
                    }
                }
                if (symbol.flags & ts.SymbolFlags.Enum) {
                    serializeEnum(symbol, symbolName, modifierFlags);
                }
                if (symbol.flags & ts.SymbolFlags.Class) {
                    if (symbol.flags & ts.SymbolFlags.Property
                        && symbol.valueDeclaration
                        && ts.isBinaryExpression(symbol.valueDeclaration.parent)
                        && ts.isClassExpression(symbol.valueDeclaration.parent.right)) {
                        // Looks like a `module.exports.Sub = class {}` - if we serialize `symbol` as a class, the result will have no members,
                        // since the classiness is actually from the target of the effective alias the symbol is. yes. A BlockScopedVariable|Class|Property
                        // _really_ acts like an Alias, and none of a BlockScopedVariable, Class, or Property. This is the travesty of JS binding today.
                        serializeAsAlias(symbol, getInternalSymbolName(symbol, symbolName), modifierFlags);
                    }
                    else {
                        serializeAsClass(symbol, getInternalSymbolName(symbol, symbolName), modifierFlags);
                    }
                }
                if ((symbol.flags & (ts.SymbolFlags.ValueModule | ts.SymbolFlags.NamespaceModule) && (!isConstMergedWithNS || isTypeOnlyNamespace(symbol))) || isConstMergedWithNSPrintableAsSignatureMerge) {
                    serializeModule(symbol, symbolName, modifierFlags);
                }
                // The class meaning serialization should handle serializing all interface members
                if (symbol.flags & ts.SymbolFlags.Interface && !(symbol.flags & ts.SymbolFlags.Class)) {
                    serializeInterface(symbol, symbolName, modifierFlags);
                }
                if (symbol.flags & ts.SymbolFlags.Alias) {
                    serializeAsAlias(symbol, getInternalSymbolName(symbol, symbolName), modifierFlags);
                }
                if (symbol.flags & ts.SymbolFlags.Property && symbol.escapedName === ts.InternalSymbolName.ExportEquals) {
                    serializeMaybeAliasAssignment(symbol);
                }
                if (symbol.flags & ts.SymbolFlags.ExportStar) {
                    // synthesize export * from "moduleReference"
                    // Straightforward - only one thing to do - make an export declaration
                    if (symbol.declarations) {
                        for (const node of symbol.declarations) {
                            const resolvedModule = resolveExternalModuleName(node, (node as ts.ExportDeclaration).moduleSpecifier!);
                            if (!resolvedModule) continue;
                            addResult(ts.factory.createExportDeclaration(/*modifiers*/ undefined, /*isTypeOnly*/ false, /*exportClause*/ undefined, ts.factory.createStringLiteral(getSpecifierForModuleSymbol(resolvedModule, context))), ts.ModifierFlags.None);
                        }
                    }
                }
                if (needsPostExportDefault) {
                    addResult(ts.factory.createExportAssignment(/*modifiers*/ undefined, /*isExportAssignment*/ false, ts.factory.createIdentifier(getInternalSymbolName(symbol, symbolName))), ts.ModifierFlags.None);
                }
                else if (needsExportDeclaration) {
                    addResult(ts.factory.createExportDeclaration(
                        /*modifiers*/ undefined,
                        /*isTypeOnly*/ false,
                        ts.factory.createNamedExports([ts.factory.createExportSpecifier(/*isTypeOnly*/ false, getInternalSymbolName(symbol, symbolName), symbolName)])
                    ), ts.ModifierFlags.None);
                }
            }

            function includePrivateSymbol(symbol: ts.Symbol) {
                if (ts.some(symbol.declarations, ts.isParameterDeclaration)) return;
                ts.Debug.assertIsDefined(deferredPrivatesStack[deferredPrivatesStack.length - 1]);
                getUnusedName(ts.unescapeLeadingUnderscores(symbol.escapedName), symbol); // Call to cache unique name for symbol
                // Blanket moving (import) aliases into the root private context should work, since imports are not valid within namespaces
                // (so they must have been in the root to begin with if they were real imports) cjs `require` aliases (an upcoming feature)
                // will throw a wrench in this, since those may have been nested, but we'll need to synthesize them in the outer scope
                // anyway, as that's the only place the import they translate to is valid. In such a case, we might need to use a unique name
                // for the moved import; which hopefully the above `getUnusedName` call should produce.
                const isExternalImportAlias = !!(symbol.flags & ts.SymbolFlags.Alias) && !ts.some(symbol.declarations, d =>
                    !!ts.findAncestor(d, ts.isExportDeclaration) ||
                    ts.isNamespaceExport(d) ||
                    (ts.isImportEqualsDeclaration(d) && !ts.isExternalModuleReference(d.moduleReference))
                );
                deferredPrivatesStack[isExternalImportAlias ? 0 : (deferredPrivatesStack.length - 1)].set(getSymbolId(symbol), symbol);
            }

            function isExportingScope(enclosingDeclaration: ts.Node) {
                return ((ts.isSourceFile(enclosingDeclaration) && (ts.isExternalOrCommonJsModule(enclosingDeclaration) || ts.isJsonSourceFile(enclosingDeclaration))) ||
                    (ts.isAmbientModule(enclosingDeclaration) && !ts.isGlobalScopeAugmentation(enclosingDeclaration)));
            }

            // Prepends a `declare` and/or `export` modifier if the context requires it, and then adds `node` to `result` and returns `node`
            function addResult(node: ts.Statement, additionalModifierFlags: ts.ModifierFlags) {
                if (ts.canHaveModifiers(node)) {
                    let newModifierFlags: ts.ModifierFlags = ts.ModifierFlags.None;
                    const enclosingDeclaration = context.enclosingDeclaration &&
                        (ts.isJSDocTypeAlias(context.enclosingDeclaration) ? ts.getSourceFileOfNode(context.enclosingDeclaration) : context.enclosingDeclaration);
                    if (additionalModifierFlags & ts.ModifierFlags.Export &&
                        enclosingDeclaration && (isExportingScope(enclosingDeclaration) || ts.isModuleDeclaration(enclosingDeclaration)) &&
                        ts.canHaveExportModifier(node)
                    ) {
                        // Classes, namespaces, variables, functions, interfaces, and types should all be `export`ed in a module context if not private
                        newModifierFlags |= ts.ModifierFlags.Export;
                    }
                    if (addingDeclare && !(newModifierFlags & ts.ModifierFlags.Export) &&
                        (!enclosingDeclaration || !(enclosingDeclaration.flags & ts.NodeFlags.Ambient)) &&
                        (ts.isEnumDeclaration(node) || ts.isVariableStatement(node) || ts.isFunctionDeclaration(node) || ts.isClassDeclaration(node) || ts.isModuleDeclaration(node))) {
                        // Classes, namespaces, variables, enums, and functions all need `declare` modifiers to be valid in a declaration file top-level scope
                        newModifierFlags |= ts.ModifierFlags.Ambient;
                    }
                    if ((additionalModifierFlags & ts.ModifierFlags.Default) && (ts.isClassDeclaration(node) || ts.isInterfaceDeclaration(node) || ts.isFunctionDeclaration(node))) {
                        newModifierFlags |= ts.ModifierFlags.Default;
                    }
                    if (newModifierFlags) {
                        node = ts.factory.updateModifiers(node, newModifierFlags | ts.getEffectiveModifierFlags(node));
                    }
                }
                results.push(node);
            }

            function serializeTypeAlias(symbol: ts.Symbol, symbolName: string, modifierFlags: ts.ModifierFlags) {
                const aliasType = getDeclaredTypeOfTypeAlias(symbol);
                const typeParams = getSymbolLinks(symbol).typeParameters;
                const typeParamDecls = ts.map(typeParams, p => typeParameterToDeclaration(p, context));
                const jsdocAliasDecl = symbol.declarations?.find(ts.isJSDocTypeAlias);
                const commentText = ts.getTextOfJSDocComment(jsdocAliasDecl ? jsdocAliasDecl.comment || jsdocAliasDecl.parent.comment : undefined);
                const oldFlags = context.flags;
                context.flags |= ts.NodeBuilderFlags.InTypeAlias;
                const oldEnclosingDecl = context.enclosingDeclaration;
                context.enclosingDeclaration = jsdocAliasDecl;
                const typeNode = jsdocAliasDecl && jsdocAliasDecl.typeExpression
                    && ts.isJSDocTypeExpression(jsdocAliasDecl.typeExpression)
                    && serializeExistingTypeNode(context, jsdocAliasDecl.typeExpression.type, includePrivateSymbol, bundled)
                    || typeToTypeNodeHelper(aliasType, context);
                addResult(ts.setSyntheticLeadingComments(
                    ts.factory.createTypeAliasDeclaration(/*modifiers*/ undefined, getInternalSymbolName(symbol, symbolName), typeParamDecls, typeNode),
                    !commentText ? [] : [{ kind: ts.SyntaxKind.MultiLineCommentTrivia, text: "*\n * " + commentText.replace(/\n/g, "\n * ") + "\n ", pos: -1, end: -1, hasTrailingNewLine: true }]
                ), modifierFlags);
                context.flags = oldFlags;
                context.enclosingDeclaration = oldEnclosingDecl;
            }

            function serializeInterface(symbol: ts.Symbol, symbolName: string, modifierFlags: ts.ModifierFlags) {
                const interfaceType = getDeclaredTypeOfClassOrInterface(symbol);
                const localParams = getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol);
                const typeParamDecls = ts.map(localParams, p => typeParameterToDeclaration(p, context));
                const baseTypes = getBaseTypes(interfaceType);
                const baseType = ts.length(baseTypes) ? getIntersectionType(baseTypes) : undefined;
                const members = ts.flatMap<ts.Symbol, ts.TypeElement>(getPropertiesOfType(interfaceType), p => serializePropertySymbolForInterface(p, baseType));
                const callSignatures = serializeSignatures(ts.SignatureKind.Call, interfaceType, baseType, ts.SyntaxKind.CallSignature) as ts.CallSignatureDeclaration[];
                const constructSignatures = serializeSignatures(ts.SignatureKind.Construct, interfaceType, baseType, ts.SyntaxKind.ConstructSignature) as ts.ConstructSignatureDeclaration[];
                const indexSignatures = serializeIndexSignatures(interfaceType, baseType);

                const heritageClauses = !ts.length(baseTypes) ? undefined : [ts.factory.createHeritageClause(ts.SyntaxKind.ExtendsKeyword, ts.mapDefined(baseTypes, b => trySerializeAsTypeReference(b, ts.SymbolFlags.Value)))];
                addResult(ts.factory.createInterfaceDeclaration(
                    /*modifiers*/ undefined,
                    getInternalSymbolName(symbol, symbolName),
                    typeParamDecls,
                    heritageClauses,
                    [...indexSignatures, ...constructSignatures, ...callSignatures, ...members]
                ), modifierFlags);
            }

            function getNamespaceMembersForSerialization(symbol: ts.Symbol) {
                return !symbol.exports ? [] : ts.filter(ts.arrayFrom(symbol.exports.values()), isNamespaceMember);
            }

            function isTypeOnlyNamespace(symbol: ts.Symbol) {
                return ts.every(getNamespaceMembersForSerialization(symbol), m => !(getAllSymbolFlags(resolveSymbol(m)) & ts.SymbolFlags.Value));
            }

            function serializeModule(symbol: ts.Symbol, symbolName: string, modifierFlags: ts.ModifierFlags) {
                const members = getNamespaceMembersForSerialization(symbol);
                // Split NS members up by declaration - members whose parent symbol is the ns symbol vs those whose is not (but were added in later via merging)
                const locationMap = ts.arrayToMultiMap(members, m => m.parent && m.parent === symbol ? "real" : "merged");
                const realMembers = locationMap.get("real") || ts.emptyArray;
                const mergedMembers = locationMap.get("merged") || ts.emptyArray;
                // TODO: `suppressNewPrivateContext` is questionable -we need to simply be emitting privates in whatever scope they were declared in, rather
                // than whatever scope we traverse to them in. That's a bit of a complex rewrite, since we're not _actually_ tracking privates at all in advance,
                // so we don't even have placeholders to fill in.
                if (ts.length(realMembers)) {
                    const localName = getInternalSymbolName(symbol, symbolName);
                    serializeAsNamespaceDeclaration(realMembers, localName, modifierFlags, !!(symbol.flags & (ts.SymbolFlags.Function | ts.SymbolFlags.Assignment)));
                }
                if (ts.length(mergedMembers)) {
                    const containingFile = ts.getSourceFileOfNode(context.enclosingDeclaration);
                    const localName = getInternalSymbolName(symbol, symbolName);
                    const nsBody = ts.factory.createModuleBlock([ts.factory.createExportDeclaration(
                        /*modifiers*/ undefined,
                        /*isTypeOnly*/ false,
                        ts.factory.createNamedExports(ts.mapDefined(ts.filter(mergedMembers, n => n.escapedName !== ts.InternalSymbolName.ExportEquals), s => {
                            const name = ts.unescapeLeadingUnderscores(s.escapedName);
                            const localName = getInternalSymbolName(s, name);
                            const aliasDecl = s.declarations && getDeclarationOfAliasSymbol(s);
                            if (containingFile && (aliasDecl ? containingFile !== ts.getSourceFileOfNode(aliasDecl) : !ts.some(s.declarations, d => ts.getSourceFileOfNode(d) === containingFile))) {
                                context.tracker?.reportNonlocalAugmentation?.(containingFile, symbol, s);
                                return undefined;
                            }
                            const target = aliasDecl && getTargetOfAliasDeclaration(aliasDecl, /*dontRecursivelyResolve*/ true);
                            includePrivateSymbol(target || s);
                            const targetName = target ? getInternalSymbolName(target, ts.unescapeLeadingUnderscores(target.escapedName)) : localName;
                            return ts.factory.createExportSpecifier(/*isTypeOnly*/ false, name === targetName ? undefined : targetName, name);
                        }))
                    )]);
                    addResult(ts.factory.createModuleDeclaration(
                        /*modifiers*/ undefined,
                        ts.factory.createIdentifier(localName),
                        nsBody,
                        ts.NodeFlags.Namespace
                    ), ts.ModifierFlags.None);
                }
            }

            function serializeEnum(symbol: ts.Symbol, symbolName: string, modifierFlags: ts.ModifierFlags) {
                addResult(ts.factory.createEnumDeclaration(
                    ts.factory.createModifiersFromModifierFlags(isConstEnumSymbol(symbol) ? ts.ModifierFlags.Const : 0),
                    getInternalSymbolName(symbol, symbolName),
                    ts.map(ts.filter(getPropertiesOfType(getTypeOfSymbol(symbol)), p => !!(p.flags & ts.SymbolFlags.EnumMember)), p => {
                        // TODO: Handle computed names
                        // I hate that to get the initialized value we need to walk back to the declarations here; but there's no
                        // other way to get the possible const value of an enum member that I'm aware of, as the value is cached
                        // _on the declaration_, not on the declaration's symbol...
                        const initializedValue = p.declarations && p.declarations[0] && ts.isEnumMember(p.declarations[0]) ? getConstantValue(p.declarations[0]) : undefined;
                        return ts.factory.createEnumMember(ts.unescapeLeadingUnderscores(p.escapedName), initializedValue === undefined ? undefined :
                            typeof initializedValue === "string" ? ts.factory.createStringLiteral(initializedValue) :
                            ts.factory.createNumericLiteral(initializedValue));
                    })
                ), modifierFlags);
            }

            function serializeAsFunctionNamespaceMerge(type: ts.Type, symbol: ts.Symbol, localName: string, modifierFlags: ts.ModifierFlags) {
                const signatures = getSignaturesOfType(type, ts.SignatureKind.Call);
                for (const sig of signatures) {
                    // Each overload becomes a separate function declaration, in order
                    const decl = signatureToSignatureDeclarationHelper(sig, ts.SyntaxKind.FunctionDeclaration, context, { name: ts.factory.createIdentifier(localName), privateSymbolVisitor: includePrivateSymbol, bundledImports: bundled }) as ts.FunctionDeclaration;
                    addResult(ts.setTextRange(decl, getSignatureTextRangeLocation(sig)), modifierFlags);
                }
                // Module symbol emit will take care of module-y members, provided it has exports
                if (!(symbol.flags & (ts.SymbolFlags.ValueModule | ts.SymbolFlags.NamespaceModule) && !!symbol.exports && !!symbol.exports.size)) {
                    const props = ts.filter(getPropertiesOfType(type), isNamespaceMember);
                    serializeAsNamespaceDeclaration(props, localName, modifierFlags, /*suppressNewPrivateContext*/ true);
                }
            }

            function getSignatureTextRangeLocation(signature: ts.Signature) {
                if (signature.declaration && signature.declaration.parent) {
                    if (ts.isBinaryExpression(signature.declaration.parent) && ts.getAssignmentDeclarationKind(signature.declaration.parent) === ts.AssignmentDeclarationKind.Property) {
                        return signature.declaration.parent;
                    }
                    // for expressions assigned to `var`s, use the `var` as the text range
                    if (ts.isVariableDeclaration(signature.declaration.parent) && signature.declaration.parent.parent) {
                        return signature.declaration.parent.parent;
                    }
                }
                return signature.declaration;
            }

            function serializeAsNamespaceDeclaration(props: readonly ts.Symbol[], localName: string, modifierFlags: ts.ModifierFlags, suppressNewPrivateContext: boolean) {
                if (ts.length(props)) {
                    const localVsRemoteMap = ts.arrayToMultiMap(props, p =>
                        !ts.length(p.declarations) || ts.some(p.declarations, d =>
                            ts.getSourceFileOfNode(d) === ts.getSourceFileOfNode(context.enclosingDeclaration!)
                        ) ? "local" : "remote"
                    );
                    const localProps = localVsRemoteMap.get("local") || ts.emptyArray;
                    // handle remote props first - we need to make an `import` declaration that points at the module containing each remote
                    // prop in the outermost scope (TODO: a namespace within a namespace would need to be appropriately handled by this)
                    // Example:
                    // import Foo_1 = require("./exporter");
                    // export namespace ns {
                    //     import Foo = Foo_1.Foo;
                    //     export { Foo };
                    //     export const c: number;
                    // }
                    // This is needed because in JS, statements like `const x = require("./f")` support both type and value lookup, even if they're
                    // normally just value lookup (so it functions kinda like an alias even when it's not an alias)
                    // _Usually_, we'll simply print the top-level as an alias instead of a `var` in such situations, however is is theoretically
                    // possible to encounter a situation where a type has members from both the current file and other files - in those situations,
                    // emit akin to the above would be needed.

                    // Add a namespace
                    // Create namespace as non-synthetic so it is usable as an enclosing declaration
                    let fakespace = ts.parseNodeFactory.createModuleDeclaration(/*modifiers*/ undefined, ts.factory.createIdentifier(localName), ts.factory.createModuleBlock([]), ts.NodeFlags.Namespace);
                    ts.setParent(fakespace, enclosingDeclaration as ts.SourceFile | ts.NamespaceDeclaration);
                    fakespace.locals = ts.createSymbolTable(props);
                    fakespace.symbol = props[0].parent!;

                    const oldResults = results;
                    results = [];
                    const oldAddingDeclare = addingDeclare;
                    addingDeclare = false;
                    const subcontext = { ...context, enclosingDeclaration: fakespace };
                    const oldContext = context;
                    context = subcontext;
                    // TODO: implement handling for the localVsRemoteMap.get("remote") - should be difficult to trigger (see comment above), as only interesting cross-file js merges should make this possible
                    visitSymbolTable(ts.createSymbolTable(localProps), suppressNewPrivateContext, /*propertyAsAlias*/ true);
                    context = oldContext;
                    addingDeclare = oldAddingDeclare;
                    const declarations = results;
                    results = oldResults;
                    // replace namespace with synthetic version
                    const defaultReplaced = ts.map(declarations, d => ts.isExportAssignment(d) && !d.isExportEquals && ts.isIdentifier(d.expression) ? ts.factory.createExportDeclaration(
                        /*modifiers*/ undefined,
                        /*isTypeOnly*/ false,
                        ts.factory.createNamedExports([ts.factory.createExportSpecifier(/*isTypeOnly*/ false, d.expression, ts.factory.createIdentifier(ts.InternalSymbolName.Default))])
                    ) : d);
                    const exportModifierStripped = ts.every(defaultReplaced, d => ts.hasSyntacticModifier(d, ts.ModifierFlags.Export)) ? ts.map(defaultReplaced, removeExportModifier) : defaultReplaced;
                    fakespace = ts.factory.updateModuleDeclaration(
                        fakespace,
                        fakespace.modifiers,
                        fakespace.name,
                        ts.factory.createModuleBlock(exportModifierStripped));
                    addResult(fakespace, modifierFlags); // namespaces can never be default exported
                }
            }

            function isNamespaceMember(p: ts.Symbol) {
                return !!(p.flags & (ts.SymbolFlags.Type | ts.SymbolFlags.Namespace | ts.SymbolFlags.Alias)) ||
                    !(p.flags & ts.SymbolFlags.Prototype || p.escapedName === "prototype" || p.valueDeclaration && ts.isStatic(p.valueDeclaration) && ts.isClassLike(p.valueDeclaration.parent));
            }

            function sanitizeJSDocImplements(clauses: readonly ts.ExpressionWithTypeArguments[]): ts.ExpressionWithTypeArguments[] | undefined {
                const result = ts.mapDefined(clauses, e => {
                    const oldEnclosing = context.enclosingDeclaration;
                    context.enclosingDeclaration = e;
                    let expr = e.expression;
                    if (ts.isEntityNameExpression(expr)) {
                        if (ts.isIdentifier(expr) && ts.idText(expr) === "") {
                            return cleanup(/*result*/ undefined); // Empty heritage clause, should be an error, but prefer emitting no heritage clauses to reemitting the empty one
                        }
                        let introducesError: boolean;
                        ({ introducesError, node: expr } = trackExistingEntityName(expr, context, includePrivateSymbol));
                        if (introducesError) {
                            return cleanup(/*result*/ undefined);
                        }
                    }
                    return cleanup(ts.factory.createExpressionWithTypeArguments(expr,
                        ts.map(e.typeArguments, a =>
                            serializeExistingTypeNode(context, a, includePrivateSymbol, bundled)
                            || typeToTypeNodeHelper(getTypeFromTypeNode(a), context)
                        )
                    ));

                    function cleanup<T>(result: T): T {
                        context.enclosingDeclaration = oldEnclosing;
                        return result;
                    }
                });
                if (result.length === clauses.length) {
                    return result;
                }
                return undefined;
            }

            function serializeAsClass(symbol: ts.Symbol, localName: string, modifierFlags: ts.ModifierFlags) {
                const originalDecl = symbol.declarations?.find(ts.isClassLike);
                const oldEnclosing = context.enclosingDeclaration;
                context.enclosingDeclaration = originalDecl || oldEnclosing;
                const localParams = getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol);
                const typeParamDecls = ts.map(localParams, p => typeParameterToDeclaration(p, context));
                const classType = getDeclaredTypeOfClassOrInterface(symbol);
                const baseTypes = getBaseTypes(classType);
                const originalImplements = originalDecl && ts.getEffectiveImplementsTypeNodes(originalDecl);
                const implementsExpressions = originalImplements && sanitizeJSDocImplements(originalImplements)
                    || ts.mapDefined(getImplementsTypes(classType), serializeImplementedType);
                const staticType = getTypeOfSymbol(symbol);
                const isClass = !!staticType.symbol?.valueDeclaration && ts.isClassLike(staticType.symbol.valueDeclaration);
                const staticBaseType = isClass
                    ? getBaseConstructorTypeOfClass(staticType as ts.InterfaceType)
                    : anyType;
                const heritageClauses = [
                    ...!ts.length(baseTypes) ? [] : [ts.factory.createHeritageClause(ts.SyntaxKind.ExtendsKeyword, ts.map(baseTypes, b => serializeBaseType(b, staticBaseType, localName)))],
                    ...!ts.length(implementsExpressions) ? [] : [ts.factory.createHeritageClause(ts.SyntaxKind.ImplementsKeyword, implementsExpressions)]
                ];
                const symbolProps = getNonInheritedProperties(classType, baseTypes, getPropertiesOfType(classType));
                const publicSymbolProps = ts.filter(symbolProps, s => {
                    // `valueDeclaration` could be undefined if inherited from
                    // a union/intersection base type, but inherited properties
                    // don't matter here.
                    const valueDecl = s.valueDeclaration;
                    return !!valueDecl && !(ts.isNamedDeclaration(valueDecl) && ts.isPrivateIdentifier(valueDecl.name));
                });
                const hasPrivateIdentifier = ts.some(symbolProps, s => {
                    // `valueDeclaration` could be undefined if inherited from
                    // a union/intersection base type, but inherited properties
                    // don't matter here.
                    const valueDecl = s.valueDeclaration;
                    return !!valueDecl && ts.isNamedDeclaration(valueDecl) && ts.isPrivateIdentifier(valueDecl.name);
                });
                // Boil down all private properties into a single one.
                const privateProperties = hasPrivateIdentifier ?
                    [ts.factory.createPropertyDeclaration(
                        /*modifiers*/ undefined,
                        ts.factory.createPrivateIdentifier("#private"),
                        /*questionOrExclamationToken*/ undefined,
                        /*type*/ undefined,
                        /*initializer*/ undefined,
                    )] :
                    ts.emptyArray;
                const publicProperties = ts.flatMap<ts.Symbol, ts.ClassElement>(publicSymbolProps, p => serializePropertySymbolForClass(p, /*isStatic*/ false, baseTypes[0]));
                // Consider static members empty if symbol also has function or module meaning - function namespacey emit will handle statics
                const staticMembers = ts.flatMap(
                    ts.filter(getPropertiesOfType(staticType), p => !(p.flags & ts.SymbolFlags.Prototype) && p.escapedName !== "prototype" && !isNamespaceMember(p)),
                    p => serializePropertySymbolForClass(p, /*isStatic*/ true, staticBaseType));
                // When we encounter an `X.prototype.y` assignment in a JS file, we bind `X` as a class regardless as to whether
                // the value is ever initialized with a class or function-like value. For cases where `X` could never be
                // created via `new`, we will inject a `private constructor()` declaration to indicate it is not createable.
                const isNonConstructableClassLikeInJsFile =
                    !isClass &&
                    !!symbol.valueDeclaration &&
                    ts.isInJSFile(symbol.valueDeclaration) &&
                    !ts.some(getSignaturesOfType(staticType, ts.SignatureKind.Construct));
                const constructors = isNonConstructableClassLikeInJsFile ?
                    [ts.factory.createConstructorDeclaration(ts.factory.createModifiersFromModifierFlags(ts.ModifierFlags.Private), [], /*body*/ undefined)] :
                    serializeSignatures(ts.SignatureKind.Construct, staticType, staticBaseType, ts.SyntaxKind.Constructor) as ts.ConstructorDeclaration[];
                const indexSignatures = serializeIndexSignatures(classType, baseTypes[0]);
                context.enclosingDeclaration = oldEnclosing;
                addResult(ts.setTextRange(ts.factory.createClassDeclaration(
                    /*modifiers*/ undefined,
                    localName,
                    typeParamDecls,
                    heritageClauses,
                    [...indexSignatures, ...staticMembers, ...constructors, ...publicProperties, ...privateProperties]
                ), symbol.declarations && ts.filter(symbol.declarations, d => ts.isClassDeclaration(d) || ts.isClassExpression(d))[0]), modifierFlags);
            }

            function getSomeTargetNameFromDeclarations(declarations: ts.Declaration[] | undefined) {
                return ts.firstDefined(declarations, d => {
                    if (ts.isImportSpecifier(d) || ts.isExportSpecifier(d)) {
                        return ts.idText(d.propertyName || d.name);
                    }
                    if (ts.isBinaryExpression(d) || ts.isExportAssignment(d)) {
                        const expression = ts.isExportAssignment(d) ? d.expression : d.right;
                        if (ts.isPropertyAccessExpression(expression)) {
                            return ts.idText(expression.name);
                        }
                    }
                    if (isAliasSymbolDeclaration(d)) {
                        // This is... heuristic, at best. But it's probably better than always printing the name of the shorthand ambient module.
                        const name = ts.getNameOfDeclaration(d);
                        if (name && ts.isIdentifier(name)) {
                            return ts.idText(name);
                        }
                    }
                    return undefined;
                });
            }

            function serializeAsAlias(symbol: ts.Symbol, localName: string, modifierFlags: ts.ModifierFlags) {
                // synthesize an alias, eg `export { symbolName as Name }`
                // need to mark the alias `symbol` points at
                // as something we need to serialize as a private declaration as well
                const node = getDeclarationOfAliasSymbol(symbol);
                if (!node) return ts.Debug.fail();
                const target = getMergedSymbol(getTargetOfAliasDeclaration(node, /*dontRecursivelyResolve*/ true));
                if (!target) {
                    return;
                }
                // If `target` refers to a shorthand module symbol, the name we're trying to pull out isn;t recoverable from the target symbol
                // In such a scenario, we must fall back to looking for an alias declaration on `symbol` and pulling the target name from that
                let verbatimTargetName = ts.isShorthandAmbientModuleSymbol(target) && getSomeTargetNameFromDeclarations(symbol.declarations) || ts.unescapeLeadingUnderscores(target.escapedName);
                if (verbatimTargetName === ts.InternalSymbolName.ExportEquals && (ts.getESModuleInterop(compilerOptions) || compilerOptions.allowSyntheticDefaultImports)) {
                    // target refers to an `export=` symbol that was hoisted into a synthetic default - rename here to match
                    verbatimTargetName = ts.InternalSymbolName.Default;
                }
                const targetName = getInternalSymbolName(target, verbatimTargetName);
                includePrivateSymbol(target); // the target may be within the same scope - attempt to serialize it first
                switch (node.kind) {
                    case ts.SyntaxKind.BindingElement:
                        if (node.parent?.parent?.kind === ts.SyntaxKind.VariableDeclaration) {
                            // const { SomeClass } = require('./lib');
                            const specifier = getSpecifierForModuleSymbol(target.parent || target, context); // './lib'
                            const { propertyName } = node as ts.BindingElement;
                            addResult(ts.factory.createImportDeclaration(
                                /*modifiers*/ undefined,
                                ts.factory.createImportClause(/*isTypeOnly*/ false, /*name*/ undefined, ts.factory.createNamedImports([ts.factory.createImportSpecifier(
                                    /*isTypeOnly*/ false,
                                    propertyName && ts.isIdentifier(propertyName) ? ts.factory.createIdentifier(ts.idText(propertyName)) : undefined,
                                    ts.factory.createIdentifier(localName)
                                )])),
                                ts.factory.createStringLiteral(specifier),
                                /*importClause*/ undefined
                            ), ts.ModifierFlags.None);
                            break;
                        }
                        // We don't know how to serialize this (nested?) binding element
                        ts.Debug.failBadSyntaxKind(node.parent?.parent || node, "Unhandled binding element grandparent kind in declaration serialization");
                        break;
                    case ts.SyntaxKind.ShorthandPropertyAssignment:
                        if (node.parent?.parent?.kind === ts.SyntaxKind.BinaryExpression) {
                            // module.exports = { SomeClass }
                            serializeExportSpecifier(
                                ts.unescapeLeadingUnderscores(symbol.escapedName),
                                targetName
                            );
                        }
                        break;
                    case ts.SyntaxKind.VariableDeclaration:
                        // commonjs require: const x = require('y')
                        if (ts.isPropertyAccessExpression((node as ts.VariableDeclaration).initializer!)) {
                            // const x = require('y').z
                            const initializer = (node as ts.VariableDeclaration).initializer! as ts.PropertyAccessExpression; // require('y').z
                            const uniqueName = ts.factory.createUniqueName(localName); // _x
                            const specifier = getSpecifierForModuleSymbol(target.parent || target, context); // 'y'
                            // import _x = require('y');
                            addResult(ts.factory.createImportEqualsDeclaration(
                                /*modifiers*/ undefined,
                                /*isTypeOnly*/ false,
                                uniqueName,
                                ts.factory.createExternalModuleReference(ts.factory.createStringLiteral(specifier))
                            ), ts.ModifierFlags.None);
                            // import x = _x.z
                            addResult(ts.factory.createImportEqualsDeclaration(
                                /*modifiers*/ undefined,
                                /*isTypeOnly*/ false,
                                ts.factory.createIdentifier(localName),
                                ts.factory.createQualifiedName(uniqueName, initializer.name as ts.Identifier),
                            ), modifierFlags);
                            break;
                        }
                        // else fall through and treat commonjs require just like import=
                    case ts.SyntaxKind.ImportEqualsDeclaration:
                        // This _specifically_ only exists to handle json declarations - where we make aliases, but since
                        // we emit no declarations for the json document, must not refer to it in the declarations
                        if (target.escapedName === ts.InternalSymbolName.ExportEquals && ts.some(target.declarations, ts.isJsonSourceFile)) {
                            serializeMaybeAliasAssignment(symbol);
                            break;
                        }
                        // Could be a local `import localName = ns.member` or
                        // an external `import localName = require("whatever")`
                        const isLocalImport = !(target.flags & ts.SymbolFlags.ValueModule) && !ts.isVariableDeclaration(node);
                        addResult(ts.factory.createImportEqualsDeclaration(
                            /*modifiers*/ undefined,
                            /*isTypeOnly*/ false,
                            ts.factory.createIdentifier(localName),
                            isLocalImport
                                ? symbolToName(target, context, ts.SymbolFlags.All, /*expectsIdentifier*/ false)
                                : ts.factory.createExternalModuleReference(ts.factory.createStringLiteral(getSpecifierForModuleSymbol(target, context)))
                        ), isLocalImport ? modifierFlags : ts.ModifierFlags.None);
                        break;
                    case ts.SyntaxKind.NamespaceExportDeclaration:
                        // export as namespace foo
                        // TODO: Not part of a file's local or export symbol tables
                        // Is bound into file.symbol.globalExports instead, which we don't currently traverse
                        addResult(ts.factory.createNamespaceExportDeclaration(ts.idText((node as ts.NamespaceExportDeclaration).name)), ts.ModifierFlags.None);
                        break;
                    case ts.SyntaxKind.ImportClause:
                        addResult(ts.factory.createImportDeclaration(
                            /*modifiers*/ undefined,
                            ts.factory.createImportClause(/*isTypeOnly*/ false, ts.factory.createIdentifier(localName), /*namedBindings*/ undefined),
                            // We use `target.parent || target` below as `target.parent` is unset when the target is a module which has been export assigned
                            // And then made into a default by the `esModuleInterop` or `allowSyntheticDefaultImports` flag
                            // In such cases, the `target` refers to the module itself already
                            ts.factory.createStringLiteral(getSpecifierForModuleSymbol(target.parent || target, context)),
                             /*assertClause*/ undefined
                        ), ts.ModifierFlags.None);
                        break;
                    case ts.SyntaxKind.NamespaceImport:
                        addResult(ts.factory.createImportDeclaration(
                            /*modifiers*/ undefined,
                            ts.factory.createImportClause(/*isTypeOnly*/ false, /*importClause*/ undefined, ts.factory.createNamespaceImport(ts.factory.createIdentifier(localName))),
                            ts.factory.createStringLiteral(getSpecifierForModuleSymbol(target, context)),
                             /*assertClause*/ undefined
                        ), ts.ModifierFlags.None);
                        break;
                    case ts.SyntaxKind.NamespaceExport:
                        addResult(ts.factory.createExportDeclaration(
                            /*modifiers*/ undefined,
                            /*isTypeOnly*/ false,
                            ts.factory.createNamespaceExport(ts.factory.createIdentifier(localName)),
                            ts.factory.createStringLiteral(getSpecifierForModuleSymbol(target, context))
                        ), ts.ModifierFlags.None);
                        break;
                    case ts.SyntaxKind.ImportSpecifier:
                        addResult(ts.factory.createImportDeclaration(
                            /*modifiers*/ undefined,
                            ts.factory.createImportClause(
                                /*isTypeOnly*/ false,
                                /*importClause*/ undefined,
                                ts.factory.createNamedImports([
                                    ts.factory.createImportSpecifier(
                                        /*isTypeOnly*/ false,
                                        localName !== verbatimTargetName ? ts.factory.createIdentifier(verbatimTargetName) : undefined,
                                        ts.factory.createIdentifier(localName)
                                    )
                                ])),
                            ts.factory.createStringLiteral(getSpecifierForModuleSymbol(target.parent || target, context)),
                             /*assertClause*/ undefined
                        ), ts.ModifierFlags.None);
                        break;
                    case ts.SyntaxKind.ExportSpecifier:
                        // does not use localName because the symbol name in this case refers to the name in the exports table,
                        // which we must exactly preserve
                        const specifier = (node.parent.parent as ts.ExportDeclaration).moduleSpecifier;
                        // targetName is only used when the target is local, as otherwise the target is an alias that points at
                        // another file
                        serializeExportSpecifier(
                            ts.unescapeLeadingUnderscores(symbol.escapedName),
                            specifier ? verbatimTargetName : targetName,
                            specifier && ts.isStringLiteralLike(specifier) ? ts.factory.createStringLiteral(specifier.text) : undefined
                        );
                        break;
                    case ts.SyntaxKind.ExportAssignment:
                        serializeMaybeAliasAssignment(symbol);
                        break;
                    case ts.SyntaxKind.BinaryExpression:
                    case ts.SyntaxKind.PropertyAccessExpression:
                    case ts.SyntaxKind.ElementAccessExpression:
                        // Could be best encoded as though an export specifier or as though an export assignment
                        // If name is default or export=, do an export assignment
                        // Otherwise do an export specifier
                        if (symbol.escapedName === ts.InternalSymbolName.Default || symbol.escapedName === ts.InternalSymbolName.ExportEquals) {
                            serializeMaybeAliasAssignment(symbol);
                        }
                        else {
                            serializeExportSpecifier(localName, targetName);
                        }
                        break;
                    default:
                        return ts.Debug.failBadSyntaxKind(node, "Unhandled alias declaration kind in symbol serializer!");
                }
            }

            function serializeExportSpecifier(localName: string, targetName: string, specifier?: ts.Expression) {
                addResult(ts.factory.createExportDeclaration(
                    /*modifiers*/ undefined,
                    /*isTypeOnly*/ false,
                    ts.factory.createNamedExports([ts.factory.createExportSpecifier(/*isTypeOnly*/ false, localName !== targetName ? targetName : undefined, localName)]),
                    specifier
                ), ts.ModifierFlags.None);
            }

            /**
             * Returns `true` if an export assignment or declaration was produced for the symbol
             */
            function serializeMaybeAliasAssignment(symbol: ts.Symbol): boolean {
                if (symbol.flags & ts.SymbolFlags.Prototype) {
                    return false;
                }
                const name = ts.unescapeLeadingUnderscores(symbol.escapedName);
                const isExportEquals = name === ts.InternalSymbolName.ExportEquals;
                const isDefault = name === ts.InternalSymbolName.Default;
                const isExportAssignmentCompatibleSymbolName = isExportEquals || isDefault;
                // synthesize export = ref
                // ref should refer to either be a locally scoped symbol which we need to emit, or
                // a reference to another namespace/module which we may need to emit an `import` statement for
                const aliasDecl = symbol.declarations && getDeclarationOfAliasSymbol(symbol);
                // serialize what the alias points to, preserve the declaration's initializer
                const target = aliasDecl && getTargetOfAliasDeclaration(aliasDecl, /*dontRecursivelyResolve*/ true);
                // If the target resolves and resolves to a thing defined in this file, emit as an alias, otherwise emit as a const
                if (target && ts.length(target.declarations) && ts.some(target.declarations, d => ts.getSourceFileOfNode(d) === ts.getSourceFileOfNode(enclosingDeclaration))) {
                    // In case `target` refers to a namespace member, look at the declaration and serialize the leftmost symbol in it
                    // eg, `namespace A { export class B {} }; exports = A.B;`
                    // Technically, this is all that's required in the case where the assignment is an entity name expression
                    const expr = aliasDecl && ((ts.isExportAssignment(aliasDecl) || ts.isBinaryExpression(aliasDecl)) ? ts.getExportAssignmentExpression(aliasDecl) : ts.getPropertyAssignmentAliasLikeExpression(aliasDecl as ts.ShorthandPropertyAssignment | ts.PropertyAssignment | ts.PropertyAccessExpression));
                    const first = expr && ts.isEntityNameExpression(expr) ? getFirstNonModuleExportsIdentifier(expr) : undefined;
                    const referenced = first && resolveEntityName(first, ts.SymbolFlags.All, /*ignoreErrors*/ true, /*dontResolveAlias*/ true, enclosingDeclaration);
                    if (referenced || target) {
                        includePrivateSymbol(referenced || target);
                    }

                    // We disable the context's symbol tracker for the duration of this name serialization
                    // as, by virtue of being here, the name is required to print something, and we don't want to
                    // issue a visibility error on it. Only anonymous classes that an alias points at _would_ issue
                    // a visibility error here (as they're not visible within any scope), but we want to hoist them
                    // into the containing scope anyway, so we want to skip the visibility checks.
                    const oldTrack = context.tracker.trackSymbol;
                    context.tracker.trackSymbol = () => false;
                    if (isExportAssignmentCompatibleSymbolName) {
                        results.push(ts.factory.createExportAssignment(
                            /*modifiers*/ undefined,
                            isExportEquals,
                            symbolToExpression(target, context, ts.SymbolFlags.All)
                        ));
                    }
                    else {
                        if (first === expr && first) {
                            // serialize as `export {target as name}`
                            serializeExportSpecifier(name, ts.idText(first));
                        }
                        else if (expr && ts.isClassExpression(expr)) {
                            serializeExportSpecifier(name, getInternalSymbolName(target, ts.symbolName(target)));
                        }
                        else {
                            // serialize as `import _Ref = t.arg.et; export { _Ref as name }`
                            const varName = getUnusedName(name, symbol);
                            addResult(ts.factory.createImportEqualsDeclaration(
                                /*modifiers*/ undefined,
                                /*isTypeOnly*/ false,
                                ts.factory.createIdentifier(varName),
                                symbolToName(target, context, ts.SymbolFlags.All, /*expectsIdentifier*/ false)
                            ), ts.ModifierFlags.None);
                            serializeExportSpecifier(name, varName);
                        }
                    }
                    context.tracker.trackSymbol = oldTrack;
                    return true;
                }
                else {
                    // serialize as an anonymous property declaration
                    const varName = getUnusedName(name, symbol);
                    // We have to use `getWidenedType` here since the object within a json file is unwidened within the file
                    // (Unwidened types can only exist in expression contexts and should never be serialized)
                    const typeToSerialize = getWidenedType(getTypeOfSymbol(getMergedSymbol(symbol)));
                    if (isTypeRepresentableAsFunctionNamespaceMerge(typeToSerialize, symbol)) {
                        // If there are no index signatures and `typeToSerialize` is an object type, emit as a namespace instead of a const
                        serializeAsFunctionNamespaceMerge(typeToSerialize, symbol, varName, isExportAssignmentCompatibleSymbolName ? ts.ModifierFlags.None : ts.ModifierFlags.Export);
                    }
                    else {
                        const statement = ts.factory.createVariableStatement(/*modifiers*/ undefined, ts.factory.createVariableDeclarationList([
                            ts.factory.createVariableDeclaration(varName, /*exclamationToken*/ undefined, serializeTypeForDeclaration(context, typeToSerialize, symbol, enclosingDeclaration, includePrivateSymbol, bundled))
                        ], ts.NodeFlags.Const));
                        // Inlined JSON types exported with [module.]exports= will already emit an export=, so should use `declare`.
                        // Otherwise, the type itself should be exported.
                        addResult(statement,
                            target && target.flags & ts.SymbolFlags.Property && target.escapedName === ts.InternalSymbolName.ExportEquals ? ts.ModifierFlags.Ambient
                            : name === varName ? ts.ModifierFlags.Export
                            : ts.ModifierFlags.None);
                    }
                    if (isExportAssignmentCompatibleSymbolName) {
                        results.push(ts.factory.createExportAssignment(
                            /*modifiers*/ undefined,
                            isExportEquals,
                            ts.factory.createIdentifier(varName)
                        ));
                        return true;
                    }
                    else if (name !== varName) {
                        serializeExportSpecifier(name, varName);
                        return true;
                    }
                    return false;
                }
            }

            function isTypeRepresentableAsFunctionNamespaceMerge(typeToSerialize: ts.Type, hostSymbol: ts.Symbol) {
                // Only object types which are not constructable, or indexable, whose members all come from the
                // context source file, and whose property names are all valid identifiers and not late-bound, _and_
                // whose input is not type annotated (if the input symbol has an annotation we can reuse, we should prefer it)
                const ctxSrc = ts.getSourceFileOfNode(context.enclosingDeclaration);
                return ts.getObjectFlags(typeToSerialize) & (ts.ObjectFlags.Anonymous | ts.ObjectFlags.Mapped) &&
                !ts.length(getIndexInfosOfType(typeToSerialize)) &&
                !isClassInstanceSide(typeToSerialize) && // While a class instance is potentially representable as a NS, prefer printing a reference to the instance type and serializing the class
                !!(ts.length(ts.filter(getPropertiesOfType(typeToSerialize), isNamespaceMember)) || ts.length(getSignaturesOfType(typeToSerialize, ts.SignatureKind.Call))) &&
                !ts.length(getSignaturesOfType(typeToSerialize, ts.SignatureKind.Construct)) && // TODO: could probably serialize as function + ns + class, now that that's OK
                !getDeclarationWithTypeAnnotation(hostSymbol, enclosingDeclaration) &&
                !(typeToSerialize.symbol && ts.some(typeToSerialize.symbol.declarations, d => ts.getSourceFileOfNode(d) !== ctxSrc)) &&
                !ts.some(getPropertiesOfType(typeToSerialize), p => isLateBoundName(p.escapedName)) &&
                !ts.some(getPropertiesOfType(typeToSerialize), p => ts.some(p.declarations, d => ts.getSourceFileOfNode(d) !== ctxSrc)) &&
                ts.every(getPropertiesOfType(typeToSerialize), p => ts.isIdentifierText(ts.symbolName(p), languageVersion));
            }

            function makeSerializePropertySymbol<T extends ts.Node>(createProperty: (
                modifiers: readonly ts.Modifier[] | undefined,
                name: string | ts.PropertyName,
                questionOrExclamationToken: ts.QuestionToken | undefined,
                type: ts.TypeNode | undefined,
                initializer: ts.Expression | undefined
            ) => T, methodKind: ts.SignatureDeclaration["kind"], useAccessors: true): (p: ts.Symbol, isStatic: boolean, baseType: ts.Type | undefined) => (T | ts.AccessorDeclaration | (T | ts.AccessorDeclaration)[]);
            function makeSerializePropertySymbol<T extends ts.Node>(createProperty: (
                modifiers: readonly ts.Modifier[] | undefined,
                name: string | ts.PropertyName,
                questionOrExclamationToken: ts.QuestionToken | undefined,
                type: ts.TypeNode | undefined,
                initializer: ts.Expression | undefined
            ) => T, methodKind: ts.SignatureDeclaration["kind"], useAccessors: false): (p: ts.Symbol, isStatic: boolean, baseType: ts.Type | undefined) => (T | T[]);
            function makeSerializePropertySymbol<T extends ts.Node>(createProperty: (
                modifiers: readonly ts.Modifier[] | undefined,
                name: string | ts.PropertyName,
                questionOrExclamationToken: ts.QuestionToken | undefined,
                type: ts.TypeNode | undefined,
                initializer: ts.Expression | undefined
            ) => T, methodKind: ts.SignatureDeclaration["kind"], useAccessors: boolean): (p: ts.Symbol, isStatic: boolean, baseType: ts.Type | undefined) => (T | ts.AccessorDeclaration | (T | ts.AccessorDeclaration)[]) {
                return function serializePropertySymbol(p: ts.Symbol, isStatic: boolean, baseType: ts.Type | undefined): (T | ts.AccessorDeclaration | (T | ts.AccessorDeclaration)[]) {
                    const modifierFlags = ts.getDeclarationModifierFlagsFromSymbol(p);
                    const isPrivate = !!(modifierFlags & ts.ModifierFlags.Private);
                    if (isStatic && (p.flags & (ts.SymbolFlags.Type | ts.SymbolFlags.Namespace | ts.SymbolFlags.Alias))) {
                        // Only value-only-meaning symbols can be correctly encoded as class statics, type/namespace/alias meaning symbols
                        // need to be merged namespace members
                        return [];
                    }
                    if (p.flags & ts.SymbolFlags.Prototype ||
                        (baseType && getPropertyOfType(baseType, p.escapedName)
                         && isReadonlySymbol(getPropertyOfType(baseType, p.escapedName)!) === isReadonlySymbol(p)
                         && (p.flags & ts.SymbolFlags.Optional) === (getPropertyOfType(baseType, p.escapedName)!.flags & ts.SymbolFlags.Optional)
                         && isTypeIdenticalTo(getTypeOfSymbol(p), getTypeOfPropertyOfType(baseType, p.escapedName)!))) {
                        return [];
                    }
                    const flag = (modifierFlags & ~ts.ModifierFlags.Async) | (isStatic ? ts.ModifierFlags.Static : 0);
                    const name = getPropertyNameNodeForSymbol(p, context);
                    const firstPropertyLikeDecl = p.declarations?.find(ts.or(ts.isPropertyDeclaration, ts.isAccessor, ts.isVariableDeclaration, ts.isPropertySignature, ts.isBinaryExpression, ts.isPropertyAccessExpression));
                    if (p.flags & ts.SymbolFlags.Accessor && useAccessors) {
                        const result: ts.AccessorDeclaration[] = [];
                        if (p.flags & ts.SymbolFlags.SetAccessor) {
                            result.push(ts.setTextRange(ts.factory.createSetAccessorDeclaration(
                                ts.factory.createModifiersFromModifierFlags(flag),
                                name,
                                [ts.factory.createParameterDeclaration(
                                    /*modifiers*/ undefined,
                                    /*dotDotDotToken*/ undefined,
                                    "arg",
                                    /*questionToken*/ undefined,
                                    isPrivate ? undefined : serializeTypeForDeclaration(context, getTypeOfSymbol(p), p, enclosingDeclaration, includePrivateSymbol, bundled)
                                )],
                                /*body*/ undefined
                            ), p.declarations?.find(ts.isSetAccessor) || firstPropertyLikeDecl));
                        }
                        if (p.flags & ts.SymbolFlags.GetAccessor) {
                            const isPrivate = modifierFlags & ts.ModifierFlags.Private;
                            result.push(ts.setTextRange(ts.factory.createGetAccessorDeclaration(
                                ts.factory.createModifiersFromModifierFlags(flag),
                                name,
                                [],
                                isPrivate ? undefined : serializeTypeForDeclaration(context, getTypeOfSymbol(p), p, enclosingDeclaration, includePrivateSymbol, bundled),
                                /*body*/ undefined
                            ), p.declarations?.find(ts.isGetAccessor) || firstPropertyLikeDecl));
                        }
                        return result;
                    }
                    // This is an else/if as accessors and properties can't merge in TS, but might in JS
                    // If this happens, we assume the accessor takes priority, as it imposes more constraints
                    else if (p.flags & (ts.SymbolFlags.Property | ts.SymbolFlags.Variable | ts.SymbolFlags.Accessor)) {
                        return ts.setTextRange(createProperty(
                            ts.factory.createModifiersFromModifierFlags((isReadonlySymbol(p) ? ts.ModifierFlags.Readonly : 0) | flag),
                            name,
                            p.flags & ts.SymbolFlags.Optional ? ts.factory.createToken(ts.SyntaxKind.QuestionToken) : undefined,
                            isPrivate ? undefined : serializeTypeForDeclaration(context, getWriteTypeOfSymbol(p), p, enclosingDeclaration, includePrivateSymbol, bundled),
                            // TODO: https://github.com/microsoft/TypeScript/pull/32372#discussion_r328386357
                            // interface members can't have initializers, however class members _can_
                            /*initializer*/ undefined
                        ), p.declarations?.find(ts.or(ts.isPropertyDeclaration, ts.isVariableDeclaration)) || firstPropertyLikeDecl);
                    }
                    if (p.flags & (ts.SymbolFlags.Method | ts.SymbolFlags.Function)) {
                        const type = getTypeOfSymbol(p);
                        const signatures = getSignaturesOfType(type, ts.SignatureKind.Call);
                        if (flag & ts.ModifierFlags.Private) {
                            return ts.setTextRange(createProperty(
                                ts.factory.createModifiersFromModifierFlags((isReadonlySymbol(p) ? ts.ModifierFlags.Readonly : 0) | flag),
                                name,
                                p.flags & ts.SymbolFlags.Optional ? ts.factory.createToken(ts.SyntaxKind.QuestionToken) : undefined,
                                /*type*/ undefined,
                                /*initializer*/ undefined
                            ), p.declarations?.find(ts.isFunctionLikeDeclaration) || signatures[0] && signatures[0].declaration || p.declarations && p.declarations[0]);
                        }

                        const results = [];
                        for (const sig of signatures) {
                            // Each overload becomes a separate method declaration, in order
                            const decl = signatureToSignatureDeclarationHelper(
                                sig,
                                methodKind,
                                context,
                                {
                                    name,
                                    questionToken: p.flags & ts.SymbolFlags.Optional ? ts.factory.createToken(ts.SyntaxKind.QuestionToken) : undefined,
                                    modifiers: flag ? ts.factory.createModifiersFromModifierFlags(flag) : undefined
                                }
                            );
                            const location = sig.declaration && ts.isPrototypePropertyAssignment(sig.declaration.parent) ? sig.declaration.parent : sig.declaration;
                            results.push(ts.setTextRange(decl, location));
                        }
                        return results as unknown as T[];
                    }
                    // The `Constructor`'s symbol isn't in the class's properties lists, obviously, since it's a signature on the static
                    return ts.Debug.fail(`Unhandled class member kind! ${(p as any).__debugFlags || p.flags}`);
                };
            }

            function serializePropertySymbolForInterface(p: ts.Symbol, baseType: ts.Type | undefined) {
                return serializePropertySymbolForInterfaceWorker(p, /*isStatic*/ false, baseType);
            }

            function serializeSignatures(kind: ts.SignatureKind, input: ts.Type, baseType: ts.Type | undefined, outputKind: ts.SignatureDeclaration["kind"]) {
                const signatures = getSignaturesOfType(input, kind);
                if (kind === ts.SignatureKind.Construct) {
                    if (!baseType && ts.every(signatures, s => ts.length(s.parameters) === 0)) {
                        return []; // No base type, every constructor is empty - elide the extraneous `constructor()`
                    }
                    if (baseType) {
                        // If there is a base type, if every signature in the class is identical to a signature in the baseType, elide all the declarations
                        const baseSigs = getSignaturesOfType(baseType, ts.SignatureKind.Construct);
                        if (!ts.length(baseSigs) && ts.every(signatures, s => ts.length(s.parameters) === 0)) {
                            return []; // Base had no explicit signatures, if all our signatures are also implicit, return an empty list
                        }
                        if (baseSigs.length === signatures.length) {
                            let failed = false;
                            for (let i = 0; i < baseSigs.length; i++) {
                                if (!compareSignaturesIdentical(signatures[i], baseSigs[i], /*partialMatch*/ false, /*ignoreThisTypes*/ false, /*ignoreReturnTypes*/ true, compareTypesIdentical)) {
                                    failed = true;
                                    break;
                                }
                            }
                            if (!failed) {
                                return []; // Every signature was identical - elide constructor list as it is inherited
                            }
                        }
                    }
                    let privateProtected: ts.ModifierFlags = 0;
                    for (const s of signatures) {
                        if (s.declaration) {
                            privateProtected |= ts.getSelectedEffectiveModifierFlags(s.declaration, ts.ModifierFlags.Private | ts.ModifierFlags.Protected);
                        }
                    }
                    if (privateProtected) {
                        return [ts.setTextRange(ts.factory.createConstructorDeclaration(
                            ts.factory.createModifiersFromModifierFlags(privateProtected),
                            /*parameters*/ [],
                            /*body*/ undefined,
                        ), signatures[0].declaration)];
                    }
                }

                const results = [];
                for (const sig of signatures) {
                    // Each overload becomes a separate constructor declaration, in order
                    const decl = signatureToSignatureDeclarationHelper(sig, outputKind, context);
                    results.push(ts.setTextRange(decl, sig.declaration));
                }
                return results;
            }

            function serializeIndexSignatures(input: ts.Type, baseType: ts.Type | undefined) {
                const results: ts.IndexSignatureDeclaration[] = [];
                for (const info of getIndexInfosOfType(input)) {
                    if (baseType) {
                        const baseInfo = getIndexInfoOfType(baseType, info.keyType);
                        if (baseInfo) {
                            if (isTypeIdenticalTo(info.type, baseInfo.type)) {
                                continue; // elide identical index signatures
                            }
                        }
                    }
                    results.push(indexInfoToIndexSignatureDeclarationHelper(info, context, /*typeNode*/ undefined));
                }
                return results;
            }

            function serializeBaseType(t: ts.Type, staticType: ts.Type, rootName: string) {
                const ref = trySerializeAsTypeReference(t, ts.SymbolFlags.Value);
                if (ref) {
                    return ref;
                }
                const tempName = getUnusedName(`${rootName}_base`);
                const statement = ts.factory.createVariableStatement(/*modifiers*/ undefined, ts.factory.createVariableDeclarationList([
                    ts.factory.createVariableDeclaration(tempName, /*exclamationToken*/ undefined, typeToTypeNodeHelper(staticType, context))
                ], ts.NodeFlags.Const));
                addResult(statement, ts.ModifierFlags.None);
                return ts.factory.createExpressionWithTypeArguments(ts.factory.createIdentifier(tempName), /*typeArgs*/ undefined);
            }

            function trySerializeAsTypeReference(t: ts.Type, flags: ts.SymbolFlags) {
                let typeArgs: ts.TypeNode[] | undefined;
                let reference: ts.Expression | undefined;

                // We don't use `isValueSymbolAccessible` below. since that considers alternative containers (like modules)
                // which we can't write out in a syntactically valid way as an expression
                if ((t as ts.TypeReference).target && isSymbolAccessibleByFlags((t as ts.TypeReference).target.symbol, enclosingDeclaration, flags)) {
                    typeArgs = ts.map(getTypeArguments(t as ts.TypeReference), t => typeToTypeNodeHelper(t, context));
                    reference = symbolToExpression((t as ts.TypeReference).target.symbol, context, ts.SymbolFlags.Type);
                }
                else if (t.symbol && isSymbolAccessibleByFlags(t.symbol, enclosingDeclaration, flags)) {
                    reference = symbolToExpression(t.symbol, context, ts.SymbolFlags.Type);
                }
                if (reference) {
                    return ts.factory.createExpressionWithTypeArguments(reference, typeArgs);
                }
            }

            function serializeImplementedType(t: ts.Type) {
                const ref = trySerializeAsTypeReference(t, ts.SymbolFlags.Type);
                if (ref) {
                    return ref;
                }
                if (t.symbol) {
                    return ts.factory.createExpressionWithTypeArguments(symbolToExpression(t.symbol, context, ts.SymbolFlags.Type), /*typeArgs*/ undefined);
                }
            }

            function getUnusedName(input: string, symbol?: ts.Symbol): string {
                const id = symbol ? getSymbolId(symbol) : undefined;
                if (id) {
                    if (context.remappedSymbolNames!.has(id)) {
                        return context.remappedSymbolNames!.get(id)!;
                    }
                }
                if (symbol) {
                    input = getNameCandidateWorker(symbol, input);
                }
                let i = 0;
                const original = input;
                while (context.usedSymbolNames?.has(input)) {
                    i++;
                    input = `${original}_${i}`;
                }
                context.usedSymbolNames?.add(input);
                if (id) {
                    context.remappedSymbolNames!.set(id, input);
                }
                return input;
            }

            function getNameCandidateWorker(symbol: ts.Symbol, localName: string) {
                if (localName === ts.InternalSymbolName.Default || localName === ts.InternalSymbolName.Class || localName === ts.InternalSymbolName.Function) {
                    const flags = context.flags;
                    context.flags |= ts.NodeBuilderFlags.InInitialEntityName;
                    const nameCandidate = getNameOfSymbolAsWritten(symbol, context);
                    context.flags = flags;
                    localName = nameCandidate.length > 0 && ts.isSingleOrDoubleQuote(nameCandidate.charCodeAt(0)) ? ts.stripQuotes(nameCandidate) : nameCandidate;
                }
                if (localName === ts.InternalSymbolName.Default) {
                    localName = "_default";
                }
                else if (localName === ts.InternalSymbolName.ExportEquals) {
                    localName = "_exports";
                }
                localName = ts.isIdentifierText(localName, languageVersion) && !ts.isStringANonContextualKeyword(localName) ? localName : "_" + localName.replace(/[^a-zA-Z0-9]/g, "_");
                return localName;
            }

            function getInternalSymbolName(symbol: ts.Symbol, localName: string) {
                const id = getSymbolId(symbol);
                if (context.remappedSymbolNames!.has(id)) {
                    return context.remappedSymbolNames!.get(id)!;
                }
                localName = getNameCandidateWorker(symbol, localName);
                // The result of this is going to be used as the symbol's name - lock it in, so `getUnusedName` will also pick it up
                context.remappedSymbolNames!.set(id, localName);
                return localName;
            }
        }
    }

    function typePredicateToString(typePredicate: ts.TypePredicate, enclosingDeclaration?: ts.Node, flags: ts.TypeFormatFlags = ts.TypeFormatFlags.UseAliasDefinedOutsideCurrentScope, writer?: ts.EmitTextWriter): string {
        return writer ? typePredicateToStringWorker(writer).getText() : ts.usingSingleLineStringWriter(typePredicateToStringWorker);

        function typePredicateToStringWorker(writer: ts.EmitTextWriter) {
            const predicate = ts.factory.createTypePredicateNode(
                typePredicate.kind === ts.TypePredicateKind.AssertsThis || typePredicate.kind === ts.TypePredicateKind.AssertsIdentifier ? ts.factory.createToken(ts.SyntaxKind.AssertsKeyword) : undefined,
                typePredicate.kind === ts.TypePredicateKind.Identifier || typePredicate.kind === ts.TypePredicateKind.AssertsIdentifier ? ts.factory.createIdentifier(typePredicate.parameterName) : ts.factory.createThisTypeNode(),
                typePredicate.type && nodeBuilder.typeToTypeNode(typePredicate.type, enclosingDeclaration, toNodeBuilderFlags(flags) | ts.NodeBuilderFlags.IgnoreErrors | ts.NodeBuilderFlags.WriteTypeParametersInQualifiedName)! // TODO: GH#18217
            );
            const printer = ts.createPrinter({ removeComments: true });
            const sourceFile = enclosingDeclaration && ts.getSourceFileOfNode(enclosingDeclaration);
            printer.writeNode(ts.EmitHint.Unspecified, predicate, /*sourceFile*/ sourceFile, writer);
            return writer;
        }
    }

    function formatUnionTypes(types: readonly ts.Type[]): ts.Type[] {
        const result: ts.Type[] = [];
        let flags: ts.TypeFlags = 0;
        for (let i = 0; i < types.length; i++) {
            const t = types[i];
            flags |= t.flags;
            if (!(t.flags & ts.TypeFlags.Nullable)) {
                if (t.flags & (ts.TypeFlags.BooleanLiteral | ts.TypeFlags.EnumLiteral)) {
                    const baseType = t.flags & ts.TypeFlags.BooleanLiteral ? booleanType : getBaseTypeOfEnumLiteralType(t as ts.LiteralType);
                    if (baseType.flags & ts.TypeFlags.Union) {
                        const count = (baseType as ts.UnionType).types.length;
                        if (i + count <= types.length && getRegularTypeOfLiteralType(types[i + count - 1]) === getRegularTypeOfLiteralType((baseType as ts.UnionType).types[count - 1])) {
                            result.push(baseType);
                            i += count - 1;
                            continue;
                        }
                    }
                }
                result.push(t);
            }
        }
        if (flags & ts.TypeFlags.Null) result.push(nullType);
        if (flags & ts.TypeFlags.Undefined) result.push(undefinedType);
        return result || types;
    }

    function visibilityToString(flags: ts.ModifierFlags): string | undefined {
        if (flags === ts.ModifierFlags.Private) {
            return "private";
        }
        if (flags === ts.ModifierFlags.Protected) {
            return "protected";
        }
        return "public";
    }

    function getTypeAliasForTypeLiteral(type: ts.Type): ts.Symbol | undefined {
        if (type.symbol && type.symbol.flags & ts.SymbolFlags.TypeLiteral && type.symbol.declarations) {
            const node = ts.walkUpParenthesizedTypes(type.symbol.declarations[0].parent);
            if (node.kind === ts.SyntaxKind.TypeAliasDeclaration) {
                return getSymbolOfNode(node);
            }
        }
        return undefined;
    }

    function isTopLevelInExternalModuleAugmentation(node: ts.Node): boolean {
        return node && node.parent &&
            node.parent.kind === ts.SyntaxKind.ModuleBlock &&
            ts.isExternalModuleAugmentation(node.parent.parent);
    }

    interface NodeBuilderContext {
        enclosingDeclaration: ts.Node | undefined;
        flags: ts.NodeBuilderFlags;
        tracker: ts.SymbolTracker;

        // State
        encounteredError: boolean;
        reportedDiagnostic: boolean;
        visitedTypes: ts.Set<number> | undefined;
        symbolDepth: ts.ESMap<string, number> | undefined;
        inferTypeParameters: ts.TypeParameter[] | undefined;
        approximateLength: number;
        truncating?: boolean;
        typeParameterSymbolList?: ts.Set<number>;
        typeParameterNames?: ts.ESMap<ts.TypeId, ts.Identifier>;
        typeParameterNamesByText?: ts.Set<string>;
        typeParameterNamesByTextNextNameCount?: ts.ESMap<string, number>;
        usedSymbolNames?: ts.Set<string>;
        remappedSymbolNames?: ts.ESMap<ts.SymbolId, string>;
        reverseMappedStack?: ts.ReverseMappedSymbol[];
    }

    function isDefaultBindingContext(location: ts.Node) {
        return location.kind === ts.SyntaxKind.SourceFile || ts.isAmbientModule(location);
    }

    function getNameOfSymbolFromNameType(symbol: ts.Symbol, context?: NodeBuilderContext) {
        const nameType = getSymbolLinks(symbol).nameType;
        if (nameType) {
            if (nameType.flags & ts.TypeFlags.StringOrNumberLiteral) {
                const name = "" + (nameType as ts.StringLiteralType | ts.NumberLiteralType).value;
                if (!ts.isIdentifierText(name, ts.getEmitScriptTarget(compilerOptions)) && !ts.isNumericLiteralName(name)) {
                    return `"${ts.escapeString(name, ts.CharacterCodes.doubleQuote)}"`;
                }
                if (ts.isNumericLiteralName(name) && ts.startsWith(name, "-")) {
                    return `[${name}]`;
                }
                return name;
            }
            if (nameType.flags & ts.TypeFlags.UniqueESSymbol) {
                return `[${getNameOfSymbolAsWritten((nameType as ts.UniqueESSymbolType).symbol, context)}]`;
            }
        }
    }

    /**
     * Gets a human-readable name for a symbol.
     * Should *not* be used for the right-hand side of a `.` -- use `symbolName(symbol)` for that instead.
     *
     * Unlike `symbolName(symbol)`, this will include quotes if the name is from a string literal.
     * It will also use a representation of a number as written instead of a decimal form, e.g. `0o11` instead of `9`.
     */
    function getNameOfSymbolAsWritten(symbol: ts.Symbol, context?: NodeBuilderContext): string {
        if (context && symbol.escapedName === ts.InternalSymbolName.Default && !(context.flags & ts.NodeBuilderFlags.UseAliasDefinedOutsideCurrentScope) &&
            // If it's not the first part of an entity name, it must print as `default`
            (!(context.flags & ts.NodeBuilderFlags.InInitialEntityName) ||
            // if the symbol is synthesized, it will only be referenced externally it must print as `default`
            !symbol.declarations ||
            // if not in the same binding context (source file, module declaration), it must print as `default`
            (context.enclosingDeclaration && ts.findAncestor(symbol.declarations[0], isDefaultBindingContext) !== ts.findAncestor(context.enclosingDeclaration, isDefaultBindingContext)))) {
            return "default";
        }
        if (symbol.declarations && symbol.declarations.length) {
            let declaration = ts.firstDefined(symbol.declarations, d => ts.getNameOfDeclaration(d) ? d : undefined); // Try using a declaration with a name, first
            const name = declaration && ts.getNameOfDeclaration(declaration);
            if (declaration && name) {
                if (ts.isCallExpression(declaration) && ts.isBindableObjectDefinePropertyCall(declaration)) {
                    return ts.symbolName(symbol);
                }
                if (ts.isComputedPropertyName(name) && !(ts.getCheckFlags(symbol) & ts.CheckFlags.Late)) {
                    const nameType = getSymbolLinks(symbol).nameType;
                    if (nameType && nameType.flags & ts.TypeFlags.StringOrNumberLiteral) {
                        // Computed property name isn't late bound, but has a well-known name type - use name type to generate a symbol name
                        const result = getNameOfSymbolFromNameType(symbol, context);
                        if (result !== undefined) {
                            return result;
                        }
                    }
                }
                return ts.declarationNameToString(name);
            }
            if (!declaration) {
                declaration = symbol.declarations[0]; // Declaration may be nameless, but we'll try anyway
            }
            if (declaration.parent && declaration.parent.kind === ts.SyntaxKind.VariableDeclaration) {
                return ts.declarationNameToString((declaration.parent as ts.VariableDeclaration).name);
            }
            switch (declaration.kind) {
                case ts.SyntaxKind.ClassExpression:
                case ts.SyntaxKind.FunctionExpression:
                case ts.SyntaxKind.ArrowFunction:
                    if (context && !context.encounteredError && !(context.flags & ts.NodeBuilderFlags.AllowAnonymousIdentifier)) {
                        context.encounteredError = true;
                    }
                    return declaration.kind === ts.SyntaxKind.ClassExpression ? "(Anonymous class)" : "(Anonymous function)";
            }
        }
        const name = getNameOfSymbolFromNameType(symbol, context);
        return name !== undefined ? name : ts.symbolName(symbol);
    }

    function isDeclarationVisible(node: ts.Node): boolean {
        if (node) {
            const links = getNodeLinks(node);
            if (links.isVisible === undefined) {
                links.isVisible = !!determineIfDeclarationIsVisible();
            }
            return links.isVisible;
        }

        return false;

        function determineIfDeclarationIsVisible() {
            switch (node.kind) {
                case ts.SyntaxKind.JSDocCallbackTag:
                case ts.SyntaxKind.JSDocTypedefTag:
                case ts.SyntaxKind.JSDocEnumTag:
                    // Top-level jsdoc type aliases are considered exported
                    // First parent is comment node, second is hosting declaration or token; we only care about those tokens or declarations whose parent is a source file
                    return !!(node.parent && node.parent.parent && node.parent.parent.parent && ts.isSourceFile(node.parent.parent.parent));
                case ts.SyntaxKind.BindingElement:
                    return isDeclarationVisible(node.parent.parent);
                case ts.SyntaxKind.VariableDeclaration:
                    if (ts.isBindingPattern((node as ts.VariableDeclaration).name) &&
                        !((node as ts.VariableDeclaration).name as ts.BindingPattern).elements.length) {
                        // If the binding pattern is empty, this variable declaration is not visible
                        return false;
                    }
                    // falls through
                case ts.SyntaxKind.ModuleDeclaration:
                case ts.SyntaxKind.ClassDeclaration:
                case ts.SyntaxKind.InterfaceDeclaration:
                case ts.SyntaxKind.TypeAliasDeclaration:
                case ts.SyntaxKind.FunctionDeclaration:
                case ts.SyntaxKind.EnumDeclaration:
                case ts.SyntaxKind.ImportEqualsDeclaration:
                    // external module augmentation is always visible
                    if (ts.isExternalModuleAugmentation(node)) {
                        return true;
                    }
                    const parent = getDeclarationContainer(node);
                    // If the node is not exported or it is not ambient module element (except import declaration)
                    if (!(ts.getCombinedModifierFlags(node as ts.Declaration) & ts.ModifierFlags.Export) &&
                        !(node.kind !== ts.SyntaxKind.ImportEqualsDeclaration && parent.kind !== ts.SyntaxKind.SourceFile && parent.flags & ts.NodeFlags.Ambient)) {
                        return isGlobalSourceFile(parent);
                    }
                    // Exported members/ambient module elements (exception import declaration) are visible if parent is visible
                    return isDeclarationVisible(parent);

                case ts.SyntaxKind.PropertyDeclaration:
                case ts.SyntaxKind.PropertySignature:
                case ts.SyntaxKind.GetAccessor:
                case ts.SyntaxKind.SetAccessor:
                case ts.SyntaxKind.MethodDeclaration:
                case ts.SyntaxKind.MethodSignature:
                    if (ts.hasEffectiveModifier(node, ts.ModifierFlags.Private | ts.ModifierFlags.Protected)) {
                        // Private/protected properties/methods are not visible
                        return false;
                    }
                    // Public properties/methods are visible if its parents are visible, so:
                    // falls through

                case ts.SyntaxKind.Constructor:
                case ts.SyntaxKind.ConstructSignature:
                case ts.SyntaxKind.CallSignature:
                case ts.SyntaxKind.IndexSignature:
                case ts.SyntaxKind.Parameter:
                case ts.SyntaxKind.ModuleBlock:
                case ts.SyntaxKind.FunctionType:
                case ts.SyntaxKind.ConstructorType:
                case ts.SyntaxKind.TypeLiteral:
                case ts.SyntaxKind.TypeReference:
                case ts.SyntaxKind.ArrayType:
                case ts.SyntaxKind.TupleType:
                case ts.SyntaxKind.UnionType:
                case ts.SyntaxKind.IntersectionType:
                case ts.SyntaxKind.ParenthesizedType:
                case ts.SyntaxKind.NamedTupleMember:
                    return isDeclarationVisible(node.parent);

                // Default binding, import specifier and namespace import is visible
                // only on demand so by default it is not visible
                case ts.SyntaxKind.ImportClause:
                case ts.SyntaxKind.NamespaceImport:
                case ts.SyntaxKind.ImportSpecifier:
                    return false;

                // Type parameters are always visible
                case ts.SyntaxKind.TypeParameter:

                // Source file and namespace export are always visible
                // falls through
                case ts.SyntaxKind.SourceFile:
                case ts.SyntaxKind.NamespaceExportDeclaration:
                    return true;

                // Export assignments do not create name bindings outside the module
                case ts.SyntaxKind.ExportAssignment:
                    return false;

                default:
                    return false;
            }
        }
    }

    function collectLinkedAliases(node: ts.Identifier, setVisibility?: boolean): ts.Node[] | undefined {
        let exportSymbol: ts.Symbol | undefined;
        if (node.parent && node.parent.kind === ts.SyntaxKind.ExportAssignment) {
            exportSymbol = resolveName(node, node.escapedText, ts.SymbolFlags.Value | ts.SymbolFlags.Type | ts.SymbolFlags.Namespace | ts.SymbolFlags.Alias, /*nameNotFoundMessage*/ undefined, node, /*isUse*/ false);
        }
        else if (node.parent.kind === ts.SyntaxKind.ExportSpecifier) {
            exportSymbol = getTargetOfExportSpecifier(node.parent as ts.ExportSpecifier, ts.SymbolFlags.Value | ts.SymbolFlags.Type | ts.SymbolFlags.Namespace | ts.SymbolFlags.Alias);
        }
        let result: ts.Node[] | undefined;
        let visited: ts.Set<number> | undefined;
        if (exportSymbol) {
            visited = new ts.Set();
            visited.add(getSymbolId(exportSymbol));
            buildVisibleNodeList(exportSymbol.declarations);
        }
        return result;

        function buildVisibleNodeList(declarations: ts.Declaration[] | undefined) {
            ts.forEach(declarations, declaration => {
                const resultNode = getAnyImportSyntax(declaration) || declaration;
                if (setVisibility) {
                    getNodeLinks(declaration).isVisible = true;
                }
                else {
                    result = result || [];
                    ts.pushIfUnique(result, resultNode);
                }

                if (ts.isInternalModuleImportEqualsDeclaration(declaration)) {
                    // Add the referenced top container visible
                    const internalModuleReference = declaration.moduleReference as ts.Identifier | ts.QualifiedName;
                    const firstIdentifier = ts.getFirstIdentifier(internalModuleReference);
                    const importSymbol = resolveName(declaration, firstIdentifier.escapedText, ts.SymbolFlags.Value | ts.SymbolFlags.Type | ts.SymbolFlags.Namespace,
                        undefined, undefined, /*isUse*/ false);
                    if (importSymbol && visited) {
                        if (ts.tryAddToSet(visited, getSymbolId(importSymbol))) {
                            buildVisibleNodeList(importSymbol.declarations);
                        }
                    }
                }
            });
        }
    }

    /**
     * Push an entry on the type resolution stack. If an entry with the given target and the given property name
     * is already on the stack, and no entries in between already have a type, then a circularity has occurred.
     * In this case, the result values of the existing entry and all entries pushed after it are changed to false,
     * and the value false is returned. Otherwise, the new entry is just pushed onto the stack, and true is returned.
     * In order to see if the same query has already been done before, the target object and the propertyName both
     * must match the one passed in.
     *
     * @param target The symbol, type, or signature whose type is being queried
     * @param propertyName The property name that should be used to query the target for its type
     */
    function pushTypeResolution(target: TypeSystemEntity, propertyName: TypeSystemPropertyName): boolean {
        const resolutionCycleStartIndex = findResolutionCycleStartIndex(target, propertyName);
        if (resolutionCycleStartIndex >= 0) {
            // A cycle was found
            const { length } = resolutionTargets;
            for (let i = resolutionCycleStartIndex; i < length; i++) {
                resolutionResults[i] = false;
            }
            return false;
        }
        resolutionTargets.push(target);
        resolutionResults.push(/*items*/ true);
        resolutionPropertyNames.push(propertyName);
        return true;
    }

    function findResolutionCycleStartIndex(target: TypeSystemEntity, propertyName: TypeSystemPropertyName): number {
        for (let i = resolutionTargets.length - 1; i >= 0; i--) {
            if (hasType(resolutionTargets[i], resolutionPropertyNames[i])) {
                return -1;
            }
            if (resolutionTargets[i] === target && resolutionPropertyNames[i] === propertyName) {
                return i;
            }
        }
        return -1;
    }

    function hasType(target: TypeSystemEntity, propertyName: TypeSystemPropertyName): boolean {
        switch (propertyName) {
            case TypeSystemPropertyName.Type:
                return !!getSymbolLinks(target as ts.Symbol).type;
            case TypeSystemPropertyName.EnumTagType:
                return !!(getNodeLinks(target as ts.JSDocEnumTag).resolvedEnumType);
            case TypeSystemPropertyName.DeclaredType:
                return !!getSymbolLinks(target as ts.Symbol).declaredType;
            case TypeSystemPropertyName.ResolvedBaseConstructorType:
                return !!(target as ts.InterfaceType).resolvedBaseConstructorType;
            case TypeSystemPropertyName.ResolvedReturnType:
                return !!(target as ts.Signature).resolvedReturnType;
            case TypeSystemPropertyName.ImmediateBaseConstraint:
                return !!(target as ts.Type).immediateBaseConstraint;
            case TypeSystemPropertyName.ResolvedTypeArguments:
                return !!(target as ts.TypeReference).resolvedTypeArguments;
            case TypeSystemPropertyName.ResolvedBaseTypes:
                return !!(target as ts.InterfaceType).baseTypesResolved;
            case TypeSystemPropertyName.WriteType:
                return !!getSymbolLinks(target as ts.Symbol).writeType;
        }
        return ts.Debug.assertNever(propertyName);
    }

    /**
     * Pop an entry from the type resolution stack and return its associated result value. The result value will
     * be true if no circularities were detected, or false if a circularity was found.
     */
    function popTypeResolution(): boolean {
        resolutionTargets.pop();
        resolutionPropertyNames.pop();
        return resolutionResults.pop()!;
    }

    function getDeclarationContainer(node: ts.Node): ts.Node {
        return ts.findAncestor(ts.getRootDeclaration(node), node => {
            switch (node.kind) {
                case ts.SyntaxKind.VariableDeclaration:
                case ts.SyntaxKind.VariableDeclarationList:
                case ts.SyntaxKind.ImportSpecifier:
                case ts.SyntaxKind.NamedImports:
                case ts.SyntaxKind.NamespaceImport:
                case ts.SyntaxKind.ImportClause:
                    return false;
                default:
                    return true;
            }
        })!.parent;
    }

    function getTypeOfPrototypeProperty(prototype: ts.Symbol): ts.Type {
        // TypeScript 1.0 spec (April 2014): 8.4
        // Every class automatically contains a static property member named 'prototype',
        // the type of which is an instantiation of the class type with type Any supplied as a type argument for each type parameter.
        // It is an error to explicitly declare a static property member with the name 'prototype'.
        const classType = getDeclaredTypeOfSymbol(getParentOfSymbol(prototype)!) as ts.InterfaceType;
        return classType.typeParameters ? createTypeReference(classType as ts.GenericType, ts.map(classType.typeParameters, _ => anyType)) : classType;
    }

    // Return the type of the given property in the given type, or undefined if no such property exists
    function getTypeOfPropertyOfType(type: ts.Type, name: ts.__String): ts.Type | undefined {
        const prop = getPropertyOfType(type, name);
        return prop ? getTypeOfSymbol(prop) : undefined;
    }

    function getTypeOfPropertyOrIndexSignature(type: ts.Type, name: ts.__String): ts.Type {
        return getTypeOfPropertyOfType(type, name) || getApplicableIndexInfoForName(type, name)?.type || unknownType;
    }

    function isTypeAny(type: ts.Type | undefined) {
        return type && (type.flags & ts.TypeFlags.Any) !== 0;
    }

    function isErrorType(type: ts.Type) {
        // The only 'any' types that have alias symbols are those manufactured by getTypeFromTypeAliasReference for
        // a reference to an unresolved symbol. We want those to behave like the errorType.
        return type === errorType || !!(type.flags & ts.TypeFlags.Any && type.aliasSymbol);
    }

    // Return the type of a binding element parent. We check SymbolLinks first to see if a type has been
    // assigned by contextual typing.
    function getTypeForBindingElementParent(node: ts.BindingElementGrandparent, checkMode: CheckMode) {
        if (checkMode !== CheckMode.Normal) {
            return getTypeForVariableLikeDeclaration(node, /*includeOptionality*/ false, checkMode);
        }
        const symbol = getSymbolOfNode(node);
        return symbol && getSymbolLinks(symbol).type || getTypeForVariableLikeDeclaration(node, /*includeOptionality*/ false, checkMode);
    }

    function getRestType(source: ts.Type, properties: ts.PropertyName[], symbol: ts.Symbol | undefined): ts.Type {
        source = filterType(source, t => !(t.flags & ts.TypeFlags.Nullable));
        if (source.flags & ts.TypeFlags.Never) {
            return emptyObjectType;
        }
        if (source.flags & ts.TypeFlags.Union) {
            return mapType(source, t => getRestType(t, properties, symbol));
        }

        let omitKeyType = getUnionType(ts.map(properties, getLiteralTypeFromPropertyName));

        const spreadableProperties: ts.Symbol[] = [];
        const unspreadableToRestKeys: ts.Type[] = [];

        for (const prop of getPropertiesOfType(source)) {
            const literalTypeFromProperty = getLiteralTypeFromProperty(prop, ts.TypeFlags.StringOrNumberLiteralOrUnique);
            if (!isTypeAssignableTo(literalTypeFromProperty, omitKeyType)
                && !(ts.getDeclarationModifierFlagsFromSymbol(prop) & (ts.ModifierFlags.Private | ts.ModifierFlags.Protected))
                && isSpreadableProperty(prop)) {
                spreadableProperties.push(prop);
            }
            else {
                unspreadableToRestKeys.push(literalTypeFromProperty);
            }
        }

        if (isGenericObjectType(source) || isGenericIndexType(omitKeyType)) {
            if (unspreadableToRestKeys.length) {
                // If the type we're spreading from has properties that cannot
                // be spread into the rest type (e.g. getters, methods), ensure
                // they are explicitly omitted, as they would in the non-generic case.
                omitKeyType = getUnionType([omitKeyType, ...unspreadableToRestKeys]);
            }

            if (omitKeyType.flags & ts.TypeFlags.Never) {
                return source;
            }

            const omitTypeAlias = getGlobalOmitSymbol();
            if (!omitTypeAlias) {
                return errorType;
            }
            return getTypeAliasInstantiation(omitTypeAlias, [source, omitKeyType]);
        }
        const members = ts.createSymbolTable();
        for (const prop of spreadableProperties) {
            members.set(prop.escapedName, getSpreadSymbol(prop, /*readonly*/ false));
        }
        const result = createAnonymousType(symbol, members, ts.emptyArray, ts.emptyArray, getIndexInfosOfType(source));
        result.objectFlags |= ts.ObjectFlags.ObjectRestType;
        return result;
    }

    function isGenericTypeWithUndefinedConstraint(type: ts.Type) {
        return !!(type.flags & ts.TypeFlags.Instantiable) && maybeTypeOfKind(getBaseConstraintOfType(type) || unknownType, ts.TypeFlags.Undefined);
    }

    function getNonUndefinedType(type: ts.Type) {
        const typeOrConstraint = someType(type, isGenericTypeWithUndefinedConstraint) ? mapType(type, t => t.flags & ts.TypeFlags.Instantiable ? getBaseConstraintOrType(t) : t) : type;
        return getTypeWithFacts(typeOrConstraint, TypeFacts.NEUndefined);
    }

    // Determine the control flow type associated with a destructuring declaration or assignment. The following
    // forms of destructuring are possible:
    //   let { x } = obj;  // BindingElement
    //   let [ x ] = obj;  // BindingElement
    //   { x } = obj;      // ShorthandPropertyAssignment
    //   { x: v } = obj;   // PropertyAssignment
    //   [ x ] = obj;      // Expression
    // We construct a synthetic element access expression corresponding to 'obj.x' such that the control
    // flow analyzer doesn't have to handle all the different syntactic forms.
    function getFlowTypeOfDestructuring(node: ts.BindingElement | ts.PropertyAssignment | ts.ShorthandPropertyAssignment | ts.Expression, declaredType: ts.Type) {
        const reference = getSyntheticElementAccess(node);
        return reference ? getFlowTypeOfReference(reference, declaredType) : declaredType;
    }

    function getSyntheticElementAccess(node: ts.BindingElement | ts.PropertyAssignment | ts.ShorthandPropertyAssignment | ts.Expression): ts.ElementAccessExpression | undefined {
        const parentAccess = getParentElementAccess(node);
        if (parentAccess && parentAccess.flowNode) {
            const propName = getDestructuringPropertyName(node);
            if (propName) {
                const literal = ts.setTextRange(ts.parseNodeFactory.createStringLiteral(propName), node);
                const lhsExpr = ts.isLeftHandSideExpression(parentAccess) ? parentAccess : ts.parseNodeFactory.createParenthesizedExpression(parentAccess);
                const result = ts.setTextRange(ts.parseNodeFactory.createElementAccessExpression(lhsExpr, literal), node);
                ts.setParent(literal, result);
                ts.setParent(result, node);
                if (lhsExpr !== parentAccess) {
                    ts.setParent(lhsExpr, result);
                }
                result.flowNode = parentAccess.flowNode;
                return result;
            }
        }
    }

    function getParentElementAccess(node: ts.BindingElement | ts.PropertyAssignment | ts.ShorthandPropertyAssignment | ts.Expression) {
        const ancestor = node.parent.parent;
        switch (ancestor.kind) {
            case ts.SyntaxKind.BindingElement:
            case ts.SyntaxKind.PropertyAssignment:
                return getSyntheticElementAccess(ancestor as ts.BindingElement | ts.PropertyAssignment);
            case ts.SyntaxKind.ArrayLiteralExpression:
                return getSyntheticElementAccess(node.parent as ts.Expression);
            case ts.SyntaxKind.VariableDeclaration:
                return (ancestor as ts.VariableDeclaration).initializer;
            case ts.SyntaxKind.BinaryExpression:
                return (ancestor as ts.BinaryExpression).right;
        }
    }

    function getDestructuringPropertyName(node: ts.BindingElement | ts.PropertyAssignment | ts.ShorthandPropertyAssignment | ts.Expression) {
        const parent = node.parent;
        if (node.kind === ts.SyntaxKind.BindingElement && parent.kind === ts.SyntaxKind.ObjectBindingPattern) {
            return getLiteralPropertyNameText((node as ts.BindingElement).propertyName || (node as ts.BindingElement).name as ts.Identifier);
        }
        if (node.kind === ts.SyntaxKind.PropertyAssignment || node.kind === ts.SyntaxKind.ShorthandPropertyAssignment) {
            return getLiteralPropertyNameText((node as ts.PropertyAssignment | ts.ShorthandPropertyAssignment).name);
        }
        return "" + ((parent as ts.BindingPattern | ts.ArrayLiteralExpression).elements as ts.NodeArray<ts.Node>).indexOf(node);
    }

    function getLiteralPropertyNameText(name: ts.PropertyName) {
        const type = getLiteralTypeFromPropertyName(name);
        return type.flags & (ts.TypeFlags.StringLiteral | ts.TypeFlags.NumberLiteral) ? "" + (type as ts.StringLiteralType | ts.NumberLiteralType).value : undefined;
    }

    /** Return the inferred type for a binding element */
    function getTypeForBindingElement(declaration: ts.BindingElement): ts.Type | undefined {
        const checkMode = declaration.dotDotDotToken ? CheckMode.RestBindingElement : CheckMode.Normal;
        const parentType = getTypeForBindingElementParent(declaration.parent.parent, checkMode);
        return parentType && getBindingElementTypeFromParentType(declaration, parentType);
    }

    function getBindingElementTypeFromParentType(declaration: ts.BindingElement, parentType: ts.Type): ts.Type {
        // If an any type was inferred for parent, infer that for the binding element
        if (isTypeAny(parentType)) {
            return parentType;
        }
        const pattern = declaration.parent;
        // Relax null check on ambient destructuring parameters, since the parameters have no implementation and are just documentation
        if (strictNullChecks && declaration.flags & ts.NodeFlags.Ambient && ts.isParameterDeclaration(declaration)) {
            parentType = getNonNullableType(parentType);
        }
        // Filter `undefined` from the type we check against if the parent has an initializer and that initializer is not possibly `undefined`
        else if (strictNullChecks && pattern.parent.initializer && !(getTypeFacts(getTypeOfInitializer(pattern.parent.initializer)) & TypeFacts.EQUndefined)) {
            parentType = getTypeWithFacts(parentType, TypeFacts.NEUndefined);
        }

        let type: ts.Type | undefined;
        if (pattern.kind === ts.SyntaxKind.ObjectBindingPattern) {
            if (declaration.dotDotDotToken) {
                parentType = getReducedType(parentType);
                if (parentType.flags & ts.TypeFlags.Unknown || !isValidSpreadType(parentType)) {
                    error(declaration, ts.Diagnostics.Rest_types_may_only_be_created_from_object_types);
                    return errorType;
                }
                const literalMembers: ts.PropertyName[] = [];
                for (const element of pattern.elements) {
                    if (!element.dotDotDotToken) {
                        literalMembers.push(element.propertyName || element.name as ts.Identifier);
                    }
                }
                type = getRestType(parentType, literalMembers, declaration.symbol);
            }
            else {
                // Use explicitly specified property name ({ p: xxx } form), or otherwise the implied name ({ p } form)
                const name = declaration.propertyName || declaration.name as ts.Identifier;
                const indexType = getLiteralTypeFromPropertyName(name);
                const declaredType = getIndexedAccessType(parentType, indexType, ts.AccessFlags.ExpressionPosition, name);
                type = getFlowTypeOfDestructuring(declaration, declaredType);
            }
        }
        else {
            // This elementType will be used if the specific property corresponding to this index is not
            // present (aka the tuple element property). This call also checks that the parentType is in
            // fact an iterable or array (depending on target language).
            const elementType = checkIteratedTypeOrElementType(IterationUse.Destructuring | (declaration.dotDotDotToken ? 0 : IterationUse.PossiblyOutOfBounds), parentType, undefinedType, pattern);
            const index = pattern.elements.indexOf(declaration);
            if (declaration.dotDotDotToken) {
                // If the parent is a tuple type, the rest element has a tuple type of the
                // remaining tuple element types. Otherwise, the rest element has an array type with same
                // element type as the parent type.
                type = everyType(parentType, isTupleType) ?
                    mapType(parentType, t => sliceTupleType(t as ts.TupleTypeReference, index)) :
                    createArrayType(elementType);
            }
            else if (isArrayLikeType(parentType)) {
                const indexType = getNumberLiteralType(index);
                const accessFlags = ts.AccessFlags.ExpressionPosition | (hasDefaultValue(declaration) ? ts.AccessFlags.NoTupleBoundsCheck : 0);
                const declaredType = getIndexedAccessTypeOrUndefined(parentType, indexType, accessFlags, declaration.name) || errorType;
                type = getFlowTypeOfDestructuring(declaration, declaredType);
            }
            else {
                type = elementType;
            }
        }
        if (!declaration.initializer) {
            return type;
        }
        if (ts.getEffectiveTypeAnnotationNode(ts.walkUpBindingElementsAndPatterns(declaration))) {
            // In strict null checking mode, if a default value of a non-undefined type is specified, remove
            // undefined from the final type.
            return strictNullChecks && !(getTypeFacts(checkDeclarationInitializer(declaration, CheckMode.Normal)) & TypeFacts.IsUndefined) ? getNonUndefinedType(type) : type;
        }
        return widenTypeInferredFromInitializer(declaration, getUnionType([getNonUndefinedType(type), checkDeclarationInitializer(declaration, CheckMode.Normal)], ts.UnionReduction.Subtype));
    }

    function getTypeForDeclarationFromJSDocComment(declaration: ts.Node) {
        const jsdocType = ts.getJSDocType(declaration);
        if (jsdocType) {
            return getTypeFromTypeNode(jsdocType);
        }
        return undefined;
    }

    function isNullOrUndefined(node: ts.Expression) {
        const expr = ts.skipParentheses(node, /*excludeJSDocTypeAssertions*/ true);
        return expr.kind === ts.SyntaxKind.NullKeyword || expr.kind === ts.SyntaxKind.Identifier && getResolvedSymbol(expr as ts.Identifier) === undefinedSymbol;
    }

    function isEmptyArrayLiteral(node: ts.Expression) {
        const expr = ts.skipParentheses(node, /*excludeJSDocTypeAssertions*/ true);
        return expr.kind === ts.SyntaxKind.ArrayLiteralExpression && (expr as ts.ArrayLiteralExpression).elements.length === 0;
    }

    function addOptionality(type: ts.Type, isProperty = false, isOptional = true): ts.Type {
        return strictNullChecks && isOptional ? getOptionalType(type, isProperty) : type;
    }

    // Return the inferred type for a variable, parameter, or property declaration
    function getTypeForVariableLikeDeclaration(
        declaration: ts.ParameterDeclaration | ts.PropertyDeclaration | ts.PropertySignature | ts.VariableDeclaration | ts.BindingElement | ts.JSDocPropertyLikeTag,
        includeOptionality: boolean,
        checkMode: CheckMode,
    ): ts.Type | undefined {
        // A variable declared in a for..in statement is of type string, or of type keyof T when the
        // right hand expression is of a type parameter type.
        if (ts.isVariableDeclaration(declaration) && declaration.parent.parent.kind === ts.SyntaxKind.ForInStatement) {
            const indexType = getIndexType(getNonNullableTypeIfNeeded(checkExpression(declaration.parent.parent.expression, /*checkMode*/ checkMode)));
            return indexType.flags & (ts.TypeFlags.TypeParameter | ts.TypeFlags.Index) ? getExtractStringType(indexType) : stringType;
        }

        if (ts.isVariableDeclaration(declaration) && declaration.parent.parent.kind === ts.SyntaxKind.ForOfStatement) {
            // checkRightHandSideOfForOf will return undefined if the for-of expression type was
            // missing properties/signatures required to get its iteratedType (like
            // [Symbol.iterator] or next). This may be because we accessed properties from anyType,
            // or it may have led to an error inside getElementTypeOfIterable.
            const forOfStatement = declaration.parent.parent;
            return checkRightHandSideOfForOf(forOfStatement) || anyType;
        }

        if (ts.isBindingPattern(declaration.parent)) {
            return getTypeForBindingElement(declaration as ts.BindingElement);
        }

        const isProperty = ts.isPropertyDeclaration(declaration) && !ts.hasAccessorModifier(declaration) || ts.isPropertySignature(declaration);
        const isOptional = includeOptionality && (
            isProperty && !!declaration.questionToken ||
            ts.isParameter(declaration) && (!!declaration.questionToken || isJSDocOptionalParameter(declaration)) ||
            ts.isOptionalJSDocPropertyLikeTag(declaration));

        // Use type from type annotation if one is present
        const declaredType = tryGetTypeFromEffectiveTypeNode(declaration);
        if (declaredType) {
            return addOptionality(declaredType, isProperty, isOptional);
        }

        if ((noImplicitAny || ts.isInJSFile(declaration)) &&
            ts.isVariableDeclaration(declaration) && !ts.isBindingPattern(declaration.name) &&
            !(ts.getCombinedModifierFlags(declaration) & ts.ModifierFlags.Export) && !(declaration.flags & ts.NodeFlags.Ambient)) {
            // If --noImplicitAny is on or the declaration is in a Javascript file,
            // use control flow tracked 'any' type for non-ambient, non-exported var or let variables with no
            // initializer or a 'null' or 'undefined' initializer.
            if (!(ts.getCombinedNodeFlags(declaration) & ts.NodeFlags.Const) && (!declaration.initializer || isNullOrUndefined(declaration.initializer))) {
                return autoType;
            }
            // Use control flow tracked 'any[]' type for non-ambient, non-exported variables with an empty array
            // literal initializer.
            if (declaration.initializer && isEmptyArrayLiteral(declaration.initializer)) {
                return autoArrayType;
            }
        }

        if (ts.isParameter(declaration)) {
            const func = declaration.parent as ts.FunctionLikeDeclaration;
            // For a parameter of a set accessor, use the type of the get accessor if one is present
            if (func.kind === ts.SyntaxKind.SetAccessor && hasBindableName(func)) {
                const getter = ts.getDeclarationOfKind<ts.AccessorDeclaration>(getSymbolOfNode(declaration.parent), ts.SyntaxKind.GetAccessor);
                if (getter) {
                    const getterSignature = getSignatureFromDeclaration(getter);
                    const thisParameter = getAccessorThisParameter(func as ts.AccessorDeclaration);
                    if (thisParameter && declaration === thisParameter) {
                        // Use the type from the *getter*
                        ts.Debug.assert(!thisParameter.type);
                        return getTypeOfSymbol(getterSignature.thisParameter!);
                    }
                    return getReturnTypeOfSignature(getterSignature);
                }
            }
            const parameterTypeOfTypeTag = getParameterTypeOfTypeTag(func, declaration);
            if (parameterTypeOfTypeTag) return parameterTypeOfTypeTag;
            // Use contextual parameter type if one is available
            const type = declaration.symbol.escapedName === ts.InternalSymbolName.This ? getContextualThisParameterType(func) : getContextuallyTypedParameterType(declaration);
            if (type) {
                return addOptionality(type, /*isProperty*/ false, isOptional);
            }
        }

        // Use the type of the initializer expression if one is present and the declaration is
        // not a parameter of a contextually typed function
        if (ts.hasOnlyExpressionInitializer(declaration) && !!declaration.initializer) {
            if (ts.isInJSFile(declaration) && !ts.isParameter(declaration)) {
                const containerObjectType = getJSContainerObjectType(declaration, getSymbolOfNode(declaration), ts.getDeclaredExpandoInitializer(declaration));
                if (containerObjectType) {
                    return containerObjectType;
                }
            }
            const type = widenTypeInferredFromInitializer(declaration, checkDeclarationInitializer(declaration, checkMode));
            return addOptionality(type, isProperty, isOptional);
        }

        if (ts.isPropertyDeclaration(declaration) && (noImplicitAny || ts.isInJSFile(declaration))) {
            // We have a property declaration with no type annotation or initializer, in noImplicitAny mode or a .js file.
            // Use control flow analysis of this.xxx assignments in the constructor or static block to determine the type of the property.
            if (!ts.hasStaticModifier(declaration)) {
                const constructor = findConstructorDeclaration(declaration.parent);
                const type = constructor ? getFlowTypeInConstructor(declaration.symbol, constructor) :
                    ts.getEffectiveModifierFlags(declaration) & ts.ModifierFlags.Ambient ? getTypeOfPropertyInBaseClass(declaration.symbol) :
                    undefined;
                return type && addOptionality(type, /*isProperty*/ true, isOptional);
            }
            else {
                const staticBlocks = ts.filter(declaration.parent.members, ts.isClassStaticBlockDeclaration);
                const type = staticBlocks.length ? getFlowTypeInStaticBlocks(declaration.symbol, staticBlocks) :
                    ts.getEffectiveModifierFlags(declaration) & ts.ModifierFlags.Ambient ? getTypeOfPropertyInBaseClass(declaration.symbol) :
                    undefined;
                return type && addOptionality(type, /*isProperty*/ true, isOptional);
            }
        }

        if (ts.isJsxAttribute(declaration)) {
            // if JSX attribute doesn't have initializer, by default the attribute will have boolean value of true.
            // I.e <Elem attr /> is sugar for <Elem attr={true} />
            return trueType;
        }

        // If the declaration specifies a binding pattern and is not a parameter of a contextually
        // typed function, use the type implied by the binding pattern
        if (ts.isBindingPattern(declaration.name)) {
            return getTypeFromBindingPattern(declaration.name, /*includePatternInType*/ false, /*reportErrors*/ true);
        }

        // No type specified and nothing can be inferred
        return undefined;
    }

    function isConstructorDeclaredProperty(symbol: ts.Symbol) {
        // A property is considered a constructor declared property when all declaration sites are this.xxx assignments,
        // when no declaration sites have JSDoc type annotations, and when at least one declaration site is in the body of
        // a class constructor.
        if (symbol.valueDeclaration && ts.isBinaryExpression(symbol.valueDeclaration)) {
            const links = getSymbolLinks(symbol);
            if (links.isConstructorDeclaredProperty === undefined) {
                links.isConstructorDeclaredProperty = false;
                links.isConstructorDeclaredProperty = !!getDeclaringConstructor(symbol) && ts.every(symbol.declarations, declaration =>
                    ts.isBinaryExpression(declaration) &&
                    isPossiblyAliasedThisProperty(declaration) &&
                    (declaration.left.kind !== ts.SyntaxKind.ElementAccessExpression || ts.isStringOrNumericLiteralLike((declaration.left as ts.ElementAccessExpression).argumentExpression)) &&
                    !getAnnotatedTypeForAssignmentDeclaration(/*declaredType*/ undefined, declaration, symbol, declaration));
            }
            return links.isConstructorDeclaredProperty;
        }
        return false;
    }

    function isAutoTypedProperty(symbol: ts.Symbol) {
        // A property is auto-typed when its declaration has no type annotation or initializer and we're in
        // noImplicitAny mode or a .js file.
        const declaration = symbol.valueDeclaration;
        return declaration && ts.isPropertyDeclaration(declaration) && !ts.getEffectiveTypeAnnotationNode(declaration) &&
            !declaration.initializer && (noImplicitAny || ts.isInJSFile(declaration));
    }

    function getDeclaringConstructor(symbol: ts.Symbol) {
        if (!symbol.declarations) {
            return;
        }
        for (const declaration of symbol.declarations) {
            const container = ts.getThisContainer(declaration, /*includeArrowFunctions*/ false);
            if (container && (container.kind === ts.SyntaxKind.Constructor || isJSConstructor(container))) {
                return container as ts.ConstructorDeclaration;
            }
        }
    }

    /** Create a synthetic property access flow node after the last statement of the file */
    function getFlowTypeFromCommonJSExport(symbol: ts.Symbol) {
        const file = ts.getSourceFileOfNode(symbol.declarations![0]);
        const accessName = ts.unescapeLeadingUnderscores(symbol.escapedName);
        const areAllModuleExports = symbol.declarations!.every(d => ts.isInJSFile(d) && ts.isAccessExpression(d) && ts.isModuleExportsAccessExpression(d.expression));
        const reference = areAllModuleExports
            ? ts.factory.createPropertyAccessExpression(ts.factory.createPropertyAccessExpression(ts.factory.createIdentifier("module"), ts.factory.createIdentifier("exports")), accessName)
            : ts.factory.createPropertyAccessExpression(ts.factory.createIdentifier("exports"), accessName);
        if (areAllModuleExports) {
            ts.setParent((reference.expression as ts.PropertyAccessExpression).expression, reference.expression);
        }
        ts.setParent(reference.expression, reference);
        ts.setParent(reference, file);
        reference.flowNode = file.endFlowNode;
        return getFlowTypeOfReference(reference, autoType, undefinedType);
    }

    function getFlowTypeInStaticBlocks(symbol: ts.Symbol, staticBlocks: readonly ts.ClassStaticBlockDeclaration[]) {
        const accessName = ts.startsWith(symbol.escapedName as string, "__#")
            ? ts.factory.createPrivateIdentifier((symbol.escapedName as string).split("@")[1])
            : ts.unescapeLeadingUnderscores(symbol.escapedName);
        for (const staticBlock of staticBlocks) {
            const reference = ts.factory.createPropertyAccessExpression(ts.factory.createThis(), accessName);
            ts.setParent(reference.expression, reference);
            ts.setParent(reference, staticBlock);
            reference.flowNode = staticBlock.returnFlowNode;
            const flowType = getFlowTypeOfProperty(reference, symbol);
            if (noImplicitAny && (flowType === autoType || flowType === autoArrayType)) {
                error(symbol.valueDeclaration, ts.Diagnostics.Member_0_implicitly_has_an_1_type, symbolToString(symbol), typeToString(flowType));
            }
            // We don't infer a type if assignments are only null or undefined.
            if (everyType(flowType, isNullableType)) {
                continue;
            }
            return convertAutoToAny(flowType);
        }
    }

    function getFlowTypeInConstructor(symbol: ts.Symbol, constructor: ts.ConstructorDeclaration) {
        const accessName = ts.startsWith(symbol.escapedName as string, "__#")
            ? ts.factory.createPrivateIdentifier((symbol.escapedName as string).split("@")[1])
            : ts.unescapeLeadingUnderscores(symbol.escapedName);
        const reference = ts.factory.createPropertyAccessExpression(ts.factory.createThis(), accessName);
        ts.setParent(reference.expression, reference);
        ts.setParent(reference, constructor);
        reference.flowNode = constructor.returnFlowNode;
        const flowType = getFlowTypeOfProperty(reference, symbol);
        if (noImplicitAny && (flowType === autoType || flowType === autoArrayType)) {
            error(symbol.valueDeclaration, ts.Diagnostics.Member_0_implicitly_has_an_1_type, symbolToString(symbol), typeToString(flowType));
        }
        // We don't infer a type if assignments are only null or undefined.
        return everyType(flowType, isNullableType) ? undefined : convertAutoToAny(flowType);
    }

    function getFlowTypeOfProperty(reference: ts.Node, prop: ts.Symbol | undefined) {
        const initialType = prop?.valueDeclaration
            && (!isAutoTypedProperty(prop) || ts.getEffectiveModifierFlags(prop.valueDeclaration) & ts.ModifierFlags.Ambient)
            && getTypeOfPropertyInBaseClass(prop)
            || undefinedType;
        return getFlowTypeOfReference(reference, autoType, initialType);
    }

    function getWidenedTypeForAssignmentDeclaration(symbol: ts.Symbol, resolvedSymbol?: ts.Symbol) {
        // function/class/{} initializers are themselves containers, so they won't merge in the same way as other initializers
        const container = ts.getAssignedExpandoInitializer(symbol.valueDeclaration);
        if (container) {
            const tag = ts.getJSDocTypeTag(container);
            if (tag && tag.typeExpression) {
                return getTypeFromTypeNode(tag.typeExpression);
            }
            const containerObjectType = symbol.valueDeclaration && getJSContainerObjectType(symbol.valueDeclaration, symbol, container);
            return containerObjectType || getWidenedLiteralType(checkExpressionCached(container));
        }
        let type;
        let definedInConstructor = false;
        let definedInMethod = false;
        // We use control flow analysis to determine the type of the property if the property qualifies as a constructor
        // declared property and the resulting control flow type isn't just undefined or null.
        if (isConstructorDeclaredProperty(symbol)) {
            type = getFlowTypeInConstructor(symbol, getDeclaringConstructor(symbol)!);
        }
        if (!type) {
            let types: ts.Type[] | undefined;
            if (symbol.declarations) {
                let jsdocType: ts.Type | undefined;
                for (const declaration of symbol.declarations) {
                    const expression = (ts.isBinaryExpression(declaration) || ts.isCallExpression(declaration)) ? declaration :
                        ts.isAccessExpression(declaration) ? ts.isBinaryExpression(declaration.parent) ? declaration.parent : declaration :
                        undefined;
                    if (!expression) {
                        continue; // Non-assignment declaration merged in (eg, an Identifier to mark the thing as a namespace) - skip over it and pull type info from elsewhere
                    }

                    const kind = ts.isAccessExpression(expression)
                        ? ts.getAssignmentDeclarationPropertyAccessKind(expression)
                        : ts.getAssignmentDeclarationKind(expression);
                    if (kind === ts.AssignmentDeclarationKind.ThisProperty || ts.isBinaryExpression(expression) && isPossiblyAliasedThisProperty(expression, kind)) {
                        if (isDeclarationInConstructor(expression)) {
                            definedInConstructor = true;
                        }
                        else {
                            definedInMethod = true;
                        }
                    }
                    if (!ts.isCallExpression(expression)) {
                        jsdocType = getAnnotatedTypeForAssignmentDeclaration(jsdocType, expression, symbol, declaration);
                    }
                    if (!jsdocType) {
                        (types || (types = [])).push((ts.isBinaryExpression(expression) || ts.isCallExpression(expression)) ? getInitializerTypeFromAssignmentDeclaration(symbol, resolvedSymbol, expression, kind) : neverType);
                    }
                }
                type = jsdocType;
            }
            if (!type) {
                if (!ts.length(types)) {
                    return errorType; // No types from any declarations :(
                }
                let constructorTypes = definedInConstructor && symbol.declarations ? getConstructorDefinedThisAssignmentTypes(types!, symbol.declarations) : undefined;
                // use only the constructor types unless they were only assigned null | undefined (including widening variants)
                if (definedInMethod) {
                    const propType = getTypeOfPropertyInBaseClass(symbol);
                    if (propType) {
                        (constructorTypes || (constructorTypes = [])).push(propType);
                        definedInConstructor = true;
                    }
                }
                const sourceTypes = ts.some(constructorTypes, t => !!(t.flags & ~ts.TypeFlags.Nullable)) ? constructorTypes : types; // TODO: GH#18217
                type = getUnionType(sourceTypes!);
            }
        }
        const widened = getWidenedType(addOptionality(type, /*isProperty*/ false, definedInMethod && !definedInConstructor));
        if (symbol.valueDeclaration && filterType(widened, t => !!(t.flags & ~ts.TypeFlags.Nullable)) === neverType) {
            reportImplicitAny(symbol.valueDeclaration, anyType);
            return anyType;
        }
        return widened;
    }

    function getJSContainerObjectType(decl: ts.Node, symbol: ts.Symbol, init: ts.Expression | undefined): ts.Type | undefined {
        if (!ts.isInJSFile(decl) || !init || !ts.isObjectLiteralExpression(init) || init.properties.length) {
            return undefined;
        }
        const exports = ts.createSymbolTable();
        while (ts.isBinaryExpression(decl) || ts.isPropertyAccessExpression(decl)) {
            const s = getSymbolOfNode(decl);
            if (s?.exports?.size) {
                mergeSymbolTable(exports, s.exports);
            }
            decl = ts.isBinaryExpression(decl) ? decl.parent : decl.parent.parent;
        }
        const s = getSymbolOfNode(decl);
        if (s?.exports?.size) {
            mergeSymbolTable(exports, s.exports);
        }
        const type = createAnonymousType(symbol, exports, ts.emptyArray, ts.emptyArray, ts.emptyArray);
        type.objectFlags |= ts.ObjectFlags.JSLiteral;
        return type;
    }

    function getAnnotatedTypeForAssignmentDeclaration(declaredType: ts.Type | undefined, expression: ts.Expression, symbol: ts.Symbol, declaration: ts.Declaration) {
        const typeNode = ts.getEffectiveTypeAnnotationNode(expression.parent);
        if (typeNode) {
            const type = getWidenedType(getTypeFromTypeNode(typeNode));
            if (!declaredType) {
                return type;
            }
            else if (!isErrorType(declaredType) && !isErrorType(type) && !isTypeIdenticalTo(declaredType, type)) {
                errorNextVariableOrPropertyDeclarationMustHaveSameType(/*firstDeclaration*/ undefined, declaredType, declaration, type);
            }
        }
        if (symbol.parent?.valueDeclaration) {
            const typeNode = ts.getEffectiveTypeAnnotationNode(symbol.parent.valueDeclaration);
            if (typeNode) {
                const annotationSymbol = getPropertyOfType(getTypeFromTypeNode(typeNode), symbol.escapedName);
                if (annotationSymbol) {
                    return getNonMissingTypeOfSymbol(annotationSymbol);
                }
            }
        }

        return declaredType;
    }

    /** If we don't have an explicit JSDoc type, get the type from the initializer. */
    function getInitializerTypeFromAssignmentDeclaration(symbol: ts.Symbol, resolvedSymbol: ts.Symbol | undefined, expression: ts.BinaryExpression | ts.CallExpression, kind: ts.AssignmentDeclarationKind) {
        if (ts.isCallExpression(expression)) {
            if (resolvedSymbol) {
                return getTypeOfSymbol(resolvedSymbol); // This shouldn't happen except under some hopefully forbidden merges of export assignments and object define assignments
            }
            const objectLitType = checkExpressionCached((expression as ts.BindableObjectDefinePropertyCall).arguments[2]);
            const valueType = getTypeOfPropertyOfType(objectLitType, "value" as ts.__String);
            if (valueType) {
                return valueType;
            }
            const getFunc = getTypeOfPropertyOfType(objectLitType, "get" as ts.__String);
            if (getFunc) {
                const getSig = getSingleCallSignature(getFunc);
                if (getSig) {
                    return getReturnTypeOfSignature(getSig);
                }
            }
            const setFunc = getTypeOfPropertyOfType(objectLitType, "set" as ts.__String);
            if (setFunc) {
                const setSig = getSingleCallSignature(setFunc);
                if (setSig) {
                    return getTypeOfFirstParameterOfSignature(setSig);
                }
            }
            return anyType;
        }
        if (containsSameNamedThisProperty(expression.left, expression.right)) {
            return anyType;
        }
        const isDirectExport = kind === ts.AssignmentDeclarationKind.ExportsProperty && (ts.isPropertyAccessExpression(expression.left) || ts.isElementAccessExpression(expression.left)) && (ts.isModuleExportsAccessExpression(expression.left.expression) || (ts.isIdentifier(expression.left.expression) && ts.isExportsIdentifier(expression.left.expression)));
        const type = resolvedSymbol ? getTypeOfSymbol(resolvedSymbol)
            : isDirectExport ? getRegularTypeOfLiteralType(checkExpressionCached(expression.right))
            : getWidenedLiteralType(checkExpressionCached(expression.right));
        if (type.flags & ts.TypeFlags.Object &&
            kind === ts.AssignmentDeclarationKind.ModuleExports &&
            symbol.escapedName === ts.InternalSymbolName.ExportEquals) {
            const exportedType = resolveStructuredTypeMembers(type as ts.ObjectType);
            const members = ts.createSymbolTable();
            ts.copyEntries(exportedType.members, members);
            const initialSize = members.size;
            if (resolvedSymbol && !resolvedSymbol.exports) {
                resolvedSymbol.exports = ts.createSymbolTable();
            }
            (resolvedSymbol || symbol).exports!.forEach((s, name) => {
                const exportedMember = members.get(name)!;
                if (exportedMember && exportedMember !== s && !(s.flags & ts.SymbolFlags.Alias)) {
                    if (s.flags & ts.SymbolFlags.Value && exportedMember.flags & ts.SymbolFlags.Value) {
                        // If the member has an additional value-like declaration, union the types from the two declarations,
                        // but issue an error if they occurred in two different files. The purpose is to support a JS file with
                        // a pattern like:
                        //
                        // module.exports = { a: true };
                        // module.exports.a = 3;
                        //
                        // but we may have a JS file with `module.exports = { a: true }` along with a TypeScript module augmentation
                        // declaring an `export const a: number`. In that case, we issue a duplicate identifier error, because
                        // it's unclear what that's supposed to mean, so it's probably a mistake.
                        if (s.valueDeclaration && exportedMember.valueDeclaration && ts.getSourceFileOfNode(s.valueDeclaration) !== ts.getSourceFileOfNode(exportedMember.valueDeclaration)) {
                            const unescapedName = ts.unescapeLeadingUnderscores(s.escapedName);
                            const exportedMemberName = ts.tryCast(exportedMember.valueDeclaration, ts.isNamedDeclaration)?.name || exportedMember.valueDeclaration;
                            ts.addRelatedInfo(
                                error(s.valueDeclaration, ts.Diagnostics.Duplicate_identifier_0, unescapedName),
                                ts.createDiagnosticForNode(exportedMemberName, ts.Diagnostics._0_was_also_declared_here, unescapedName));
                            ts.addRelatedInfo(
                                error(exportedMemberName, ts.Diagnostics.Duplicate_identifier_0, unescapedName),
                                ts.createDiagnosticForNode(s.valueDeclaration, ts.Diagnostics._0_was_also_declared_here, unescapedName));
                        }
                        const union = createSymbol(s.flags | exportedMember.flags, name);
                        union.type = getUnionType([getTypeOfSymbol(s), getTypeOfSymbol(exportedMember)]);
                        union.valueDeclaration = exportedMember.valueDeclaration;
                        union.declarations = ts.concatenate(exportedMember.declarations, s.declarations);
                        members.set(name, union);
                    }
                    else {
                        members.set(name, mergeSymbol(s, exportedMember));
                    }
                }
                else {
                    members.set(name, s);
                }
            });
            const result = createAnonymousType(
                initialSize !== members.size ? undefined : exportedType.symbol, // Only set the type's symbol if it looks to be the same as the original type
                members,
                exportedType.callSignatures,
                exportedType.constructSignatures,
                exportedType.indexInfos);
            if (initialSize === members.size) {
                if (type.aliasSymbol) {
                    result.aliasSymbol = type.aliasSymbol;
                    result.aliasTypeArguments = type.aliasTypeArguments;
                }
                if (ts.getObjectFlags(type) & ts.ObjectFlags.Reference) {
                    result.aliasSymbol = (type as ts.TypeReference).symbol;
                    const args = getTypeArguments(type as ts.TypeReference);
                    result.aliasTypeArguments = ts.length(args) ? args : undefined;
                }
            }
            result.objectFlags |= (ts.getObjectFlags(type) & ts.ObjectFlags.JSLiteral); // Propagate JSLiteral flag
            if (result.symbol && result.symbol.flags & ts.SymbolFlags.Class && type === getDeclaredTypeOfClassOrInterface(result.symbol)) {
                result.objectFlags |= ts.ObjectFlags.IsClassInstanceClone; // Propagate the knowledge that this type is equivalent to the symbol's class instance type
            }
            return result;
        }
        if (isEmptyArrayLiteralType(type)) {
            reportImplicitAny(expression, anyArrayType);
            return anyArrayType;
        }
        return type;
    }

    function containsSameNamedThisProperty(thisProperty: ts.Expression, expression: ts.Expression) {
        return ts.isPropertyAccessExpression(thisProperty)
            && thisProperty.expression.kind === ts.SyntaxKind.ThisKeyword
            && ts.forEachChildRecursively(expression, n => isMatchingReference(thisProperty, n));
    }

    function isDeclarationInConstructor(expression: ts.Expression) {
        const thisContainer = ts.getThisContainer(expression, /*includeArrowFunctions*/ false);
        // Properties defined in a constructor (or base constructor, or javascript constructor function) don't get undefined added.
        // Function expressions that are assigned to the prototype count as methods.
        return thisContainer.kind === ts.SyntaxKind.Constructor ||
            thisContainer.kind === ts.SyntaxKind.FunctionDeclaration ||
            (thisContainer.kind === ts.SyntaxKind.FunctionExpression && !ts.isPrototypePropertyAssignment(thisContainer.parent));
    }

    function getConstructorDefinedThisAssignmentTypes(types: ts.Type[], declarations: ts.Declaration[]): ts.Type[] | undefined {
        ts.Debug.assert(types.length === declarations.length);
        return types.filter((_, i) => {
            const declaration = declarations[i];
            const expression = ts.isBinaryExpression(declaration) ? declaration :
                ts.isBinaryExpression(declaration.parent) ? declaration.parent : undefined;
            return expression && isDeclarationInConstructor(expression);
        });
    }

    // Return the type implied by a binding pattern element. This is the type of the initializer of the element if
    // one is present. Otherwise, if the element is itself a binding pattern, it is the type implied by the binding
    // pattern. Otherwise, it is the type any.
    function getTypeFromBindingElement(element: ts.BindingElement, includePatternInType?: boolean, reportErrors?: boolean): ts.Type {
        if (element.initializer) {
            // The type implied by a binding pattern is independent of context, so we check the initializer with no
            // contextual type or, if the element itself is a binding pattern, with the type implied by that binding
            // pattern.
            const contextualType = ts.isBindingPattern(element.name) ? getTypeFromBindingPattern(element.name, /*includePatternInType*/ true, /*reportErrors*/ false) : unknownType;
            return addOptionality(widenTypeInferredFromInitializer(element, checkDeclarationInitializer(element, CheckMode.Normal, contextualType)));
        }
        if (ts.isBindingPattern(element.name)) {
            return getTypeFromBindingPattern(element.name, includePatternInType, reportErrors);
        }
        if (reportErrors && !declarationBelongsToPrivateAmbientMember(element)) {
            reportImplicitAny(element, anyType);
        }
        // When we're including the pattern in the type (an indication we're obtaining a contextual type), we
        // use a non-inferrable any type. Inference will never directly infer this type, but it is possible
        // to infer a type that contains it, e.g. for a binding pattern like [foo] or { foo }. In such cases,
        // widening of the binding pattern type substitutes a regular any for the non-inferrable any.
        return includePatternInType ? nonInferrableAnyType : anyType;
    }

    // Return the type implied by an object binding pattern
    function getTypeFromObjectBindingPattern(pattern: ts.ObjectBindingPattern, includePatternInType: boolean, reportErrors: boolean): ts.Type {
        const members = ts.createSymbolTable();
        let stringIndexInfo: ts.IndexInfo | undefined;
        let objectFlags = ts.ObjectFlags.ObjectLiteral | ts.ObjectFlags.ContainsObjectOrArrayLiteral;
        ts.forEach(pattern.elements, e => {
            const name = e.propertyName || e.name as ts.Identifier;
            if (e.dotDotDotToken) {
                stringIndexInfo = createIndexInfo(stringType, anyType, /*isReadonly*/ false);
                return;
            }

            const exprType = getLiteralTypeFromPropertyName(name);
            if (!isTypeUsableAsPropertyName(exprType)) {
                // do not include computed properties in the implied type
                objectFlags |= ts.ObjectFlags.ObjectLiteralPatternWithComputedProperties;
                return;
            }
            const text = getPropertyNameFromType(exprType);
            const flags = ts.SymbolFlags.Property | (e.initializer ? ts.SymbolFlags.Optional : 0);
            const symbol = createSymbol(flags, text);
            symbol.type = getTypeFromBindingElement(e, includePatternInType, reportErrors);
            symbol.bindingElement = e;
            members.set(symbol.escapedName, symbol);
        });
        const result = createAnonymousType(undefined, members, ts.emptyArray, ts.emptyArray, stringIndexInfo ? [stringIndexInfo] : ts.emptyArray);
        result.objectFlags |= objectFlags;
        if (includePatternInType) {
            result.pattern = pattern;
            result.objectFlags |= ts.ObjectFlags.ContainsObjectOrArrayLiteral;
        }
        return result;
    }

    // Return the type implied by an array binding pattern
    function getTypeFromArrayBindingPattern(pattern: ts.BindingPattern, includePatternInType: boolean, reportErrors: boolean): ts.Type {
        const elements = pattern.elements;
        const lastElement = ts.lastOrUndefined(elements);
        const restElement = lastElement && lastElement.kind === ts.SyntaxKind.BindingElement && lastElement.dotDotDotToken ? lastElement : undefined;
        if (elements.length === 0 || elements.length === 1 && restElement) {
            return languageVersion >= ts.ScriptTarget.ES2015 ? createIterableType(anyType) : anyArrayType;
        }
        const elementTypes = ts.map(elements, e => ts.isOmittedExpression(e) ? anyType : getTypeFromBindingElement(e, includePatternInType, reportErrors));
        const minLength = ts.findLastIndex(elements, e => !(e === restElement || ts.isOmittedExpression(e) || hasDefaultValue(e)), elements.length - 1) + 1;
        const elementFlags = ts.map(elements, (e, i) => e === restElement ? ts.ElementFlags.Rest : i >= minLength ? ts.ElementFlags.Optional : ts.ElementFlags.Required);
        let result = createTupleType(elementTypes, elementFlags) as ts.TypeReference;
        if (includePatternInType) {
            result = cloneTypeReference(result);
            result.pattern = pattern;
            result.objectFlags |= ts.ObjectFlags.ContainsObjectOrArrayLiteral;
        }
        return result;
    }

    // Return the type implied by a binding pattern. This is the type implied purely by the binding pattern itself
    // and without regard to its context (i.e. without regard any type annotation or initializer associated with the
    // declaration in which the binding pattern is contained). For example, the implied type of [x, y] is [any, any]
    // and the implied type of { x, y: z = 1 } is { x: any; y: number; }. The type implied by a binding pattern is
    // used as the contextual type of an initializer associated with the binding pattern. Also, for a destructuring
    // parameter with no type annotation or initializer, the type implied by the binding pattern becomes the type of
    // the parameter.
    function getTypeFromBindingPattern(pattern: ts.BindingPattern, includePatternInType = false, reportErrors = false): ts.Type {
        return pattern.kind === ts.SyntaxKind.ObjectBindingPattern
            ? getTypeFromObjectBindingPattern(pattern, includePatternInType, reportErrors)
            : getTypeFromArrayBindingPattern(pattern, includePatternInType, reportErrors);
    }

    // Return the type associated with a variable, parameter, or property declaration. In the simple case this is the type
    // specified in a type annotation or inferred from an initializer. However, in the case of a destructuring declaration it
    // is a bit more involved. For example:
    //
    //   var [x, s = ""] = [1, "one"];
    //
    // Here, the array literal [1, "one"] is contextually typed by the type [any, string], which is the implied type of the
    // binding pattern [x, s = ""]. Because the contextual type is a tuple type, the resulting type of [1, "one"] is the
    // tuple type [number, string]. Thus, the type inferred for 'x' is number and the type inferred for 's' is string.
    function getWidenedTypeForVariableLikeDeclaration(declaration: ts.ParameterDeclaration | ts.PropertyDeclaration | ts.PropertySignature | ts.VariableDeclaration | ts.BindingElement | ts.JSDocPropertyLikeTag, reportErrors?: boolean): ts.Type {
        return widenTypeForVariableLikeDeclaration(getTypeForVariableLikeDeclaration(declaration, /*includeOptionality*/ true, CheckMode.Normal), declaration, reportErrors);
    }

    function isGlobalSymbolConstructor(node: ts.Node) {
        const symbol = getSymbolOfNode(node);
        const globalSymbol = getGlobalESSymbolConstructorTypeSymbol(/*reportErrors*/ false);
        return globalSymbol && symbol && symbol === globalSymbol;
    }

    function widenTypeForVariableLikeDeclaration(type: ts.Type | undefined, declaration: any, reportErrors?: boolean) {
        if (type) {
            // TODO: If back compat with pre-3.0/4.0 libs isn't required, remove the following SymbolConstructor special case transforming `symbol` into `unique symbol`
            if (type.flags & ts.TypeFlags.ESSymbol && isGlobalSymbolConstructor(declaration.parent)) {
                type = getESSymbolLikeTypeForNode(declaration);
            }
            if (reportErrors) {
                reportErrorsFromWidening(declaration, type);
            }

            // always widen a 'unique symbol' type if the type was created for a different declaration.
            if (type.flags & ts.TypeFlags.UniqueESSymbol && (ts.isBindingElement(declaration) || !declaration.type) && type.symbol !== getSymbolOfNode(declaration)) {
                type = esSymbolType;
            }

            return getWidenedType(type);
        }

        // Rest parameters default to type any[], other parameters default to type any
        type = ts.isParameter(declaration) && declaration.dotDotDotToken ? anyArrayType : anyType;

        // Report implicit any errors unless this is a private property within an ambient declaration
        if (reportErrors) {
            if (!declarationBelongsToPrivateAmbientMember(declaration)) {
                reportImplicitAny(declaration, type);
            }
        }
        return type;
    }

    function declarationBelongsToPrivateAmbientMember(declaration: ts.VariableLikeDeclaration) {
        const root = ts.getRootDeclaration(declaration);
        const memberDeclaration = root.kind === ts.SyntaxKind.Parameter ? root.parent : root;
        return isPrivateWithinAmbient(memberDeclaration);
    }

    function tryGetTypeFromEffectiveTypeNode(node: ts.Node) {
        const typeNode = ts.getEffectiveTypeAnnotationNode(node);
        if (typeNode) {
            return getTypeFromTypeNode(typeNode);
        }
    }

    function isParameterOfContextSensitiveSignature(symbol: ts.Symbol) {
        let decl = symbol.valueDeclaration;
        if (!decl) {
            return false;
        }
        if (ts.isBindingElement(decl)) {
            decl = ts.walkUpBindingElementsAndPatterns(decl);
        }
        if (ts.isParameter(decl)) {
            return isContextSensitiveFunctionOrObjectLiteralMethod(decl.parent);
        }
        return false;
    }

    function getTypeOfVariableOrParameterOrProperty(symbol: ts.Symbol): ts.Type {
        const links = getSymbolLinks(symbol);
        if (!links.type) {
            const type = getTypeOfVariableOrParameterOrPropertyWorker(symbol);
            // For a contextually typed parameter it is possible that a type has already
            // been assigned (in assignTypeToParameterAndFixTypeParameters), and we want
            // to preserve this type. In fact, we need to _prefer_ that type, but it won't
            // be assigned until contextual typing is complete, so we need to defer in
            // cases where contextual typing may take place.
            if (!links.type && !isParameterOfContextSensitiveSignature(symbol)) {
                links.type = type;
            }
            return type;
        }
        return links.type;
    }

    function getTypeOfVariableOrParameterOrPropertyWorker(symbol: ts.Symbol): ts.Type {
        // Handle prototype property
        if (symbol.flags & ts.SymbolFlags.Prototype) {
            return getTypeOfPrototypeProperty(symbol);
        }
        // CommonsJS require and module both have type any.
        if (symbol === requireSymbol) {
            return anyType;
        }
        if (symbol.flags & ts.SymbolFlags.ModuleExports && symbol.valueDeclaration) {
            const fileSymbol = getSymbolOfNode(ts.getSourceFileOfNode(symbol.valueDeclaration));
            const result = createSymbol(fileSymbol.flags, "exports" as ts.__String);
            result.declarations = fileSymbol.declarations ? fileSymbol.declarations.slice() : [];
            result.parent = symbol;
            result.target = fileSymbol;
            if (fileSymbol.valueDeclaration) result.valueDeclaration = fileSymbol.valueDeclaration;
            if (fileSymbol.members) result.members = new ts.Map(fileSymbol.members);
            if (fileSymbol.exports) result.exports = new ts.Map(fileSymbol.exports);
            const members = ts.createSymbolTable();
            members.set("exports" as ts.__String, result);
            return createAnonymousType(symbol, members, ts.emptyArray, ts.emptyArray, ts.emptyArray);
        }
        // Handle catch clause variables
        ts.Debug.assertIsDefined(symbol.valueDeclaration);
        const declaration = symbol.valueDeclaration;
        if (ts.isCatchClauseVariableDeclarationOrBindingElement(declaration)) {
            const typeNode = ts.getEffectiveTypeAnnotationNode(declaration);
            if (typeNode === undefined) {
                return useUnknownInCatchVariables ? unknownType : anyType;
            }
            const type = getTypeOfNode(typeNode);
            // an errorType will make `checkTryStatement` issue an error
            return isTypeAny(type) || type === unknownType ? type : errorType;
        }
        // Handle export default expressions
        if (ts.isSourceFile(declaration) && ts.isJsonSourceFile(declaration)) {
            if (!declaration.statements.length) {
                return emptyObjectType;
            }
            return getWidenedType(getWidenedLiteralType(checkExpression(declaration.statements[0].expression)));
        }
        if (ts.isAccessor(declaration)) {
            // Binding of certain patterns in JS code will occasionally mark symbols as both properties
            // and accessors. Here we dispatch to accessor resolution if needed.
            return getTypeOfAccessors(symbol);
        }

        // Handle variable, parameter or property
        if (!pushTypeResolution(symbol, TypeSystemPropertyName.Type)) {
            // Symbol is property of some kind that is merged with something - should use `getTypeOfFuncClassEnumModule` and not `getTypeOfVariableOrParameterOrProperty`
            if (symbol.flags & ts.SymbolFlags.ValueModule && !(symbol.flags & ts.SymbolFlags.Assignment)) {
                return getTypeOfFuncClassEnumModule(symbol);
            }
            return reportCircularityError(symbol);
        }
        let type: ts.Type;
        if (declaration.kind === ts.SyntaxKind.ExportAssignment) {
            type = widenTypeForVariableLikeDeclaration(tryGetTypeFromEffectiveTypeNode(declaration) || checkExpressionCached((declaration as ts.ExportAssignment).expression), declaration);
        }
        else if (
            ts.isBinaryExpression(declaration) ||
            (ts.isInJSFile(declaration) &&
            (ts.isCallExpression(declaration) || (ts.isPropertyAccessExpression(declaration) || ts.isBindableStaticElementAccessExpression(declaration)) && ts.isBinaryExpression(declaration.parent)))) {
            type = getWidenedTypeForAssignmentDeclaration(symbol);
        }
        else if (ts.isPropertyAccessExpression(declaration)
            || ts.isElementAccessExpression(declaration)
            || ts.isIdentifier(declaration)
            || ts.isStringLiteralLike(declaration)
            || ts.isNumericLiteral(declaration)
            || ts.isClassDeclaration(declaration)
            || ts.isFunctionDeclaration(declaration)
            || (ts.isMethodDeclaration(declaration) && !ts.isObjectLiteralMethod(declaration))
            || ts.isMethodSignature(declaration)
            || ts.isSourceFile(declaration)) {
            // Symbol is property of some kind that is merged with something - should use `getTypeOfFuncClassEnumModule` and not `getTypeOfVariableOrParameterOrProperty`
            if (symbol.flags & (ts.SymbolFlags.Function | ts.SymbolFlags.Method | ts.SymbolFlags.Class | ts.SymbolFlags.Enum | ts.SymbolFlags.ValueModule)) {
                return getTypeOfFuncClassEnumModule(symbol);
            }
            type = ts.isBinaryExpression(declaration.parent) ?
                getWidenedTypeForAssignmentDeclaration(symbol) :
                tryGetTypeFromEffectiveTypeNode(declaration) || anyType;
        }
        else if (ts.isPropertyAssignment(declaration)) {
            type = tryGetTypeFromEffectiveTypeNode(declaration) || checkPropertyAssignment(declaration);
        }
        else if (ts.isJsxAttribute(declaration)) {
            type = tryGetTypeFromEffectiveTypeNode(declaration) || checkJsxAttribute(declaration);
        }
        else if (ts.isShorthandPropertyAssignment(declaration)) {
            type = tryGetTypeFromEffectiveTypeNode(declaration) || checkExpressionForMutableLocation(declaration.name, CheckMode.Normal);
        }
        else if (ts.isObjectLiteralMethod(declaration)) {
            type = tryGetTypeFromEffectiveTypeNode(declaration) || checkObjectLiteralMethod(declaration, CheckMode.Normal);
        }
        else if (ts.isParameter(declaration)
                 || ts.isPropertyDeclaration(declaration)
                 || ts.isPropertySignature(declaration)
                 || ts.isVariableDeclaration(declaration)
                 || ts.isBindingElement(declaration)
                 || ts.isJSDocPropertyLikeTag(declaration)) {
            type = getWidenedTypeForVariableLikeDeclaration(declaration, /*includeOptionality*/ true);
        }
        // getTypeOfSymbol dispatches some JS merges incorrectly because their symbol flags are not mutually exclusive.
        // Re-dispatch based on valueDeclaration.kind instead.
        else if (ts.isEnumDeclaration(declaration)) {
            type = getTypeOfFuncClassEnumModule(symbol);
        }
        else if (ts.isEnumMember(declaration)) {
            type = getTypeOfEnumMember(symbol);
        }
        else {
            return ts.Debug.fail("Unhandled declaration kind! " + ts.Debug.formatSyntaxKind(declaration.kind) + " for " + ts.Debug.formatSymbol(symbol));
        }

        if (!popTypeResolution()) {
            // Symbol is property of some kind that is merged with something - should use `getTypeOfFuncClassEnumModule` and not `getTypeOfVariableOrParameterOrProperty`
            if (symbol.flags & ts.SymbolFlags.ValueModule && !(symbol.flags & ts.SymbolFlags.Assignment)) {
                return getTypeOfFuncClassEnumModule(symbol);
            }
            return reportCircularityError(symbol);
        }
        return type;
    }

    function getAnnotatedAccessorTypeNode(accessor: ts.AccessorDeclaration | ts.PropertyDeclaration | undefined): ts.TypeNode | undefined {
        if (accessor) {
            switch (accessor.kind) {
                case ts.SyntaxKind.GetAccessor:
                    const getterTypeAnnotation = ts.getEffectiveReturnTypeNode(accessor);
                    return getterTypeAnnotation;
                case ts.SyntaxKind.SetAccessor:
                    const setterTypeAnnotation = ts.getEffectiveSetAccessorTypeAnnotationNode(accessor);
                    return setterTypeAnnotation;
                case ts.SyntaxKind.PropertyDeclaration:
                    ts.Debug.assert(ts.hasAccessorModifier(accessor));
                    const accessorTypeAnnotation = ts.getEffectiveTypeAnnotationNode(accessor);
                    return accessorTypeAnnotation;
            }
        }
        return undefined;
    }

    function getAnnotatedAccessorType(accessor: ts.AccessorDeclaration | ts.PropertyDeclaration | undefined): ts.Type | undefined {
        const node = getAnnotatedAccessorTypeNode(accessor);
        return node && getTypeFromTypeNode(node);
    }

    function getAnnotatedAccessorThisParameter(accessor: ts.AccessorDeclaration): ts.Symbol | undefined {
        const parameter = getAccessorThisParameter(accessor);
        return parameter && parameter.symbol;
    }

    function getThisTypeOfDeclaration(declaration: ts.SignatureDeclaration): ts.Type | undefined {
        return getThisTypeOfSignature(getSignatureFromDeclaration(declaration));
    }

    function getTypeOfAccessors(symbol: ts.Symbol): ts.Type {
        const links = getSymbolLinks(symbol);
        if (!links.type) {
            if (!pushTypeResolution(symbol, TypeSystemPropertyName.Type)) {
                return errorType;
            }
            const getter = ts.getDeclarationOfKind<ts.AccessorDeclaration>(symbol, ts.SyntaxKind.GetAccessor);
            const setter = ts.getDeclarationOfKind<ts.AccessorDeclaration>(symbol, ts.SyntaxKind.SetAccessor);
            const accessor = ts.tryCast(ts.getDeclarationOfKind<ts.PropertyDeclaration>(symbol, ts.SyntaxKind.PropertyDeclaration), ts.isAutoAccessorPropertyDeclaration);

            // We try to resolve a getter type annotation, a setter type annotation, or a getter function
            // body return type inference, in that order.
            let type = getter && ts.isInJSFile(getter) && getTypeForDeclarationFromJSDocComment(getter) ||
                getAnnotatedAccessorType(getter) ||
                getAnnotatedAccessorType(setter) ||
                getAnnotatedAccessorType(accessor) ||
                getter && getter.body && getReturnTypeFromBody(getter) ||
                accessor && accessor.initializer && getWidenedTypeForVariableLikeDeclaration(accessor, /*includeOptionality*/ true);
            if (!type) {
                if (setter && !isPrivateWithinAmbient(setter)) {
                    errorOrSuggestion(noImplicitAny, setter, ts.Diagnostics.Property_0_implicitly_has_type_any_because_its_set_accessor_lacks_a_parameter_type_annotation, symbolToString(symbol));
                }
                else if (getter && !isPrivateWithinAmbient(getter)) {
                    errorOrSuggestion(noImplicitAny, getter, ts.Diagnostics.Property_0_implicitly_has_type_any_because_its_get_accessor_lacks_a_return_type_annotation, symbolToString(symbol));
                }
                else if (accessor && !isPrivateWithinAmbient(accessor)) {
                    errorOrSuggestion(noImplicitAny, accessor, ts.Diagnostics.Member_0_implicitly_has_an_1_type, symbolToString(symbol), "any");
                }
                type = anyType;
            }
            if (!popTypeResolution()) {
                if (getAnnotatedAccessorTypeNode(getter)) {
                    error(getter, ts.Diagnostics._0_is_referenced_directly_or_indirectly_in_its_own_type_annotation, symbolToString(symbol));
                }
                else if (getAnnotatedAccessorTypeNode(setter)) {
                    error(setter, ts.Diagnostics._0_is_referenced_directly_or_indirectly_in_its_own_type_annotation, symbolToString(symbol));
                }
                else if (getAnnotatedAccessorTypeNode(accessor)) {
                    error(setter, ts.Diagnostics._0_is_referenced_directly_or_indirectly_in_its_own_type_annotation, symbolToString(symbol));
                }
                else if (getter && noImplicitAny) {
                    error(getter, ts.Diagnostics._0_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions, symbolToString(symbol));
                }
                type = anyType;
            }
            links.type = type;
        }
        return links.type;
    }

    function getWriteTypeOfAccessors(symbol: ts.Symbol): ts.Type {
        const links = getSymbolLinks(symbol);
        if (!links.writeType) {
            if (!pushTypeResolution(symbol, TypeSystemPropertyName.WriteType)) {
                return errorType;
            }

            const setter = ts.getDeclarationOfKind<ts.AccessorDeclaration>(symbol, ts.SyntaxKind.SetAccessor)
                ?? ts.tryCast(ts.getDeclarationOfKind<ts.PropertyDeclaration>(symbol, ts.SyntaxKind.PropertyDeclaration), ts.isAutoAccessorPropertyDeclaration);
            let writeType = getAnnotatedAccessorType(setter);
            if (!popTypeResolution()) {
                if (getAnnotatedAccessorTypeNode(setter)) {
                    error(setter, ts.Diagnostics._0_is_referenced_directly_or_indirectly_in_its_own_type_annotation, symbolToString(symbol));
                }
                writeType = anyType;
            }
            // Absent an explicit setter type annotation we use the read type of the accessor.
            links.writeType = writeType || getTypeOfAccessors(symbol);
        }
        return links.writeType;
    }

    function getBaseTypeVariableOfClass(symbol: ts.Symbol) {
        const baseConstructorType = getBaseConstructorTypeOfClass(getDeclaredTypeOfClassOrInterface(symbol));
        return baseConstructorType.flags & ts.TypeFlags.TypeVariable ? baseConstructorType :
            baseConstructorType.flags & ts.TypeFlags.Intersection ? ts.find((baseConstructorType as ts.IntersectionType).types, t => !!(t.flags & ts.TypeFlags.TypeVariable)) :
            undefined;
    }

    function getTypeOfFuncClassEnumModule(symbol: ts.Symbol): ts.Type {
        let links = getSymbolLinks(symbol);
        const originalLinks = links;
        if (!links.type) {
            const expando = symbol.valueDeclaration && getSymbolOfExpando(symbol.valueDeclaration, /*allowDeclaration*/ false);
            if (expando) {
                const merged = mergeJSSymbols(symbol, expando);
                if (merged) {
                    // note:we overwrite links because we just cloned the symbol
                    symbol = links = merged;
                }
            }
            originalLinks.type = links.type = getTypeOfFuncClassEnumModuleWorker(symbol);
        }
        return links.type;
    }

    function getTypeOfFuncClassEnumModuleWorker(symbol: ts.Symbol): ts.Type {
        const declaration = symbol.valueDeclaration;
        if (symbol.flags & ts.SymbolFlags.Module && ts.isShorthandAmbientModuleSymbol(symbol)) {
            return anyType;
        }
        else if (declaration && (declaration.kind === ts.SyntaxKind.BinaryExpression ||
                 ts.isAccessExpression(declaration) &&
                 declaration.parent.kind === ts.SyntaxKind.BinaryExpression)) {
            return getWidenedTypeForAssignmentDeclaration(symbol);
        }
        else if (symbol.flags & ts.SymbolFlags.ValueModule && declaration && ts.isSourceFile(declaration) && declaration.commonJsModuleIndicator) {
            const resolvedModule = resolveExternalModuleSymbol(symbol);
            if (resolvedModule !== symbol) {
                if (!pushTypeResolution(symbol, TypeSystemPropertyName.Type)) {
                    return errorType;
                }
                const exportEquals = getMergedSymbol(symbol.exports!.get(ts.InternalSymbolName.ExportEquals)!);
                const type = getWidenedTypeForAssignmentDeclaration(exportEquals, exportEquals === resolvedModule ? undefined : resolvedModule);
                if (!popTypeResolution()) {
                    return reportCircularityError(symbol);
                }
                return type;
            }
        }
        const type = createObjectType(ts.ObjectFlags.Anonymous, symbol);
        if (symbol.flags & ts.SymbolFlags.Class) {
            const baseTypeVariable = getBaseTypeVariableOfClass(symbol);
            return baseTypeVariable ? getIntersectionType([type, baseTypeVariable]) : type;
        }
        else {
            return strictNullChecks && symbol.flags & ts.SymbolFlags.Optional ? getOptionalType(type) : type;
        }
    }

    function getTypeOfEnumMember(symbol: ts.Symbol): ts.Type {
        const links = getSymbolLinks(symbol);
        return links.type || (links.type = getDeclaredTypeOfEnumMember(symbol));
    }

    function getTypeOfAlias(symbol: ts.Symbol): ts.Type {
        const links = getSymbolLinks(symbol);
        if (!links.type) {
            const targetSymbol = resolveAlias(symbol);
            const exportSymbol = symbol.declarations && getTargetOfAliasDeclaration(getDeclarationOfAliasSymbol(symbol)!, /*dontResolveAlias*/ true);
            const declaredType = ts.firstDefined(exportSymbol?.declarations, d => ts.isExportAssignment(d) ? tryGetTypeFromEffectiveTypeNode(d) : undefined);
            // It only makes sense to get the type of a value symbol. If the result of resolving
            // the alias is not a value, then it has no type. To get the type associated with a
            // type symbol, call getDeclaredTypeOfSymbol.
            // This check is important because without it, a call to getTypeOfSymbol could end
            // up recursively calling getTypeOfAlias, causing a stack overflow.
            links.type = exportSymbol?.declarations && isDuplicatedCommonJSExport(exportSymbol.declarations) && symbol.declarations!.length ? getFlowTypeFromCommonJSExport(exportSymbol)
                : isDuplicatedCommonJSExport(symbol.declarations) ? autoType
                : declaredType ? declaredType
                : getAllSymbolFlags(targetSymbol) & ts.SymbolFlags.Value ? getTypeOfSymbol(targetSymbol)
                : errorType;
        }
        return links.type;
    }

    function getTypeOfInstantiatedSymbol(symbol: ts.Symbol): ts.Type {
        const links = getSymbolLinks(symbol);
        return links.type || (links.type = instantiateType(getTypeOfSymbol(links.target!), links.mapper));
    }

    function getWriteTypeOfInstantiatedSymbol(symbol: ts.Symbol): ts.Type {
        const links = getSymbolLinks(symbol);
        return links.writeType || (links.writeType = instantiateType(getWriteTypeOfSymbol(links.target!), links.mapper));
    }

    function reportCircularityError(symbol: ts.Symbol) {
        const declaration = symbol.valueDeclaration as ts.VariableLikeDeclaration;
        // Check if variable has type annotation that circularly references the variable itself
        if (ts.getEffectiveTypeAnnotationNode(declaration)) {
            error(symbol.valueDeclaration, ts.Diagnostics._0_is_referenced_directly_or_indirectly_in_its_own_type_annotation,
                symbolToString(symbol));
            return errorType;
        }
        // Check if variable has initializer that circularly references the variable itself
        if (noImplicitAny && (declaration.kind !== ts.SyntaxKind.Parameter || (declaration as ts.HasInitializer).initializer)) {
            error(symbol.valueDeclaration, ts.Diagnostics._0_implicitly_has_type_any_because_it_does_not_have_a_type_annotation_and_is_referenced_directly_or_indirectly_in_its_own_initializer,
                symbolToString(symbol));
        }
        // Circularities could also result from parameters in function expressions that end up
        // having themselves as contextual types following type argument inference. In those cases
        // we have already reported an implicit any error so we don't report anything here.
        return anyType;
    }

    function getTypeOfSymbolWithDeferredType(symbol: ts.Symbol) {
        const links = getSymbolLinks(symbol);
        if (!links.type) {
            ts.Debug.assertIsDefined(links.deferralParent);
            ts.Debug.assertIsDefined(links.deferralConstituents);
            links.type = links.deferralParent.flags & ts.TypeFlags.Union ? getUnionType(links.deferralConstituents) : getIntersectionType(links.deferralConstituents);
        }
        return links.type;
    }

    function getWriteTypeOfSymbolWithDeferredType(symbol: ts.Symbol): ts.Type | undefined {
        const links = getSymbolLinks(symbol);
        if (!links.writeType && links.deferralWriteConstituents) {
            ts.Debug.assertIsDefined(links.deferralParent);
            ts.Debug.assertIsDefined(links.deferralConstituents);
            links.writeType = links.deferralParent.flags & ts.TypeFlags.Union ? getUnionType(links.deferralWriteConstituents) : getIntersectionType(links.deferralWriteConstituents);
        }
        return links.writeType;
    }

    /**
     * Distinct write types come only from set accessors, but synthetic union and intersection
     * properties deriving from set accessors will either pre-compute or defer the union or
     * intersection of the writeTypes of their constituents.
     */
    function getWriteTypeOfSymbol(symbol: ts.Symbol): ts.Type {
        const checkFlags = ts.getCheckFlags(symbol);
        if (symbol.flags & ts.SymbolFlags.Property) {
            return checkFlags & ts.CheckFlags.SyntheticProperty ?
                checkFlags & ts.CheckFlags.DeferredType ?
                    getWriteTypeOfSymbolWithDeferredType(symbol) || getTypeOfSymbolWithDeferredType(symbol) :
                    (symbol as ts.TransientSymbol).writeType || (symbol as ts.TransientSymbol).type! :
                getTypeOfSymbol(symbol);
        }
        if (symbol.flags & ts.SymbolFlags.Accessor) {
            return checkFlags & ts.CheckFlags.Instantiated ?
                getWriteTypeOfInstantiatedSymbol(symbol) :
                getWriteTypeOfAccessors(symbol);
        }
        return getTypeOfSymbol(symbol);
    }

    function getTypeOfSymbol(symbol: ts.Symbol): ts.Type {
        const checkFlags = ts.getCheckFlags(symbol);
        if (checkFlags & ts.CheckFlags.DeferredType) {
            return getTypeOfSymbolWithDeferredType(symbol);
        }
        if (checkFlags & ts.CheckFlags.Instantiated) {
            return getTypeOfInstantiatedSymbol(symbol);
        }
        if (checkFlags & ts.CheckFlags.Mapped) {
            return getTypeOfMappedSymbol(symbol as ts.MappedSymbol);
        }
        if (checkFlags & ts.CheckFlags.ReverseMapped) {
            return getTypeOfReverseMappedSymbol(symbol as ts.ReverseMappedSymbol);
        }
        if (symbol.flags & (ts.SymbolFlags.Variable | ts.SymbolFlags.Property)) {
            return getTypeOfVariableOrParameterOrProperty(symbol);
        }
        if (symbol.flags & (ts.SymbolFlags.Function | ts.SymbolFlags.Method | ts.SymbolFlags.Class | ts.SymbolFlags.Enum | ts.SymbolFlags.ValueModule)) {
            return getTypeOfFuncClassEnumModule(symbol);
        }
        if (symbol.flags & ts.SymbolFlags.EnumMember) {
            return getTypeOfEnumMember(symbol);
        }
        if (symbol.flags & ts.SymbolFlags.Accessor) {
            return getTypeOfAccessors(symbol);
        }
        if (symbol.flags & ts.SymbolFlags.Alias) {
            return getTypeOfAlias(symbol);
        }
        return errorType;
    }

    function getNonMissingTypeOfSymbol(symbol: ts.Symbol) {
        return removeMissingType(getTypeOfSymbol(symbol), !!(symbol.flags & ts.SymbolFlags.Optional));
    }

    function isReferenceToType(type: ts.Type, target: ts.Type) {
        return type !== undefined
            && target !== undefined
            && (ts.getObjectFlags(type) & ts.ObjectFlags.Reference) !== 0
            && (type as ts.TypeReference).target === target;
    }

    function getTargetType(type: ts.Type): ts.Type {
        return ts.getObjectFlags(type) & ts.ObjectFlags.Reference ? (type as ts.TypeReference).target : type;
    }

    // TODO: GH#18217 If `checkBase` is undefined, we should not call this because this will always return false.
    function hasBaseType(type: ts.Type, checkBase: ts.Type | undefined) {
        return check(type);
        function check(type: ts.Type): boolean {
            if (ts.getObjectFlags(type) & (ts.ObjectFlags.ClassOrInterface | ts.ObjectFlags.Reference)) {
                const target = getTargetType(type) as ts.InterfaceType;
                return target === checkBase || ts.some(getBaseTypes(target), check);
            }
            else if (type.flags & ts.TypeFlags.Intersection) {
                return ts.some((type as ts.IntersectionType).types, check);
            }
            return false;
        }
    }

    // Appends the type parameters given by a list of declarations to a set of type parameters and returns the resulting set.
    // The function allocates a new array if the input type parameter set is undefined, but otherwise it modifies the set
    // in-place and returns the same array.
    function appendTypeParameters(typeParameters: ts.TypeParameter[] | undefined, declarations: readonly ts.TypeParameterDeclaration[]): ts.TypeParameter[] | undefined {
        for (const declaration of declarations) {
            typeParameters = ts.appendIfUnique(typeParameters, getDeclaredTypeOfTypeParameter(getSymbolOfNode(declaration)));
        }
        return typeParameters;
    }

    // Return the outer type parameters of a node or undefined if the node has no outer type parameters.
    function getOuterTypeParameters(node: ts.Node, includeThisTypes?: boolean): ts.TypeParameter[] | undefined {
        while (true) {
            node = node.parent; // TODO: GH#18217 Use SourceFile kind check instead
            if (node && ts.isBinaryExpression(node)) {
                // prototype assignments get the outer type parameters of their constructor function
                const assignmentKind = ts.getAssignmentDeclarationKind(node);
                if (assignmentKind === ts.AssignmentDeclarationKind.Prototype || assignmentKind === ts.AssignmentDeclarationKind.PrototypeProperty) {
                    const symbol = getSymbolOfNode(node.left);
                    if (symbol && symbol.parent && !ts.findAncestor(symbol.parent.valueDeclaration, d => node === d)) {
                        node = symbol.parent.valueDeclaration!;
                    }
                }
            }
            if (!node) {
                return undefined;
            }
            switch (node.kind) {
                case ts.SyntaxKind.ClassDeclaration:
                case ts.SyntaxKind.ClassExpression:
                case ts.SyntaxKind.InterfaceDeclaration:
                case ts.SyntaxKind.CallSignature:
                case ts.SyntaxKind.ConstructSignature:
                case ts.SyntaxKind.MethodSignature:
                case ts.SyntaxKind.FunctionType:
                case ts.SyntaxKind.ConstructorType:
                case ts.SyntaxKind.JSDocFunctionType:
                case ts.SyntaxKind.FunctionDeclaration:
                case ts.SyntaxKind.MethodDeclaration:
                case ts.SyntaxKind.FunctionExpression:
                case ts.SyntaxKind.ArrowFunction:
                case ts.SyntaxKind.TypeAliasDeclaration:
                case ts.SyntaxKind.JSDocTemplateTag:
                case ts.SyntaxKind.JSDocTypedefTag:
                case ts.SyntaxKind.JSDocEnumTag:
                case ts.SyntaxKind.JSDocCallbackTag:
                case ts.SyntaxKind.MappedType:
                case ts.SyntaxKind.ConditionalType: {
                    const outerTypeParameters = getOuterTypeParameters(node, includeThisTypes);
                    if (node.kind === ts.SyntaxKind.MappedType) {
                        return ts.append(outerTypeParameters, getDeclaredTypeOfTypeParameter(getSymbolOfNode((node as ts.MappedTypeNode).typeParameter)));
                    }
                    else if (node.kind === ts.SyntaxKind.ConditionalType) {
                        return ts.concatenate(outerTypeParameters, getInferTypeParameters(node as ts.ConditionalTypeNode));
                    }
                    const outerAndOwnTypeParameters = appendTypeParameters(outerTypeParameters, ts.getEffectiveTypeParameterDeclarations(node as ts.DeclarationWithTypeParameters));
                    const thisType = includeThisTypes &&
                        (node.kind === ts.SyntaxKind.ClassDeclaration || node.kind === ts.SyntaxKind.ClassExpression || node.kind === ts.SyntaxKind.InterfaceDeclaration || isJSConstructor(node)) &&
                        getDeclaredTypeOfClassOrInterface(getSymbolOfNode(node as ts.ClassLikeDeclaration | ts.InterfaceDeclaration)).thisType;
                    return thisType ? ts.append(outerAndOwnTypeParameters, thisType) : outerAndOwnTypeParameters;
                }
                case ts.SyntaxKind.JSDocParameterTag:
                    const paramSymbol = ts.getParameterSymbolFromJSDoc(node as ts.JSDocParameterTag);
                    if (paramSymbol) {
                        node = paramSymbol.valueDeclaration!;
                    }
                    break;
                case ts.SyntaxKind.JSDoc: {
                    const outerTypeParameters = getOuterTypeParameters(node, includeThisTypes);
                    return (node as ts.JSDoc).tags
                        ? appendTypeParameters(outerTypeParameters, ts.flatMap((node as ts.JSDoc).tags, t => ts.isJSDocTemplateTag(t) ? t.typeParameters : undefined))
                        : outerTypeParameters;
                }
            }
        }
    }

    // The outer type parameters are those defined by enclosing generic classes, methods, or functions.
    function getOuterTypeParametersOfClassOrInterface(symbol: ts.Symbol): ts.TypeParameter[] | undefined {
        const declaration = symbol.flags & ts.SymbolFlags.Class ? symbol.valueDeclaration : ts.getDeclarationOfKind(symbol, ts.SyntaxKind.InterfaceDeclaration)!;
        ts.Debug.assert(!!declaration, "Class was missing valueDeclaration -OR- non-class had no interface declarations");
        return getOuterTypeParameters(declaration);
    }

    // The local type parameters are the combined set of type parameters from all declarations of the class,
    // interface, or type alias.
    function getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol: ts.Symbol): ts.TypeParameter[] | undefined {
        if (!symbol.declarations) {
            return;
        }
        let result: ts.TypeParameter[] | undefined;
        for (const node of symbol.declarations) {
            if (node.kind === ts.SyntaxKind.InterfaceDeclaration ||
                node.kind === ts.SyntaxKind.ClassDeclaration ||
                node.kind === ts.SyntaxKind.ClassExpression ||
                isJSConstructor(node) ||
                ts.isTypeAlias(node)) {
                const declaration = node as ts.InterfaceDeclaration | ts.TypeAliasDeclaration | ts.JSDocTypedefTag | ts.JSDocCallbackTag;
                result = appendTypeParameters(result, ts.getEffectiveTypeParameterDeclarations(declaration));
            }
        }
        return result;
    }

    // The full set of type parameters for a generic class or interface type consists of its outer type parameters plus
    // its locally declared type parameters.
    function getTypeParametersOfClassOrInterface(symbol: ts.Symbol): ts.TypeParameter[] | undefined {
        return ts.concatenate(getOuterTypeParametersOfClassOrInterface(symbol), getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol));
    }

    // A type is a mixin constructor if it has a single construct signature taking no type parameters and a single
    // rest parameter of type any[].
    function isMixinConstructorType(type: ts.Type) {
        const signatures = getSignaturesOfType(type, ts.SignatureKind.Construct);
        if (signatures.length === 1) {
            const s = signatures[0];
            if (!s.typeParameters && s.parameters.length === 1 && signatureHasRestParameter(s)) {
                const paramType = getTypeOfParameter(s.parameters[0]);
                return isTypeAny(paramType) || getElementTypeOfArrayType(paramType) === anyType;
            }
        }
        return false;
    }

    function isConstructorType(type: ts.Type): boolean {
        if (getSignaturesOfType(type, ts.SignatureKind.Construct).length > 0) {
            return true;
        }
        if (type.flags & ts.TypeFlags.TypeVariable) {
            const constraint = getBaseConstraintOfType(type);
            return !!constraint && isMixinConstructorType(constraint);
        }
        return false;
    }

    function getBaseTypeNodeOfClass(type: ts.InterfaceType): ts.ExpressionWithTypeArguments | undefined {
        const decl = ts.getClassLikeDeclarationOfSymbol(type.symbol);
        return decl && ts.getEffectiveBaseTypeNode(decl);
    }

    function getConstructorsForTypeArguments(type: ts.Type, typeArgumentNodes: readonly ts.TypeNode[] | undefined, location: ts.Node): readonly ts.Signature[] {
        const typeArgCount = ts.length(typeArgumentNodes);
        const isJavascript = ts.isInJSFile(location);
        return ts.filter(getSignaturesOfType(type, ts.SignatureKind.Construct),
            sig => (isJavascript || typeArgCount >= getMinTypeArgumentCount(sig.typeParameters)) && typeArgCount <= ts.length(sig.typeParameters));
    }

    function getInstantiatedConstructorsForTypeArguments(type: ts.Type, typeArgumentNodes: readonly ts.TypeNode[] | undefined, location: ts.Node): readonly ts.Signature[] {
        const signatures = getConstructorsForTypeArguments(type, typeArgumentNodes, location);
        const typeArguments = ts.map(typeArgumentNodes, getTypeFromTypeNode);
        return ts.sameMap<ts.Signature>(signatures, sig => ts.some(sig.typeParameters) ? getSignatureInstantiation(sig, typeArguments, ts.isInJSFile(location)) : sig);
    }

    /**
     * The base constructor of a class can resolve to
     * * undefinedType if the class has no extends clause,
     * * unknownType if an error occurred during resolution of the extends expression,
     * * nullType if the extends expression is the null value,
     * * anyType if the extends expression has type any, or
     * * an object type with at least one construct signature.
     */
    function getBaseConstructorTypeOfClass(type: ts.InterfaceType): ts.Type {
        if (!type.resolvedBaseConstructorType) {
            const decl = ts.getClassLikeDeclarationOfSymbol(type.symbol);
            const extended = decl && ts.getEffectiveBaseTypeNode(decl);
            const baseTypeNode = getBaseTypeNodeOfClass(type);
            if (!baseTypeNode) {
                return type.resolvedBaseConstructorType = undefinedType;
            }
            if (!pushTypeResolution(type, TypeSystemPropertyName.ResolvedBaseConstructorType)) {
                return errorType;
            }
            const baseConstructorType = checkExpression(baseTypeNode.expression);
            if (extended && baseTypeNode !== extended) {
                ts.Debug.assert(!extended.typeArguments); // Because this is in a JS file, and baseTypeNode is in an @extends tag
                checkExpression(extended.expression);
            }
            if (baseConstructorType.flags & (ts.TypeFlags.Object | ts.TypeFlags.Intersection)) {
                // Resolving the members of a class requires us to resolve the base class of that class.
                // We force resolution here such that we catch circularities now.
                resolveStructuredTypeMembers(baseConstructorType as ts.ObjectType);
            }
            if (!popTypeResolution()) {
                error(type.symbol.valueDeclaration, ts.Diagnostics._0_is_referenced_directly_or_indirectly_in_its_own_base_expression, symbolToString(type.symbol));
                return type.resolvedBaseConstructorType = errorType;
            }
            if (!(baseConstructorType.flags & ts.TypeFlags.Any) && baseConstructorType !== nullWideningType && !isConstructorType(baseConstructorType)) {
                const err = error(baseTypeNode.expression, ts.Diagnostics.Type_0_is_not_a_constructor_function_type, typeToString(baseConstructorType));
                if (baseConstructorType.flags & ts.TypeFlags.TypeParameter) {
                    const constraint = getConstraintFromTypeParameter(baseConstructorType);
                    let ctorReturn: ts.Type = unknownType;
                    if (constraint) {
                        const ctorSig = getSignaturesOfType(constraint, ts.SignatureKind.Construct);
                        if (ctorSig[0]) {
                            ctorReturn = getReturnTypeOfSignature(ctorSig[0]);
                        }
                    }
                    if (baseConstructorType.symbol.declarations) {
                        ts.addRelatedInfo(err, ts.createDiagnosticForNode(baseConstructorType.symbol.declarations[0], ts.Diagnostics.Did_you_mean_for_0_to_be_constrained_to_type_new_args_Colon_any_1, symbolToString(baseConstructorType.symbol), typeToString(ctorReturn)));
                    }
                }
                return type.resolvedBaseConstructorType = errorType;
            }
            type.resolvedBaseConstructorType = baseConstructorType;
        }
        return type.resolvedBaseConstructorType;
    }

    function getImplementsTypes(type: ts.InterfaceType): ts.BaseType[] {
        let resolvedImplementsTypes: ts.BaseType[] = ts.emptyArray;
        if (type.symbol.declarations) {
            for (const declaration of type.symbol.declarations) {
                const implementsTypeNodes = ts.getEffectiveImplementsTypeNodes(declaration as ts.ClassLikeDeclaration);
                if (!implementsTypeNodes) continue;
                for (const node of implementsTypeNodes) {
                    const implementsType = getTypeFromTypeNode(node);
                    if (!isErrorType(implementsType)) {
                        if (resolvedImplementsTypes === ts.emptyArray) {
                            resolvedImplementsTypes = [implementsType as ts.ObjectType];
                        }
                        else {
                            resolvedImplementsTypes.push(implementsType);
                        }
                    }
                }
            }
        }
        return resolvedImplementsTypes;
    }

    function reportCircularBaseType(node: ts.Node, type: ts.Type) {
        error(node, ts.Diagnostics.Type_0_recursively_references_itself_as_a_base_type, typeToString(type, /*enclosingDeclaration*/ undefined, ts.TypeFormatFlags.WriteArrayAsGenericType));
    }

    function getBaseTypes(type: ts.InterfaceType): ts.BaseType[] {
        if (!type.baseTypesResolved) {
            if (pushTypeResolution(type, TypeSystemPropertyName.ResolvedBaseTypes)) {
                if (type.objectFlags & ts.ObjectFlags.Tuple) {
                    type.resolvedBaseTypes = [getTupleBaseType(type as ts.TupleType)];
                }
                else if (type.symbol.flags & (ts.SymbolFlags.Class | ts.SymbolFlags.Interface)) {
                    if (type.symbol.flags & ts.SymbolFlags.Class) {
                        resolveBaseTypesOfClass(type);
                    }
                    if (type.symbol.flags & ts.SymbolFlags.Interface) {
                        resolveBaseTypesOfInterface(type);
                    }
                }
                else {
                    ts.Debug.fail("type must be class or interface");
                }
                if (!popTypeResolution() && type.symbol.declarations) {
                    for (const declaration of type.symbol.declarations) {
                        if (declaration.kind === ts.SyntaxKind.ClassDeclaration || declaration.kind === ts.SyntaxKind.InterfaceDeclaration) {
                            reportCircularBaseType(declaration, type);
                        }
                    }
                }
            }
            type.baseTypesResolved = true;
        }
        return type.resolvedBaseTypes;
    }

    function getTupleBaseType(type: ts.TupleType) {
        const elementTypes = ts.sameMap(type.typeParameters, (t, i) => type.elementFlags[i] & ts.ElementFlags.Variadic ? getIndexedAccessType(t, numberType) : t);
        return createArrayType(getUnionType(elementTypes || ts.emptyArray), type.readonly);
    }

    function resolveBaseTypesOfClass(type: ts.InterfaceType) {
        type.resolvedBaseTypes = ts.resolvingEmptyArray;
        const baseConstructorType = getApparentType(getBaseConstructorTypeOfClass(type));
        if (!(baseConstructorType.flags & (ts.TypeFlags.Object | ts.TypeFlags.Intersection | ts.TypeFlags.Any))) {
            return type.resolvedBaseTypes = ts.emptyArray;
        }
        const baseTypeNode = getBaseTypeNodeOfClass(type)!;
        let baseType: ts.Type;
        const originalBaseType = baseConstructorType.symbol ? getDeclaredTypeOfSymbol(baseConstructorType.symbol) : undefined;
        if (baseConstructorType.symbol && baseConstructorType.symbol.flags & ts.SymbolFlags.Class &&
            areAllOuterTypeParametersApplied(originalBaseType!)) {
            // When base constructor type is a class with no captured type arguments we know that the constructors all have the same type parameters as the
            // class and all return the instance type of the class. There is no need for further checks and we can apply the
            // type arguments in the same manner as a type reference to get the same error reporting experience.
            baseType = getTypeFromClassOrInterfaceReference(baseTypeNode, baseConstructorType.symbol);
        }
        else if (baseConstructorType.flags & ts.TypeFlags.Any) {
            baseType = baseConstructorType;
        }
        else {
            // The class derives from a "class-like" constructor function, check that we have at least one construct signature
            // with a matching number of type parameters and use the return type of the first instantiated signature. Elsewhere
            // we check that all instantiated signatures return the same type.
            const constructors = getInstantiatedConstructorsForTypeArguments(baseConstructorType, baseTypeNode.typeArguments, baseTypeNode);
            if (!constructors.length) {
                error(baseTypeNode.expression, ts.Diagnostics.No_base_constructor_has_the_specified_number_of_type_arguments);
                return type.resolvedBaseTypes = ts.emptyArray;
            }
            baseType = getReturnTypeOfSignature(constructors[0]);
        }

        if (isErrorType(baseType)) {
            return type.resolvedBaseTypes = ts.emptyArray;
        }
        const reducedBaseType = getReducedType(baseType);
        if (!isValidBaseType(reducedBaseType)) {
            const elaboration = elaborateNeverIntersection(/*errorInfo*/ undefined, baseType);
            const diagnostic = ts.chainDiagnosticMessages(elaboration, ts.Diagnostics.Base_constructor_return_type_0_is_not_an_object_type_or_intersection_of_object_types_with_statically_known_members, typeToString(reducedBaseType));
            diagnostics.add(ts.createDiagnosticForNodeFromMessageChain(baseTypeNode.expression, diagnostic));
            return type.resolvedBaseTypes = ts.emptyArray;
        }
        if (type === reducedBaseType || hasBaseType(reducedBaseType, type)) {
            error(type.symbol.valueDeclaration, ts.Diagnostics.Type_0_recursively_references_itself_as_a_base_type,
                typeToString(type, /*enclosingDeclaration*/ undefined, ts.TypeFormatFlags.WriteArrayAsGenericType));
            return type.resolvedBaseTypes = ts.emptyArray;
        }
        if (type.resolvedBaseTypes === ts.resolvingEmptyArray) {
            // Circular reference, likely through instantiation of default parameters
            // (otherwise there'd be an error from hasBaseType) - this is fine, but `.members` should be reset
            // as `getIndexedAccessType` via `instantiateType` via `getTypeFromClassOrInterfaceReference` forces a
            // partial instantiation of the members without the base types fully resolved
            type.members = undefined;
        }
        return type.resolvedBaseTypes = [reducedBaseType];
    }

    function areAllOuterTypeParametersApplied(type: ts.Type): boolean { // TODO: GH#18217 Shouldn't this take an InterfaceType?
        // An unapplied type parameter has its symbol still the same as the matching argument symbol.
        // Since parameters are applied outer-to-inner, only the last outer parameter needs to be checked.
        const outerTypeParameters = (type as ts.InterfaceType).outerTypeParameters;
        if (outerTypeParameters) {
            const last = outerTypeParameters.length - 1;
            const typeArguments = getTypeArguments(type as ts.TypeReference);
            return outerTypeParameters[last].symbol !== typeArguments[last].symbol;
        }
        return true;
    }

    // A valid base type is `any`, an object type or intersection of object types.
    function isValidBaseType(type: ts.Type): type is ts.BaseType {
        if (type.flags & ts.TypeFlags.TypeParameter) {
            const constraint = getBaseConstraintOfType(type);
            if (constraint) {
                return isValidBaseType(constraint);
            }
        }
        // TODO: Given that we allow type parmeters here now, is this `!isGenericMappedType(type)` check really needed?
        // There's no reason a `T` should be allowed while a `Readonly<T>` should not.
        return !!(type.flags & (ts.TypeFlags.Object | ts.TypeFlags.NonPrimitive | ts.TypeFlags.Any) && !isGenericMappedType(type) ||
            type.flags & ts.TypeFlags.Intersection && ts.every((type as ts.IntersectionType).types, isValidBaseType));
    }

    function resolveBaseTypesOfInterface(type: ts.InterfaceType): void {
        type.resolvedBaseTypes = type.resolvedBaseTypes || ts.emptyArray;
        if (type.symbol.declarations) {
            for (const declaration of type.symbol.declarations) {
                if (declaration.kind === ts.SyntaxKind.InterfaceDeclaration && ts.getInterfaceBaseTypeNodes(declaration as ts.InterfaceDeclaration)) {
                    for (const node of ts.getInterfaceBaseTypeNodes(declaration as ts.InterfaceDeclaration)!) {
                        const baseType = getReducedType(getTypeFromTypeNode(node));
                        if (!isErrorType(baseType)) {
                            if (isValidBaseType(baseType)) {
                                if (type !== baseType && !hasBaseType(baseType, type)) {
                                    if (type.resolvedBaseTypes === ts.emptyArray) {
                                        type.resolvedBaseTypes = [baseType as ts.ObjectType];
                                    }
                                    else {
                                        type.resolvedBaseTypes.push(baseType);
                                    }
                                }
                                else {
                                    reportCircularBaseType(declaration, type);
                                }
                            }
                            else {
                                error(node, ts.Diagnostics.An_interface_can_only_extend_an_object_type_or_intersection_of_object_types_with_statically_known_members);
                            }
                        }
                    }
                }
            }
        }
    }

    /**
     * Returns true if the interface given by the symbol is free of "this" references.
     *
     * Specifically, the result is true if the interface itself contains no references
     * to "this" in its body, if all base types are interfaces,
     * and if none of the base interfaces have a "this" type.
     */
    function isThislessInterface(symbol: ts.Symbol): boolean {
        if (!symbol.declarations) {
            return true;
        }
        for (const declaration of symbol.declarations) {
            if (declaration.kind === ts.SyntaxKind.InterfaceDeclaration) {
                if (declaration.flags & ts.NodeFlags.ContainsThis) {
                    return false;
                }
                const baseTypeNodes = ts.getInterfaceBaseTypeNodes(declaration as ts.InterfaceDeclaration);
                if (baseTypeNodes) {
                    for (const node of baseTypeNodes) {
                        if (ts.isEntityNameExpression(node.expression)) {
                            const baseSymbol = resolveEntityName(node.expression, ts.SymbolFlags.Type, /*ignoreErrors*/ true);
                            if (!baseSymbol || !(baseSymbol.flags & ts.SymbolFlags.Interface) || getDeclaredTypeOfClassOrInterface(baseSymbol).thisType) {
                                return false;
                            }
                        }
                    }
                }
            }
        }
        return true;
    }

    function getDeclaredTypeOfClassOrInterface(symbol: ts.Symbol): ts.InterfaceType {
        let links = getSymbolLinks(symbol);
        const originalLinks = links;
        if (!links.declaredType) {
            const kind = symbol.flags & ts.SymbolFlags.Class ? ts.ObjectFlags.Class : ts.ObjectFlags.Interface;
            const merged = mergeJSSymbols(symbol, symbol.valueDeclaration && getAssignedClassSymbol(symbol.valueDeclaration));
            if (merged) {
                // note:we overwrite links because we just cloned the symbol
                symbol = links = merged;
            }

            const type = originalLinks.declaredType = links.declaredType = createObjectType(kind, symbol) as ts.InterfaceType;
            const outerTypeParameters = getOuterTypeParametersOfClassOrInterface(symbol);
            const localTypeParameters = getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol);
            // A class or interface is generic if it has type parameters or a "this" type. We always give classes a "this" type
            // because it is not feasible to analyze all members to determine if the "this" type escapes the class (in particular,
            // property types inferred from initializers and method return types inferred from return statements are very hard
            // to exhaustively analyze). We give interfaces a "this" type if we can't definitely determine that they are free of
            // "this" references.
            if (outerTypeParameters || localTypeParameters || kind === ts.ObjectFlags.Class || !isThislessInterface(symbol)) {
                type.objectFlags |= ts.ObjectFlags.Reference;
                type.typeParameters = ts.concatenate(outerTypeParameters, localTypeParameters);
                type.outerTypeParameters = outerTypeParameters;
                type.localTypeParameters = localTypeParameters;
                (type as ts.GenericType).instantiations = new ts.Map<string, ts.TypeReference>();
                (type as ts.GenericType).instantiations.set(getTypeListId(type.typeParameters), type as ts.GenericType);
                (type as ts.GenericType).target = type as ts.GenericType;
                (type as ts.GenericType).resolvedTypeArguments = type.typeParameters;
                type.thisType = createTypeParameter(symbol);
                type.thisType.isThisType = true;
                type.thisType.constraint = type;
            }
        }
        return links.declaredType as ts.InterfaceType;
    }

    function getDeclaredTypeOfTypeAlias(symbol: ts.Symbol): ts.Type {
        const links = getSymbolLinks(symbol);
        if (!links.declaredType) {
            // Note that we use the links object as the target here because the symbol object is used as the unique
            // identity for resolution of the 'type' property in SymbolLinks.
            if (!pushTypeResolution(symbol, TypeSystemPropertyName.DeclaredType)) {
                return errorType;
            }

            const declaration = ts.Debug.checkDefined(symbol.declarations?.find(ts.isTypeAlias), "Type alias symbol with no valid declaration found");
            const typeNode = ts.isJSDocTypeAlias(declaration) ? declaration.typeExpression : declaration.type;
            // If typeNode is missing, we will error in checkJSDocTypedefTag.
            let type = typeNode ? getTypeFromTypeNode(typeNode) : errorType;

            if (popTypeResolution()) {
                const typeParameters = getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol);
                if (typeParameters) {
                    // Initialize the instantiation cache for generic type aliases. The declared type corresponds to
                    // an instantiation of the type alias with the type parameters supplied as type arguments.
                    links.typeParameters = typeParameters;
                    links.instantiations = new ts.Map<string, ts.Type>();
                    links.instantiations.set(getTypeListId(typeParameters), type);
                }
            }
            else {
                type = errorType;
                if (declaration.kind === ts.SyntaxKind.JSDocEnumTag) {
                    error(declaration.typeExpression.type, ts.Diagnostics.Type_alias_0_circularly_references_itself, symbolToString(symbol));
                }
                else {
                    error(ts.isNamedDeclaration(declaration) ? declaration.name || declaration : declaration, ts.Diagnostics.Type_alias_0_circularly_references_itself, symbolToString(symbol));
                }
            }
            links.declaredType = type;
        }
        return links.declaredType;
    }

    function getBaseTypeOfEnumLiteralType(type: ts.Type) {
        return type.flags & ts.TypeFlags.EnumLiteral && !(type.flags & ts.TypeFlags.Union) ? getDeclaredTypeOfSymbol(getParentOfSymbol(type.symbol)!) : type;
    }

    function getDeclaredTypeOfEnum(symbol: ts.Symbol): ts.Type {
        const links = getSymbolLinks(symbol);
        if (!links.declaredType) {
            const memberTypeList: ts.Type[] = [];
            if (symbol.declarations) {
                for (const declaration of symbol.declarations) {
                    if (declaration.kind === ts.SyntaxKind.EnumDeclaration) {
                        for (const member of (declaration as ts.EnumDeclaration).members) {
                            if (hasBindableName(member)) {
                                const memberSymbol = getSymbolOfNode(member);
                                const value = getEnumMemberValue(member);
                                const memberType = value !== undefined ?
                                    getFreshTypeOfLiteralType(getEnumLiteralType(value, getSymbolId(symbol), memberSymbol)) :
                                    createTypeWithSymbol(ts.TypeFlags.Enum, memberSymbol);
                                getSymbolLinks(memberSymbol).declaredType = memberType;
                                memberTypeList.push(getRegularTypeOfLiteralType(memberType));
                            }
                        }
                    }
                }
            }
            const enumType = memberTypeList.length ?
                getUnionType(memberTypeList, ts.UnionReduction.Literal, symbol, /*aliasTypeArguments*/ undefined) :
                createTypeWithSymbol(ts.TypeFlags.Enum, symbol);
            if (enumType.flags & ts.TypeFlags.Union) {
                enumType.flags |= ts.TypeFlags.EnumLiteral;
                enumType.symbol = symbol;
            }
            links.declaredType = enumType;
        }
        return links.declaredType;
    }

    function getDeclaredTypeOfEnumMember(symbol: ts.Symbol): ts.Type {
        const links = getSymbolLinks(symbol);
        if (!links.declaredType) {
            const enumType = getDeclaredTypeOfEnum(getParentOfSymbol(symbol)!);
            if (!links.declaredType) {
                links.declaredType = enumType;
            }
        }
        return links.declaredType;
    }

    function getDeclaredTypeOfTypeParameter(symbol: ts.Symbol): ts.TypeParameter {
        const links = getSymbolLinks(symbol);
        return links.declaredType || (links.declaredType = createTypeParameter(symbol));
    }

    function getDeclaredTypeOfAlias(symbol: ts.Symbol): ts.Type {
        const links = getSymbolLinks(symbol);
        return links.declaredType || (links.declaredType = getDeclaredTypeOfSymbol(resolveAlias(symbol)));
    }

    function getDeclaredTypeOfSymbol(symbol: ts.Symbol): ts.Type {
        return tryGetDeclaredTypeOfSymbol(symbol) || errorType;
    }

    function tryGetDeclaredTypeOfSymbol(symbol: ts.Symbol): ts.Type | undefined {
        if (symbol.flags & (ts.SymbolFlags.Class | ts.SymbolFlags.Interface)) {
            return getDeclaredTypeOfClassOrInterface(symbol);
        }
        if (symbol.flags & ts.SymbolFlags.TypeAlias) {
            return getDeclaredTypeOfTypeAlias(symbol);
        }
        if (symbol.flags & ts.SymbolFlags.TypeParameter) {
            return getDeclaredTypeOfTypeParameter(symbol);
        }
        if (symbol.flags & ts.SymbolFlags.Enum) {
            return getDeclaredTypeOfEnum(symbol);
        }
        if (symbol.flags & ts.SymbolFlags.EnumMember) {
            return getDeclaredTypeOfEnumMember(symbol);
        }
        if (symbol.flags & ts.SymbolFlags.Alias) {
            return getDeclaredTypeOfAlias(symbol);
        }
        return undefined;
    }

    /**
     * A type is free of this references if it's the any, string, number, boolean, symbol, or void keyword, a string
     * literal type, an array with an element type that is free of this references, or a type reference that is
     * free of this references.
     */
    function isThislessType(node: ts.TypeNode): boolean {
        switch (node.kind) {
            case ts.SyntaxKind.AnyKeyword:
            case ts.SyntaxKind.UnknownKeyword:
            case ts.SyntaxKind.StringKeyword:
            case ts.SyntaxKind.NumberKeyword:
            case ts.SyntaxKind.BigIntKeyword:
            case ts.SyntaxKind.BooleanKeyword:
            case ts.SyntaxKind.SymbolKeyword:
            case ts.SyntaxKind.ObjectKeyword:
            case ts.SyntaxKind.VoidKeyword:
            case ts.SyntaxKind.UndefinedKeyword:
            case ts.SyntaxKind.NeverKeyword:
            case ts.SyntaxKind.LiteralType:
                return true;
            case ts.SyntaxKind.ArrayType:
                return isThislessType((node as ts.ArrayTypeNode).elementType);
            case ts.SyntaxKind.TypeReference:
                return !(node as ts.TypeReferenceNode).typeArguments || (node as ts.TypeReferenceNode).typeArguments!.every(isThislessType);
        }
        return false;
    }

    /** A type parameter is thisless if its constraint is thisless, or if it has no constraint. */
    function isThislessTypeParameter(node: ts.TypeParameterDeclaration) {
        const constraint = ts.getEffectiveConstraintOfTypeParameter(node);
        return !constraint || isThislessType(constraint);
    }

    /**
     * A variable-like declaration is free of this references if it has a type annotation
     * that is thisless, or if it has no type annotation and no initializer (and is thus of type any).
     */
    function isThislessVariableLikeDeclaration(node: ts.VariableLikeDeclaration): boolean {
        const typeNode = ts.getEffectiveTypeAnnotationNode(node);
        return typeNode ? isThislessType(typeNode) : !ts.hasInitializer(node);
    }

    /**
     * A function-like declaration is considered free of `this` references if it has a return type
     * annotation that is free of this references and if each parameter is thisless and if
     * each type parameter (if present) is thisless.
     */
    function isThislessFunctionLikeDeclaration(node: ts.FunctionLikeDeclaration): boolean {
        const returnType = ts.getEffectiveReturnTypeNode(node);
        const typeParameters = ts.getEffectiveTypeParameterDeclarations(node);
        return (node.kind === ts.SyntaxKind.Constructor || (!!returnType && isThislessType(returnType))) &&
            node.parameters.every(isThislessVariableLikeDeclaration) &&
            typeParameters.every(isThislessTypeParameter);
    }

    /**
     * Returns true if the class or interface member given by the symbol is free of "this" references. The
     * function may return false for symbols that are actually free of "this" references because it is not
     * feasible to perform a complete analysis in all cases. In particular, property members with types
     * inferred from their initializers and function members with inferred return types are conservatively
     * assumed not to be free of "this" references.
     */
    function isThisless(symbol: ts.Symbol): boolean {
        if (symbol.declarations && symbol.declarations.length === 1) {
            const declaration = symbol.declarations[0];
            if (declaration) {
                switch (declaration.kind) {
                    case ts.SyntaxKind.PropertyDeclaration:
                    case ts.SyntaxKind.PropertySignature:
                        return isThislessVariableLikeDeclaration(declaration as ts.VariableLikeDeclaration);
                    case ts.SyntaxKind.MethodDeclaration:
                    case ts.SyntaxKind.MethodSignature:
                    case ts.SyntaxKind.Constructor:
                    case ts.SyntaxKind.GetAccessor:
                    case ts.SyntaxKind.SetAccessor:
                        return isThislessFunctionLikeDeclaration(declaration as ts.FunctionLikeDeclaration | ts.AccessorDeclaration);
                }
            }
        }
        return false;
    }

    // The mappingThisOnly flag indicates that the only type parameter being mapped is "this". When the flag is true,
    // we check symbols to see if we can quickly conclude they are free of "this" references, thus needing no instantiation.
    function createInstantiatedSymbolTable(symbols: ts.Symbol[], mapper: ts.TypeMapper, mappingThisOnly: boolean): ts.SymbolTable {
        const result = ts.createSymbolTable();
        for (const symbol of symbols) {
            result.set(symbol.escapedName, mappingThisOnly && isThisless(symbol) ? symbol : instantiateSymbol(symbol, mapper));
        }
        return result;
    }

    function addInheritedMembers(symbols: ts.SymbolTable, baseSymbols: ts.Symbol[]) {
        for (const s of baseSymbols) {
            if (!symbols.has(s.escapedName) && !isStaticPrivateIdentifierProperty(s)) {
                symbols.set(s.escapedName, s);
            }
        }
    }

    function isStaticPrivateIdentifierProperty(s: ts.Symbol): boolean {
        return !!s.valueDeclaration && ts.isPrivateIdentifierClassElementDeclaration(s.valueDeclaration) && ts.isStatic(s.valueDeclaration);
    }

    function resolveDeclaredMembers(type: ts.InterfaceType): ts.InterfaceTypeWithDeclaredMembers {
        if (!(type as ts.InterfaceTypeWithDeclaredMembers).declaredProperties) {
            const symbol = type.symbol;
            const members = getMembersOfSymbol(symbol);
            (type as ts.InterfaceTypeWithDeclaredMembers).declaredProperties = getNamedMembers(members);
            // Start with signatures at empty array in case of recursive types
            (type as ts.InterfaceTypeWithDeclaredMembers).declaredCallSignatures = ts.emptyArray;
            (type as ts.InterfaceTypeWithDeclaredMembers).declaredConstructSignatures = ts.emptyArray;
            (type as ts.InterfaceTypeWithDeclaredMembers).declaredIndexInfos = ts.emptyArray;

            (type as ts.InterfaceTypeWithDeclaredMembers).declaredCallSignatures = getSignaturesOfSymbol(members.get(ts.InternalSymbolName.Call));
            (type as ts.InterfaceTypeWithDeclaredMembers).declaredConstructSignatures = getSignaturesOfSymbol(members.get(ts.InternalSymbolName.New));
            (type as ts.InterfaceTypeWithDeclaredMembers).declaredIndexInfos = getIndexInfosOfSymbol(symbol);
        }
        return type as ts.InterfaceTypeWithDeclaredMembers;
    }

    /**
     * Indicates whether a type can be used as a property name.
     */
    function isTypeUsableAsPropertyName(type: ts.Type): type is ts.StringLiteralType | ts.NumberLiteralType | ts.UniqueESSymbolType {
        return !!(type.flags & ts.TypeFlags.StringOrNumberLiteralOrUnique);
    }

    /**
     * Indicates whether a declaration name is definitely late-bindable.
     * A declaration name is only late-bindable if:
     * - It is a `ComputedPropertyName`.
     * - Its expression is an `Identifier` or either a `PropertyAccessExpression` an
     * `ElementAccessExpression` consisting only of these same three types of nodes.
     * - The type of its expression is a string or numeric literal type, or is a `unique symbol` type.
     */
    function isLateBindableName(node: ts.DeclarationName): node is ts.LateBoundName {
        if (!ts.isComputedPropertyName(node) && !ts.isElementAccessExpression(node)) {
            return false;
        }
        const expr = ts.isComputedPropertyName(node) ? node.expression : node.argumentExpression;
        return ts.isEntityNameExpression(expr)
            && isTypeUsableAsPropertyName(ts.isComputedPropertyName(node) ? checkComputedPropertyName(node) : checkExpressionCached(expr));
    }

    function isLateBoundName(name: ts.__String): boolean {
        return (name as string).charCodeAt(0) === ts.CharacterCodes._ &&
            (name as string).charCodeAt(1) === ts.CharacterCodes._ &&
            (name as string).charCodeAt(2) === ts.CharacterCodes.at;
    }

    /**
     * Indicates whether a declaration has a late-bindable dynamic name.
     */
    function hasLateBindableName(node: ts.Declaration): node is ts.LateBoundDeclaration | ts.LateBoundBinaryExpressionDeclaration {
        const name = ts.getNameOfDeclaration(node);
        return !!name && isLateBindableName(name);
    }

    /**
     * Indicates whether a declaration has an early-bound name or a dynamic name that can be late-bound.
     */
    function hasBindableName(node: ts.Declaration) {
        return !ts.hasDynamicName(node) || hasLateBindableName(node);
    }

    /**
     * Indicates whether a declaration name is a dynamic name that cannot be late-bound.
     */
    function isNonBindableDynamicName(node: ts.DeclarationName) {
        return ts.isDynamicName(node) && !isLateBindableName(node);
    }

    /**
     * Gets the symbolic name for a member from its type.
     */
    function getPropertyNameFromType(type: ts.StringLiteralType | ts.NumberLiteralType | ts.UniqueESSymbolType): ts.__String {
        if (type.flags & ts.TypeFlags.UniqueESSymbol) {
            return (type as ts.UniqueESSymbolType).escapedName;
        }
        if (type.flags & (ts.TypeFlags.StringLiteral | ts.TypeFlags.NumberLiteral)) {
            return ts.escapeLeadingUnderscores("" + (type as ts.StringLiteralType | ts.NumberLiteralType).value);
        }
        return ts.Debug.fail();
    }

    /**
     * Adds a declaration to a late-bound dynamic member. This performs the same function for
     * late-bound members that `addDeclarationToSymbol` in binder.ts performs for early-bound
     * members.
     */
    function addDeclarationToLateBoundSymbol(symbol: ts.Symbol, member: ts.LateBoundDeclaration | ts.BinaryExpression, symbolFlags: ts.SymbolFlags) {
        ts.Debug.assert(!!(ts.getCheckFlags(symbol) & ts.CheckFlags.Late), "Expected a late-bound symbol.");
        symbol.flags |= symbolFlags;
        getSymbolLinks(member.symbol).lateSymbol = symbol;
        if (!symbol.declarations) {
            symbol.declarations = [member];
        }
        else if(!member.symbol.isReplaceableByMethod) {
            symbol.declarations.push(member);
        }
        if (symbolFlags & ts.SymbolFlags.Value) {
            if (!symbol.valueDeclaration || symbol.valueDeclaration.kind !== member.kind) {
                symbol.valueDeclaration = member;
            }
        }
    }

    /**
     * Performs late-binding of a dynamic member. This performs the same function for
     * late-bound members that `declareSymbol` in binder.ts performs for early-bound
     * members.
     *
     * If a symbol is a dynamic name from a computed property, we perform an additional "late"
     * binding phase to attempt to resolve the name for the symbol from the type of the computed
     * property's expression. If the type of the expression is a string-literal, numeric-literal,
     * or unique symbol type, we can use that type as the name of the symbol.
     *
     * For example, given:
     *
     *   const x = Symbol();
     *
     *   interface I {
     *     [x]: number;
     *   }
     *
     * The binder gives the property `[x]: number` a special symbol with the name "__computed".
     * In the late-binding phase we can type-check the expression `x` and see that it has a
     * unique symbol type which we can then use as the name of the member. This allows users
     * to define custom symbols that can be used in the members of an object type.
     *
     * @param parent The containing symbol for the member.
     * @param earlySymbols The early-bound symbols of the parent.
     * @param lateSymbols The late-bound symbols of the parent.
     * @param decl The member to bind.
     */
    function lateBindMember(parent: ts.Symbol, earlySymbols: ts.SymbolTable | undefined, lateSymbols: ts.UnderscoreEscapedMap<ts.TransientSymbol>, decl: ts.LateBoundDeclaration | ts.LateBoundBinaryExpressionDeclaration) {
        ts.Debug.assert(!!decl.symbol, "The member is expected to have a symbol.");
        const links = getNodeLinks(decl);
        if (!links.resolvedSymbol) {
            // In the event we attempt to resolve the late-bound name of this member recursively,
            // fall back to the early-bound name of this member.
            links.resolvedSymbol = decl.symbol;
            const declName = ts.isBinaryExpression(decl) ? decl.left : decl.name;
            const type = ts.isElementAccessExpression(declName) ? checkExpressionCached(declName.argumentExpression) : checkComputedPropertyName(declName);
            if (isTypeUsableAsPropertyName(type)) {
                const memberName = getPropertyNameFromType(type);
                const symbolFlags = decl.symbol.flags;

                // Get or add a late-bound symbol for the member. This allows us to merge late-bound accessor declarations.
                let lateSymbol = lateSymbols.get(memberName);
                if (!lateSymbol) lateSymbols.set(memberName, lateSymbol = createSymbol(ts.SymbolFlags.None, memberName, ts.CheckFlags.Late));

                // Report an error if a late-bound member has the same name as an early-bound member,
                // or if we have another early-bound symbol declaration with the same name and
                // conflicting flags.
                const earlySymbol = earlySymbols && earlySymbols.get(memberName);
                if (lateSymbol.flags & getExcludedSymbolFlags(symbolFlags) || earlySymbol) {
                    // If we have an existing early-bound member, combine its declarations so that we can
                    // report an error at each declaration.
                    const declarations = earlySymbol ? ts.concatenate(earlySymbol.declarations, lateSymbol.declarations) : lateSymbol.declarations;
                    const name = !(type.flags & ts.TypeFlags.UniqueESSymbol) && ts.unescapeLeadingUnderscores(memberName) || ts.declarationNameToString(declName);
                    ts.forEach(declarations, declaration => error(ts.getNameOfDeclaration(declaration) || declaration, ts.Diagnostics.Property_0_was_also_declared_here, name));
                    error(declName || decl, ts.Diagnostics.Duplicate_property_0, name);
                    lateSymbol = createSymbol(ts.SymbolFlags.None, memberName, ts.CheckFlags.Late);
                }
                lateSymbol.nameType = type;
                addDeclarationToLateBoundSymbol(lateSymbol, decl, symbolFlags);
                if (lateSymbol.parent) {
                    ts.Debug.assert(lateSymbol.parent === parent, "Existing symbol parent should match new one");
                }
                else {
                    lateSymbol.parent = parent;
                }
                return links.resolvedSymbol = lateSymbol;
            }
        }
        return links.resolvedSymbol;
    }

    function getResolvedMembersOrExportsOfSymbol(symbol: ts.Symbol, resolutionKind: MembersOrExportsResolutionKind): ts.UnderscoreEscapedMap<ts.Symbol> {
        const links = getSymbolLinks(symbol);
        if (!links[resolutionKind]) {
            const isStatic = resolutionKind === MembersOrExportsResolutionKind.resolvedExports;
            const earlySymbols = !isStatic ? symbol.members :
                symbol.flags & ts.SymbolFlags.Module ? getExportsOfModuleWorker(symbol) :
                symbol.exports;

            // In the event we recursively resolve the members/exports of the symbol, we
            // set the initial value of resolvedMembers/resolvedExports to the early-bound
            // members/exports of the symbol.
            links[resolutionKind] = earlySymbols || emptySymbols;

            // fill in any as-yet-unresolved late-bound members.
            const lateSymbols = ts.createSymbolTable() as ts.UnderscoreEscapedMap<ts.TransientSymbol>;
            for (const decl of symbol.declarations || ts.emptyArray) {
                const members = ts.getMembersOfDeclaration(decl);
                if (members) {
                    for (const member of members) {
                        if (isStatic === ts.hasStaticModifier(member)) {
                            if (hasLateBindableName(member)) {
                                lateBindMember(symbol, earlySymbols, lateSymbols, member);
                            }
                        }
                    }
                }
            }
            const assignments = symbol.assignmentDeclarationMembers;
            if (assignments) {
                const decls = ts.arrayFrom(assignments.values());
                for (const member of decls) {
                    const assignmentKind = ts.getAssignmentDeclarationKind(member as ts.BinaryExpression | ts.CallExpression);
                    const isInstanceMember = assignmentKind === ts.AssignmentDeclarationKind.PrototypeProperty
                        || ts.isBinaryExpression(member) && isPossiblyAliasedThisProperty(member, assignmentKind)
                        || assignmentKind === ts.AssignmentDeclarationKind.ObjectDefinePrototypeProperty
                        || assignmentKind === ts.AssignmentDeclarationKind.Prototype; // A straight `Prototype` assignment probably can never have a computed name
                    if (isStatic === !isInstanceMember) {
                        if (hasLateBindableName(member)) {
                            lateBindMember(symbol, earlySymbols, lateSymbols, member);
                        }
                    }
                }
            }

            links[resolutionKind] = combineSymbolTables(earlySymbols, lateSymbols) || emptySymbols;
        }

        return links[resolutionKind]!;
    }

    /**
     * Gets a SymbolTable containing both the early- and late-bound members of a symbol.
     *
     * For a description of late-binding, see `lateBindMember`.
     */
    function getMembersOfSymbol(symbol: ts.Symbol) {
        return symbol.flags & ts.SymbolFlags.LateBindingContainer
            ? getResolvedMembersOrExportsOfSymbol(symbol, MembersOrExportsResolutionKind.resolvedMembers)
            : symbol.members || emptySymbols;
    }

    /**
     * If a symbol is the dynamic name of the member of an object type, get the late-bound
     * symbol of the member.
     *
     * For a description of late-binding, see `lateBindMember`.
     */
    function getLateBoundSymbol(symbol: ts.Symbol): ts.Symbol {
        if (symbol.flags & ts.SymbolFlags.ClassMember && symbol.escapedName === ts.InternalSymbolName.Computed) {
            const links = getSymbolLinks(symbol);
            if (!links.lateSymbol && ts.some(symbol.declarations, hasLateBindableName)) {
                // force late binding of members/exports. This will set the late-bound symbol
                const parent = getMergedSymbol(symbol.parent)!;
                if (ts.some(symbol.declarations, ts.hasStaticModifier)) {
                    getExportsOfSymbol(parent);
                }
                else {
                    getMembersOfSymbol(parent);
                }
            }
            return links.lateSymbol || (links.lateSymbol = symbol);
        }
        return symbol;
    }

    function getTypeWithThisArgument(type: ts.Type, thisArgument?: ts.Type, needApparentType?: boolean): ts.Type {
        if (ts.getObjectFlags(type) & ts.ObjectFlags.Reference) {
            const target = (type as ts.TypeReference).target;
            const typeArguments = getTypeArguments(type as ts.TypeReference);
            if (ts.length(target.typeParameters) === ts.length(typeArguments)) {
                const ref = createTypeReference(target, ts.concatenate(typeArguments, [thisArgument || target.thisType!]));
                return needApparentType ? getApparentType(ref) : ref;
            }
        }
        else if (type.flags & ts.TypeFlags.Intersection) {
            const types = ts.sameMap((type as ts.IntersectionType).types, t => getTypeWithThisArgument(t, thisArgument, needApparentType));
            return types !== (type as ts.IntersectionType).types ? getIntersectionType(types) : type;
        }
        return needApparentType ? getApparentType(type) : type;
    }

    function resolveObjectTypeMembers(type: ts.ObjectType, source: ts.InterfaceTypeWithDeclaredMembers, typeParameters: readonly ts.TypeParameter[], typeArguments: readonly ts.Type[]) {
        let mapper: ts.TypeMapper | undefined;
        let members: ts.SymbolTable;
        let callSignatures: readonly ts.Signature[];
        let constructSignatures: readonly ts.Signature[];
        let indexInfos: readonly ts.IndexInfo[];
        if (ts.rangeEquals(typeParameters, typeArguments, 0, typeParameters.length)) {
            members = source.symbol ? getMembersOfSymbol(source.symbol) : ts.createSymbolTable(source.declaredProperties);
            callSignatures = source.declaredCallSignatures;
            constructSignatures = source.declaredConstructSignatures;
            indexInfos = source.declaredIndexInfos;
        }
        else {
            mapper = createTypeMapper(typeParameters, typeArguments);
            members = createInstantiatedSymbolTable(source.declaredProperties, mapper, /*mappingThisOnly*/ typeParameters.length === 1);
            callSignatures = instantiateSignatures(source.declaredCallSignatures, mapper);
            constructSignatures = instantiateSignatures(source.declaredConstructSignatures, mapper);
            indexInfos = instantiateIndexInfos(source.declaredIndexInfos, mapper);
        }
        const baseTypes = getBaseTypes(source);
        if (baseTypes.length) {
            if (source.symbol && members === getMembersOfSymbol(source.symbol)) {
                members = ts.createSymbolTable(source.declaredProperties);
            }
            setStructuredTypeMembers(type, members, callSignatures, constructSignatures, indexInfos);
            const thisArgument = ts.lastOrUndefined(typeArguments);
            for (const baseType of baseTypes) {
                const instantiatedBaseType = thisArgument ? getTypeWithThisArgument(instantiateType(baseType, mapper), thisArgument) : baseType;
                addInheritedMembers(members, getPropertiesOfType(instantiatedBaseType));
                callSignatures = ts.concatenate(callSignatures, getSignaturesOfType(instantiatedBaseType, ts.SignatureKind.Call));
                constructSignatures = ts.concatenate(constructSignatures, getSignaturesOfType(instantiatedBaseType, ts.SignatureKind.Construct));
                const inheritedIndexInfos = instantiatedBaseType !== anyType ? getIndexInfosOfType(instantiatedBaseType) : [createIndexInfo(stringType, anyType, /*isReadonly*/ false)];
                indexInfos = ts.concatenate(indexInfos, ts.filter(inheritedIndexInfos, info => !findIndexInfo(indexInfos, info.keyType)));
            }
        }
        setStructuredTypeMembers(type, members, callSignatures, constructSignatures, indexInfos);
    }

    function resolveClassOrInterfaceMembers(type: ts.InterfaceType): void {
        resolveObjectTypeMembers(type, resolveDeclaredMembers(type), ts.emptyArray, ts.emptyArray);
    }

    function resolveTypeReferenceMembers(type: ts.TypeReference): void {
        const source = resolveDeclaredMembers(type.target);
        const typeParameters = ts.concatenate(source.typeParameters!, [source.thisType!]);
        const typeArguments = getTypeArguments(type);
        const paddedTypeArguments = typeArguments.length === typeParameters.length ? typeArguments : ts.concatenate(typeArguments, [type]);
        resolveObjectTypeMembers(type, source, typeParameters, paddedTypeArguments);
    }

    function createSignature(
        declaration: ts.SignatureDeclaration | ts.JSDocSignature | undefined,
        typeParameters: readonly ts.TypeParameter[] | undefined,
        thisParameter: ts.Symbol | undefined,
        parameters: readonly ts.Symbol[],
        resolvedReturnType: ts.Type | undefined,
        resolvedTypePredicate: ts.TypePredicate | undefined,
        minArgumentCount: number,
        flags: ts.SignatureFlags
    ): ts.Signature {
        const sig = new Signature(checker, flags);
        sig.declaration = declaration;
        sig.typeParameters = typeParameters;
        sig.parameters = parameters;
        sig.thisParameter = thisParameter;
        sig.resolvedReturnType = resolvedReturnType;
        sig.resolvedTypePredicate = resolvedTypePredicate;
        sig.minArgumentCount = minArgumentCount;
        sig.resolvedMinArgumentCount = undefined;
        sig.target = undefined;
        sig.mapper = undefined;
        sig.compositeSignatures = undefined;
        sig.compositeKind = undefined;
        return sig;
    }

    function cloneSignature(sig: ts.Signature): ts.Signature {
        const result = createSignature(sig.declaration, sig.typeParameters, sig.thisParameter, sig.parameters, /*resolvedReturnType*/ undefined,
            /*resolvedTypePredicate*/ undefined, sig.minArgumentCount, sig.flags & ts.SignatureFlags.PropagatingFlags);
        result.target = sig.target;
        result.mapper = sig.mapper;
        result.compositeSignatures = sig.compositeSignatures;
        result.compositeKind = sig.compositeKind;
        return result;
    }

    function createUnionSignature(signature: ts.Signature, unionSignatures: ts.Signature[]) {
        const result = cloneSignature(signature);
        result.compositeSignatures = unionSignatures;
        result.compositeKind = ts.TypeFlags.Union;
        result.target = undefined;
        result.mapper = undefined;
        return result;
    }

    function getOptionalCallSignature(signature: ts.Signature, callChainFlags: ts.SignatureFlags): ts.Signature {
        if ((signature.flags & ts.SignatureFlags.CallChainFlags) === callChainFlags) {
            return signature;
        }
        if (!signature.optionalCallSignatureCache) {
            signature.optionalCallSignatureCache = {};
        }
        const key = callChainFlags === ts.SignatureFlags.IsInnerCallChain ? "inner" : "outer";
        return signature.optionalCallSignatureCache[key]
            || (signature.optionalCallSignatureCache[key] = createOptionalCallSignature(signature, callChainFlags));
    }

    function createOptionalCallSignature(signature: ts.Signature, callChainFlags: ts.SignatureFlags) {
        ts.Debug.assert(callChainFlags === ts.SignatureFlags.IsInnerCallChain || callChainFlags === ts.SignatureFlags.IsOuterCallChain,
            "An optional call signature can either be for an inner call chain or an outer call chain, but not both.");
        const result = cloneSignature(signature);
        result.flags |= callChainFlags;
        return result;
    }

    function getExpandedParameters(sig: ts.Signature, skipUnionExpanding?: boolean): readonly (readonly ts.Symbol[])[] {
        if (signatureHasRestParameter(sig)) {
            const restIndex = sig.parameters.length - 1;
            const restType = getTypeOfSymbol(sig.parameters[restIndex]);
            if (isTupleType(restType)) {
                return [expandSignatureParametersWithTupleMembers(restType, restIndex)];
            }
            else if (!skipUnionExpanding && restType.flags & ts.TypeFlags.Union && ts.every((restType as ts.UnionType).types, isTupleType)) {
                return ts.map((restType as ts.UnionType).types, t => expandSignatureParametersWithTupleMembers(t as ts.TupleTypeReference, restIndex));
            }
        }
        return [sig.parameters];

        function expandSignatureParametersWithTupleMembers(restType: ts.TupleTypeReference, restIndex: number) {
            const elementTypes = getTypeArguments(restType);
            const associatedNames = restType.target.labeledElementDeclarations;
            const restParams = ts.map(elementTypes, (t, i) => {
                // Lookup the label from the individual tuple passed in before falling back to the signature `rest` parameter name
                const tupleLabelName = !!associatedNames && getTupleElementLabel(associatedNames[i]);
                const name = tupleLabelName || getParameterNameAtPosition(sig, restIndex + i, restType);
                const flags = restType.target.elementFlags[i];
                const checkFlags = flags & ts.ElementFlags.Variable ? ts.CheckFlags.RestParameter :
                    flags & ts.ElementFlags.Optional ? ts.CheckFlags.OptionalParameter : 0;
                const symbol = createSymbol(ts.SymbolFlags.FunctionScopedVariable, name, checkFlags);
                symbol.type = flags & ts.ElementFlags.Rest ? createArrayType(t) : t;
                return symbol;
            });
            return ts.concatenate(sig.parameters.slice(0, restIndex), restParams);
        }
    }

    function getDefaultConstructSignatures(classType: ts.InterfaceType): ts.Signature[] {
        const baseConstructorType = getBaseConstructorTypeOfClass(classType);
        const baseSignatures = getSignaturesOfType(baseConstructorType, ts.SignatureKind.Construct);
        const declaration = ts.getClassLikeDeclarationOfSymbol(classType.symbol);
        const isAbstract = !!declaration && ts.hasSyntacticModifier(declaration, ts.ModifierFlags.Abstract);
        if (baseSignatures.length === 0) {
            return [createSignature(undefined, classType.localTypeParameters, undefined, ts.emptyArray, classType, /*resolvedTypePredicate*/ undefined, 0, isAbstract ? ts.SignatureFlags.Abstract : ts.SignatureFlags.None)];
        }
        const baseTypeNode = getBaseTypeNodeOfClass(classType)!;
        const isJavaScript = ts.isInJSFile(baseTypeNode);
        const typeArguments = typeArgumentsFromTypeReferenceNode(baseTypeNode);
        const typeArgCount = ts.length(typeArguments);
        const result: ts.Signature[] = [];
        for (const baseSig of baseSignatures) {
            const minTypeArgumentCount = getMinTypeArgumentCount(baseSig.typeParameters);
            const typeParamCount = ts.length(baseSig.typeParameters);
            if (isJavaScript || typeArgCount >= minTypeArgumentCount && typeArgCount <= typeParamCount) {
                const sig = typeParamCount ? createSignatureInstantiation(baseSig, fillMissingTypeArguments(typeArguments, baseSig.typeParameters, minTypeArgumentCount, isJavaScript)) : cloneSignature(baseSig);
                sig.typeParameters = classType.localTypeParameters;
                sig.resolvedReturnType = classType;
                sig.flags = isAbstract ? sig.flags | ts.SignatureFlags.Abstract : sig.flags & ~ts.SignatureFlags.Abstract;
                result.push(sig);
            }
        }
        return result;
    }

    function findMatchingSignature(signatureList: readonly ts.Signature[], signature: ts.Signature, partialMatch: boolean, ignoreThisTypes: boolean, ignoreReturnTypes: boolean): ts.Signature | undefined {
        for (const s of signatureList) {
            if (compareSignaturesIdentical(s, signature, partialMatch, ignoreThisTypes, ignoreReturnTypes, partialMatch ? compareTypesSubtypeOf : compareTypesIdentical)) {
                return s;
            }
        }
    }

    function findMatchingSignatures(signatureLists: readonly (readonly ts.Signature[])[], signature: ts.Signature, listIndex: number): ts.Signature[] | undefined {
        if (signature.typeParameters) {
            // We require an exact match for generic signatures, so we only return signatures from the first
            // signature list and only if they have exact matches in the other signature lists.
            if (listIndex > 0) {
                return undefined;
            }
            for (let i = 1; i < signatureLists.length; i++) {
                if (!findMatchingSignature(signatureLists[i], signature, /*partialMatch*/ false, /*ignoreThisTypes*/ false, /*ignoreReturnTypes*/ false)) {
                    return undefined;
                }
            }
            return [signature];
        }
        let result: ts.Signature[] | undefined;
        for (let i = 0; i < signatureLists.length; i++) {
            // Allow matching non-generic signatures to have excess parameters and different return types.
            // Prefer matching this types if possible.
            const match = i === listIndex ? signature : findMatchingSignature(signatureLists[i], signature, /*partialMatch*/ true, /*ignoreThisTypes*/ false, /*ignoreReturnTypes*/ true);
            if (!match) {
                return undefined;
            }
            result = ts.appendIfUnique(result, match);
        }
        return result;
    }

    // The signatures of a union type are those signatures that are present in each of the constituent types.
    // Generic signatures must match exactly, but non-generic signatures are allowed to have extra optional
    // parameters and may differ in return types. When signatures differ in return types, the resulting return
    // type is the union of the constituent return types.
    function getUnionSignatures(signatureLists: readonly (readonly ts.Signature[])[]): ts.Signature[] {
        let result: ts.Signature[] | undefined;
        let indexWithLengthOverOne: number | undefined;
        for (let i = 0; i < signatureLists.length; i++) {
            if (signatureLists[i].length === 0) return ts.emptyArray;
            if (signatureLists[i].length > 1) {
                indexWithLengthOverOne = indexWithLengthOverOne === undefined ? i : -1; // -1 is a signal there are multiple overload sets
            }
            for (const signature of signatureLists[i]) {
                // Only process signatures with parameter lists that aren't already in the result list
                if (!result || !findMatchingSignature(result, signature, /*partialMatch*/ false, /*ignoreThisTypes*/ false, /*ignoreReturnTypes*/ true)) {
                    const unionSignatures = findMatchingSignatures(signatureLists, signature, i);
                    if (unionSignatures) {
                        let s = signature;
                        // Union the result types when more than one signature matches
                        if (unionSignatures.length > 1) {
                            let thisParameter = signature.thisParameter;
                            const firstThisParameterOfUnionSignatures = ts.forEach(unionSignatures, sig => sig.thisParameter);
                            if (firstThisParameterOfUnionSignatures) {
                                const thisType = getIntersectionType(ts.mapDefined(unionSignatures, sig => sig.thisParameter && getTypeOfSymbol(sig.thisParameter)));
                                thisParameter = createSymbolWithType(firstThisParameterOfUnionSignatures, thisType);
                            }
                            s = createUnionSignature(signature, unionSignatures);
                            s.thisParameter = thisParameter;
                        }
                        (result || (result = [])).push(s);
                    }
                }
            }
        }
        if (!ts.length(result) && indexWithLengthOverOne !== -1) {
            // No sufficiently similar signature existed to subsume all the other signatures in the union - time to see if we can make a single
            // signature that handles all over them. We only do this when there are overloads in only one constituent.
            // (Overloads are conditional in nature and having overloads in multiple constituents would necessitate making a power set of
            // signatures from the type, whose ordering would be non-obvious)
            const masterList = signatureLists[indexWithLengthOverOne !== undefined ? indexWithLengthOverOne : 0];
            let results: ts.Signature[] | undefined = masterList.slice();
            for (const signatures of signatureLists) {
                if (signatures !== masterList) {
                    const signature = signatures[0];
                    ts.Debug.assert(!!signature, "getUnionSignatures bails early on empty signature lists and should not have empty lists on second pass");
                    results = !!signature.typeParameters && ts.some(results, s => !!s.typeParameters && !compareTypeParametersIdentical(signature.typeParameters, s.typeParameters)) ? undefined : ts.map(results, sig => combineSignaturesOfUnionMembers(sig, signature));
                    if (!results) {
                        break;
                    }
                }
            }
            result = results;
        }
        return result || ts.emptyArray;
    }

    function compareTypeParametersIdentical(sourceParams: readonly ts.TypeParameter[] | undefined, targetParams: readonly ts.TypeParameter[] | undefined): boolean {
        if (ts.length(sourceParams) !== ts.length(targetParams)) {
            return false;
        }
        if (!sourceParams || !targetParams) {
            return true;
        }

        const mapper = createTypeMapper(targetParams, sourceParams);
        for (let i = 0; i < sourceParams.length; i++) {
            const source = sourceParams[i];
            const target = targetParams[i];
            if (source === target) continue;
            // We instantiate the target type parameter constraints into the source types so we can recognize `<T, U extends T>` as the same as `<A, B extends A>`
            if (!isTypeIdenticalTo(getConstraintFromTypeParameter(source) || unknownType, instantiateType(getConstraintFromTypeParameter(target) || unknownType, mapper))) return false;
            // We don't compare defaults - we just use the type parameter defaults from the first signature that seems to match.
            // It might make sense to combine these defaults in the future, but doing so intelligently requires knowing
            // if the parameter is used covariantly or contravariantly (so we intersect if it's used like a parameter or union if used like a return type)
            // and, since it's just an inference _default_, just picking one arbitrarily works OK.
        }

        return true;
    }

    function combineUnionThisParam(left: ts.Symbol | undefined, right: ts.Symbol | undefined, mapper: ts.TypeMapper | undefined): ts.Symbol | undefined {
        if (!left || !right) {
            return left || right;
        }
        // A signature `this` type might be a read or a write position... It's very possible that it should be invariant
        // and we should refuse to merge signatures if there are `this` types and they do not match. However, so as to be
        // permissive when calling, for now, we'll intersect the `this` types just like we do for param types in union signatures.
        const thisType = getIntersectionType([getTypeOfSymbol(left), instantiateType(getTypeOfSymbol(right), mapper)]);
        return createSymbolWithType(left, thisType);
    }

    function combineUnionParameters(left: ts.Signature, right: ts.Signature, mapper: ts.TypeMapper | undefined) {
        const leftCount = getParameterCount(left);
        const rightCount = getParameterCount(right);
        const longest = leftCount >= rightCount ? left : right;
        const shorter = longest === left ? right : left;
        const longestCount = longest === left ? leftCount : rightCount;
        const eitherHasEffectiveRest = (hasEffectiveRestParameter(left) || hasEffectiveRestParameter(right));
        const needsExtraRestElement = eitherHasEffectiveRest && !hasEffectiveRestParameter(longest);
        const params = new Array<ts.Symbol>(longestCount + (needsExtraRestElement ? 1 : 0));
        for (let i = 0; i < longestCount; i++) {
            let longestParamType = tryGetTypeAtPosition(longest, i)!;
            if (longest === right) {
                longestParamType = instantiateType(longestParamType, mapper);
            }
            let shorterParamType = tryGetTypeAtPosition(shorter, i) || unknownType;
            if (shorter === right) {
                shorterParamType = instantiateType(shorterParamType, mapper);
            }
            const unionParamType = getIntersectionType([longestParamType, shorterParamType]);
            const isRestParam = eitherHasEffectiveRest && !needsExtraRestElement && i === (longestCount - 1);
            const isOptional = i >= getMinArgumentCount(longest) && i >= getMinArgumentCount(shorter);
            const leftName = i >= leftCount ? undefined : getParameterNameAtPosition(left, i);
            const rightName = i >= rightCount ? undefined : getParameterNameAtPosition(right, i);

            const paramName = leftName === rightName ? leftName :
                !leftName ? rightName :
                !rightName ? leftName :
                undefined;
            const paramSymbol = createSymbol(
                ts.SymbolFlags.FunctionScopedVariable | (isOptional && !isRestParam ? ts.SymbolFlags.Optional : 0),
                paramName || `arg${i}` as ts.__String
            );
            paramSymbol.type = isRestParam ? createArrayType(unionParamType) : unionParamType;
            params[i] = paramSymbol;
        }
        if (needsExtraRestElement) {
            const restParamSymbol = createSymbol(ts.SymbolFlags.FunctionScopedVariable, "args" as ts.__String);
            restParamSymbol.type = createArrayType(getTypeAtPosition(shorter, longestCount));
            if (shorter === right) {
                restParamSymbol.type = instantiateType(restParamSymbol.type, mapper);
            }
            params[longestCount] = restParamSymbol;
        }
        return params;
    }

    function combineSignaturesOfUnionMembers(left: ts.Signature, right: ts.Signature): ts.Signature {
        const typeParams = left.typeParameters || right.typeParameters;
        let paramMapper: ts.TypeMapper | undefined;
        if (left.typeParameters && right.typeParameters) {
            paramMapper = createTypeMapper(right.typeParameters, left.typeParameters);
            // We just use the type parameter defaults from the first signature
        }
        const declaration = left.declaration;
        const params = combineUnionParameters(left, right, paramMapper);
        const thisParam = combineUnionThisParam(left.thisParameter, right.thisParameter, paramMapper);
        const minArgCount = Math.max(left.minArgumentCount, right.minArgumentCount);
        const result = createSignature(
            declaration,
            typeParams,
            thisParam,
            params,
            /*resolvedReturnType*/ undefined,
            /*resolvedTypePredicate*/ undefined,
            minArgCount,
            (left.flags | right.flags) & ts.SignatureFlags.PropagatingFlags
        );
        result.compositeKind = ts.TypeFlags.Union;
        result.compositeSignatures = ts.concatenate(left.compositeKind !== ts.TypeFlags.Intersection && left.compositeSignatures || [left], [right]);
        if (paramMapper) {
            result.mapper = left.compositeKind !== ts.TypeFlags.Intersection && left.mapper && left.compositeSignatures ? combineTypeMappers(left.mapper, paramMapper) : paramMapper;
        }
        return result;
    }

    function getUnionIndexInfos(types: readonly ts.Type[]): ts.IndexInfo[] {
        const sourceInfos = getIndexInfosOfType(types[0]);
        if (sourceInfos) {
            const result = [];
            for (const info of sourceInfos) {
                const indexType = info.keyType;
                if (ts.every(types, t => !!getIndexInfoOfType(t, indexType))) {
                    result.push(createIndexInfo(indexType, getUnionType(ts.map(types, t => getIndexTypeOfType(t, indexType)!)),
                        ts.some(types, t => getIndexInfoOfType(t, indexType)!.isReadonly)));
                }
            }
            return result;
        }
        return ts.emptyArray;
    }

    function resolveUnionTypeMembers(type: ts.UnionType) {
        // The members and properties collections are empty for union types. To get all properties of a union
        // type use getPropertiesOfType (only the language service uses this).
        const callSignatures = getUnionSignatures(ts.map(type.types, t => t === globalFunctionType ? [unknownSignature] : getSignaturesOfType(t, ts.SignatureKind.Call)));
        const constructSignatures = getUnionSignatures(ts.map(type.types, t => getSignaturesOfType(t, ts.SignatureKind.Construct)));
        const indexInfos = getUnionIndexInfos(type.types);
        setStructuredTypeMembers(type, emptySymbols, callSignatures, constructSignatures, indexInfos);
    }

    function intersectTypes(type1: ts.Type, type2: ts.Type): ts.Type;
    function intersectTypes(type1: ts.Type | undefined, type2: ts.Type | undefined): ts.Type | undefined;
    function intersectTypes(type1: ts.Type | undefined, type2: ts.Type | undefined): ts.Type | undefined {
        return !type1 ? type2 : !type2 ? type1 : getIntersectionType([type1, type2]);
    }

    function findMixins(types: readonly ts.Type[]): readonly boolean[] {
        const constructorTypeCount = ts.countWhere(types, (t) => getSignaturesOfType(t, ts.SignatureKind.Construct).length > 0);
        const mixinFlags = ts.map(types, isMixinConstructorType);
        if (constructorTypeCount > 0 && constructorTypeCount === ts.countWhere(mixinFlags, (b) => b)) {
            const firstMixinIndex = mixinFlags.indexOf(/*searchElement*/ true);
            mixinFlags[firstMixinIndex] = false;
        }
        return mixinFlags;
    }

    function includeMixinType(type: ts.Type, types: readonly ts.Type[], mixinFlags: readonly boolean[], index: number): ts.Type {
        const mixedTypes: ts.Type[] = [];
        for (let i = 0; i < types.length; i++) {
            if (i === index) {
                mixedTypes.push(type);
            }
            else if (mixinFlags[i]) {
                mixedTypes.push(getReturnTypeOfSignature(getSignaturesOfType(types[i], ts.SignatureKind.Construct)[0]));
            }
        }
        return getIntersectionType(mixedTypes);
    }

    function resolveIntersectionTypeMembers(type: ts.IntersectionType) {
        // The members and properties collections are empty for intersection types. To get all properties of an
        // intersection type use getPropertiesOfType (only the language service uses this).
        let callSignatures: ts.Signature[] | undefined;
        let constructSignatures: ts.Signature[] | undefined;
        let indexInfos: ts.IndexInfo[] | undefined;
        const types = type.types;
        const mixinFlags = findMixins(types);
        const mixinCount = ts.countWhere(mixinFlags, (b) => b);
        for (let i = 0; i < types.length; i++) {
            const t = type.types[i];
            // When an intersection type contains mixin constructor types, the construct signatures from
            // those types are discarded and their return types are mixed into the return types of all
            // other construct signatures in the intersection type. For example, the intersection type
            // '{ new(...args: any[]) => A } & { new(s: string) => B }' has a single construct signature
            // 'new(s: string) => A & B'.
            if (!mixinFlags[i]) {
                let signatures = getSignaturesOfType(t, ts.SignatureKind.Construct);
                if (signatures.length && mixinCount > 0) {
                    signatures = ts.map(signatures, s => {
                        const clone = cloneSignature(s);
                        clone.resolvedReturnType = includeMixinType(getReturnTypeOfSignature(s), types, mixinFlags, i);
                        return clone;
                    });
                }
                constructSignatures = appendSignatures(constructSignatures, signatures);
            }
            callSignatures = appendSignatures(callSignatures, getSignaturesOfType(t, ts.SignatureKind.Call));
            indexInfos = ts.reduceLeft(getIndexInfosOfType(t), (infos, newInfo) => appendIndexInfo(infos, newInfo, /*union*/ false), indexInfos);
        }
        setStructuredTypeMembers(type, emptySymbols, callSignatures || ts.emptyArray, constructSignatures || ts.emptyArray, indexInfos || ts.emptyArray);
    }

    function appendSignatures(signatures: ts.Signature[] | undefined, newSignatures: readonly ts.Signature[]) {
        for (const sig of newSignatures) {
            if (!signatures || ts.every(signatures, s => !compareSignaturesIdentical(s, sig, /*partialMatch*/ false, /*ignoreThisTypes*/ false, /*ignoreReturnTypes*/ false, compareTypesIdentical))) {
                signatures = ts.append(signatures, sig);
            }
        }
        return signatures;
    }

    function appendIndexInfo(indexInfos: ts.IndexInfo[] | undefined, newInfo: ts.IndexInfo, union: boolean) {
        if (indexInfos) {
            for (let i = 0; i < indexInfos.length; i++) {
                const info = indexInfos[i];
                if (info.keyType === newInfo.keyType) {
                    indexInfos[i] = createIndexInfo(info.keyType,
                        union ? getUnionType([info.type, newInfo.type]) : getIntersectionType([info.type, newInfo.type]),
                        union ? info.isReadonly || newInfo.isReadonly : info.isReadonly && newInfo.isReadonly);
                    return indexInfos;
                }
            }
        }
        return ts.append(indexInfos, newInfo);
    }

    /**
     * Converts an AnonymousType to a ResolvedType.
     */
    function resolveAnonymousTypeMembers(type: ts.AnonymousType) {
        if (type.target) {
            setStructuredTypeMembers(type, emptySymbols, ts.emptyArray, ts.emptyArray, ts.emptyArray);
            const members = createInstantiatedSymbolTable(getPropertiesOfObjectType(type.target), type.mapper!, /*mappingThisOnly*/ false);
            const callSignatures = instantiateSignatures(getSignaturesOfType(type.target, ts.SignatureKind.Call), type.mapper!);
            const constructSignatures = instantiateSignatures(getSignaturesOfType(type.target, ts.SignatureKind.Construct), type.mapper!);
            const indexInfos = instantiateIndexInfos(getIndexInfosOfType(type.target), type.mapper!);
            setStructuredTypeMembers(type, members, callSignatures, constructSignatures, indexInfos);
            return;
        }
        const symbol = getMergedSymbol(type.symbol);
        if (symbol.flags & ts.SymbolFlags.TypeLiteral) {
            setStructuredTypeMembers(type, emptySymbols, ts.emptyArray, ts.emptyArray, ts.emptyArray);
            const members = getMembersOfSymbol(symbol);
            const callSignatures = getSignaturesOfSymbol(members.get(ts.InternalSymbolName.Call));
            const constructSignatures = getSignaturesOfSymbol(members.get(ts.InternalSymbolName.New));
            const indexInfos = getIndexInfosOfSymbol(symbol);
            setStructuredTypeMembers(type, members, callSignatures, constructSignatures, indexInfos);
            return;
        }
        // Combinations of function, class, enum and module
        let members = emptySymbols;
        let indexInfos: ts.IndexInfo[] | undefined;
        if (symbol.exports) {
            members = getExportsOfSymbol(symbol);
            if (symbol === globalThisSymbol) {
                const varsOnly = new ts.Map<string, ts.Symbol>() as ts.SymbolTable;
                members.forEach(p => {
                    if (!(p.flags & ts.SymbolFlags.BlockScoped) && !(p.flags & ts.SymbolFlags.ValueModule && p.declarations?.length && ts.every(p.declarations, ts.isAmbientModule))) {
                        varsOnly.set(p.escapedName, p);
                    }
                });
                members = varsOnly;
            }
        }
        let baseConstructorIndexInfo: ts.IndexInfo | undefined;
        setStructuredTypeMembers(type, members, ts.emptyArray, ts.emptyArray, ts.emptyArray);
        if (symbol.flags & ts.SymbolFlags.Class) {
            const classType = getDeclaredTypeOfClassOrInterface(symbol);
            const baseConstructorType = getBaseConstructorTypeOfClass(classType);
            if (baseConstructorType.flags & (ts.TypeFlags.Object | ts.TypeFlags.Intersection | ts.TypeFlags.TypeVariable)) {
                members = ts.createSymbolTable(getNamedOrIndexSignatureMembers(members));
                addInheritedMembers(members, getPropertiesOfType(baseConstructorType));
            }
            else if (baseConstructorType === anyType) {
                baseConstructorIndexInfo = createIndexInfo(stringType, anyType, /*isReadonly*/ false);
            }
        }

        const indexSymbol = getIndexSymbolFromSymbolTable(members);
        if (indexSymbol) {
            indexInfos = getIndexInfosOfIndexSymbol(indexSymbol);
        }
        else {
            if (baseConstructorIndexInfo) {
                indexInfos = ts.append(indexInfos, baseConstructorIndexInfo);
            }
            if (symbol.flags & ts.SymbolFlags.Enum && (getDeclaredTypeOfSymbol(symbol).flags & ts.TypeFlags.Enum ||
                ts.some(type.properties, prop => !!(getTypeOfSymbol(prop).flags & ts.TypeFlags.NumberLike)))) {
                indexInfos = ts.append(indexInfos, enumNumberIndexInfo);
            }
        }
        setStructuredTypeMembers(type, members, ts.emptyArray, ts.emptyArray, indexInfos || ts.emptyArray);
        // We resolve the members before computing the signatures because a signature may use
        // typeof with a qualified name expression that circularly references the type we are
        // in the process of resolving (see issue #6072). The temporarily empty signature list
        // will never be observed because a qualified name can't reference signatures.
        if (symbol.flags & (ts.SymbolFlags.Function | ts.SymbolFlags.Method)) {
            type.callSignatures = getSignaturesOfSymbol(symbol);
        }
        // And likewise for construct signatures for classes
        if (symbol.flags & ts.SymbolFlags.Class) {
            const classType = getDeclaredTypeOfClassOrInterface(symbol);
            let constructSignatures = symbol.members ? getSignaturesOfSymbol(symbol.members.get(ts.InternalSymbolName.Constructor)) : ts.emptyArray;
            if (symbol.flags & ts.SymbolFlags.Function) {
                constructSignatures = ts.addRange(constructSignatures.slice(), ts.mapDefined(
                    type.callSignatures,
                    sig => isJSConstructor(sig.declaration) ?
                        createSignature(sig.declaration, sig.typeParameters, sig.thisParameter, sig.parameters, classType, /*resolvedTypePredicate*/ undefined, sig.minArgumentCount, sig.flags & ts.SignatureFlags.PropagatingFlags) :
                        undefined));
            }
            if (!constructSignatures.length) {
                constructSignatures = getDefaultConstructSignatures(classType);
            }
            type.constructSignatures = constructSignatures;
        }
    }

    type ReplaceableIndexedAccessType = ts.IndexedAccessType & { objectType: ts.TypeParameter, indexType: ts.TypeParameter };
    function replaceIndexedAccess(instantiable: ts.Type, type: ReplaceableIndexedAccessType, replacement: ts.Type) {
        // map type.indexType to 0
        // map type.objectType to `[TReplacement]`
        // thus making the indexed access `[TReplacement][0]` or `TReplacement`
        return instantiateType(instantiable, createTypeMapper([type.indexType, type.objectType], [getNumberLiteralType(0), createTupleType([replacement])]));
    }

    function resolveReverseMappedTypeMembers(type: ts.ReverseMappedType) {
        const indexInfo = getIndexInfoOfType(type.source, stringType);
        const modifiers = getMappedTypeModifiers(type.mappedType);
        const readonlyMask = modifiers & MappedTypeModifiers.IncludeReadonly ? false : true;
        const optionalMask = modifiers & MappedTypeModifiers.IncludeOptional ? 0 : ts.SymbolFlags.Optional;
        const indexInfos = indexInfo ? [createIndexInfo(stringType, inferReverseMappedType(indexInfo.type, type.mappedType, type.constraintType), readonlyMask && indexInfo.isReadonly)] : ts.emptyArray;
        const members = ts.createSymbolTable();
        for (const prop of getPropertiesOfType(type.source)) {
            const checkFlags = ts.CheckFlags.ReverseMapped | (readonlyMask && isReadonlySymbol(prop) ? ts.CheckFlags.Readonly : 0);
            const inferredProp = createSymbol(ts.SymbolFlags.Property | prop.flags & optionalMask, prop.escapedName, checkFlags) as ts.ReverseMappedSymbol;
            inferredProp.declarations = prop.declarations;
            inferredProp.nameType = getSymbolLinks(prop).nameType;
            inferredProp.propertyType = getTypeOfSymbol(prop);
            if (type.constraintType.type.flags & ts.TypeFlags.IndexedAccess
                && (type.constraintType.type as ts.IndexedAccessType).objectType.flags & ts.TypeFlags.TypeParameter
                && (type.constraintType.type as ts.IndexedAccessType).indexType.flags & ts.TypeFlags.TypeParameter) {
                // A reverse mapping of `{[K in keyof T[K_1]]: T[K_1]}` is the same as that of `{[K in keyof T]: T}`, since all we care about is
                // inferring to the "type parameter" (or indexed access) shared by the constraint and template. So, to reduce the number of
                // type identities produced, we simplify such indexed access occurences
                const newTypeParam = (type.constraintType.type as ts.IndexedAccessType).objectType;
                const newMappedType = replaceIndexedAccess(type.mappedType, type.constraintType.type as ReplaceableIndexedAccessType, newTypeParam);
                inferredProp.mappedType = newMappedType as ts.MappedType;
                inferredProp.constraintType = getIndexType(newTypeParam) as ts.IndexType;
            }
            else {
                inferredProp.mappedType = type.mappedType;
                inferredProp.constraintType = type.constraintType;
            }
            members.set(prop.escapedName, inferredProp);
        }
        setStructuredTypeMembers(type, members, ts.emptyArray, ts.emptyArray, indexInfos);
    }

    // Return the lower bound of the key type in a mapped type. Intuitively, the lower
    // bound includes those keys that are known to always be present, for example because
    // because of constraints on type parameters (e.g. 'keyof T' for a constrained T).
    function getLowerBoundOfKeyType(type: ts.Type): ts.Type {
        if (type.flags & ts.TypeFlags.Index) {
            const t = getApparentType((type as ts.IndexType).type);
            return isGenericTupleType(t) ? getKnownKeysOfTupleType(t) : getIndexType(t);
        }
        if (type.flags & ts.TypeFlags.Conditional) {
            if ((type as ts.ConditionalType).root.isDistributive) {
                const checkType = (type as ts.ConditionalType).checkType;
                const constraint = getLowerBoundOfKeyType(checkType);
                if (constraint !== checkType) {
                    return getConditionalTypeInstantiation(type as ts.ConditionalType, prependTypeMapping((type as ts.ConditionalType).root.checkType, constraint, (type as ts.ConditionalType).mapper));
                }
            }
            return type;
        }
        if (type.flags & ts.TypeFlags.Union) {
            return mapType(type as ts.UnionType, getLowerBoundOfKeyType);
        }
        if (type.flags & ts.TypeFlags.Intersection) {
            // Similarly to getTypeFromIntersectionTypeNode, we preserve the special string & {}, number & {},
            // and bigint & {} intersections that are used to prevent subtype reduction in union types.
            const types = (type as ts.IntersectionType).types;
            if (types.length === 2 && !!(types[0].flags & (ts.TypeFlags.String | ts.TypeFlags.Number | ts.TypeFlags.BigInt)) && types[1] === emptyTypeLiteralType) {
                return type;
            }
            return getIntersectionType(ts.sameMap((type as ts.UnionType).types, getLowerBoundOfKeyType));
        }
        return type;
    }

    function getIsLateCheckFlag(s: ts.Symbol): ts.CheckFlags {
        return ts.getCheckFlags(s) & ts.CheckFlags.Late;
    }

    function forEachMappedTypePropertyKeyTypeAndIndexSignatureKeyType(type: ts.Type, include: ts.TypeFlags, stringsOnly: boolean, cb: (keyType: ts.Type) => void) {
        for (const prop of getPropertiesOfType(type)) {
            cb(getLiteralTypeFromProperty(prop, include));
        }
        if (type.flags & ts.TypeFlags.Any) {
            cb(stringType);
        }
        else {
            for (const info of getIndexInfosOfType(type)) {
                if (!stringsOnly || info.keyType.flags & (ts.TypeFlags.String | ts.TypeFlags.TemplateLiteral)) {
                    cb(info.keyType);
                }
            }
        }
    }

    /** Resolve the members of a mapped type { [P in K]: T } */
    function resolveMappedTypeMembers(type: ts.MappedType) {
        const members: ts.SymbolTable = ts.createSymbolTable();
        let indexInfos: ts.IndexInfo[] | undefined;
        // Resolve upfront such that recursive references see an empty object type.
        setStructuredTypeMembers(type, emptySymbols, ts.emptyArray, ts.emptyArray, ts.emptyArray);
        // In { [P in K]: T }, we refer to P as the type parameter type, K as the constraint type,
        // and T as the template type.
        const typeParameter = getTypeParameterFromMappedType(type);
        const constraintType = getConstraintTypeFromMappedType(type);
        const nameType = getNameTypeFromMappedType(type.target as ts.MappedType || type);
        const templateType = getTemplateTypeFromMappedType(type.target as ts.MappedType || type);
        const modifiersType = getApparentType(getModifiersTypeFromMappedType(type)); // The 'T' in 'keyof T'
        const templateModifiers = getMappedTypeModifiers(type);
        const include = keyofStringsOnly ? ts.TypeFlags.StringLiteral : ts.TypeFlags.StringOrNumberLiteralOrUnique;
        if (isMappedTypeWithKeyofConstraintDeclaration(type)) {
            // We have a { [P in keyof T]: X }
            forEachMappedTypePropertyKeyTypeAndIndexSignatureKeyType(modifiersType, include, keyofStringsOnly, addMemberForKeyType);
        }
        else {
            forEachType(getLowerBoundOfKeyType(constraintType), addMemberForKeyType);
        }
        setStructuredTypeMembers(type, members, ts.emptyArray, ts.emptyArray, indexInfos || ts.emptyArray);

        function addMemberForKeyType(keyType: ts.Type) {
            const propNameType = nameType ? instantiateType(nameType, appendTypeMapping(type.mapper, typeParameter, keyType)) : keyType;
            forEachType(propNameType, t => addMemberForKeyTypeWorker(keyType, t));
        }

        function addMemberForKeyTypeWorker(keyType: ts.Type, propNameType: ts.Type) {
            // If the current iteration type constituent is a string literal type, create a property.
            // Otherwise, for type string create a string index signature.
            if (isTypeUsableAsPropertyName(propNameType)) {
                const propName = getPropertyNameFromType(propNameType);
                // String enum members from separate enums with identical values
                // are distinct types with the same property name. Make the resulting
                // property symbol's name type be the union of those enum member types.
                const existingProp = members.get(propName) as ts.MappedSymbol | undefined;
                if (existingProp) {
                    existingProp.nameType = getUnionType([existingProp.nameType!, propNameType]);
                    existingProp.keyType = getUnionType([existingProp.keyType, keyType]);
                }
                else {
                    const modifiersProp = isTypeUsableAsPropertyName(keyType) ? getPropertyOfType(modifiersType, getPropertyNameFromType(keyType)) : undefined;
                    const isOptional = !!(templateModifiers & MappedTypeModifiers.IncludeOptional ||
                        !(templateModifiers & MappedTypeModifiers.ExcludeOptional) && modifiersProp && modifiersProp.flags & ts.SymbolFlags.Optional);
                    const isReadonly = !!(templateModifiers & MappedTypeModifiers.IncludeReadonly ||
                        !(templateModifiers & MappedTypeModifiers.ExcludeReadonly) && modifiersProp && isReadonlySymbol(modifiersProp));
                    const stripOptional = strictNullChecks && !isOptional && modifiersProp && modifiersProp.flags & ts.SymbolFlags.Optional;
                    const lateFlag: ts.CheckFlags = modifiersProp ? getIsLateCheckFlag(modifiersProp) : 0;
                    const prop = createSymbol(ts.SymbolFlags.Property | (isOptional ? ts.SymbolFlags.Optional : 0), propName,
                        lateFlag | ts.CheckFlags.Mapped | (isReadonly ? ts.CheckFlags.Readonly : 0) | (stripOptional ? ts.CheckFlags.StripOptional : 0)) as ts.MappedSymbol;
                    prop.mappedType = type;
                    prop.nameType = propNameType;
                    prop.keyType = keyType;
                    if (modifiersProp) {
                        prop.syntheticOrigin = modifiersProp;
                        // If the mapped type has an `as XXX` clause, the property name likely won't match the declaration name and
                        // multiple properties may map to the same name. Thus, we attach no declarations to the symbol.
                        prop.declarations = nameType ? undefined : modifiersProp.declarations;
                    }
                    members.set(propName, prop);
                }
            }
            else if (isValidIndexKeyType(propNameType) || propNameType.flags & (ts.TypeFlags.Any | ts.TypeFlags.Enum)) {
                const indexKeyType = propNameType.flags & (ts.TypeFlags.Any | ts.TypeFlags.String) ? stringType :
                    propNameType.flags & (ts.TypeFlags.Number | ts.TypeFlags.Enum) ? numberType :
                    propNameType;
                const propType = instantiateType(templateType, appendTypeMapping(type.mapper, typeParameter, keyType));
                const indexInfo = createIndexInfo(indexKeyType, propType, !!(templateModifiers & MappedTypeModifiers.IncludeReadonly));
                indexInfos = appendIndexInfo(indexInfos, indexInfo, /*union*/ true);
            }
        }
    }

    function getTypeOfMappedSymbol(symbol: ts.MappedSymbol) {
        if (!symbol.type) {
            const mappedType = symbol.mappedType;
            if (!pushTypeResolution(symbol, TypeSystemPropertyName.Type)) {
                mappedType.containsError = true;
                return errorType;
            }
            const templateType = getTemplateTypeFromMappedType(mappedType.target as ts.MappedType || mappedType);
            const mapper = appendTypeMapping(mappedType.mapper, getTypeParameterFromMappedType(mappedType), symbol.keyType);
            const propType = instantiateType(templateType, mapper);
            // When creating an optional property in strictNullChecks mode, if 'undefined' isn't assignable to the
            // type, we include 'undefined' in the type. Similarly, when creating a non-optional property in strictNullChecks
            // mode, if the underlying property is optional we remove 'undefined' from the type.
            let type = strictNullChecks && symbol.flags & ts.SymbolFlags.Optional && !maybeTypeOfKind(propType, ts.TypeFlags.Undefined | ts.TypeFlags.Void) ? getOptionalType(propType, /*isProperty*/ true) :
                symbol.checkFlags & ts.CheckFlags.StripOptional ? removeMissingOrUndefinedType(propType) :
                propType;
            if (!popTypeResolution()) {
                error(currentNode, ts.Diagnostics.Type_of_property_0_circularly_references_itself_in_mapped_type_1, symbolToString(symbol), typeToString(mappedType));
                type = errorType;
            }
            symbol.type = type;
        }
        return symbol.type;
    }

    function getTypeParameterFromMappedType(type: ts.MappedType) {
        return type.typeParameter ||
            (type.typeParameter = getDeclaredTypeOfTypeParameter(getSymbolOfNode(type.declaration.typeParameter)));
    }

    function getConstraintTypeFromMappedType(type: ts.MappedType) {
        return type.constraintType ||
            (type.constraintType = getConstraintOfTypeParameter(getTypeParameterFromMappedType(type)) || errorType);
    }

    function getNameTypeFromMappedType(type: ts.MappedType) {
        return type.declaration.nameType ?
            type.nameType || (type.nameType = instantiateType(getTypeFromTypeNode(type.declaration.nameType), type.mapper)) :
            undefined;
    }

    function getTemplateTypeFromMappedType(type: ts.MappedType) {
        return type.templateType ||
            (type.templateType = type.declaration.type ?
                instantiateType(addOptionality(getTypeFromTypeNode(type.declaration.type), /*isProperty*/ true, !!(getMappedTypeModifiers(type) & MappedTypeModifiers.IncludeOptional)), type.mapper) :
                errorType);
    }

    function getConstraintDeclarationForMappedType(type: ts.MappedType) {
        return ts.getEffectiveConstraintOfTypeParameter(type.declaration.typeParameter);
    }

    function isMappedTypeWithKeyofConstraintDeclaration(type: ts.MappedType) {
        const constraintDeclaration = getConstraintDeclarationForMappedType(type)!; // TODO: GH#18217
        return constraintDeclaration.kind === ts.SyntaxKind.TypeOperator &&
            (constraintDeclaration as ts.TypeOperatorNode).operator === ts.SyntaxKind.KeyOfKeyword;
    }

    function getModifiersTypeFromMappedType(type: ts.MappedType) {
        if (!type.modifiersType) {
            if (isMappedTypeWithKeyofConstraintDeclaration(type)) {
                // If the constraint declaration is a 'keyof T' node, the modifiers type is T. We check
                // AST nodes here because, when T is a non-generic type, the logic below eagerly resolves
                // 'keyof T' to a literal union type and we can't recover T from that type.
                type.modifiersType = instantiateType(getTypeFromTypeNode((getConstraintDeclarationForMappedType(type) as ts.TypeOperatorNode).type), type.mapper);
            }
            else {
                // Otherwise, get the declared constraint type, and if the constraint type is a type parameter,
                // get the constraint of that type parameter. If the resulting type is an indexed type 'keyof T',
                // the modifiers type is T. Otherwise, the modifiers type is unknown.
                const declaredType = getTypeFromMappedTypeNode(type.declaration) as ts.MappedType;
                const constraint = getConstraintTypeFromMappedType(declaredType);
                const extendedConstraint = constraint && constraint.flags & ts.TypeFlags.TypeParameter ? getConstraintOfTypeParameter(constraint as ts.TypeParameter) : constraint;
                type.modifiersType = extendedConstraint && extendedConstraint.flags & ts.TypeFlags.Index ? instantiateType((extendedConstraint as ts.IndexType).type, type.mapper) : unknownType;
            }
        }
        return type.modifiersType;
    }

    function getMappedTypeModifiers(type: ts.MappedType): MappedTypeModifiers {
        const declaration = type.declaration;
        return (declaration.readonlyToken ? declaration.readonlyToken.kind === ts.SyntaxKind.MinusToken ? MappedTypeModifiers.ExcludeReadonly : MappedTypeModifiers.IncludeReadonly : 0) |
            (declaration.questionToken ? declaration.questionToken.kind === ts.SyntaxKind.MinusToken ? MappedTypeModifiers.ExcludeOptional : MappedTypeModifiers.IncludeOptional : 0);
    }

    function getMappedTypeOptionality(type: ts.MappedType): number {
        const modifiers = getMappedTypeModifiers(type);
        return modifiers & MappedTypeModifiers.ExcludeOptional ? -1 : modifiers & MappedTypeModifiers.IncludeOptional ? 1 : 0;
    }

    function getCombinedMappedTypeOptionality(type: ts.MappedType): number {
        const optionality = getMappedTypeOptionality(type);
        const modifiersType = getModifiersTypeFromMappedType(type);
        return optionality || (isGenericMappedType(modifiersType) ? getMappedTypeOptionality(modifiersType) : 0);
    }

    function isPartialMappedType(type: ts.Type) {
        return !!(ts.getObjectFlags(type) & ts.ObjectFlags.Mapped && getMappedTypeModifiers(type as ts.MappedType) & MappedTypeModifiers.IncludeOptional);
    }

    function isGenericMappedType(type: ts.Type): type is ts.MappedType {
        if (ts.getObjectFlags(type) & ts.ObjectFlags.Mapped) {
            const constraint = getConstraintTypeFromMappedType(type as ts.MappedType);
            if (isGenericIndexType(constraint)) {
                return true;
            }
            // A mapped type is generic if the 'as' clause references generic types other than the iteration type.
            // To determine this, we substitute the constraint type (that we now know isn't generic) for the iteration
            // type and check whether the resulting type is generic.
            const nameType = getNameTypeFromMappedType(type as ts.MappedType);
            if (nameType && isGenericIndexType(instantiateType(nameType, makeUnaryTypeMapper(getTypeParameterFromMappedType(type as ts.MappedType), constraint)))) {
                return true;
            }
        }
        return false;
    }

    function resolveStructuredTypeMembers(type: ts.StructuredType): ts.ResolvedType {
        if (!(type as ts.ResolvedType).members) {
            if (type.flags & ts.TypeFlags.Object) {
                if ((type as ts.ObjectType).objectFlags & ts.ObjectFlags.Reference) {
                    resolveTypeReferenceMembers(type as ts.TypeReference);
                }
                else if ((type as ts.ObjectType).objectFlags & ts.ObjectFlags.ClassOrInterface) {
                    resolveClassOrInterfaceMembers(type as ts.InterfaceType);
                }
                else if ((type as ts.ReverseMappedType).objectFlags & ts.ObjectFlags.ReverseMapped) {
                    resolveReverseMappedTypeMembers(type as ts.ReverseMappedType);
                }
                else if ((type as ts.ObjectType).objectFlags & ts.ObjectFlags.Anonymous) {
                    resolveAnonymousTypeMembers(type as ts.AnonymousType);
                }
                else if ((type as ts.MappedType).objectFlags & ts.ObjectFlags.Mapped) {
                    resolveMappedTypeMembers(type as ts.MappedType);
                }
                else {
                    ts.Debug.fail("Unhandled object type " + ts.Debug.formatObjectFlags(type.objectFlags));
                }
            }
            else if (type.flags & ts.TypeFlags.Union) {
                resolveUnionTypeMembers(type as ts.UnionType);
            }
            else if (type.flags & ts.TypeFlags.Intersection) {
                resolveIntersectionTypeMembers(type as ts.IntersectionType);
            }
            else {
                ts.Debug.fail("Unhandled type " + ts.Debug.formatTypeFlags(type.flags));
            }
        }
        return type as ts.ResolvedType;
    }

    /** Return properties of an object type or an empty array for other types */
    function getPropertiesOfObjectType(type: ts.Type): ts.Symbol[] {
        if (type.flags & ts.TypeFlags.Object) {
            return resolveStructuredTypeMembers(type as ts.ObjectType).properties;
        }
        return ts.emptyArray;
    }

    /** If the given type is an object type and that type has a property by the given name,
     * return the symbol for that property. Otherwise return undefined.
     */
    function getPropertyOfObjectType(type: ts.Type, name: ts.__String): ts.Symbol | undefined {
        if (type.flags & ts.TypeFlags.Object) {
            const resolved = resolveStructuredTypeMembers(type as ts.ObjectType);
            const symbol = resolved.members.get(name);
            if (symbol && symbolIsValue(symbol)) {
                return symbol;
            }
        }
    }

    function getPropertiesOfUnionOrIntersectionType(type: ts.UnionOrIntersectionType): ts.Symbol[] {
        if (!type.resolvedProperties) {
            const members = ts.createSymbolTable();
            for (const current of type.types) {
                for (const prop of getPropertiesOfType(current)) {
                    if (!members.has(prop.escapedName)) {
                        const combinedProp = getPropertyOfUnionOrIntersectionType(type, prop.escapedName);
                        if (combinedProp) {
                            members.set(prop.escapedName, combinedProp);
                        }
                    }
                }
                // The properties of a union type are those that are present in all constituent types, so
                // we only need to check the properties of the first type without index signature
                if (type.flags & ts.TypeFlags.Union && getIndexInfosOfType(current).length === 0) {
                    break;
                }
            }
            type.resolvedProperties = getNamedMembers(members);
        }
        return type.resolvedProperties;
    }

    function getPropertiesOfType(type: ts.Type): ts.Symbol[] {
        type = getReducedApparentType(type);
        return type.flags & ts.TypeFlags.UnionOrIntersection ?
            getPropertiesOfUnionOrIntersectionType(type as ts.UnionType) :
            getPropertiesOfObjectType(type);
    }

    function forEachPropertyOfType(type: ts.Type, action: (symbol: ts.Symbol, escapedName: ts.__String) => void): void {
        type = getReducedApparentType(type);
        if (type.flags & ts.TypeFlags.StructuredType) {
            resolveStructuredTypeMembers(type as ts.StructuredType).members.forEach((symbol, escapedName) => {
                if (isNamedMember(symbol, escapedName)) {
                    action(symbol, escapedName);
                }
            });
        }
    }

    function isTypeInvalidDueToUnionDiscriminant(contextualType: ts.Type, obj: ts.ObjectLiteralExpression | ts.JsxAttributes): boolean {
        const list = obj.properties as ts.NodeArray<ts.ObjectLiteralElementLike | ts.JsxAttributeLike>;
        return list.some(property => {
            const nameType = property.name && getLiteralTypeFromPropertyName(property.name);
            const name = nameType && isTypeUsableAsPropertyName(nameType) ? getPropertyNameFromType(nameType) : undefined;
            const expected = name === undefined ? undefined : getTypeOfPropertyOfType(contextualType, name);
            return !!expected && isLiteralType(expected) && !isTypeAssignableTo(getTypeOfNode(property), expected);
        });
    }

    function getAllPossiblePropertiesOfTypes(types: readonly ts.Type[]): ts.Symbol[] {
        const unionType = getUnionType(types);
        if (!(unionType.flags & ts.TypeFlags.Union)) {
            return getAugmentedPropertiesOfType(unionType);
        }

        const props = ts.createSymbolTable();
        for (const memberType of types) {
            for (const { escapedName } of getAugmentedPropertiesOfType(memberType)) {
                if (!props.has(escapedName)) {
                    const prop = createUnionOrIntersectionProperty(unionType as ts.UnionType, escapedName);
                    // May be undefined if the property is private
                    if (prop) props.set(escapedName, prop);
                }
            }
        }
        return ts.arrayFrom(props.values());
    }

    function getConstraintOfType(type: ts.InstantiableType | ts.UnionOrIntersectionType): ts.Type | undefined {
        return type.flags & ts.TypeFlags.TypeParameter ? getConstraintOfTypeParameter(type as ts.TypeParameter) :
            type.flags & ts.TypeFlags.IndexedAccess ? getConstraintOfIndexedAccess(type as ts.IndexedAccessType) :
            type.flags & ts.TypeFlags.Conditional ? getConstraintOfConditionalType(type as ts.ConditionalType) :
            getBaseConstraintOfType(type);
    }

    function getConstraintOfTypeParameter(typeParameter: ts.TypeParameter): ts.Type | undefined {
        return hasNonCircularBaseConstraint(typeParameter) ? getConstraintFromTypeParameter(typeParameter) : undefined;
    }

    function getConstraintOfIndexedAccess(type: ts.IndexedAccessType) {
        return hasNonCircularBaseConstraint(type) ? getConstraintFromIndexedAccess(type) : undefined;
    }

    function getSimplifiedTypeOrConstraint(type: ts.Type) {
        const simplified = getSimplifiedType(type, /*writing*/ false);
        return simplified !== type ? simplified : getConstraintOfType(type);
    }

    function getConstraintFromIndexedAccess(type: ts.IndexedAccessType) {
        if (isMappedTypeGenericIndexedAccess(type)) {
            // For indexed access types of the form { [P in K]: E }[X], where K is non-generic and X is generic,
            // we substitute an instantiation of E where P is replaced with X.
            return substituteIndexedMappedType(type.objectType as ts.MappedType, type.indexType);
        }
        const indexConstraint = getSimplifiedTypeOrConstraint(type.indexType);
        if (indexConstraint && indexConstraint !== type.indexType) {
            const indexedAccess = getIndexedAccessTypeOrUndefined(type.objectType, indexConstraint, type.accessFlags);
            if (indexedAccess) {
                return indexedAccess;
            }
        }
        const objectConstraint = getSimplifiedTypeOrConstraint(type.objectType);
        if (objectConstraint && objectConstraint !== type.objectType) {
            return getIndexedAccessTypeOrUndefined(objectConstraint, type.indexType, type.accessFlags);
        }
        return undefined;
    }

    function getDefaultConstraintOfConditionalType(type: ts.ConditionalType) {
        if (!type.resolvedDefaultConstraint) {
            // An `any` branch of a conditional type would normally be viral - specifically, without special handling here,
            // a conditional type with a single branch of type `any` would be assignable to anything, since it's constraint would simplify to
            // just `any`. This result is _usually_ unwanted - so instead here we elide an `any` branch from the constraint type,
            // in effect treating `any` like `never` rather than `unknown` in this location.
            const trueConstraint = getInferredTrueTypeFromConditionalType(type);
            const falseConstraint = getFalseTypeFromConditionalType(type);
            type.resolvedDefaultConstraint = isTypeAny(trueConstraint) ? falseConstraint : isTypeAny(falseConstraint) ? trueConstraint : getUnionType([trueConstraint, falseConstraint]);
        }
        return type.resolvedDefaultConstraint;
    }

    function getConstraintOfDistributiveConditionalType(type: ts.ConditionalType): ts.Type | undefined {
        // Check if we have a conditional type of the form 'T extends U ? X : Y', where T is a constrained
        // type parameter. If so, create an instantiation of the conditional type where T is replaced
        // with its constraint. We do this because if the constraint is a union type it will be distributed
        // over the conditional type and possibly reduced. For example, 'T extends undefined ? never : T'
        // removes 'undefined' from T.
        // We skip returning a distributive constraint for a restrictive instantiation of a conditional type
        // as the constraint for all type params (check type included) have been replace with `unknown`, which
        // is going to produce even more false positive/negative results than the distribute constraint already does.
        // Please note: the distributive constraint is a kludge for emulating what a negated type could to do filter
        // a union - once negated types exist and are applied to the conditional false branch, this "constraint"
        // likely doesn't need to exist.
        if (type.root.isDistributive && type.restrictiveInstantiation !== type) {
            const simplified = getSimplifiedType(type.checkType, /*writing*/ false);
            const constraint = simplified === type.checkType ? getConstraintOfType(simplified) : simplified;
            if (constraint && constraint !== type.checkType) {
                const instantiated = getConditionalTypeInstantiation(type, prependTypeMapping(type.root.checkType, constraint, type.mapper));
                if (!(instantiated.flags & ts.TypeFlags.Never)) {
                    return instantiated;
                }
            }
        }
        return undefined;
    }

    function getConstraintFromConditionalType(type: ts.ConditionalType) {
        return getConstraintOfDistributiveConditionalType(type) || getDefaultConstraintOfConditionalType(type);
    }

    function getConstraintOfConditionalType(type: ts.ConditionalType) {
        return hasNonCircularBaseConstraint(type) ? getConstraintFromConditionalType(type) : undefined;
    }

    function getEffectiveConstraintOfIntersection(types: readonly ts.Type[], targetIsUnion: boolean) {
        let constraints: ts.Type[] | undefined;
        let hasDisjointDomainType = false;
        for (const t of types) {
            if (t.flags & ts.TypeFlags.Instantiable) {
                // We keep following constraints as long as we have an instantiable type that is known
                // not to be circular or infinite (hence we stop on index access types).
                let constraint = getConstraintOfType(t);
                while (constraint && constraint.flags & (ts.TypeFlags.TypeParameter | ts.TypeFlags.Index | ts.TypeFlags.Conditional)) {
                    constraint = getConstraintOfType(constraint);
                }
                if (constraint) {
                    constraints = ts.append(constraints, constraint);
                    if (targetIsUnion) {
                        constraints = ts.append(constraints, t);
                    }
                }
            }
            else if (t.flags & ts.TypeFlags.DisjointDomains || isEmptyAnonymousObjectType(t)) {
                hasDisjointDomainType = true;
            }
        }
        // If the target is a union type or if we are intersecting with types belonging to one of the
        // disjoint domains, we may end up producing a constraint that hasn't been examined before.
        if (constraints && (targetIsUnion || hasDisjointDomainType)) {
            if (hasDisjointDomainType) {
                // We add any types belong to one of the disjoint domains because they might cause the final
                // intersection operation to reduce the union constraints.
                for (const t of types) {
                    if (t.flags & ts.TypeFlags.DisjointDomains || isEmptyAnonymousObjectType(t)) {
                        constraints = ts.append(constraints, t);
                    }
                }
            }
            // The source types were normalized; ensure the result is normalized too.
            return getNormalizedType(getIntersectionType(constraints), /*writing*/ false);
        }
        return undefined;
    }

    function getBaseConstraintOfType(type: ts.Type): ts.Type | undefined {
        if (type.flags & (ts.TypeFlags.InstantiableNonPrimitive | ts.TypeFlags.UnionOrIntersection | ts.TypeFlags.TemplateLiteral | ts.TypeFlags.StringMapping)) {
            const constraint = getResolvedBaseConstraint(type as ts.InstantiableType | ts.UnionOrIntersectionType);
            return constraint !== noConstraintType && constraint !== circularConstraintType ? constraint : undefined;
        }
        return type.flags & ts.TypeFlags.Index ? keyofConstraintType : undefined;
    }

    /**
     * This is similar to `getBaseConstraintOfType` except it returns the input type if there's no base constraint, instead of `undefined`
     * It also doesn't map indexes to `string`, as where this is used this would be unneeded (and likely undesirable)
     */
    function getBaseConstraintOrType(type: ts.Type) {
        return getBaseConstraintOfType(type) || type;
    }

    function hasNonCircularBaseConstraint(type: ts.InstantiableType): boolean {
        return getResolvedBaseConstraint(type) !== circularConstraintType;
    }

    /**
     * Return the resolved base constraint of a type variable. The noConstraintType singleton is returned if the
     * type variable has no constraint, and the circularConstraintType singleton is returned if the constraint
     * circularly references the type variable.
     */
    function getResolvedBaseConstraint(type: ts.InstantiableType | ts.UnionOrIntersectionType): ts.Type {
        if (type.resolvedBaseConstraint) {
            return type.resolvedBaseConstraint;
        }
        const stack: object[] = [];
        return type.resolvedBaseConstraint = getTypeWithThisArgument(getImmediateBaseConstraint(type), type);

        function getImmediateBaseConstraint(t: ts.Type): ts.Type {
            if (!t.immediateBaseConstraint) {
                if (!pushTypeResolution(t, TypeSystemPropertyName.ImmediateBaseConstraint)) {
                    return circularConstraintType;
                }
                let result;
                // We always explore at least 10 levels of nested constraints. Thereafter, we continue to explore
                // up to 50 levels of nested constraints provided there are no "deeply nested" types on the stack
                // (i.e. no types for which five instantiations have been recorded on the stack). If we reach 50
                // levels of nesting, we are presumably exploring a repeating pattern with a long cycle that hasn't
                // yet triggered the deeply nested limiter. We have no test cases that actually get to 50 levels of
                // nesting, so it is effectively just a safety stop.
                const identity = getRecursionIdentity(t);
                if (stack.length < 10 || stack.length < 50 && !ts.contains(stack, identity)) {
                    stack.push(identity);
                    result = computeBaseConstraint(getSimplifiedType(t, /*writing*/ false));
                    stack.pop();
                }
                if (!popTypeResolution()) {
                    if (t.flags & ts.TypeFlags.TypeParameter) {
                        const errorNode = getConstraintDeclaration(t as ts.TypeParameter);
                        if (errorNode) {
                            const diagnostic = error(errorNode, ts.Diagnostics.Type_parameter_0_has_a_circular_constraint, typeToString(t));
                            if (currentNode && !ts.isNodeDescendantOf(errorNode, currentNode) && !ts.isNodeDescendantOf(currentNode, errorNode)) {
                                ts.addRelatedInfo(diagnostic, ts.createDiagnosticForNode(currentNode, ts.Diagnostics.Circularity_originates_in_type_at_this_location));
                            }
                        }
                    }
                    result = circularConstraintType;
                }
                t.immediateBaseConstraint = result || noConstraintType;
            }
            return t.immediateBaseConstraint;
        }

        function getBaseConstraint(t: ts.Type): ts.Type | undefined {
            const c = getImmediateBaseConstraint(t);
            return c !== noConstraintType && c !== circularConstraintType ? c : undefined;
        }

        function computeBaseConstraint(t: ts.Type): ts.Type | undefined {
            if (t.flags & ts.TypeFlags.TypeParameter) {
                const constraint = getConstraintFromTypeParameter(t as ts.TypeParameter);
                return (t as ts.TypeParameter).isThisType || !constraint ?
                    constraint :
                    getBaseConstraint(constraint);
            }
            if (t.flags & ts.TypeFlags.UnionOrIntersection) {
                const types = (t as ts.UnionOrIntersectionType).types;
                const baseTypes: ts.Type[] = [];
                let different = false;
                for (const type of types) {
                    const baseType = getBaseConstraint(type);
                    if (baseType) {
                        if (baseType !== type) {
                            different = true;
                        }
                        baseTypes.push(baseType);
                    }
                    else {
                        different = true;
                    }
                }
                if (!different) {
                    return t;
                }
                return t.flags & ts.TypeFlags.Union && baseTypes.length === types.length ? getUnionType(baseTypes) :
                    t.flags & ts.TypeFlags.Intersection && baseTypes.length ? getIntersectionType(baseTypes) :
                    undefined;
            }
            if (t.flags & ts.TypeFlags.Index) {
                return keyofConstraintType;
            }
            if (t.flags & ts.TypeFlags.TemplateLiteral) {
                const types = (t as ts.TemplateLiteralType).types;
                const constraints = ts.mapDefined(types, getBaseConstraint);
                return constraints.length === types.length ? getTemplateLiteralType((t as ts.TemplateLiteralType).texts, constraints) : stringType;
            }
            if (t.flags & ts.TypeFlags.StringMapping) {
                const constraint = getBaseConstraint((t as ts.StringMappingType).type);
                return constraint && constraint !== (t as ts.StringMappingType).type ? getStringMappingType((t as ts.StringMappingType).symbol, constraint) : stringType;
            }
            if (t.flags & ts.TypeFlags.IndexedAccess) {
                if (isMappedTypeGenericIndexedAccess(t)) {
                    // For indexed access types of the form { [P in K]: E }[X], where K is non-generic and X is generic,
                    // we substitute an instantiation of E where P is replaced with X.
                    return getBaseConstraint(substituteIndexedMappedType((t as ts.IndexedAccessType).objectType as ts.MappedType, (t as ts.IndexedAccessType).indexType));
                }
                const baseObjectType = getBaseConstraint((t as ts.IndexedAccessType).objectType);
                const baseIndexType = getBaseConstraint((t as ts.IndexedAccessType).indexType);
                const baseIndexedAccess = baseObjectType && baseIndexType && getIndexedAccessTypeOrUndefined(baseObjectType, baseIndexType, (t as ts.IndexedAccessType).accessFlags);
                return baseIndexedAccess && getBaseConstraint(baseIndexedAccess);
            }
            if (t.flags & ts.TypeFlags.Conditional) {
                const constraint = getConstraintFromConditionalType(t as ts.ConditionalType);
                return constraint && getBaseConstraint(constraint);
            }
            if (t.flags & ts.TypeFlags.Substitution) {
                return getBaseConstraint(getSubstitutionIntersection(t as ts.SubstitutionType));
            }
            return t;
        }
    }

    function getApparentTypeOfIntersectionType(type: ts.IntersectionType) {
        return type.resolvedApparentType || (type.resolvedApparentType = getTypeWithThisArgument(type, type, /*apparentType*/ true));
    }

    function getResolvedTypeParameterDefault(typeParameter: ts.TypeParameter): ts.Type | undefined {
        if (!typeParameter.default) {
            if (typeParameter.target) {
                const targetDefault = getResolvedTypeParameterDefault(typeParameter.target);
                typeParameter.default = targetDefault ? instantiateType(targetDefault, typeParameter.mapper) : noConstraintType;
            }
            else {
                // To block recursion, set the initial value to the resolvingDefaultType.
                typeParameter.default = resolvingDefaultType;
                const defaultDeclaration = typeParameter.symbol && ts.forEach(typeParameter.symbol.declarations, decl => ts.isTypeParameterDeclaration(decl) && decl.default);
                const defaultType = defaultDeclaration ? getTypeFromTypeNode(defaultDeclaration) : noConstraintType;
                if (typeParameter.default === resolvingDefaultType) {
                    // If we have not been called recursively, set the correct default type.
                    typeParameter.default = defaultType;
                }
            }
        }
        else if (typeParameter.default === resolvingDefaultType) {
            // If we are called recursively for this type parameter, mark the default as circular.
            typeParameter.default = circularConstraintType;
        }
        return typeParameter.default;
    }

    /**
     * Gets the default type for a type parameter.
     *
     * If the type parameter is the result of an instantiation, this gets the instantiated
     * default type of its target. If the type parameter has no default type or the default is
     * circular, `undefined` is returned.
     */
    function getDefaultFromTypeParameter(typeParameter: ts.TypeParameter): ts.Type | undefined {
        const defaultType = getResolvedTypeParameterDefault(typeParameter);
        return defaultType !== noConstraintType && defaultType !== circularConstraintType ? defaultType : undefined;
    }

    function hasNonCircularTypeParameterDefault(typeParameter: ts.TypeParameter) {
        return getResolvedTypeParameterDefault(typeParameter) !== circularConstraintType;
    }

    /**
     * Indicates whether the declaration of a typeParameter has a default type.
     */
    function hasTypeParameterDefault(typeParameter: ts.TypeParameter): boolean {
        return !!(typeParameter.symbol && ts.forEach(typeParameter.symbol.declarations, decl => ts.isTypeParameterDeclaration(decl) && decl.default));
    }

    function getApparentTypeOfMappedType(type: ts.MappedType) {
        return type.resolvedApparentType || (type.resolvedApparentType = getResolvedApparentTypeOfMappedType(type));
    }

    function getResolvedApparentTypeOfMappedType(type: ts.MappedType) {
        const typeVariable = getHomomorphicTypeVariable(type);
        if (typeVariable && !type.declaration.nameType) {
            const constraint = getConstraintOfTypeParameter(typeVariable);
            if (constraint && isArrayOrTupleType(constraint)) {
                return instantiateType(type, prependTypeMapping(typeVariable, constraint, type.mapper));
            }
        }
        return type;
    }

    function isMappedTypeGenericIndexedAccess(type: ts.Type) {
        let objectType;
        return !!(type.flags & ts.TypeFlags.IndexedAccess && ts.getObjectFlags(objectType = (type as ts.IndexedAccessType).objectType) & ts.ObjectFlags.Mapped &&
            !isGenericMappedType(objectType) && isGenericIndexType((type as ts.IndexedAccessType).indexType) &&
            !(getMappedTypeModifiers(objectType as ts.MappedType) & MappedTypeModifiers.ExcludeOptional) && !(objectType as ts.MappedType).declaration.nameType);
    }

    /**
     * For a type parameter, return the base constraint of the type parameter. For the string, number,
     * boolean, and symbol primitive types, return the corresponding object types. Otherwise return the
     * type itself.
     */
    function getApparentType(type: ts.Type): ts.Type {
        const t = !(type.flags & ts.TypeFlags.Instantiable) ? type : getBaseConstraintOfType(type) || unknownType;
        return ts.getObjectFlags(t) & ts.ObjectFlags.Mapped ? getApparentTypeOfMappedType(t as ts.MappedType) :
            t.flags & ts.TypeFlags.Intersection ? getApparentTypeOfIntersectionType(t as ts.IntersectionType) :
            t.flags & ts.TypeFlags.StringLike ? globalStringType :
            t.flags & ts.TypeFlags.NumberLike ? globalNumberType :
            t.flags & ts.TypeFlags.BigIntLike ? getGlobalBigIntType() :
            t.flags & ts.TypeFlags.BooleanLike ? globalBooleanType :
            t.flags & ts.TypeFlags.ESSymbolLike ? getGlobalESSymbolType() :
            t.flags & ts.TypeFlags.NonPrimitive ? emptyObjectType :
            t.flags & ts.TypeFlags.Index ? keyofConstraintType :
            t.flags & ts.TypeFlags.Unknown && !strictNullChecks ? emptyObjectType :
            t;
    }

    function getReducedApparentType(type: ts.Type): ts.Type {
        // Since getApparentType may return a non-reduced union or intersection type, we need to perform
        // type reduction both before and after obtaining the apparent type. For example, given a type parameter
        // 'T extends A | B', the type 'T & X' becomes 'A & X | B & X' after obtaining the apparent type, and
        // that type may need further reduction to remove empty intersections.
        return getReducedType(getApparentType(getReducedType(type)));
    }

    function createUnionOrIntersectionProperty(containingType: ts.UnionOrIntersectionType, name: ts.__String, skipObjectFunctionPropertyAugment?: boolean): ts.Symbol | undefined {
        let singleProp: ts.Symbol | undefined;
        let propSet: ts.ESMap<ts.SymbolId, ts.Symbol> | undefined;
        let indexTypes: ts.Type[] | undefined;
        const isUnion = containingType.flags & ts.TypeFlags.Union;
        // Flags we want to propagate to the result if they exist in all source symbols
        let optionalFlag: ts.SymbolFlags | undefined;
        let syntheticFlag = ts.CheckFlags.SyntheticMethod;
        let checkFlags = isUnion ? 0 : ts.CheckFlags.Readonly;
        let mergedInstantiations = false;
        for (const current of containingType.types) {
            const type = getApparentType(current);
            if (!(isErrorType(type) || type.flags & ts.TypeFlags.Never)) {
                const prop = getPropertyOfType(type, name, skipObjectFunctionPropertyAugment);
                const modifiers = prop ? ts.getDeclarationModifierFlagsFromSymbol(prop) : 0;
                if (prop) {
                    if (prop.flags & ts.SymbolFlags.ClassMember) {
                        optionalFlag ??= isUnion ? ts.SymbolFlags.None : ts.SymbolFlags.Optional;
                        if (isUnion) {
                            optionalFlag |= (prop.flags & ts.SymbolFlags.Optional);
                        }
                        else {
                            optionalFlag &= prop.flags;
                        }
                    }
                    if (!singleProp) {
                        singleProp = prop;
                    }
                    else if (prop !== singleProp) {
                        const isInstantiation = (getTargetSymbol(prop) || prop) === (getTargetSymbol(singleProp) || singleProp);
                        // If the symbols are instances of one another with identical types - consider the symbols
                        // equivalent and just use the first one, which thus allows us to avoid eliding private
                        // members when intersecting a (this-)instantiations of a class with its raw base or another instance
                        if (isInstantiation && compareProperties(singleProp, prop, (a, b) => a === b ? ts.Ternary.True : ts.Ternary.False) === ts.Ternary.True) {
                            // If we merged instantiations of a generic type, we replicate the symbol parent resetting behavior we used
                            // to do when we recorded multiple distinct symbols so that we still get, eg, `Array<T>.length` printed
                            // back and not `Array<string>.length` when we're looking at a `.length` access on a `string[] | number[]`
                            mergedInstantiations = !!singleProp.parent && !!ts.length(getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(singleProp.parent));
                        }
                        else {
                            if (!propSet) {
                                propSet = new ts.Map<ts.SymbolId, ts.Symbol>();
                                propSet.set(getSymbolId(singleProp), singleProp);
                            }
                            const id = getSymbolId(prop);
                            if (!propSet.has(id)) {
                                propSet.set(id, prop);
                            }
                        }
                    }
                    if (isUnion && isReadonlySymbol(prop)) {
                        checkFlags |= ts.CheckFlags.Readonly;
                    }
                    else if (!isUnion && !isReadonlySymbol(prop)) {
                        checkFlags &= ~ts.CheckFlags.Readonly;
                    }
                    checkFlags |= (!(modifiers & ts.ModifierFlags.NonPublicAccessibilityModifier) ? ts.CheckFlags.ContainsPublic : 0) |
                        (modifiers & ts.ModifierFlags.Protected ? ts.CheckFlags.ContainsProtected : 0) |
                        (modifiers & ts.ModifierFlags.Private ? ts.CheckFlags.ContainsPrivate : 0) |
                        (modifiers & ts.ModifierFlags.Static ? ts.CheckFlags.ContainsStatic : 0);
                    if (!isPrototypeProperty(prop)) {
                        syntheticFlag = ts.CheckFlags.SyntheticProperty;
                    }
                }
                else if (isUnion) {
                    const indexInfo = !isLateBoundName(name) && getApplicableIndexInfoForName(type, name);
                    if (indexInfo) {
                        checkFlags |= ts.CheckFlags.WritePartial | (indexInfo.isReadonly ? ts.CheckFlags.Readonly : 0);
                        indexTypes = ts.append(indexTypes, isTupleType(type) ? getRestTypeOfTupleType(type) || undefinedType : indexInfo.type);
                    }
                    else if (isObjectLiteralType(type) && !(ts.getObjectFlags(type) & ts.ObjectFlags.ContainsSpread)) {
                        checkFlags |= ts.CheckFlags.WritePartial;
                        indexTypes = ts.append(indexTypes, undefinedType);
                    }
                    else {
                        checkFlags |= ts.CheckFlags.ReadPartial;
                    }
                }
            }
        }
        if (!singleProp ||
            isUnion &&
            (propSet || checkFlags & ts.CheckFlags.Partial) &&
            checkFlags & (ts.CheckFlags.ContainsPrivate | ts.CheckFlags.ContainsProtected) &&
            !(propSet && getCommonDeclarationsOfSymbols(ts.arrayFrom(propSet.values())))
        ) {
            // No property was found, or, in a union, a property has a private or protected declaration in one
            // constituent, but is missing or has a different declaration in another constituent.
            return undefined;
        }
        if (!propSet && !(checkFlags & ts.CheckFlags.ReadPartial) && !indexTypes) {
            if (mergedInstantiations) {
                // No symbol from a union/intersection should have a `.parent` set (since unions/intersections don't act as symbol parents)
                // Unless that parent is "reconstituted" from the "first value declaration" on the symbol (which is likely different than its instantiated parent!)
                // They also have a `.containingType` set, which affects some services endpoints behavior, like `getRootSymbol`
                const clone = createSymbolWithType(singleProp, (singleProp as ts.TransientSymbol).type);
                clone.parent = singleProp.valueDeclaration?.symbol?.parent;
                clone.containingType = containingType;
                clone.mapper = (singleProp as ts.TransientSymbol).mapper;
                return clone;
            }
            else {
                return singleProp;
            }
        }
        const props = propSet ? ts.arrayFrom(propSet.values()) : [singleProp];
        let declarations: ts.Declaration[] | undefined;
        let firstType: ts.Type | undefined;
        let nameType: ts.Type | undefined;
        const propTypes: ts.Type[] = [];
        let writeTypes: ts.Type[] | undefined;
        let firstValueDeclaration: ts.Declaration | undefined;
        let hasNonUniformValueDeclaration = false;
        for (const prop of props) {
            if (!firstValueDeclaration) {
                firstValueDeclaration = prop.valueDeclaration;
            }
            else if (prop.valueDeclaration && prop.valueDeclaration !== firstValueDeclaration) {
                hasNonUniformValueDeclaration = true;
            }
            declarations = ts.addRange(declarations, prop.declarations);
            const type = getTypeOfSymbol(prop);
            if (!firstType) {
                firstType = type;
                nameType = getSymbolLinks(prop).nameType;
            }
            const writeType = getWriteTypeOfSymbol(prop);
            if (writeTypes || writeType !== type) {
                writeTypes = ts.append(!writeTypes ? propTypes.slice() : writeTypes, writeType);
            }
            else if (type !== firstType) {
                checkFlags |= ts.CheckFlags.HasNonUniformType;
            }
            if (isLiteralType(type) || isPatternLiteralType(type) || type === uniqueLiteralType) {
                checkFlags |= ts.CheckFlags.HasLiteralType;
            }
            if (type.flags & ts.TypeFlags.Never && type !== uniqueLiteralType) {
                checkFlags |= ts.CheckFlags.HasNeverType;
            }
            propTypes.push(type);
        }
        ts.addRange(propTypes, indexTypes);
        const result = createSymbol(ts.SymbolFlags.Property | (optionalFlag ?? 0), name, syntheticFlag | checkFlags);
        result.containingType = containingType;
        if (!hasNonUniformValueDeclaration && firstValueDeclaration) {
            result.valueDeclaration = firstValueDeclaration;

            // Inherit information about parent type.
            if (firstValueDeclaration.symbol.parent) {
                result.parent = firstValueDeclaration.symbol.parent;
            }
        }

        result.declarations = declarations;
        result.nameType = nameType;
        if (propTypes.length > 2) {
            // When `propTypes` has the potential to explode in size when normalized, defer normalization until absolutely needed
            result.checkFlags |= ts.CheckFlags.DeferredType;
            result.deferralParent = containingType;
            result.deferralConstituents = propTypes;
            result.deferralWriteConstituents = writeTypes;
        }
        else {
            result.type = isUnion ? getUnionType(propTypes) : getIntersectionType(propTypes);
            if (writeTypes) {
                result.writeType = isUnion ? getUnionType(writeTypes) : getIntersectionType(writeTypes);
            }
        }
        return result;
    }

    // Return the symbol for a given property in a union or intersection type, or undefined if the property
    // does not exist in any constituent type. Note that the returned property may only be present in some
    // constituents, in which case the isPartial flag is set when the containing type is union type. We need
    // these partial properties when identifying discriminant properties, but otherwise they are filtered out
    // and do not appear to be present in the union type.
    function getUnionOrIntersectionProperty(type: ts.UnionOrIntersectionType, name: ts.__String, skipObjectFunctionPropertyAugment?: boolean): ts.Symbol | undefined {
        let property = type.propertyCacheWithoutObjectFunctionPropertyAugment?.get(name) ||
            !skipObjectFunctionPropertyAugment ? type.propertyCache?.get(name) : undefined;
        if (!property) {
            property = createUnionOrIntersectionProperty(type, name, skipObjectFunctionPropertyAugment);
            if (property) {
                const properties = skipObjectFunctionPropertyAugment ?
                    type.propertyCacheWithoutObjectFunctionPropertyAugment ||= ts.createSymbolTable() :
                    type.propertyCache ||= ts.createSymbolTable();
                properties.set(name, property);
            }
        }
        return property;
    }

    function getCommonDeclarationsOfSymbols(symbols: readonly ts.Symbol[]) {
        let commonDeclarations: ts.Set<ts.Node> | undefined;
        for (const symbol of symbols) {
            if (!symbol.declarations) {
                return undefined;
            }
            if (!commonDeclarations) {
                commonDeclarations = new ts.Set(symbol.declarations);
                continue;
            }
            commonDeclarations.forEach(declaration => {
                if (!ts.contains(symbol.declarations, declaration)) {
                    commonDeclarations!.delete(declaration);
                }
            });
            if (commonDeclarations.size === 0) {
                return undefined;
            }
        }
        return commonDeclarations;
    }

    function getPropertyOfUnionOrIntersectionType(type: ts.UnionOrIntersectionType, name: ts.__String, skipObjectFunctionPropertyAugment?: boolean): ts.Symbol | undefined {
        const property = getUnionOrIntersectionProperty(type, name, skipObjectFunctionPropertyAugment);
        // We need to filter out partial properties in union types
        return property && !(ts.getCheckFlags(property) & ts.CheckFlags.ReadPartial) ? property : undefined;
    }

    /**
     * Return the reduced form of the given type. For a union type, it is a union of the normalized constituent types.
     * For an intersection of types containing one or more mututally exclusive discriminant properties, it is 'never'.
     * For all other types, it is simply the type itself. Discriminant properties are considered mutually exclusive when
     * no constituent property has type 'never', but the intersection of the constituent property types is 'never'.
     */
    function getReducedType(type: ts.Type): ts.Type {
        if (type.flags & ts.TypeFlags.Union && (type as ts.UnionType).objectFlags & ts.ObjectFlags.ContainsIntersections) {
            return (type as ts.UnionType).resolvedReducedType || ((type as ts.UnionType).resolvedReducedType = getReducedUnionType(type as ts.UnionType));
        }
        else if (type.flags & ts.TypeFlags.Intersection) {
            if (!((type as ts.IntersectionType).objectFlags & ts.ObjectFlags.IsNeverIntersectionComputed)) {
                (type as ts.IntersectionType).objectFlags |= ts.ObjectFlags.IsNeverIntersectionComputed |
                    (ts.some(getPropertiesOfUnionOrIntersectionType(type as ts.IntersectionType), isNeverReducedProperty) ? ts.ObjectFlags.IsNeverIntersection : 0);
            }
            return (type as ts.IntersectionType).objectFlags & ts.ObjectFlags.IsNeverIntersection ? neverType : type;
        }
        return type;
    }

    function getReducedUnionType(unionType: ts.UnionType) {
        const reducedTypes = ts.sameMap(unionType.types, getReducedType);
        if (reducedTypes === unionType.types) {
            return unionType;
        }
        const reduced = getUnionType(reducedTypes);
        if (reduced.flags & ts.TypeFlags.Union) {
            (reduced as ts.UnionType).resolvedReducedType = reduced;
        }
        return reduced;
    }

    function isNeverReducedProperty(prop: ts.Symbol) {
        return isDiscriminantWithNeverType(prop) || isConflictingPrivateProperty(prop);
    }

    function isDiscriminantWithNeverType(prop: ts.Symbol) {
        // Return true for a synthetic non-optional property with non-uniform types, where at least one is
        // a literal type and none is never, that reduces to never.
        return !(prop.flags & ts.SymbolFlags.Optional) &&
            (ts.getCheckFlags(prop) & (ts.CheckFlags.Discriminant | ts.CheckFlags.HasNeverType)) === ts.CheckFlags.Discriminant &&
            !!(getTypeOfSymbol(prop).flags & ts.TypeFlags.Never);
    }

    function isConflictingPrivateProperty(prop: ts.Symbol) {
        // Return true for a synthetic property with multiple declarations, at least one of which is private.
        return !prop.valueDeclaration && !!(ts.getCheckFlags(prop) & ts.CheckFlags.ContainsPrivate);
    }

    function elaborateNeverIntersection(errorInfo: ts.DiagnosticMessageChain | undefined, type: ts.Type) {
        if (type.flags & ts.TypeFlags.Intersection && ts.getObjectFlags(type) & ts.ObjectFlags.IsNeverIntersection) {
            const neverProp = ts.find(getPropertiesOfUnionOrIntersectionType(type as ts.IntersectionType), isDiscriminantWithNeverType);
            if (neverProp) {
                return ts.chainDiagnosticMessages(errorInfo, ts.Diagnostics.The_intersection_0_was_reduced_to_never_because_property_1_has_conflicting_types_in_some_constituents,
                    typeToString(type, /*enclosingDeclaration*/ undefined, ts.TypeFormatFlags.NoTypeReduction), symbolToString(neverProp));
            }
            const privateProp = ts.find(getPropertiesOfUnionOrIntersectionType(type as ts.IntersectionType), isConflictingPrivateProperty);
            if (privateProp) {
                return ts.chainDiagnosticMessages(errorInfo, ts.Diagnostics.The_intersection_0_was_reduced_to_never_because_property_1_exists_in_multiple_constituents_and_is_private_in_some,
                    typeToString(type, /*enclosingDeclaration*/ undefined, ts.TypeFormatFlags.NoTypeReduction), symbolToString(privateProp));
            }
        }
        return errorInfo;
    }

    /**
     * Return the symbol for the property with the given name in the given type. Creates synthetic union properties when
     * necessary, maps primitive types and type parameters are to their apparent types, and augments with properties from
     * Object and Function as appropriate.
     *
     * @param type a type to look up property from
     * @param name a name of property to look up in a given type
     */
    function getPropertyOfType(type: ts.Type, name: ts.__String, skipObjectFunctionPropertyAugment?: boolean, includeTypeOnlyMembers?: boolean): ts.Symbol | undefined {
        type = getReducedApparentType(type);
        if (type.flags & ts.TypeFlags.Object) {
            const resolved = resolveStructuredTypeMembers(type as ts.ObjectType);
            const symbol = resolved.members.get(name);
            if (symbol && symbolIsValue(symbol, includeTypeOnlyMembers)) {
                return symbol;
            }
            if (skipObjectFunctionPropertyAugment) return undefined;
            const functionType = resolved === anyFunctionType ? globalFunctionType :
                resolved.callSignatures.length ? globalCallableFunctionType :
                resolved.constructSignatures.length ? globalNewableFunctionType :
                undefined;
            if (functionType) {
                const symbol = getPropertyOfObjectType(functionType, name);
                if (symbol) {
                    return symbol;
                }
            }
            return getPropertyOfObjectType(globalObjectType, name);
        }
        if (type.flags & ts.TypeFlags.UnionOrIntersection) {
            return getPropertyOfUnionOrIntersectionType(type as ts.UnionOrIntersectionType, name, skipObjectFunctionPropertyAugment);
        }
        return undefined;
    }

    function getSignaturesOfStructuredType(type: ts.Type, kind: ts.SignatureKind): readonly ts.Signature[] {
        if (type.flags & ts.TypeFlags.StructuredType) {
            const resolved = resolveStructuredTypeMembers(type as ts.ObjectType);
            return kind === ts.SignatureKind.Call ? resolved.callSignatures : resolved.constructSignatures;
        }
        return ts.emptyArray;
    }

    /**
     * Return the signatures of the given kind in the given type. Creates synthetic union signatures when necessary and
     * maps primitive types and type parameters are to their apparent types.
     */
    function getSignaturesOfType(type: ts.Type, kind: ts.SignatureKind): readonly ts.Signature[] {
        return getSignaturesOfStructuredType(getReducedApparentType(type), kind);
    }

    function findIndexInfo(indexInfos: readonly ts.IndexInfo[], keyType: ts.Type) {
        return ts.find(indexInfos, info => info.keyType === keyType);
    }

    function findApplicableIndexInfo(indexInfos: readonly ts.IndexInfo[], keyType: ts.Type) {
        // Index signatures for type 'string' are considered only when no other index signatures apply.
        let stringIndexInfo: ts.IndexInfo | undefined;
        let applicableInfo: ts.IndexInfo | undefined;
        let applicableInfos: ts.IndexInfo[] | undefined;
        for (const info of indexInfos) {
            if (info.keyType === stringType) {
                stringIndexInfo = info;
            }
            else if (isApplicableIndexType(keyType, info.keyType)) {
                if (!applicableInfo) {
                    applicableInfo = info;
                }
                else {
                    (applicableInfos || (applicableInfos = [applicableInfo])).push(info);
                }
            }
        }
        // When more than one index signature is applicable we create a synthetic IndexInfo. Instead of computing
        // the intersected key type, we just use unknownType for the key type as nothing actually depends on the
        // keyType property of the returned IndexInfo.
        return applicableInfos ? createIndexInfo(unknownType, getIntersectionType(ts.map(applicableInfos, info => info.type)),
                ts.reduceLeft(applicableInfos, (isReadonly, info) => isReadonly && info.isReadonly, /*initial*/ true)) :
            applicableInfo ? applicableInfo :
            stringIndexInfo && isApplicableIndexType(keyType, stringType) ? stringIndexInfo :
            undefined;
    }

    function isApplicableIndexType(source: ts.Type, target: ts.Type): boolean {
        // A 'string' index signature applies to types assignable to 'string' or 'number', and a 'number' index
        // signature applies to types assignable to 'number', `${number}` and numeric string literal types.
        return isTypeAssignableTo(source, target) ||
            target === stringType && isTypeAssignableTo(source, numberType) ||
            target === numberType && (source === numericStringType || !!(source.flags & ts.TypeFlags.StringLiteral) && ts.isNumericLiteralName((source as ts.StringLiteralType).value));
    }

    function getIndexInfosOfStructuredType(type: ts.Type): readonly ts.IndexInfo[] {
        if (type.flags & ts.TypeFlags.StructuredType) {
            const resolved = resolveStructuredTypeMembers(type as ts.ObjectType);
            return resolved.indexInfos;
        }
        return ts.emptyArray;
    }

    function getIndexInfosOfType(type: ts.Type): readonly ts.IndexInfo[] {
        return getIndexInfosOfStructuredType(getReducedApparentType(type));
    }

    // Return the indexing info of the given kind in the given type. Creates synthetic union index types when necessary and
    // maps primitive types and type parameters are to their apparent types.
    function getIndexInfoOfType(type: ts.Type, keyType: ts.Type): ts.IndexInfo | undefined {
        return findIndexInfo(getIndexInfosOfType(type), keyType);
    }

    // Return the index type of the given kind in the given type. Creates synthetic union index types when necessary and
    // maps primitive types and type parameters are to their apparent types.
    function getIndexTypeOfType(type: ts.Type, keyType: ts.Type): ts.Type | undefined {
        return getIndexInfoOfType(type, keyType)?.type;
    }

    function getApplicableIndexInfos(type: ts.Type, keyType: ts.Type): ts.IndexInfo[] {
        return getIndexInfosOfType(type).filter(info => isApplicableIndexType(keyType, info.keyType));
    }

    function getApplicableIndexInfo(type: ts.Type, keyType: ts.Type): ts.IndexInfo | undefined {
        return findApplicableIndexInfo(getIndexInfosOfType(type), keyType);
    }

    function getApplicableIndexInfoForName(type: ts.Type, name: ts.__String): ts.IndexInfo | undefined {
        return getApplicableIndexInfo(type, isLateBoundName(name) ? esSymbolType : getStringLiteralType(ts.unescapeLeadingUnderscores(name)));
    }

    // Return list of type parameters with duplicates removed (duplicate identifier errors are generated in the actual
    // type checking functions).
    function getTypeParametersFromDeclaration(declaration: ts.DeclarationWithTypeParameters): readonly ts.TypeParameter[] | undefined {
        let result: ts.TypeParameter[] | undefined;
        for (const node of ts.getEffectiveTypeParameterDeclarations(declaration)) {
            result = ts.appendIfUnique(result, getDeclaredTypeOfTypeParameter(node.symbol));
        }
        return result?.length ? result
            : ts.isFunctionDeclaration(declaration) ? getSignatureOfTypeTag(declaration)?.typeParameters
            : undefined;
    }

    function symbolsToArray(symbols: ts.SymbolTable): ts.Symbol[] {
        const result: ts.Symbol[] = [];
        symbols.forEach((symbol, id) => {
            if (!isReservedMemberName(id)) {
                result.push(symbol);
            }
        });
        return result;
    }

    function isJSDocOptionalParameter(node: ts.ParameterDeclaration) {
        return ts.isInJSFile(node) && (
            // node.type should only be a JSDocOptionalType when node is a parameter of a JSDocFunctionType
            node.type && node.type.kind === ts.SyntaxKind.JSDocOptionalType
            || ts.getJSDocParameterTags(node).some(({ isBracketed, typeExpression }) =>
                isBracketed || !!typeExpression && typeExpression.type.kind === ts.SyntaxKind.JSDocOptionalType));
    }

    function tryFindAmbientModule(moduleName: string, withAugmentations: boolean) {
        if (ts.isExternalModuleNameRelative(moduleName)) {
            return undefined;
        }
        const symbol = getSymbol(globals, '"' + moduleName + '"' as ts.__String, ts.SymbolFlags.ValueModule);
        // merged symbol is module declaration symbol combined with all augmentations
        return symbol && withAugmentations ? getMergedSymbol(symbol) : symbol;
    }

    function isOptionalParameter(node: ts.ParameterDeclaration | ts.JSDocParameterTag | ts.JSDocPropertyTag) {
        if (ts.hasQuestionToken(node) || ts.isOptionalJSDocPropertyLikeTag(node) || isJSDocOptionalParameter(node)) {
            return true;
        }

        if (node.initializer) {
            const signature = getSignatureFromDeclaration(node.parent);
            const parameterIndex = node.parent.parameters.indexOf(node);
            ts.Debug.assert(parameterIndex >= 0);
            // Only consider syntactic or instantiated parameters as optional, not `void` parameters as this function is used
            // in grammar checks and checking for `void` too early results in parameter types widening too early
            // and causes some noImplicitAny errors to be lost.
            return parameterIndex >= getMinArgumentCount(signature, MinArgumentCountFlags.StrongArityForUntypedJS | MinArgumentCountFlags.VoidIsNonOptional);
        }
        const iife = ts.getImmediatelyInvokedFunctionExpression(node.parent);
        if (iife) {
            return !node.type &&
                !node.dotDotDotToken &&
                node.parent.parameters.indexOf(node) >= iife.arguments.length;
        }

        return false;
    }

    function isOptionalPropertyDeclaration(node: ts.Declaration) {
        return ts.isPropertyDeclaration(node) && !ts.hasAccessorModifier(node) && node.questionToken;
    }

    function createTypePredicate(kind: ts.TypePredicateKind, parameterName: string | undefined, parameterIndex: number | undefined, type: ts.Type | undefined): ts.TypePredicate {
        return { kind, parameterName, parameterIndex, type } as ts.TypePredicate;
    }

    /**
     * Gets the minimum number of type arguments needed to satisfy all non-optional type
     * parameters.
     */
    function getMinTypeArgumentCount(typeParameters: readonly ts.TypeParameter[] | undefined): number {
        let minTypeArgumentCount = 0;
        if (typeParameters) {
            for (let i = 0; i < typeParameters.length; i++) {
                if (!hasTypeParameterDefault(typeParameters[i])) {
                    minTypeArgumentCount = i + 1;
                }
            }
        }
        return minTypeArgumentCount;
    }

    /**
     * Fill in default types for unsupplied type arguments. If `typeArguments` is undefined
     * when a default type is supplied, a new array will be created and returned.
     *
     * @param typeArguments The supplied type arguments.
     * @param typeParameters The requested type parameters.
     * @param minTypeArgumentCount The minimum number of required type arguments.
     */
    function fillMissingTypeArguments(typeArguments: readonly ts.Type[], typeParameters: readonly ts.TypeParameter[] | undefined, minTypeArgumentCount: number, isJavaScriptImplicitAny: boolean): ts.Type[];
    function fillMissingTypeArguments(typeArguments: readonly ts.Type[] | undefined, typeParameters: readonly ts.TypeParameter[] | undefined, minTypeArgumentCount: number, isJavaScriptImplicitAny: boolean): ts.Type[] | undefined;
    function fillMissingTypeArguments(typeArguments: readonly ts.Type[] | undefined, typeParameters: readonly ts.TypeParameter[] | undefined, minTypeArgumentCount: number, isJavaScriptImplicitAny: boolean) {
        const numTypeParameters = ts.length(typeParameters);
        if (!numTypeParameters) {
            return [];
        }
        const numTypeArguments = ts.length(typeArguments);
        if (isJavaScriptImplicitAny || (numTypeArguments >= minTypeArgumentCount && numTypeArguments <= numTypeParameters)) {
            const result = typeArguments ? typeArguments.slice() : [];
            // Map invalid forward references in default types to the error type
            for (let i = numTypeArguments; i < numTypeParameters; i++) {
                result[i] = errorType;
            }
            const baseDefaultType = getDefaultTypeArgumentType(isJavaScriptImplicitAny);
            for (let i = numTypeArguments; i < numTypeParameters; i++) {
                let defaultType = getDefaultFromTypeParameter(typeParameters![i]);
                if (isJavaScriptImplicitAny && defaultType && (isTypeIdenticalTo(defaultType, unknownType) || isTypeIdenticalTo(defaultType, emptyObjectType))) {
                    defaultType = anyType;
                }
                result[i] = defaultType ? instantiateType(defaultType, createTypeMapper(typeParameters!, result)) : baseDefaultType;
            }
            result.length = typeParameters!.length;
            return result;
        }
        return typeArguments && typeArguments.slice();
    }

    function getSignatureFromDeclaration(declaration: ts.SignatureDeclaration | ts.JSDocSignature): ts.Signature {
        const links = getNodeLinks(declaration);
        if (!links.resolvedSignature) {
            const parameters: ts.Symbol[] = [];
            let flags = ts.SignatureFlags.None;
            let minArgumentCount = 0;
            let thisParameter: ts.Symbol | undefined;
            let hasThisParameter = false;
            const iife = ts.getImmediatelyInvokedFunctionExpression(declaration);
            const isJSConstructSignature = ts.isJSDocConstructSignature(declaration);
            const isUntypedSignatureInJSFile = !iife &&
                ts.isInJSFile(declaration) &&
                ts.isValueSignatureDeclaration(declaration) &&
                !ts.hasJSDocParameterTags(declaration) &&
                !ts.getJSDocType(declaration);
            if (isUntypedSignatureInJSFile) {
                flags |= ts.SignatureFlags.IsUntypedSignatureInJSFile;
            }

            // If this is a JSDoc construct signature, then skip the first parameter in the
            // parameter list.  The first parameter represents the return type of the construct
            // signature.
            for (let i = isJSConstructSignature ? 1 : 0; i < declaration.parameters.length; i++) {
                const param = declaration.parameters[i];

                let paramSymbol = param.symbol;
                const type = ts.isJSDocParameterTag(param) ? (param.typeExpression && param.typeExpression.type) : param.type;
                // Include parameter symbol instead of property symbol in the signature
                if (paramSymbol && !!(paramSymbol.flags & ts.SymbolFlags.Property) && !ts.isBindingPattern(param.name)) {
                    const resolvedSymbol = resolveName(param, paramSymbol.escapedName, ts.SymbolFlags.Value, undefined, undefined, /*isUse*/ false);
                    paramSymbol = resolvedSymbol!;
                }
                if (i === 0 && paramSymbol.escapedName === ts.InternalSymbolName.This) {
                    hasThisParameter = true;
                    thisParameter = param.symbol;
                }
                else {
                    parameters.push(paramSymbol);
                }

                if (type && type.kind === ts.SyntaxKind.LiteralType) {
                    flags |= ts.SignatureFlags.HasLiteralTypes;
                }

                // Record a new minimum argument count if this is not an optional parameter
                const isOptionalParameter = ts.isOptionalJSDocPropertyLikeTag(param) ||
                    param.initializer || param.questionToken || ts.isRestParameter(param) ||
                    iife && parameters.length > iife.arguments.length && !type ||
                    isJSDocOptionalParameter(param);
                if (!isOptionalParameter) {
                    minArgumentCount = parameters.length;
                }
            }

            // If only one accessor includes a this-type annotation, the other behaves as if it had the same type annotation
            if ((declaration.kind === ts.SyntaxKind.GetAccessor || declaration.kind === ts.SyntaxKind.SetAccessor) &&
                hasBindableName(declaration) &&
                (!hasThisParameter || !thisParameter)) {
                const otherKind = declaration.kind === ts.SyntaxKind.GetAccessor ? ts.SyntaxKind.SetAccessor : ts.SyntaxKind.GetAccessor;
                const other = ts.getDeclarationOfKind<ts.AccessorDeclaration>(getSymbolOfNode(declaration), otherKind);
                if (other) {
                    thisParameter = getAnnotatedAccessorThisParameter(other);
                }
            }

            const classType = declaration.kind === ts.SyntaxKind.Constructor ?
                getDeclaredTypeOfClassOrInterface(getMergedSymbol((declaration.parent as ts.ClassDeclaration).symbol))
                : undefined;
            const typeParameters = classType ? classType.localTypeParameters : getTypeParametersFromDeclaration(declaration);
            if (ts.hasRestParameter(declaration) || ts.isInJSFile(declaration) && maybeAddJsSyntheticRestParameter(declaration, parameters)) {
                flags |= ts.SignatureFlags.HasRestParameter;
            }
            if (ts.isConstructorTypeNode(declaration) && ts.hasSyntacticModifier(declaration, ts.ModifierFlags.Abstract) ||
                ts.isConstructorDeclaration(declaration) && ts.hasSyntacticModifier(declaration.parent, ts.ModifierFlags.Abstract)) {
                flags |= ts.SignatureFlags.Abstract;
            }
            links.resolvedSignature = createSignature(declaration, typeParameters, thisParameter, parameters,
                /*resolvedReturnType*/ undefined, /*resolvedTypePredicate*/ undefined,
                minArgumentCount, flags);
        }
        return links.resolvedSignature;
    }

    /**
     * A JS function gets a synthetic rest parameter if it references `arguments` AND:
     * 1. It has no parameters but at least one `@param` with a type that starts with `...`
     * OR
     * 2. It has at least one parameter, and the last parameter has a matching `@param` with a type that starts with `...`
     */
    function maybeAddJsSyntheticRestParameter(declaration: ts.SignatureDeclaration | ts.JSDocSignature, parameters: ts.Symbol[]): boolean {
        if (ts.isJSDocSignature(declaration) || !containsArgumentsReference(declaration)) {
            return false;
        }
        const lastParam = ts.lastOrUndefined(declaration.parameters);
        const lastParamTags = lastParam ? ts.getJSDocParameterTags(lastParam) : ts.getJSDocTags(declaration).filter(ts.isJSDocParameterTag);
        const lastParamVariadicType = ts.firstDefined(lastParamTags, p =>
            p.typeExpression && ts.isJSDocVariadicType(p.typeExpression.type) ? p.typeExpression.type : undefined);

        const syntheticArgsSymbol = createSymbol(ts.SymbolFlags.Variable, "args" as ts.__String, ts.CheckFlags.RestParameter);
        if (lastParamVariadicType) {
            // Parameter has effective annotation, lock in type
            syntheticArgsSymbol.type = createArrayType(getTypeFromTypeNode(lastParamVariadicType.type));
        }
        else {
            // Parameter has no annotation
            // By using a `DeferredType` symbol, we allow the type of this rest arg to be overriden by contextual type assignment so long as its type hasn't been
            // cached by `getTypeOfSymbol` yet.
            syntheticArgsSymbol.checkFlags |= ts.CheckFlags.DeferredType;
            syntheticArgsSymbol.deferralParent = neverType;
            syntheticArgsSymbol.deferralConstituents = [anyArrayType];
            syntheticArgsSymbol.deferralWriteConstituents = [anyArrayType];
        }
        if (lastParamVariadicType) {
            // Replace the last parameter with a rest parameter.
            parameters.pop();
        }
        parameters.push(syntheticArgsSymbol);
        return true;
    }

    function getSignatureOfTypeTag(node: ts.SignatureDeclaration | ts.JSDocSignature) {
        // should be attached to a function declaration or expression
        if (!(ts.isInJSFile(node) && ts.isFunctionLikeDeclaration(node))) return undefined;
        const typeTag = ts.getJSDocTypeTag(node);
        return typeTag?.typeExpression && getSingleCallSignature(getTypeFromTypeNode(typeTag.typeExpression));
    }

    function getParameterTypeOfTypeTag(func: ts.FunctionLikeDeclaration, parameter: ts.ParameterDeclaration) {
        const signature = getSignatureOfTypeTag(func);
        if (!signature) return undefined;
        const pos = func.parameters.indexOf(parameter);
        return parameter.dotDotDotToken ? getRestTypeAtPosition(signature, pos) : getTypeAtPosition(signature, pos);
    }

    function getReturnTypeOfTypeTag(node: ts.SignatureDeclaration | ts.JSDocSignature) {
        const signature = getSignatureOfTypeTag(node);
        return signature && getReturnTypeOfSignature(signature);
    }

    function containsArgumentsReference(declaration: ts.SignatureDeclaration): boolean {
        const links = getNodeLinks(declaration);
        if (links.containsArgumentsReference === undefined) {
            if (links.flags & ts.NodeCheckFlags.CaptureArguments) {
                links.containsArgumentsReference = true;
            }
            else {
                links.containsArgumentsReference = traverse((declaration as ts.FunctionLikeDeclaration).body!);
            }
        }
        return links.containsArgumentsReference;

        function traverse(node: ts.Node): boolean {
            if (!node) return false;
            switch (node.kind) {
                case ts.SyntaxKind.Identifier:
                    return (node as ts.Identifier).escapedText === argumentsSymbol.escapedName && getReferencedValueSymbol(node as ts.Identifier) === argumentsSymbol;

                case ts.SyntaxKind.PropertyDeclaration:
                case ts.SyntaxKind.MethodDeclaration:
                case ts.SyntaxKind.GetAccessor:
                case ts.SyntaxKind.SetAccessor:
                    return (node as ts.NamedDeclaration).name!.kind === ts.SyntaxKind.ComputedPropertyName
                        && traverse((node as ts.NamedDeclaration).name!);

                case ts.SyntaxKind.PropertyAccessExpression:
                case ts.SyntaxKind.ElementAccessExpression:
                    return traverse((node as ts.PropertyAccessExpression | ts.ElementAccessExpression).expression);

                case ts.SyntaxKind.PropertyAssignment:
                    return traverse((node as ts.PropertyAssignment).initializer);

                default:
                    return !ts.nodeStartsNewLexicalEnvironment(node) && !ts.isPartOfTypeNode(node) && !!ts.forEachChild(node, traverse);
            }
        }
    }

    function getSignaturesOfSymbol(symbol: ts.Symbol | undefined): ts.Signature[] {
        if (!symbol || !symbol.declarations) return ts.emptyArray;
        const result: ts.Signature[] = [];
        for (let i = 0; i < symbol.declarations.length; i++) {
            const decl = symbol.declarations[i];
            if (!ts.isFunctionLike(decl)) continue;
            // Don't include signature if node is the implementation of an overloaded function. A node is considered
            // an implementation node if it has a body and the previous node is of the same kind and immediately
            // precedes the implementation node (i.e. has the same parent and ends where the implementation starts).
            if (i > 0 && (decl as ts.FunctionLikeDeclaration).body) {
                const previous = symbol.declarations[i - 1];
                if (decl.parent === previous.parent && decl.kind === previous.kind && decl.pos === previous.end) {
                    continue;
                }
            }
            // If this is a function or method declaration, get the signature from the @type tag for the sake of optional parameters.
            // Exclude contextually-typed kinds because we already apply the @type tag to the context, plus applying it here to the initializer would supress checks that the two are compatible.
            result.push(
                (!ts.isFunctionExpressionOrArrowFunction(decl) &&
                    !ts.isObjectLiteralMethod(decl) &&
                    getSignatureOfTypeTag(decl)) ||
                    getSignatureFromDeclaration(decl)
            );
        }
        return result;
    }

    function resolveExternalModuleTypeByLiteral(name: ts.StringLiteral) {
        const moduleSym = resolveExternalModuleName(name, name);
        if (moduleSym) {
            const resolvedModuleSymbol = resolveExternalModuleSymbol(moduleSym);
            if (resolvedModuleSymbol) {
                return getTypeOfSymbol(resolvedModuleSymbol);
            }
        }

        return anyType;
    }

    function getThisTypeOfSignature(signature: ts.Signature): ts.Type | undefined {
        if (signature.thisParameter) {
            return getTypeOfSymbol(signature.thisParameter);
        }
    }

    function getTypePredicateOfSignature(signature: ts.Signature): ts.TypePredicate | undefined {
        if (!signature.resolvedTypePredicate) {
            if (signature.target) {
                const targetTypePredicate = getTypePredicateOfSignature(signature.target);
                signature.resolvedTypePredicate = targetTypePredicate ? instantiateTypePredicate(targetTypePredicate, signature.mapper!) : noTypePredicate;
            }
            else if (signature.compositeSignatures) {
                signature.resolvedTypePredicate = getUnionOrIntersectionTypePredicate(signature.compositeSignatures, signature.compositeKind) || noTypePredicate;
            }
            else {
                const type = signature.declaration && ts.getEffectiveReturnTypeNode(signature.declaration);
                let jsdocPredicate: ts.TypePredicate | undefined;
                if (!type) {
                    const jsdocSignature = getSignatureOfTypeTag(signature.declaration!);
                    if (jsdocSignature && signature !== jsdocSignature) {
                        jsdocPredicate = getTypePredicateOfSignature(jsdocSignature);
                    }
                }
                signature.resolvedTypePredicate = type && ts.isTypePredicateNode(type) ?
                    createTypePredicateFromTypePredicateNode(type, signature) :
                    jsdocPredicate || noTypePredicate;
            }
            ts.Debug.assert(!!signature.resolvedTypePredicate);
        }
        return signature.resolvedTypePredicate === noTypePredicate ? undefined : signature.resolvedTypePredicate;
    }

    function createTypePredicateFromTypePredicateNode(node: ts.TypePredicateNode, signature: ts.Signature): ts.TypePredicate {
        const parameterName = node.parameterName;
        const type = node.type && getTypeFromTypeNode(node.type);
        return parameterName.kind === ts.SyntaxKind.ThisType ?
            createTypePredicate(node.assertsModifier ? ts.TypePredicateKind.AssertsThis : ts.TypePredicateKind.This, /*parameterName*/ undefined, /*parameterIndex*/ undefined, type) :
            createTypePredicate(node.assertsModifier ? ts.TypePredicateKind.AssertsIdentifier : ts.TypePredicateKind.Identifier, parameterName.escapedText as string,
                ts.findIndex(signature.parameters, p => p.escapedName === parameterName.escapedText), type);
    }

    function getUnionOrIntersectionType(types: ts.Type[], kind: ts.TypeFlags | undefined, unionReduction?: ts.UnionReduction) {
        return kind !== ts.TypeFlags.Intersection ? getUnionType(types, unionReduction) : getIntersectionType(types);
    }

    function getReturnTypeOfSignature(signature: ts.Signature): ts.Type {
        if (!signature.resolvedReturnType) {
            if (!pushTypeResolution(signature, TypeSystemPropertyName.ResolvedReturnType)) {
                return errorType;
            }
            let type = signature.target ? instantiateType(getReturnTypeOfSignature(signature.target), signature.mapper) :
                signature.compositeSignatures ? instantiateType(getUnionOrIntersectionType(ts.map(signature.compositeSignatures, getReturnTypeOfSignature), signature.compositeKind, ts.UnionReduction.Subtype), signature.mapper) :
                getReturnTypeFromAnnotation(signature.declaration!) ||
                (ts.nodeIsMissing((signature.declaration as ts.FunctionLikeDeclaration).body) ? anyType : getReturnTypeFromBody(signature.declaration as ts.FunctionLikeDeclaration));
            if (signature.flags & ts.SignatureFlags.IsInnerCallChain) {
                type = addOptionalTypeMarker(type);
            }
            else if (signature.flags & ts.SignatureFlags.IsOuterCallChain) {
                type = getOptionalType(type);
            }
            if (!popTypeResolution()) {
                if (signature.declaration) {
                    const typeNode = ts.getEffectiveReturnTypeNode(signature.declaration);
                    if (typeNode) {
                        error(typeNode, ts.Diagnostics.Return_type_annotation_circularly_references_itself);
                    }
                    else if (noImplicitAny) {
                        const declaration = signature.declaration as ts.Declaration;
                        const name = ts.getNameOfDeclaration(declaration);
                        if (name) {
                            error(name, ts.Diagnostics._0_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions, ts.declarationNameToString(name));
                        }
                        else {
                            error(declaration, ts.Diagnostics.Function_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions);
                        }
                    }
                }
                type = anyType;
            }
            signature.resolvedReturnType = type;
        }
        return signature.resolvedReturnType;
    }

    function getReturnTypeFromAnnotation(declaration: ts.SignatureDeclaration | ts.JSDocSignature) {
        if (declaration.kind === ts.SyntaxKind.Constructor) {
            return getDeclaredTypeOfClassOrInterface(getMergedSymbol((declaration.parent as ts.ClassDeclaration).symbol));
        }
        if (ts.isJSDocConstructSignature(declaration)) {
            return getTypeFromTypeNode((declaration.parameters[0] as ts.ParameterDeclaration).type!); // TODO: GH#18217
        }
        const typeNode = ts.getEffectiveReturnTypeNode(declaration);
        if (typeNode) {
            return getTypeFromTypeNode(typeNode);
        }
        if (declaration.kind === ts.SyntaxKind.GetAccessor && hasBindableName(declaration)) {
            const jsDocType = ts.isInJSFile(declaration) && getTypeForDeclarationFromJSDocComment(declaration);
            if (jsDocType) {
                return jsDocType;
            }
            const setter = ts.getDeclarationOfKind<ts.AccessorDeclaration>(getSymbolOfNode(declaration), ts.SyntaxKind.SetAccessor);
            const setterType = getAnnotatedAccessorType(setter);
            if (setterType) {
                return setterType;
            }
        }
        return getReturnTypeOfTypeTag(declaration);
    }

    function isResolvingReturnTypeOfSignature(signature: ts.Signature) {
        return !signature.resolvedReturnType && findResolutionCycleStartIndex(signature, TypeSystemPropertyName.ResolvedReturnType) >= 0;
    }

    function getRestTypeOfSignature(signature: ts.Signature): ts.Type {
        return tryGetRestTypeOfSignature(signature) || anyType;
    }

    function tryGetRestTypeOfSignature(signature: ts.Signature): ts.Type | undefined {
        if (signatureHasRestParameter(signature)) {
            const sigRestType = getTypeOfSymbol(signature.parameters[signature.parameters.length - 1]);
            const restType = isTupleType(sigRestType) ? getRestTypeOfTupleType(sigRestType) : sigRestType;
            return restType && getIndexTypeOfType(restType, numberType);
        }
        return undefined;
    }

    function getSignatureInstantiation(signature: ts.Signature, typeArguments: ts.Type[] | undefined, isJavascript: boolean, inferredTypeParameters?: readonly ts.TypeParameter[]): ts.Signature {
        const instantiatedSignature = getSignatureInstantiationWithoutFillingInTypeArguments(signature, fillMissingTypeArguments(typeArguments, signature.typeParameters, getMinTypeArgumentCount(signature.typeParameters), isJavascript));
        if (inferredTypeParameters) {
            const returnSignature = getSingleCallOrConstructSignature(getReturnTypeOfSignature(instantiatedSignature));
            if (returnSignature) {
                const newReturnSignature = cloneSignature(returnSignature);
                newReturnSignature.typeParameters = inferredTypeParameters;
                const newInstantiatedSignature = cloneSignature(instantiatedSignature);
                newInstantiatedSignature.resolvedReturnType = getOrCreateTypeFromSignature(newReturnSignature);
                return newInstantiatedSignature;
            }
        }
        return instantiatedSignature;
    }

    function getSignatureInstantiationWithoutFillingInTypeArguments(signature: ts.Signature, typeArguments: readonly ts.Type[] | undefined): ts.Signature {
        const instantiations = signature.instantiations || (signature.instantiations = new ts.Map<string, ts.Signature>());
        const id = getTypeListId(typeArguments);
        let instantiation = instantiations.get(id);
        if (!instantiation) {
            instantiations.set(id, instantiation = createSignatureInstantiation(signature, typeArguments));
        }
        return instantiation;
    }

    function createSignatureInstantiation(signature: ts.Signature, typeArguments: readonly ts.Type[] | undefined): ts.Signature {
        return instantiateSignature(signature, createSignatureTypeMapper(signature, typeArguments), /*eraseTypeParameters*/ true);
    }

    function createSignatureTypeMapper(signature: ts.Signature, typeArguments: readonly ts.Type[] | undefined): ts.TypeMapper {
        return createTypeMapper(signature.typeParameters!, typeArguments);
    }

    function getErasedSignature(signature: ts.Signature): ts.Signature {
        return signature.typeParameters ?
            signature.erasedSignatureCache || (signature.erasedSignatureCache = createErasedSignature(signature)) :
            signature;
    }

    function createErasedSignature(signature: ts.Signature) {
        // Create an instantiation of the signature where all type arguments are the any type.
        return instantiateSignature(signature, createTypeEraser(signature.typeParameters!), /*eraseTypeParameters*/ true);
    }

    function getCanonicalSignature(signature: ts.Signature): ts.Signature {
        return signature.typeParameters ?
            signature.canonicalSignatureCache || (signature.canonicalSignatureCache = createCanonicalSignature(signature)) :
            signature;
    }

    function createCanonicalSignature(signature: ts.Signature) {
        // Create an instantiation of the signature where each unconstrained type parameter is replaced with
        // its original. When a generic class or interface is instantiated, each generic method in the class or
        // interface is instantiated with a fresh set of cloned type parameters (which we need to handle scenarios
        // where different generations of the same type parameter are in scope). This leads to a lot of new type
        // identities, and potentially a lot of work comparing those identities, so here we create an instantiation
        // that uses the original type identities for all unconstrained type parameters.
        return getSignatureInstantiation(
            signature,
            ts.map(signature.typeParameters, tp => tp.target && !getConstraintOfTypeParameter(tp.target) ? tp.target : tp),
            ts.isInJSFile(signature.declaration));
    }

    function getBaseSignature(signature: ts.Signature) {
        const typeParameters = signature.typeParameters;
        if (typeParameters) {
            if (signature.baseSignatureCache) {
                return signature.baseSignatureCache;
            }
            const typeEraser = createTypeEraser(typeParameters);
            const baseConstraintMapper = createTypeMapper(typeParameters, ts.map(typeParameters, tp => getConstraintOfTypeParameter(tp) || unknownType));
            let baseConstraints: readonly ts.Type[] = ts.map(typeParameters, tp => instantiateType(tp, baseConstraintMapper) || unknownType);
            // Run N type params thru the immediate constraint mapper up to N times
            // This way any noncircular interdependent type parameters are definitely resolved to their external dependencies
            for (let i = 0; i < typeParameters.length - 1; i++) {
                baseConstraints = instantiateTypes(baseConstraints, baseConstraintMapper);
            }
            // and then apply a type eraser to remove any remaining circularly dependent type parameters
            baseConstraints = instantiateTypes(baseConstraints, typeEraser);
            return signature.baseSignatureCache = instantiateSignature(signature, createTypeMapper(typeParameters, baseConstraints), /*eraseTypeParameters*/ true);
        }
        return signature;
    }

    function getOrCreateTypeFromSignature(signature: ts.Signature): ts.ObjectType {
        // There are two ways to declare a construct signature, one is by declaring a class constructor
        // using the constructor keyword, and the other is declaring a bare construct signature in an
        // object type literal or interface (using the new keyword). Each way of declaring a constructor
        // will result in a different declaration kind.
        if (!signature.isolatedSignatureType) {
            const kind = signature.declaration?.kind;

            // If declaration is undefined, it is likely to be the signature of the default constructor.
            const isConstructor = kind === undefined || kind === ts.SyntaxKind.Constructor || kind === ts.SyntaxKind.ConstructSignature || kind === ts.SyntaxKind.ConstructorType;

            const type = createObjectType(ts.ObjectFlags.Anonymous);
            type.members = emptySymbols;
            type.properties = ts.emptyArray;
            type.callSignatures = !isConstructor ? [signature] : ts.emptyArray;
            type.constructSignatures = isConstructor ? [signature] : ts.emptyArray;
            type.indexInfos = ts.emptyArray;
            signature.isolatedSignatureType = type;
        }

        return signature.isolatedSignatureType;
    }

    function getIndexSymbol(symbol: ts.Symbol): ts.Symbol | undefined {
        return symbol.members ? getIndexSymbolFromSymbolTable(symbol.members) : undefined;
    }

    function getIndexSymbolFromSymbolTable(symbolTable: ts.SymbolTable): ts.Symbol | undefined {
        return symbolTable.get(ts.InternalSymbolName.Index);
    }

    function createIndexInfo(keyType: ts.Type, type: ts.Type, isReadonly: boolean, declaration?: ts.IndexSignatureDeclaration): ts.IndexInfo {
        return { keyType, type, isReadonly, declaration };
    }

    function getIndexInfosOfSymbol(symbol: ts.Symbol): ts.IndexInfo[] {
        const indexSymbol = getIndexSymbol(symbol);
        return indexSymbol ? getIndexInfosOfIndexSymbol(indexSymbol) : ts.emptyArray;
    }

    function getIndexInfosOfIndexSymbol(indexSymbol: ts.Symbol): ts.IndexInfo[] {
        if (indexSymbol.declarations) {
            const indexInfos: ts.IndexInfo[] = [];
            for (const declaration of (indexSymbol.declarations as ts.IndexSignatureDeclaration[])) {
                if (declaration.parameters.length === 1) {
                    const parameter = declaration.parameters[0];
                    if (parameter.type) {
                        forEachType(getTypeFromTypeNode(parameter.type), keyType => {
                            if (isValidIndexKeyType(keyType) && !findIndexInfo(indexInfos, keyType)) {
                                indexInfos.push(createIndexInfo(keyType, declaration.type ? getTypeFromTypeNode(declaration.type) : anyType,
                                    ts.hasEffectiveModifier(declaration, ts.ModifierFlags.Readonly), declaration));
                            }
                        });
                    }
                }
            }
            return indexInfos;
        }
        return ts.emptyArray;
    }

    function isValidIndexKeyType(type: ts.Type): boolean {
        return !!(type.flags & (ts.TypeFlags.String | ts.TypeFlags.Number | ts.TypeFlags.ESSymbol)) || isPatternLiteralType(type) ||
            !!(type.flags & ts.TypeFlags.Intersection) && !isGenericType(type) && ts.some((type as ts.IntersectionType).types, isValidIndexKeyType);
    }

    function getConstraintDeclaration(type: ts.TypeParameter): ts.TypeNode | undefined {
        return ts.mapDefined(ts.filter(type.symbol && type.symbol.declarations, ts.isTypeParameterDeclaration), ts.getEffectiveConstraintOfTypeParameter)[0];
    }

    function getInferredTypeParameterConstraint(typeParameter: ts.TypeParameter, omitTypeReferences?: boolean) {
        let inferences: ts.Type[] | undefined;
        if (typeParameter.symbol?.declarations) {
            for (const declaration of typeParameter.symbol.declarations) {
                if (declaration.parent.kind === ts.SyntaxKind.InferType) {
                    // When an 'infer T' declaration is immediately contained in a type reference node
                    // (such as 'Foo<infer T>'), T's constraint is inferred from the constraint of the
                    // corresponding type parameter in 'Foo'. When multiple 'infer T' declarations are
                    // present, we form an intersection of the inferred constraint types.
                    const [childTypeParameter = declaration.parent, grandParent] = ts.walkUpParenthesizedTypesAndGetParentAndChild(declaration.parent.parent);
                    if (grandParent.kind === ts.SyntaxKind.TypeReference && !omitTypeReferences) {
                        const typeReference = grandParent as ts.TypeReferenceNode;
                        const typeParameters = getTypeParametersForTypeReference(typeReference);
                        if (typeParameters) {
                            const index = typeReference.typeArguments!.indexOf(childTypeParameter as ts.TypeNode);
                            if (index < typeParameters.length) {
                                const declaredConstraint = getConstraintOfTypeParameter(typeParameters[index]);
                                if (declaredConstraint) {
                                    // Type parameter constraints can reference other type parameters so
                                    // constraints need to be instantiated. If instantiation produces the
                                    // type parameter itself, we discard that inference. For example, in
                                    //   type Foo<T extends string, U extends T> = [T, U];
                                    //   type Bar<T> = T extends Foo<infer X, infer X> ? Foo<X, X> : T;
                                    // the instantiated constraint for U is X, so we discard that inference.
                                    const mapper = makeDeferredTypeMapper(typeParameters, typeParameters.map((_, index) => () => {
                                        return getEffectiveTypeArgumentAtIndex(typeReference, typeParameters, index);
                                    }));
                                    const constraint = instantiateType(declaredConstraint, mapper);
                                    if (constraint !== typeParameter) {
                                        inferences = ts.append(inferences, constraint);
                                    }
                                }
                            }
                        }
                    }
                    // When an 'infer T' declaration is immediately contained in a rest parameter declaration, a rest type
                    // or a named rest tuple element, we infer an 'unknown[]' constraint.
                    else if (grandParent.kind === ts.SyntaxKind.Parameter && (grandParent as ts.ParameterDeclaration).dotDotDotToken ||
                        grandParent.kind === ts.SyntaxKind.RestType ||
                        grandParent.kind === ts.SyntaxKind.NamedTupleMember && (grandParent as ts.NamedTupleMember).dotDotDotToken) {
                        inferences = ts.append(inferences, createArrayType(unknownType));
                    }
                    // When an 'infer T' declaration is immediately contained in a string template type, we infer a 'string'
                    // constraint.
                    else if (grandParent.kind === ts.SyntaxKind.TemplateLiteralTypeSpan) {
                        inferences = ts.append(inferences, stringType);
                    }
                    // When an 'infer T' declaration is in the constraint position of a mapped type, we infer a 'keyof any'
                    // constraint.
                    else if (grandParent.kind === ts.SyntaxKind.TypeParameter && grandParent.parent.kind === ts.SyntaxKind.MappedType) {
                        inferences = ts.append(inferences, keyofConstraintType);
                    }
                    // When an 'infer T' declaration is the template of a mapped type, and that mapped type is the extends
                    // clause of a conditional whose check type is also a mapped type, give it a constraint equal to the template
                    // of the check type's mapped type
                    else if (grandParent.kind === ts.SyntaxKind.MappedType && (grandParent as ts.MappedTypeNode).type &&
                        ts.skipParentheses((grandParent as ts.MappedTypeNode).type!) === declaration.parent && grandParent.parent.kind === ts.SyntaxKind.ConditionalType &&
                        (grandParent.parent as ts.ConditionalTypeNode).extendsType === grandParent && (grandParent.parent as ts.ConditionalTypeNode).checkType.kind === ts.SyntaxKind.MappedType &&
                        ((grandParent.parent as ts.ConditionalTypeNode).checkType as ts.MappedTypeNode).type) {
                        const checkMappedType = (grandParent.parent as ts.ConditionalTypeNode).checkType as ts.MappedTypeNode;
                        const nodeType = getTypeFromTypeNode(checkMappedType.type!);
                        inferences = ts.append(inferences, instantiateType(nodeType,
                            makeUnaryTypeMapper(getDeclaredTypeOfTypeParameter(getSymbolOfNode(checkMappedType.typeParameter)), checkMappedType.typeParameter.constraint ? getTypeFromTypeNode(checkMappedType.typeParameter.constraint) : keyofConstraintType)
                        ));
                    }
                }
            }
        }
        return inferences && getIntersectionType(inferences);
    }

    /** This is a worker function. Use getConstraintOfTypeParameter which guards against circular constraints. */
    function getConstraintFromTypeParameter(typeParameter: ts.TypeParameter): ts.Type | undefined {
        if (!typeParameter.constraint) {
            if (typeParameter.target) {
                const targetConstraint = getConstraintOfTypeParameter(typeParameter.target);
                typeParameter.constraint = targetConstraint ? instantiateType(targetConstraint, typeParameter.mapper) : noConstraintType;
            }
            else {
                const constraintDeclaration = getConstraintDeclaration(typeParameter);
                if (!constraintDeclaration) {
                    typeParameter.constraint = getInferredTypeParameterConstraint(typeParameter) || noConstraintType;
                }
                else {
                    let type = getTypeFromTypeNode(constraintDeclaration);
                    if (type.flags & ts.TypeFlags.Any && !isErrorType(type)) { // Allow errorType to propegate to keep downstream errors suppressed
                        // use keyofConstraintType as the base constraint for mapped type key constraints (unknown isn;t assignable to that, but `any` was),
                        // use unknown otherwise
                        type = constraintDeclaration.parent.parent.kind === ts.SyntaxKind.MappedType ? keyofConstraintType : unknownType;
                    }
                    typeParameter.constraint = type;
                }
            }
        }
        return typeParameter.constraint === noConstraintType ? undefined : typeParameter.constraint;
    }

    function getParentSymbolOfTypeParameter(typeParameter: ts.TypeParameter): ts.Symbol | undefined {
        const tp = ts.getDeclarationOfKind<ts.TypeParameterDeclaration>(typeParameter.symbol, ts.SyntaxKind.TypeParameter)!;
        const host = ts.isJSDocTemplateTag(tp.parent) ? ts.getEffectiveContainerForJSDocTemplateTag(tp.parent) : tp.parent;
        return host && getSymbolOfNode(host);
    }

    function getTypeListId(types: readonly ts.Type[] | undefined) {
        let result = "";
        if (types) {
            const length = types.length;
            let i = 0;
            while (i < length) {
                const startId = types[i].id;
                let count = 1;
                while (i + count < length && types[i + count].id === startId + count) {
                    count++;
                }
                if (result.length) {
                    result += ",";
                }
                result += startId;
                if (count > 1) {
                    result += ":" + count;
                }
                i += count;
            }
        }
        return result;
    }

    function getAliasId(aliasSymbol: ts.Symbol | undefined, aliasTypeArguments: readonly ts.Type[] | undefined) {
        return aliasSymbol ? `@${getSymbolId(aliasSymbol)}` + (aliasTypeArguments ? `:${getTypeListId(aliasTypeArguments)}` : "") : "";
    }

    // This function is used to propagate certain flags when creating new object type references and union types.
    // It is only necessary to do so if a constituent type might be the undefined type, the null type, the type
    // of an object literal or a non-inferrable type. This is because there are operations in the type checker
    // that care about the presence of such types at arbitrary depth in a containing type.
    function getPropagatingFlagsOfTypes(types: readonly ts.Type[], excludeKinds?: ts.TypeFlags): ts.ObjectFlags {
        let result: ts.ObjectFlags = 0;
        for (const type of types) {
            if (excludeKinds === undefined || !(type.flags & excludeKinds)) {
                result |= ts.getObjectFlags(type);
            }
        }
        return result & ts.ObjectFlags.PropagatingFlags;
    }

    function createTypeReference(target: ts.GenericType, typeArguments: readonly ts.Type[] | undefined): ts.TypeReference {
        const id = getTypeListId(typeArguments);
        let type = target.instantiations.get(id);
        if (!type) {
            type = createObjectType(ts.ObjectFlags.Reference, target.symbol) as ts.TypeReference;
            target.instantiations.set(id, type);
            type.objectFlags |= typeArguments ? getPropagatingFlagsOfTypes(typeArguments) : 0;
            type.target = target;
            type.resolvedTypeArguments = typeArguments;
        }
        return type;
    }

    function cloneTypeReference(source: ts.TypeReference): ts.TypeReference {
        const type = createTypeWithSymbol(source.flags, source.symbol) as ts.TypeReference;
        type.objectFlags = source.objectFlags;
        type.target = source.target;
        type.resolvedTypeArguments = source.resolvedTypeArguments;
        return type;
    }

    function createDeferredTypeReference(target: ts.GenericType, node: ts.TypeReferenceNode | ts.ArrayTypeNode | ts.TupleTypeNode, mapper?: ts.TypeMapper, aliasSymbol?: ts.Symbol, aliasTypeArguments?: readonly ts.Type[]): ts.DeferredTypeReference {
        if (!aliasSymbol) {
            aliasSymbol = getAliasSymbolForTypeNode(node);
            const localAliasTypeArguments = getTypeArgumentsForAliasSymbol(aliasSymbol);
            aliasTypeArguments = mapper ? instantiateTypes(localAliasTypeArguments, mapper) : localAliasTypeArguments;
        }
        const type = createObjectType(ts.ObjectFlags.Reference, target.symbol) as ts.DeferredTypeReference;
        type.target = target;
        type.node = node;
        type.mapper = mapper;
        type.aliasSymbol = aliasSymbol;
        type.aliasTypeArguments = aliasTypeArguments;
        return type;
    }

    function getTypeArguments(type: ts.TypeReference): readonly ts.Type[] {
        if (!type.resolvedTypeArguments) {
            if (!pushTypeResolution(type, TypeSystemPropertyName.ResolvedTypeArguments)) {
                return type.target.localTypeParameters?.map(() => errorType) || ts.emptyArray;
            }
            const node = type.node;
            const typeArguments = !node ? ts.emptyArray :
                node.kind === ts.SyntaxKind.TypeReference ? ts.concatenate(type.target.outerTypeParameters, getEffectiveTypeArguments(node, type.target.localTypeParameters!)) :
                node.kind === ts.SyntaxKind.ArrayType ? [getTypeFromTypeNode(node.elementType)] :
                ts.map(node.elements, getTypeFromTypeNode);
            if (popTypeResolution()) {
                type.resolvedTypeArguments = type.mapper ? instantiateTypes(typeArguments, type.mapper) : typeArguments;
            }
            else {
                type.resolvedTypeArguments = type.target.localTypeParameters?.map(() => errorType) || ts.emptyArray;
                error(
                    type.node || currentNode,
                    type.target.symbol ? ts.Diagnostics.Type_arguments_for_0_circularly_reference_themselves : ts.Diagnostics.Tuple_type_arguments_circularly_reference_themselves,
                    type.target.symbol && symbolToString(type.target.symbol)
                );
            }
        }
        return type.resolvedTypeArguments;
    }

    function getTypeReferenceArity(type: ts.TypeReference): number {
        return ts.length(type.target.typeParameters);
    }


    /**
     * Get type from type-reference that reference to class or interface
     */
    function getTypeFromClassOrInterfaceReference(node: ts.NodeWithTypeArguments, symbol: ts.Symbol): ts.Type {
        const type = getDeclaredTypeOfSymbol(getMergedSymbol(symbol)) as ts.InterfaceType;
        const typeParameters = type.localTypeParameters;
        if (typeParameters) {
            const numTypeArguments = ts.length(node.typeArguments);
            const minTypeArgumentCount = getMinTypeArgumentCount(typeParameters);
            const isJs = ts.isInJSFile(node);
            const isJsImplicitAny = !noImplicitAny && isJs;
            if (!isJsImplicitAny && (numTypeArguments < minTypeArgumentCount || numTypeArguments > typeParameters.length)) {
                const missingAugmentsTag = isJs && ts.isExpressionWithTypeArguments(node) && !ts.isJSDocAugmentsTag(node.parent);
                const diag = minTypeArgumentCount === typeParameters.length ?
                    missingAugmentsTag ?
                        ts.Diagnostics.Expected_0_type_arguments_provide_these_with_an_extends_tag :
                        ts.Diagnostics.Generic_type_0_requires_1_type_argument_s :
                    missingAugmentsTag ?
                        ts.Diagnostics.Expected_0_1_type_arguments_provide_these_with_an_extends_tag :
                        ts.Diagnostics.Generic_type_0_requires_between_1_and_2_type_arguments;

                const typeStr = typeToString(type, /*enclosingDeclaration*/ undefined, ts.TypeFormatFlags.WriteArrayAsGenericType);
                error(node, diag, typeStr, minTypeArgumentCount, typeParameters.length);
                if (!isJs) {
                    // TODO: Adopt same permissive behavior in TS as in JS to reduce follow-on editing experience failures (requires editing fillMissingTypeArguments)
                    return errorType;
                }
            }
            if (node.kind === ts.SyntaxKind.TypeReference && isDeferredTypeReferenceNode(node as ts.TypeReferenceNode, ts.length(node.typeArguments) !== typeParameters.length)) {
                return createDeferredTypeReference(type as ts.GenericType, node as ts.TypeReferenceNode, /*mapper*/ undefined);
            }
            // In a type reference, the outer type parameters of the referenced class or interface are automatically
            // supplied as type arguments and the type reference only specifies arguments for the local type parameters
            // of the class or interface.
            const typeArguments = ts.concatenate(type.outerTypeParameters, fillMissingTypeArguments(typeArgumentsFromTypeReferenceNode(node), typeParameters, minTypeArgumentCount, isJs));
            return createTypeReference(type as ts.GenericType, typeArguments);
        }
        return checkNoTypeArguments(node, symbol) ? type : errorType;
    }

    function getTypeAliasInstantiation(symbol: ts.Symbol, typeArguments: readonly ts.Type[] | undefined, aliasSymbol?: ts.Symbol, aliasTypeArguments?: readonly ts.Type[]): ts.Type {
        const type = getDeclaredTypeOfSymbol(symbol);
        if (type === intrinsicMarkerType && intrinsicTypeKinds.has(symbol.escapedName as string) && typeArguments && typeArguments.length === 1) {
            return getStringMappingType(symbol, typeArguments[0]);
        }
        const links = getSymbolLinks(symbol);
        const typeParameters = links.typeParameters!;
        const id = getTypeListId(typeArguments) + getAliasId(aliasSymbol, aliasTypeArguments);
        let instantiation = links.instantiations!.get(id);
        if (!instantiation) {
            links.instantiations!.set(id, instantiation = instantiateTypeWithAlias(type,
                createTypeMapper(typeParameters, fillMissingTypeArguments(typeArguments, typeParameters, getMinTypeArgumentCount(typeParameters), ts.isInJSFile(symbol.valueDeclaration))),
                aliasSymbol, aliasTypeArguments));
        }
        return instantiation;
    }

    /**
     * Get type from reference to type alias. When a type alias is generic, the declared type of the type alias may include
     * references to the type parameters of the alias. We replace those with the actual type arguments by instantiating the
     * declared type. Instantiations are cached using the type identities of the type arguments as the key.
     */
    function getTypeFromTypeAliasReference(node: ts.NodeWithTypeArguments, symbol: ts.Symbol): ts.Type {
        if (ts.getCheckFlags(symbol) & ts.CheckFlags.Unresolved) {
            const typeArguments = typeArgumentsFromTypeReferenceNode(node);
            const id = getAliasId(symbol, typeArguments);
            let errorType = errorTypes.get(id);
            if (!errorType) {
                errorType = createIntrinsicType(ts.TypeFlags.Any, "error");
                errorType.aliasSymbol = symbol;
                errorType.aliasTypeArguments = typeArguments;
                errorTypes.set(id, errorType);
            }
            return errorType;
        }
        const type = getDeclaredTypeOfSymbol(symbol);
        const typeParameters = getSymbolLinks(symbol).typeParameters;
        if (typeParameters) {
            const numTypeArguments = ts.length(node.typeArguments);
            const minTypeArgumentCount = getMinTypeArgumentCount(typeParameters);
            if (numTypeArguments < minTypeArgumentCount || numTypeArguments > typeParameters.length) {
                error(node,
                    minTypeArgumentCount === typeParameters.length ?
                        ts.Diagnostics.Generic_type_0_requires_1_type_argument_s :
                        ts.Diagnostics.Generic_type_0_requires_between_1_and_2_type_arguments,
                    symbolToString(symbol),
                    minTypeArgumentCount,
                    typeParameters.length);
                return errorType;
            }
            // We refrain from associating a local type alias with an instantiation of a top-level type alias
            // because the local alias may end up being referenced in an inferred return type where it is not
            // accessible--which in turn may lead to a large structural expansion of the type when generating
            // a .d.ts file. See #43622 for an example.
            const aliasSymbol = getAliasSymbolForTypeNode(node);
            const newAliasSymbol = aliasSymbol && (isLocalTypeAlias(symbol) || !isLocalTypeAlias(aliasSymbol)) ? aliasSymbol : undefined;
            return getTypeAliasInstantiation(symbol, typeArgumentsFromTypeReferenceNode(node), newAliasSymbol, getTypeArgumentsForAliasSymbol(newAliasSymbol));
        }
        return checkNoTypeArguments(node, symbol) ? type : errorType;
    }

    function isLocalTypeAlias(symbol: ts.Symbol) {
        const declaration = symbol.declarations?.find(ts.isTypeAlias);
        return !!(declaration && ts.getContainingFunction(declaration));
    }

    function getTypeReferenceName(node: ts.TypeReferenceType): ts.EntityNameOrEntityNameExpression | undefined {
        switch (node.kind) {
            case ts.SyntaxKind.TypeReference:
                return node.typeName;
            case ts.SyntaxKind.ExpressionWithTypeArguments:
                // We only support expressions that are simple qualified names. For other
                // expressions this produces undefined.
                const expr = node.expression;
                if (ts.isEntityNameExpression(expr)) {
                    return expr;
                }
            // fall through;
        }

        return undefined;
    }

    function getSymbolPath(symbol: ts.Symbol): string {
        return symbol.parent ? `${getSymbolPath(symbol.parent)}.${symbol.escapedName}` : symbol.escapedName as string;
    }

    function getUnresolvedSymbolForEntityName(name: ts.EntityNameOrEntityNameExpression) {
        const identifier = name.kind === ts.SyntaxKind.QualifiedName ? name.right :
            name.kind === ts.SyntaxKind.PropertyAccessExpression ? name.name :
            name;
        const text = identifier.escapedText;
        if (text) {
            const parentSymbol = name.kind === ts.SyntaxKind.QualifiedName ? getUnresolvedSymbolForEntityName(name.left) :
                name.kind === ts.SyntaxKind.PropertyAccessExpression ? getUnresolvedSymbolForEntityName(name.expression) :
                undefined;
            const path = parentSymbol ? `${getSymbolPath(parentSymbol)}.${text}` : text as string;
            let result = unresolvedSymbols.get(path);
            if (!result) {
                unresolvedSymbols.set(path, result = createSymbol(ts.SymbolFlags.TypeAlias, text, ts.CheckFlags.Unresolved));
                result.parent = parentSymbol;
                result.declaredType = unresolvedType;
            }
            return result;
        }
        return unknownSymbol;
    }

    function resolveTypeReferenceName(typeReference: ts.TypeReferenceType, meaning: ts.SymbolFlags, ignoreErrors?: boolean) {
        const name = getTypeReferenceName(typeReference);
        if (!name) {
            return unknownSymbol;
        }
        const symbol = resolveEntityName(name, meaning, ignoreErrors);
        return symbol && symbol !== unknownSymbol ? symbol :
            ignoreErrors ? unknownSymbol : getUnresolvedSymbolForEntityName(name);
    }

    function getTypeReferenceType(node: ts.NodeWithTypeArguments, symbol: ts.Symbol): ts.Type {
        if (symbol === unknownSymbol) {
            return errorType;
        }
        symbol = getExpandoSymbol(symbol) || symbol;
        if (symbol.flags & (ts.SymbolFlags.Class | ts.SymbolFlags.Interface)) {
            return getTypeFromClassOrInterfaceReference(node, symbol);
        }
        if (symbol.flags & ts.SymbolFlags.TypeAlias) {
            return getTypeFromTypeAliasReference(node, symbol);
        }
        // Get type from reference to named type that cannot be generic (enum or type parameter)
        const res = tryGetDeclaredTypeOfSymbol(symbol);
        if (res) {
            return checkNoTypeArguments(node, symbol) ? getRegularTypeOfLiteralType(res) : errorType;
        }
        if (symbol.flags & ts.SymbolFlags.Value && isJSDocTypeReference(node)) {
            const jsdocType = getTypeFromJSDocValueReference(node, symbol);
            if (jsdocType) {
                return jsdocType;
            }
            else {
                // Resolve the type reference as a Type for the purpose of reporting errors.
                resolveTypeReferenceName(node, ts.SymbolFlags.Type);
                return getTypeOfSymbol(symbol);
            }
        }
        return errorType;
    }

    /**
     * A JSdoc TypeReference may be to a value, but resolve it as a type anyway.
     * Example: import('./b').ConstructorFunction
     */
    function getTypeFromJSDocValueReference(node: ts.NodeWithTypeArguments, symbol: ts.Symbol): ts.Type | undefined {
        const links = getNodeLinks(node);
        if (!links.resolvedJSDocType) {
            const valueType = getTypeOfSymbol(symbol);
            let typeType = valueType;
            if (symbol.valueDeclaration) {
                const isImportTypeWithQualifier = node.kind === ts.SyntaxKind.ImportType && (node as ts.ImportTypeNode).qualifier;
                // valueType might not have a symbol, eg, {import('./b').STRING_LITERAL}
                if (valueType.symbol && valueType.symbol !== symbol && isImportTypeWithQualifier) {
                    typeType = getTypeReferenceType(node, valueType.symbol);
                }
            }
            links.resolvedJSDocType = typeType;
        }
        return links.resolvedJSDocType;
    }

    function getSubstitutionType(baseType: ts.Type, constraint: ts.Type) {
        if (constraint.flags & ts.TypeFlags.AnyOrUnknown || constraint === baseType ||
            !isGenericType(baseType) && !isGenericType(constraint)) {
            return baseType;
        }
        const id = `${getTypeId(baseType)}>${getTypeId(constraint)}`;
        const cached = substitutionTypes.get(id);
        if (cached) {
            return cached;
        }
        const result = createType(ts.TypeFlags.Substitution) as ts.SubstitutionType;
        result.baseType = baseType;
        result.constraint = constraint;
        substitutionTypes.set(id, result);
        return result;
    }

    function getSubstitutionIntersection(substitutionType: ts.SubstitutionType) {
        return getIntersectionType([substitutionType.constraint, substitutionType.baseType]);
    }

    function isUnaryTupleTypeNode(node: ts.TypeNode) {
        return node.kind === ts.SyntaxKind.TupleType && (node as ts.TupleTypeNode).elements.length === 1;
    }

    function getImpliedConstraint(type: ts.Type, checkNode: ts.TypeNode, extendsNode: ts.TypeNode): ts.Type | undefined {
        return isUnaryTupleTypeNode(checkNode) && isUnaryTupleTypeNode(extendsNode) ? getImpliedConstraint(type, (checkNode as ts.TupleTypeNode).elements[0], (extendsNode as ts.TupleTypeNode).elements[0]) :
            getActualTypeVariable(getTypeFromTypeNode(checkNode)) === getActualTypeVariable(type) ? getTypeFromTypeNode(extendsNode) :
            undefined;
    }

    function getConditionalFlowTypeOfType(type: ts.Type, node: ts.Node) {
        let constraints: ts.Type[] | undefined;
        let covariant = true;
        while (node && !ts.isStatement(node) && node.kind !== ts.SyntaxKind.JSDoc) {
            const parent = node.parent;
            // only consider variance flipped by parameter locations - `keyof` types would usually be considered variance inverting, but
            // often get used in indexed accesses where they behave sortof invariantly, but our checking is lax
            if (parent.kind === ts.SyntaxKind.Parameter) {
                covariant = !covariant;
            }
            // Always substitute on type parameters, regardless of variance, since even
            // in contravariant positions, they may rely on substituted constraints to be valid
            if ((covariant || type.flags & ts.TypeFlags.TypeVariable) && parent.kind === ts.SyntaxKind.ConditionalType && node === (parent as ts.ConditionalTypeNode).trueType) {
                const constraint = getImpliedConstraint(type, (parent as ts.ConditionalTypeNode).checkType, (parent as ts.ConditionalTypeNode).extendsType);
                if (constraint) {
                    constraints = ts.append(constraints, constraint);
                }
            }
            // Given a homomorphic mapped type { [K in keyof T]: XXX }, where T is constrained to an array or tuple type, in the
            // template type XXX, K has an added constraint of number | `${number}`.
            else if (type.flags & ts.TypeFlags.TypeParameter && parent.kind === ts.SyntaxKind.MappedType && node === (parent as ts.MappedTypeNode).type) {
                const mappedType = getTypeFromTypeNode(parent as ts.TypeNode) as ts.MappedType;
                if (getTypeParameterFromMappedType(mappedType) === getActualTypeVariable(type)) {
                    const typeParameter = getHomomorphicTypeVariable(mappedType);
                    if (typeParameter) {
                        const constraint = getConstraintOfTypeParameter(typeParameter);
                        if (constraint && everyType(constraint, isArrayOrTupleType)) {
                            constraints = ts.append(constraints, getUnionType([numberType, numericStringType]));
                        }
                    }
                }
            }
            node = parent;
        }
        return constraints ? getSubstitutionType(type, getIntersectionType(constraints)) : type;
    }

    function isJSDocTypeReference(node: ts.Node): node is ts.TypeReferenceNode {
        return !!(node.flags & ts.NodeFlags.JSDoc) && (node.kind === ts.SyntaxKind.TypeReference || node.kind === ts.SyntaxKind.ImportType);
    }

    function checkNoTypeArguments(node: ts.NodeWithTypeArguments, symbol?: ts.Symbol) {
        if (node.typeArguments) {
            error(node, ts.Diagnostics.Type_0_is_not_generic, symbol ? symbolToString(symbol) : (node as ts.TypeReferenceNode).typeName ? ts.declarationNameToString((node as ts.TypeReferenceNode).typeName) : anon);
            return false;
        }
        return true;
    }

    function getIntendedTypeFromJSDocTypeReference(node: ts.TypeReferenceNode): ts.Type | undefined {
        if (ts.isIdentifier(node.typeName)) {
            const typeArgs = node.typeArguments;
            switch (node.typeName.escapedText) {
                case "String":
                    checkNoTypeArguments(node);
                    return stringType;
                case "Number":
                    checkNoTypeArguments(node);
                    return numberType;
                case "Boolean":
                    checkNoTypeArguments(node);
                    return booleanType;
                case "Void":
                    checkNoTypeArguments(node);
                    return voidType;
                case "Undefined":
                    checkNoTypeArguments(node);
                    return undefinedType;
                case "Null":
                    checkNoTypeArguments(node);
                    return nullType;
                case "Function":
                case "function":
                    checkNoTypeArguments(node);
                    return globalFunctionType;
                case "array":
                    return (!typeArgs || !typeArgs.length) && !noImplicitAny ? anyArrayType : undefined;
                case "promise":
                    return (!typeArgs || !typeArgs.length) && !noImplicitAny ? createPromiseType(anyType) : undefined;
                case "Object":
                    if (typeArgs && typeArgs.length === 2) {
                        if (ts.isJSDocIndexSignature(node)) {
                            const indexed = getTypeFromTypeNode(typeArgs[0]);
                            const target = getTypeFromTypeNode(typeArgs[1]);
                            const indexInfo = indexed === stringType || indexed === numberType ? [createIndexInfo(indexed, target, /*isReadonly*/ false)] : ts.emptyArray;
                            return createAnonymousType(undefined, emptySymbols, ts.emptyArray, ts.emptyArray, indexInfo);
                        }
                        return anyType;
                    }
                    checkNoTypeArguments(node);
                    return !noImplicitAny ? anyType : undefined;
            }
        }
    }

    function getTypeFromJSDocNullableTypeNode(node: ts.JSDocNullableType) {
        const type = getTypeFromTypeNode(node.type);
        return strictNullChecks ? getNullableType(type, ts.TypeFlags.Null) : type;
    }

    function getTypeFromTypeReference(node: ts.TypeReferenceType): ts.Type {
        const links = getNodeLinks(node);
        if (!links.resolvedType) {
            // handle LS queries on the `const` in `x as const` by resolving to the type of `x`
            if (ts.isConstTypeReference(node) && ts.isAssertionExpression(node.parent)) {
                links.resolvedSymbol = unknownSymbol;
                return links.resolvedType = checkExpressionCached(node.parent.expression);
            }
            let symbol: ts.Symbol | undefined;
            let type: ts.Type | undefined;
            const meaning = ts.SymbolFlags.Type;
            if (isJSDocTypeReference(node)) {
                type = getIntendedTypeFromJSDocTypeReference(node);
                if (!type) {
                    symbol = resolveTypeReferenceName(node, meaning, /*ignoreErrors*/ true);
                    if (symbol === unknownSymbol) {
                        symbol = resolveTypeReferenceName(node, meaning | ts.SymbolFlags.Value);
                    }
                    else {
                        resolveTypeReferenceName(node, meaning); // Resolve again to mark errors, if any
                    }
                    type = getTypeReferenceType(node, symbol);
                }
            }
            if (!type) {
                symbol = resolveTypeReferenceName(node, meaning);
                type = getTypeReferenceType(node, symbol);
            }
            // Cache both the resolved symbol and the resolved type. The resolved symbol is needed when we check the
            // type reference in checkTypeReferenceNode.
            links.resolvedSymbol = symbol;
            links.resolvedType = type;
        }
        return links.resolvedType;
    }

    function typeArgumentsFromTypeReferenceNode(node: ts.NodeWithTypeArguments): ts.Type[] | undefined {
        return ts.map(node.typeArguments, getTypeFromTypeNode);
    }

    function getTypeFromTypeQueryNode(node: ts.TypeQueryNode): ts.Type {
        const links = getNodeLinks(node);
        if (!links.resolvedType) {
            // TypeScript 1.0 spec (April 2014): 3.6.3
            // The expression is processed as an identifier expression (section 4.3)
            // or property access expression(section 4.10),
            // the widened type(section 3.9) of which becomes the result.
            const type = checkExpressionWithTypeArguments(node);
            links.resolvedType = getRegularTypeOfLiteralType(getWidenedType(type));
        }
        return links.resolvedType;
    }

    function getTypeOfGlobalSymbol(symbol: ts.Symbol | undefined, arity: number): ts.ObjectType {

        function getTypeDeclaration(symbol: ts.Symbol): ts.Declaration | undefined {
            const declarations = symbol.declarations;
            if (declarations) {
                for (const declaration of declarations) {
                    switch (declaration.kind) {
                        case ts.SyntaxKind.ClassDeclaration:
                        case ts.SyntaxKind.InterfaceDeclaration:
                        case ts.SyntaxKind.EnumDeclaration:
                            return declaration;
                    }
                }
            }
        }

        if (!symbol) {
            return arity ? emptyGenericType : emptyObjectType;
        }
        const type = getDeclaredTypeOfSymbol(symbol);
        if (!(type.flags & ts.TypeFlags.Object)) {
            error(getTypeDeclaration(symbol), ts.Diagnostics.Global_type_0_must_be_a_class_or_interface_type, ts.symbolName(symbol));
            return arity ? emptyGenericType : emptyObjectType;
        }
        if (ts.length((type as ts.InterfaceType).typeParameters) !== arity) {
            error(getTypeDeclaration(symbol), ts.Diagnostics.Global_type_0_must_have_1_type_parameter_s, ts.symbolName(symbol), arity);
            return arity ? emptyGenericType : emptyObjectType;
        }
        return type as ts.ObjectType;
    }

    function getGlobalValueSymbol(name: ts.__String, reportErrors: boolean): ts.Symbol | undefined {
        return getGlobalSymbol(name, ts.SymbolFlags.Value, reportErrors ? ts.Diagnostics.Cannot_find_global_value_0 : undefined);
    }

    function getGlobalTypeSymbol(name: ts.__String, reportErrors: boolean): ts.Symbol | undefined {
        return getGlobalSymbol(name, ts.SymbolFlags.Type, reportErrors ? ts.Diagnostics.Cannot_find_global_type_0 : undefined);
    }

    function getGlobalTypeAliasSymbol(name: ts.__String, arity: number, reportErrors: boolean): ts.Symbol | undefined {
        const symbol = getGlobalSymbol(name, ts.SymbolFlags.Type, reportErrors ? ts.Diagnostics.Cannot_find_global_type_0 : undefined);
        if (symbol) {
            // Resolve the declared type of the symbol. This resolves type parameters for the type
            // alias so that we can check arity.
            getDeclaredTypeOfSymbol(symbol);
            if (ts.length(getSymbolLinks(symbol).typeParameters) !== arity) {
                const decl = symbol.declarations && ts.find(symbol.declarations, ts.isTypeAliasDeclaration);
                error(decl, ts.Diagnostics.Global_type_0_must_have_1_type_parameter_s, ts.symbolName(symbol), arity);
                return undefined;
            }
        }
        return symbol;
    }

    function getGlobalSymbol(name: ts.__String, meaning: ts.SymbolFlags, diagnostic: ts.DiagnosticMessage | undefined): ts.Symbol | undefined {
        // Don't track references for global symbols anyway, so value if `isReference` is arbitrary
        return resolveName(undefined, name, meaning, diagnostic, name, /*isUse*/ false, /*excludeGlobals*/ false, /*getSpellingSuggestions*/ false);
    }

    function getGlobalType(name: ts.__String, arity: 0, reportErrors: true): ts.ObjectType;
    function getGlobalType(name: ts.__String, arity: 0, reportErrors: boolean): ts.ObjectType | undefined;
    function getGlobalType(name: ts.__String, arity: number, reportErrors: true): ts.GenericType;
    function getGlobalType(name: ts.__String, arity: number, reportErrors: boolean): ts.GenericType | undefined;
    function getGlobalType(name: ts.__String, arity: number, reportErrors: boolean): ts.ObjectType | undefined {
        const symbol = getGlobalTypeSymbol(name, reportErrors);
        return symbol || reportErrors ? getTypeOfGlobalSymbol(symbol, arity) : undefined;
    }

    function getGlobalTypedPropertyDescriptorType() {
        // We always report an error, so store a result in the event we could not resolve the symbol to prevent reporting it multiple times
        return deferredGlobalTypedPropertyDescriptorType ||= getGlobalType("TypedPropertyDescriptor" as ts.__String, /*arity*/ 1, /*reportErrors*/ true) || emptyGenericType;
    }

    function getGlobalTemplateStringsArrayType() {
        // We always report an error, so store a result in the event we could not resolve the symbol to prevent reporting it multiple times
        return deferredGlobalTemplateStringsArrayType ||= getGlobalType("TemplateStringsArray" as ts.__String, /*arity*/ 0, /*reportErrors*/ true) || emptyObjectType;
    }

    function getGlobalImportMetaType() {
        // We always report an error, so store a result in the event we could not resolve the symbol to prevent reporting it multiple times
        return deferredGlobalImportMetaType ||= getGlobalType("ImportMeta" as ts.__String, /*arity*/ 0, /*reportErrors*/ true) || emptyObjectType;
    }

    function getGlobalImportMetaExpressionType() {
        if (!deferredGlobalImportMetaExpressionType) {
            // Create a synthetic type `ImportMetaExpression { meta: MetaProperty }`
            const symbol = createSymbol(ts.SymbolFlags.None, "ImportMetaExpression" as ts.__String);
            const importMetaType = getGlobalImportMetaType();

            const metaPropertySymbol = createSymbol(ts.SymbolFlags.Property, "meta" as ts.__String, ts.CheckFlags.Readonly);
            metaPropertySymbol.parent = symbol;
            metaPropertySymbol.type = importMetaType;

            const members = ts.createSymbolTable([metaPropertySymbol]);
            symbol.members = members;

            deferredGlobalImportMetaExpressionType = createAnonymousType(symbol, members, ts.emptyArray, ts.emptyArray, ts.emptyArray);
        }
        return deferredGlobalImportMetaExpressionType;
    }

    function getGlobalImportCallOptionsType(reportErrors: boolean) {
        return (deferredGlobalImportCallOptionsType ||= getGlobalType("ImportCallOptions" as ts.__String, /*arity*/ 0, reportErrors)) || emptyObjectType;
    }

    function getGlobalESSymbolConstructorSymbol(reportErrors: boolean): ts.Symbol | undefined {
        return deferredGlobalESSymbolConstructorSymbol ||= getGlobalValueSymbol("Symbol" as ts.__String, reportErrors);
    }

    function getGlobalESSymbolConstructorTypeSymbol(reportErrors: boolean): ts.Symbol | undefined {
        return deferredGlobalESSymbolConstructorTypeSymbol ||= getGlobalTypeSymbol("SymbolConstructor" as ts.__String, reportErrors);
    }

    function getGlobalESSymbolType() {
        return (deferredGlobalESSymbolType ||= getGlobalType("Symbol" as ts.__String, /*arity*/ 0, /*reportErrors*/ false)) || emptyObjectType;
    }

    function getGlobalPromiseType(reportErrors: boolean) {
        return (deferredGlobalPromiseType ||= getGlobalType("Promise" as ts.__String, /*arity*/ 1, reportErrors)) || emptyGenericType;
    }

    function getGlobalPromiseLikeType(reportErrors: boolean) {
        return (deferredGlobalPromiseLikeType ||= getGlobalType("PromiseLike" as ts.__String, /*arity*/ 1, reportErrors)) || emptyGenericType;
    }

    function getGlobalPromiseConstructorSymbol(reportErrors: boolean): ts.Symbol | undefined {
        return deferredGlobalPromiseConstructorSymbol ||= getGlobalValueSymbol("Promise" as ts.__String, reportErrors);
    }

    function getGlobalPromiseConstructorLikeType(reportErrors: boolean) {
        return (deferredGlobalPromiseConstructorLikeType ||= getGlobalType("PromiseConstructorLike" as ts.__String, /*arity*/ 0, reportErrors)) || emptyObjectType;
    }

    function getGlobalAsyncIterableType(reportErrors: boolean) {
        return (deferredGlobalAsyncIterableType ||= getGlobalType("AsyncIterable" as ts.__String, /*arity*/ 1, reportErrors)) || emptyGenericType;
    }

    function getGlobalAsyncIteratorType(reportErrors: boolean) {
        return (deferredGlobalAsyncIteratorType ||= getGlobalType("AsyncIterator" as ts.__String, /*arity*/ 3, reportErrors)) || emptyGenericType;
    }

    function getGlobalAsyncIterableIteratorType(reportErrors: boolean) {
        return (deferredGlobalAsyncIterableIteratorType ||= getGlobalType("AsyncIterableIterator" as ts.__String, /*arity*/ 1, reportErrors)) || emptyGenericType;
    }

    function getGlobalAsyncGeneratorType(reportErrors: boolean) {
        return (deferredGlobalAsyncGeneratorType ||= getGlobalType("AsyncGenerator" as ts.__String, /*arity*/ 3, reportErrors)) || emptyGenericType;
    }

    function getGlobalIterableType(reportErrors: boolean) {
        return (deferredGlobalIterableType ||= getGlobalType("Iterable" as ts.__String, /*arity*/ 1, reportErrors)) || emptyGenericType;
    }

    function getGlobalIteratorType(reportErrors: boolean) {
        return (deferredGlobalIteratorType ||= getGlobalType("Iterator" as ts.__String, /*arity*/ 3, reportErrors)) || emptyGenericType;
    }

    function getGlobalIterableIteratorType(reportErrors: boolean) {
        return (deferredGlobalIterableIteratorType ||= getGlobalType("IterableIterator" as ts.__String, /*arity*/ 1, reportErrors)) || emptyGenericType;
    }

    function getGlobalGeneratorType(reportErrors: boolean) {
        return (deferredGlobalGeneratorType ||= getGlobalType("Generator" as ts.__String, /*arity*/ 3, reportErrors)) || emptyGenericType;
    }

    function getGlobalIteratorYieldResultType(reportErrors: boolean) {
        return (deferredGlobalIteratorYieldResultType ||= getGlobalType("IteratorYieldResult" as ts.__String, /*arity*/ 1, reportErrors)) || emptyGenericType;
    }

    function getGlobalIteratorReturnResultType(reportErrors: boolean) {
        return (deferredGlobalIteratorReturnResultType ||= getGlobalType("IteratorReturnResult" as ts.__String, /*arity*/ 1, reportErrors)) || emptyGenericType;
    }

    function getGlobalTypeOrUndefined(name: ts.__String, arity = 0): ts.ObjectType | undefined {
        const symbol = getGlobalSymbol(name, ts.SymbolFlags.Type, /*diagnostic*/ undefined);
        return symbol && getTypeOfGlobalSymbol(symbol, arity) as ts.GenericType;
    }

    function getGlobalExtractSymbol(): ts.Symbol | undefined {
        // We always report an error, so cache a result in the event we could not resolve the symbol to prevent reporting it multiple times
        deferredGlobalExtractSymbol ||= getGlobalTypeAliasSymbol("Extract" as ts.__String, /*arity*/ 2, /*reportErrors*/ true) || unknownSymbol;
        return deferredGlobalExtractSymbol === unknownSymbol ? undefined : deferredGlobalExtractSymbol;
    }

    function getGlobalOmitSymbol(): ts.Symbol | undefined {
        // We always report an error, so cache a result in the event we could not resolve the symbol to prevent reporting it multiple times
        deferredGlobalOmitSymbol ||= getGlobalTypeAliasSymbol("Omit" as ts.__String, /*arity*/ 2, /*reportErrors*/ true) || unknownSymbol;
        return deferredGlobalOmitSymbol === unknownSymbol ? undefined : deferredGlobalOmitSymbol;
    }

    function getGlobalAwaitedSymbol(reportErrors: boolean): ts.Symbol | undefined {
        // Only cache `unknownSymbol` if we are reporting errors so that we don't report the error more than once.
        deferredGlobalAwaitedSymbol ||= getGlobalTypeAliasSymbol("Awaited" as ts.__String, /*arity*/ 1, reportErrors) || (reportErrors ? unknownSymbol : undefined);
        return deferredGlobalAwaitedSymbol === unknownSymbol ? undefined : deferredGlobalAwaitedSymbol;
    }

    function getGlobalBigIntType() {
        return (deferredGlobalBigIntType ||= getGlobalType("BigInt" as ts.__String, /*arity*/ 0, /*reportErrors*/ false)) || emptyObjectType;
    }

    function getGlobalNaNSymbol(): ts.Symbol | undefined {
        return (deferredGlobalNaNSymbol ||= getGlobalValueSymbol("NaN" as ts.__String, /*reportErrors*/ false));
    }

    function getGlobalRecordSymbol(): ts.Symbol | undefined {
        deferredGlobalRecordSymbol ||= getGlobalTypeAliasSymbol("Record" as ts.__String, /*arity*/ 2, /*reportErrors*/ true) || unknownSymbol;
        return deferredGlobalRecordSymbol === unknownSymbol ? undefined : deferredGlobalRecordSymbol;
    }

    /**
     * Instantiates a global type that is generic with some element type, and returns that instantiation.
     */
    function createTypeFromGenericGlobalType(genericGlobalType: ts.GenericType, typeArguments: readonly ts.Type[]): ts.ObjectType {
        return genericGlobalType !== emptyGenericType ? createTypeReference(genericGlobalType, typeArguments) : emptyObjectType;
    }

    function createTypedPropertyDescriptorType(propertyType: ts.Type): ts.Type {
        return createTypeFromGenericGlobalType(getGlobalTypedPropertyDescriptorType(), [propertyType]);
    }

    function createIterableType(iteratedType: ts.Type): ts.Type {
        return createTypeFromGenericGlobalType(getGlobalIterableType(/*reportErrors*/ true), [iteratedType]);
    }

    function createArrayType(elementType: ts.Type, readonly?: boolean): ts.ObjectType {
        return createTypeFromGenericGlobalType(readonly ? globalReadonlyArrayType : globalArrayType, [elementType]);
    }

    function getTupleElementFlags(node: ts.TypeNode) {
        switch (node.kind) {
            case ts.SyntaxKind.OptionalType:
                return ts.ElementFlags.Optional;
            case ts.SyntaxKind.RestType:
                return getRestTypeElementFlags(node as ts.RestTypeNode);
            case ts.SyntaxKind.NamedTupleMember:
                return (node as ts.NamedTupleMember).questionToken ? ts.ElementFlags.Optional :
                    (node as ts.NamedTupleMember).dotDotDotToken ? getRestTypeElementFlags(node as ts.NamedTupleMember) :
                    ts.ElementFlags.Required;
            default:
                return ts.ElementFlags.Required;
        }
    }

    function getRestTypeElementFlags(node: ts.RestTypeNode | ts.NamedTupleMember) {
        return getArrayElementTypeNode(node.type) ? ts.ElementFlags.Rest : ts.ElementFlags.Variadic;
    }

    function getArrayOrTupleTargetType(node: ts.ArrayTypeNode | ts.TupleTypeNode): ts.GenericType {
        const readonly = isReadonlyTypeOperator(node.parent);
        const elementType = getArrayElementTypeNode(node);
        if (elementType) {
            return readonly ? globalReadonlyArrayType : globalArrayType;
        }
        const elementFlags = ts.map((node as ts.TupleTypeNode).elements, getTupleElementFlags);
        const missingName = ts.some((node as ts.TupleTypeNode).elements, e => e.kind !== ts.SyntaxKind.NamedTupleMember);
        return getTupleTargetType(elementFlags, readonly, /*associatedNames*/ missingName ? undefined : (node as ts.TupleTypeNode).elements as readonly ts.NamedTupleMember[]);
    }

    // Return true if the given type reference node is directly aliased or if it needs to be deferred
    // because it is possibly contained in a circular chain of eagerly resolved types.
    function isDeferredTypeReferenceNode(node: ts.TypeReferenceNode | ts.ArrayTypeNode | ts.TupleTypeNode, hasDefaultTypeArguments?: boolean) {
        return !!getAliasSymbolForTypeNode(node) || isResolvedByTypeAlias(node) && (
            node.kind === ts.SyntaxKind.ArrayType ? mayResolveTypeAlias(node.elementType) :
            node.kind === ts.SyntaxKind.TupleType ? ts.some(node.elements, mayResolveTypeAlias) :
            hasDefaultTypeArguments || ts.some(node.typeArguments, mayResolveTypeAlias));
    }

    // Return true when the given node is transitively contained in type constructs that eagerly
    // resolve their constituent types. We include SyntaxKind.TypeReference because type arguments
    // of type aliases are eagerly resolved.
    function isResolvedByTypeAlias(node: ts.Node): boolean {
        const parent = node.parent;
        switch (parent.kind) {
            case ts.SyntaxKind.ParenthesizedType:
            case ts.SyntaxKind.NamedTupleMember:
            case ts.SyntaxKind.TypeReference:
            case ts.SyntaxKind.UnionType:
            case ts.SyntaxKind.IntersectionType:
            case ts.SyntaxKind.IndexedAccessType:
            case ts.SyntaxKind.ConditionalType:
            case ts.SyntaxKind.TypeOperator:
            case ts.SyntaxKind.ArrayType:
            case ts.SyntaxKind.TupleType:
                return isResolvedByTypeAlias(parent);
            case ts.SyntaxKind.TypeAliasDeclaration:
                return true;
        }
        return false;
    }

    // Return true if resolving the given node (i.e. getTypeFromTypeNode) possibly causes resolution
    // of a type alias.
    function mayResolveTypeAlias(node: ts.Node): boolean {
        switch (node.kind) {
            case ts.SyntaxKind.TypeReference:
                return isJSDocTypeReference(node) || !!(resolveTypeReferenceName(node as ts.TypeReferenceNode, ts.SymbolFlags.Type).flags & ts.SymbolFlags.TypeAlias);
            case ts.SyntaxKind.TypeQuery:
                return true;
            case ts.SyntaxKind.TypeOperator:
                return (node as ts.TypeOperatorNode).operator !== ts.SyntaxKind.UniqueKeyword && mayResolveTypeAlias((node as ts.TypeOperatorNode).type);
            case ts.SyntaxKind.ParenthesizedType:
            case ts.SyntaxKind.OptionalType:
            case ts.SyntaxKind.NamedTupleMember:
            case ts.SyntaxKind.JSDocOptionalType:
            case ts.SyntaxKind.JSDocNullableType:
            case ts.SyntaxKind.JSDocNonNullableType:
            case ts.SyntaxKind.JSDocTypeExpression:
                return mayResolveTypeAlias((node as ts.ParenthesizedTypeNode | ts.OptionalTypeNode | ts.JSDocTypeReferencingNode | ts.NamedTupleMember).type);
            case ts.SyntaxKind.RestType:
                return (node as ts.RestTypeNode).type.kind !== ts.SyntaxKind.ArrayType || mayResolveTypeAlias(((node as ts.RestTypeNode).type as ts.ArrayTypeNode).elementType);
            case ts.SyntaxKind.UnionType:
            case ts.SyntaxKind.IntersectionType:
                return ts.some((node as ts.UnionOrIntersectionTypeNode).types, mayResolveTypeAlias);
            case ts.SyntaxKind.IndexedAccessType:
                return mayResolveTypeAlias((node as ts.IndexedAccessTypeNode).objectType) || mayResolveTypeAlias((node as ts.IndexedAccessTypeNode).indexType);
            case ts.SyntaxKind.ConditionalType:
                return mayResolveTypeAlias((node as ts.ConditionalTypeNode).checkType) || mayResolveTypeAlias((node as ts.ConditionalTypeNode).extendsType) ||
                    mayResolveTypeAlias((node as ts.ConditionalTypeNode).trueType) || mayResolveTypeAlias((node as ts.ConditionalTypeNode).falseType);
        }
        return false;
    }

    function getTypeFromArrayOrTupleTypeNode(node: ts.ArrayTypeNode | ts.TupleTypeNode): ts.Type {
        const links = getNodeLinks(node);
        if (!links.resolvedType) {
            const target = getArrayOrTupleTargetType(node);
            if (target === emptyGenericType) {
                links.resolvedType = emptyObjectType;
            }
            else if (!(node.kind === ts.SyntaxKind.TupleType && ts.some(node.elements, e => !!(getTupleElementFlags(e) & ts.ElementFlags.Variadic))) && isDeferredTypeReferenceNode(node)) {
                links.resolvedType = node.kind === ts.SyntaxKind.TupleType && node.elements.length === 0 ? target :
                    createDeferredTypeReference(target, node, /*mapper*/ undefined);
            }
            else {
                const elementTypes = node.kind === ts.SyntaxKind.ArrayType ? [getTypeFromTypeNode(node.elementType)] : ts.map(node.elements, getTypeFromTypeNode);
                links.resolvedType = createNormalizedTypeReference(target, elementTypes);
            }
        }
        return links.resolvedType;
    }

    function isReadonlyTypeOperator(node: ts.Node) {
        return ts.isTypeOperatorNode(node) && node.operator === ts.SyntaxKind.ReadonlyKeyword;
    }

    function createTupleType(elementTypes: readonly ts.Type[], elementFlags?: readonly ts.ElementFlags[], readonly = false, namedMemberDeclarations?: readonly (ts.NamedTupleMember | ts.ParameterDeclaration)[]) {
        const tupleTarget = getTupleTargetType(elementFlags || ts.map(elementTypes, _ => ts.ElementFlags.Required), readonly, namedMemberDeclarations);
        return tupleTarget === emptyGenericType ? emptyObjectType :
            elementTypes.length ? createNormalizedTypeReference(tupleTarget, elementTypes) :
            tupleTarget;
    }

    function getTupleTargetType(elementFlags: readonly ts.ElementFlags[], readonly: boolean, namedMemberDeclarations?: readonly (ts.NamedTupleMember | ts.ParameterDeclaration)[]): ts.GenericType {
        if (elementFlags.length === 1 && elementFlags[0] & ts.ElementFlags.Rest) {
            // [...X[]] is equivalent to just X[]
            return readonly ? globalReadonlyArrayType : globalArrayType;
        }
        const key = ts.map(elementFlags, f => f & ts.ElementFlags.Required ? "#" : f & ts.ElementFlags.Optional ? "?" : f & ts.ElementFlags.Rest ? "." : "*").join() +
            (readonly ? "R" : "") +
            (namedMemberDeclarations && namedMemberDeclarations.length ? "," + ts.map(namedMemberDeclarations, getNodeId).join(",") : "");
        let type = tupleTypes.get(key);
        if (!type) {
            tupleTypes.set(key, type = createTupleTargetType(elementFlags, readonly, namedMemberDeclarations));
        }
        return type;
    }

    // We represent tuple types as type references to synthesized generic interface types created by
    // this function. The types are of the form:
    //
    //   interface Tuple<T0, T1, T2, ...> extends Array<T0 | T1 | T2 | ...> { 0: T0, 1: T1, 2: T2, ... }
    //
    // Note that the generic type created by this function has no symbol associated with it. The same
    // is true for each of the synthesized type parameters.
    function createTupleTargetType(elementFlags: readonly ts.ElementFlags[], readonly: boolean, namedMemberDeclarations: readonly (ts.NamedTupleMember | ts.ParameterDeclaration)[] | undefined): ts.TupleType {
        const arity = elementFlags.length;
        const minLength = ts.countWhere(elementFlags, f => !!(f & (ts.ElementFlags.Required | ts.ElementFlags.Variadic)));
        let typeParameters: ts.TypeParameter[] | undefined;
        const properties: ts.Symbol[] = [];
        let combinedFlags: ts.ElementFlags = 0;
        if (arity) {
            typeParameters = new Array(arity);
            for (let i = 0; i < arity; i++) {
                const typeParameter = typeParameters[i] = createTypeParameter();
                const flags = elementFlags[i];
                combinedFlags |= flags;
                if (!(combinedFlags & ts.ElementFlags.Variable)) {
                    const property = createSymbol(ts.SymbolFlags.Property | (flags & ts.ElementFlags.Optional ? ts.SymbolFlags.Optional : 0),
                        "" + i as ts.__String, readonly ? ts.CheckFlags.Readonly : 0);
                    property.tupleLabelDeclaration = namedMemberDeclarations?.[i];
                    property.type = typeParameter;
                    properties.push(property);
                }
            }
        }
        const fixedLength = properties.length;
        const lengthSymbol = createSymbol(ts.SymbolFlags.Property, "length" as ts.__String, readonly ? ts.CheckFlags.Readonly : 0);
        if (combinedFlags & ts.ElementFlags.Variable) {
            lengthSymbol.type = numberType;
        }
        else {
            const literalTypes = [];
            for (let i = minLength; i <= arity; i++) literalTypes.push(getNumberLiteralType(i));
            lengthSymbol.type = getUnionType(literalTypes);
        }
        properties.push(lengthSymbol);
        const type = createObjectType(ts.ObjectFlags.Tuple | ts.ObjectFlags.Reference) as ts.TupleType & ts.InterfaceTypeWithDeclaredMembers;
        type.typeParameters = typeParameters;
        type.outerTypeParameters = undefined;
        type.localTypeParameters = typeParameters;
        type.instantiations = new ts.Map<string, ts.TypeReference>();
        type.instantiations.set(getTypeListId(type.typeParameters), type as ts.GenericType);
        type.target = type as ts.GenericType;
        type.resolvedTypeArguments = type.typeParameters;
        type.thisType = createTypeParameter();
        type.thisType.isThisType = true;
        type.thisType.constraint = type;
        type.declaredProperties = properties;
        type.declaredCallSignatures = ts.emptyArray;
        type.declaredConstructSignatures = ts.emptyArray;
        type.declaredIndexInfos = ts.emptyArray;
        type.elementFlags = elementFlags;
        type.minLength = minLength;
        type.fixedLength = fixedLength;
        type.hasRestElement = !!(combinedFlags & ts.ElementFlags.Variable);
        type.combinedFlags = combinedFlags;
        type.readonly = readonly;
        type.labeledElementDeclarations = namedMemberDeclarations;
        return type;
    }

    function createNormalizedTypeReference(target: ts.GenericType, typeArguments: readonly ts.Type[] | undefined) {
        return target.objectFlags & ts.ObjectFlags.Tuple ? createNormalizedTupleType(target as ts.TupleType, typeArguments!) : createTypeReference(target, typeArguments);
    }

    function createNormalizedTupleType(target: ts.TupleType, elementTypes: readonly ts.Type[]): ts.Type {
        if (!(target.combinedFlags & ts.ElementFlags.NonRequired)) {
            // No need to normalize when we only have regular required elements
            return createTypeReference(target, elementTypes);
        }
        if (target.combinedFlags & ts.ElementFlags.Variadic) {
            // Transform [A, ...(X | Y | Z)] into [A, ...X] | [A, ...Y] | [A, ...Z]
            const unionIndex = ts.findIndex(elementTypes, (t, i) => !!(target.elementFlags[i] & ts.ElementFlags.Variadic && t.flags & (ts.TypeFlags.Never | ts.TypeFlags.Union)));
            if (unionIndex >= 0) {
                return checkCrossProductUnion(ts.map(elementTypes, (t, i) => target.elementFlags[i] & ts.ElementFlags.Variadic ? t : unknownType)) ?
                    mapType(elementTypes[unionIndex], t => createNormalizedTupleType(target, ts.replaceElement(elementTypes, unionIndex, t))) :
                    errorType;
            }
        }
        // We have optional, rest, or variadic elements that may need normalizing. Normalization ensures that all variadic
        // elements are generic and that the tuple type has one of the following layouts, disregarding variadic elements:
        // (1) Zero or more required elements, followed by zero or more optional elements, followed by zero or one rest element.
        // (2) Zero or more required elements, followed by a rest element, followed by zero or more required elements.
        // In either layout, zero or more generic variadic elements may be present at any location.
        const expandedTypes: ts.Type[] = [];
        const expandedFlags: ts.ElementFlags[] = [];
        let expandedDeclarations: (ts.NamedTupleMember | ts.ParameterDeclaration)[] | undefined = [];
        let lastRequiredIndex = -1;
        let firstRestIndex = -1;
        let lastOptionalOrRestIndex = -1;
        for (let i = 0; i < elementTypes.length; i++) {
            const type = elementTypes[i];
            const flags = target.elementFlags[i];
            if (flags & ts.ElementFlags.Variadic) {
                if (type.flags & ts.TypeFlags.InstantiableNonPrimitive || isGenericMappedType(type)) {
                    // Generic variadic elements stay as they are.
                    addElement(type, ts.ElementFlags.Variadic, target.labeledElementDeclarations?.[i]);
                }
                else if (isTupleType(type)) {
                    const elements = getTypeArguments(type);
                    if (elements.length + expandedTypes.length >= 10_000) {
                        error(currentNode, ts.isPartOfTypeNode(currentNode!)
                            ? ts.Diagnostics.Type_produces_a_tuple_type_that_is_too_large_to_represent
                            : ts.Diagnostics.Expression_produces_a_tuple_type_that_is_too_large_to_represent);
                        return errorType;
                    }
                    // Spread variadic elements with tuple types into the resulting tuple.
                    ts.forEach(elements, (t, n) => addElement(t, type.target.elementFlags[n], type.target.labeledElementDeclarations?.[n]));
                }
                else {
                    // Treat everything else as an array type and create a rest element.
                    addElement(isArrayLikeType(type) && getIndexTypeOfType(type, numberType) || errorType, ts.ElementFlags.Rest, target.labeledElementDeclarations?.[i]);
                }
            }
            else {
                // Copy other element kinds with no change.
                addElement(type, flags, target.labeledElementDeclarations?.[i]);
            }
        }
        // Turn optional elements preceding the last required element into required elements
        for (let i = 0; i < lastRequiredIndex; i++) {
            if (expandedFlags[i] & ts.ElementFlags.Optional) expandedFlags[i] = ts.ElementFlags.Required;
        }
        if (firstRestIndex >= 0 && firstRestIndex < lastOptionalOrRestIndex) {
            // Turn elements between first rest and last optional/rest into a single rest element
            expandedTypes[firstRestIndex] = getUnionType(ts.sameMap(expandedTypes.slice(firstRestIndex, lastOptionalOrRestIndex + 1),
                (t, i) => expandedFlags[firstRestIndex + i] & ts.ElementFlags.Variadic ? getIndexedAccessType(t, numberType) : t));
            expandedTypes.splice(firstRestIndex + 1, lastOptionalOrRestIndex - firstRestIndex);
            expandedFlags.splice(firstRestIndex + 1, lastOptionalOrRestIndex - firstRestIndex);
            expandedDeclarations?.splice(firstRestIndex + 1, lastOptionalOrRestIndex - firstRestIndex);
        }
        const tupleTarget = getTupleTargetType(expandedFlags, target.readonly, expandedDeclarations);
        return tupleTarget === emptyGenericType ? emptyObjectType :
            expandedFlags.length ? createTypeReference(tupleTarget, expandedTypes) :
            tupleTarget;

        function addElement(type: ts.Type, flags: ts.ElementFlags, declaration: ts.NamedTupleMember | ts.ParameterDeclaration | undefined) {
            if (flags & ts.ElementFlags.Required) {
                lastRequiredIndex = expandedFlags.length;
            }
            if (flags & ts.ElementFlags.Rest && firstRestIndex < 0) {
                firstRestIndex = expandedFlags.length;
            }
            if (flags & (ts.ElementFlags.Optional | ts.ElementFlags.Rest)) {
                lastOptionalOrRestIndex = expandedFlags.length;
            }
            expandedTypes.push(flags & ts.ElementFlags.Optional ? addOptionality(type, /*isProperty*/ true) : type);
            expandedFlags.push(flags);
            if (expandedDeclarations && declaration) {
                expandedDeclarations.push(declaration);
            }
            else {
                expandedDeclarations = undefined;
            }
        }
    }

    function sliceTupleType(type: ts.TupleTypeReference, index: number, endSkipCount = 0) {
        const target = type.target;
        const endIndex = getTypeReferenceArity(type) - endSkipCount;
        return index > target.fixedLength ? getRestArrayTypeOfTupleType(type) || createTupleType(ts.emptyArray) :
            createTupleType(getTypeArguments(type).slice(index, endIndex), target.elementFlags.slice(index, endIndex),
                /*readonly*/ false, target.labeledElementDeclarations && target.labeledElementDeclarations.slice(index, endIndex));
    }

    function getKnownKeysOfTupleType(type: ts.TupleTypeReference) {
        return getUnionType(ts.append(ts.arrayOf(type.target.fixedLength, i => getStringLiteralType("" + i)),
            getIndexType(type.target.readonly ? globalReadonlyArrayType : globalArrayType)));
    }

    // Return count of starting consecutive tuple elements of the given kind(s)
    function getStartElementCount(type: ts.TupleType, flags: ts.ElementFlags) {
        const index = ts.findIndex(type.elementFlags, f => !(f & flags));
        return index >= 0 ? index : type.elementFlags.length;
    }

    // Return count of ending consecutive tuple elements of the given kind(s)
    function getEndElementCount(type: ts.TupleType, flags: ts.ElementFlags) {
        return type.elementFlags.length - ts.findLastIndex(type.elementFlags, f => !(f & flags)) - 1;
    }

    function getTypeFromOptionalTypeNode(node: ts.OptionalTypeNode): ts.Type {
        return addOptionality(getTypeFromTypeNode(node.type), /*isProperty*/ true);
    }

    function getTypeId(type: ts.Type): ts.TypeId {
        return type.id;
    }

    function containsType(types: readonly ts.Type[], type: ts.Type): boolean {
        return ts.binarySearch(types, type, getTypeId, ts.compareValues) >= 0;
    }

    function insertType(types: ts.Type[], type: ts.Type): boolean {
        const index = ts.binarySearch(types, type, getTypeId, ts.compareValues);
        if (index < 0) {
            types.splice(~index, 0, type);
            return true;
        }
        return false;
    }

    function addTypeToUnion(typeSet: ts.Type[], includes: ts.TypeFlags, type: ts.Type) {
        const flags = type.flags;
        if (flags & ts.TypeFlags.Union) {
            return addTypesToUnion(typeSet, includes | (isNamedUnionType(type) ? ts.TypeFlags.Union : 0), (type as ts.UnionType).types);
        }
        // We ignore 'never' types in unions
        if (!(flags & ts.TypeFlags.Never)) {
            includes |= flags & ts.TypeFlags.IncludesMask;
            if (flags & ts.TypeFlags.Instantiable) includes |= ts.TypeFlags.IncludesInstantiable;
            if (type === wildcardType) includes |= ts.TypeFlags.IncludesWildcard;
            if (!strictNullChecks && flags & ts.TypeFlags.Nullable) {
                if (!(ts.getObjectFlags(type) & ts.ObjectFlags.ContainsWideningType)) includes |= ts.TypeFlags.IncludesNonWideningType;
            }
            else {
                const len = typeSet.length;
                const index = len && type.id > typeSet[len - 1].id ? ~len : ts.binarySearch(typeSet, type, getTypeId, ts.compareValues);
                if (index < 0) {
                    typeSet.splice(~index, 0, type);
                }
            }
        }
        return includes;
    }

    // Add the given types to the given type set. Order is preserved, duplicates are removed,
    // and nested types of the given kind are flattened into the set.
    function addTypesToUnion(typeSet: ts.Type[], includes: ts.TypeFlags, types: readonly ts.Type[]): ts.TypeFlags {
        for (const type of types) {
            includes = addTypeToUnion(typeSet, includes, type);
        }
        return includes;
    }

    function removeSubtypes(types: ts.Type[], hasObjectTypes: boolean): ts.Type[] | undefined {
        // [] and [T] immediately reduce to [] and [T] respectively
        if (types.length < 2) {
            return types;
        }

        const id = getTypeListId(types);
        const match = subtypeReductionCache.get(id);
        if (match) {
            return match;
        }

        // We assume that redundant primitive types have already been removed from the types array and that there
        // are no any and unknown types in the array. Thus, the only possible supertypes for primitive types are empty
        // object types, and if none of those are present we can exclude primitive types from the subtype check.
        const hasEmptyObject = hasObjectTypes && ts.some(types, t => !!(t.flags & ts.TypeFlags.Object) && !isGenericMappedType(t) && isEmptyResolvedType(resolveStructuredTypeMembers(t as ts.ObjectType)));
        const len = types.length;
        let i = len;
        let count = 0;
        while (i > 0) {
            i--;
            const source = types[i];
            if (hasEmptyObject || source.flags & ts.TypeFlags.StructuredOrInstantiable) {
                // Find the first property with a unit type, if any. When constituents have a property by the same name
                // but of a different unit type, we can quickly disqualify them from subtype checks. This helps subtype
                // reduction of large discriminated union types.
                const keyProperty = source.flags & (ts.TypeFlags.Object | ts.TypeFlags.Intersection | ts.TypeFlags.InstantiableNonPrimitive) ?
                    ts.find(getPropertiesOfType(source), p => isUnitType(getTypeOfSymbol(p))) :
                    undefined;
                const keyPropertyType = keyProperty && getRegularTypeOfLiteralType(getTypeOfSymbol(keyProperty));
                for (const target of types) {
                    if (source !== target) {
                        if (count === 100000) {
                            // After 100000 subtype checks we estimate the remaining amount of work by assuming the
                            // same ratio of checks per element. If the estimated number of remaining type checks is
                            // greater than 1M we deem the union type too complex to represent. This for example
                            // caps union types at 1000 unique object types.
                            const estimatedCount = (count / (len - i)) * len;
                            if (estimatedCount > 1000000) {
                                ts.tracing?.instant(ts.tracing.Phase.CheckTypes, "removeSubtypes_DepthLimit", { typeIds: types.map(t => t.id) });
                                error(currentNode, ts.Diagnostics.Expression_produces_a_union_type_that_is_too_complex_to_represent);
                                return undefined;
                            }
                        }
                        count++;
                        if (keyProperty && target.flags & (ts.TypeFlags.Object | ts.TypeFlags.Intersection | ts.TypeFlags.InstantiableNonPrimitive)) {
                            const t = getTypeOfPropertyOfType(target, keyProperty.escapedName);
                            if (t && isUnitType(t) && getRegularTypeOfLiteralType(t) !== keyPropertyType) {
                                continue;
                            }
                        }
                        if (isTypeRelatedTo(source, target, strictSubtypeRelation) && (
                            !(ts.getObjectFlags(getTargetType(source)) & ts.ObjectFlags.Class) ||
                            !(ts.getObjectFlags(getTargetType(target)) & ts.ObjectFlags.Class) ||
                            isTypeDerivedFrom(source, target))) {
                            ts.orderedRemoveItemAt(types, i);
                            break;
                        }
                    }
                }
            }
        }
        subtypeReductionCache.set(id, types);
        return types;
    }

    function removeRedundantLiteralTypes(types: ts.Type[], includes: ts.TypeFlags, reduceVoidUndefined: boolean) {
        let i = types.length;
        while (i > 0) {
            i--;
            const t = types[i];
            const flags = t.flags;
            const remove =
                flags & (ts.TypeFlags.StringLiteral | ts.TypeFlags.TemplateLiteral | ts.TypeFlags.StringMapping) && includes & ts.TypeFlags.String ||
                flags & ts.TypeFlags.NumberLiteral && includes & ts.TypeFlags.Number ||
                flags & ts.TypeFlags.BigIntLiteral && includes & ts.TypeFlags.BigInt ||
                flags & ts.TypeFlags.UniqueESSymbol && includes & ts.TypeFlags.ESSymbol ||
                reduceVoidUndefined && flags & ts.TypeFlags.Undefined && includes & ts.TypeFlags.Void ||
                isFreshLiteralType(t) && containsType(types, (t as ts.LiteralType).regularType);
            if (remove) {
                ts.orderedRemoveItemAt(types, i);
            }
        }
    }

    function removeStringLiteralsMatchedByTemplateLiterals(types: ts.Type[]) {
        const templates = ts.filter(types, isPatternLiteralType) as ts.TemplateLiteralType[];
        if (templates.length) {
            let i = types.length;
            while (i > 0) {
                i--;
                const t = types[i];
                if (t.flags & ts.TypeFlags.StringLiteral && ts.some(templates, template => isTypeMatchedByTemplateLiteralType(t, template))) {
                    ts.orderedRemoveItemAt(types, i);
                }
            }
        }
    }

    function isNamedUnionType(type: ts.Type) {
        return !!(type.flags & ts.TypeFlags.Union && (type.aliasSymbol || (type as ts.UnionType).origin));
    }

    function addNamedUnions(namedUnions: ts.Type[], types: readonly ts.Type[]) {
        for (const t of types) {
            if (t.flags & ts.TypeFlags.Union) {
                const origin = (t as ts.UnionType).origin;
                if (t.aliasSymbol || origin && !(origin.flags & ts.TypeFlags.Union)) {
                    ts.pushIfUnique(namedUnions, t);
                }
                else if (origin && origin.flags & ts.TypeFlags.Union) {
                    addNamedUnions(namedUnions, (origin as ts.UnionType).types);
                }
            }
        }
    }

    function createOriginUnionOrIntersectionType(flags: ts.TypeFlags, types: ts.Type[]) {
        const result = createOriginType(flags) as ts.UnionOrIntersectionType;
        result.types = types;
        return result;
    }

    // We sort and deduplicate the constituent types based on object identity. If the subtypeReduction
    // flag is specified we also reduce the constituent type set to only include types that aren't subtypes
    // of other types. Subtype reduction is expensive for large union types and is possible only when union
    // types are known not to circularly reference themselves (as is the case with union types created by
    // expression constructs such as array literals and the || and ?: operators). Named types can
    // circularly reference themselves and therefore cannot be subtype reduced during their declaration.
    // For example, "type Item = string | (() => Item" is a named type that circularly references itself.
    function getUnionType(types: readonly ts.Type[], unionReduction: ts.UnionReduction = ts.UnionReduction.Literal, aliasSymbol?: ts.Symbol, aliasTypeArguments?: readonly ts.Type[], origin?: ts.Type): ts.Type {
        if (types.length === 0) {
            return neverType;
        }
        if (types.length === 1) {
            return types[0];
        }
        let typeSet: ts.Type[] | undefined = [];
        const includes = addTypesToUnion(typeSet, 0, types);
        if (unionReduction !== ts.UnionReduction.None) {
            if (includes & ts.TypeFlags.AnyOrUnknown) {
                return includes & ts.TypeFlags.Any ?
                    includes & ts.TypeFlags.IncludesWildcard ? wildcardType : anyType :
                    includes & ts.TypeFlags.Null || containsType(typeSet, unknownType) ? unknownType : nonNullUnknownType;
            }
            if (exactOptionalPropertyTypes && includes & ts.TypeFlags.Undefined) {
                const missingIndex = ts.binarySearch(typeSet, missingType, getTypeId, ts.compareValues);
                if (missingIndex >= 0 && containsType(typeSet, undefinedType)) {
                    ts.orderedRemoveItemAt(typeSet, missingIndex);
                }
            }
            if (includes & (ts.TypeFlags.Literal | ts.TypeFlags.UniqueESSymbol | ts.TypeFlags.TemplateLiteral | ts.TypeFlags.StringMapping) || includes & ts.TypeFlags.Void && includes & ts.TypeFlags.Undefined) {
                removeRedundantLiteralTypes(typeSet, includes, !!(unionReduction & ts.UnionReduction.Subtype));
            }
            if (includes & ts.TypeFlags.StringLiteral && includes & ts.TypeFlags.TemplateLiteral) {
                removeStringLiteralsMatchedByTemplateLiterals(typeSet);
            }
            if (unionReduction === ts.UnionReduction.Subtype) {
                typeSet = removeSubtypes(typeSet, !!(includes & ts.TypeFlags.Object));
                if (!typeSet) {
                    return errorType;
                }
            }
            if (typeSet.length === 0) {
                return includes & ts.TypeFlags.Null ? includes & ts.TypeFlags.IncludesNonWideningType ? nullType : nullWideningType :
                    includes & ts.TypeFlags.Undefined ? includes & ts.TypeFlags.IncludesNonWideningType ? undefinedType : undefinedWideningType :
                    neverType;
            }
        }
        if (!origin && includes & ts.TypeFlags.Union) {
            const namedUnions: ts.Type[] = [];
            addNamedUnions(namedUnions, types);
            const reducedTypes: ts.Type[] = [];
            for (const t of typeSet) {
                if (!ts.some(namedUnions, union => containsType((union as ts.UnionType).types, t))) {
                    reducedTypes.push(t);
                }
            }
            if (!aliasSymbol && namedUnions.length === 1 && reducedTypes.length === 0) {
                return namedUnions[0];
            }
            // We create a denormalized origin type only when the union was created from one or more named unions
            // (unions with alias symbols or origins) and when there is no overlap between those named unions.
            const namedTypesCount = ts.reduceLeft(namedUnions, (sum, union) => sum + (union as ts.UnionType).types.length, 0);
            if (namedTypesCount + reducedTypes.length === typeSet.length) {
                for (const t of namedUnions) {
                    insertType(reducedTypes, t);
                }
                origin = createOriginUnionOrIntersectionType(ts.TypeFlags.Union, reducedTypes);
            }
        }
        const objectFlags = (includes & ts.TypeFlags.NotPrimitiveUnion ? 0 : ts.ObjectFlags.PrimitiveUnion) |
            (includes & ts.TypeFlags.Intersection ? ts.ObjectFlags.ContainsIntersections : 0);
        return getUnionTypeFromSortedList(typeSet, objectFlags, aliasSymbol, aliasTypeArguments, origin);
    }

    function getUnionOrIntersectionTypePredicate(signatures: readonly ts.Signature[], kind: ts.TypeFlags | undefined): ts.TypePredicate | undefined {
        let first: ts.TypePredicate | undefined;
        const types: ts.Type[] = [];
        for (const sig of signatures) {
            const pred = getTypePredicateOfSignature(sig);
            if (!pred || pred.kind === ts.TypePredicateKind.AssertsThis || pred.kind === ts.TypePredicateKind.AssertsIdentifier) {
                if (kind !== ts.TypeFlags.Intersection) {
                    continue;
                }
                else {
                    return; // intersections demand all members be type predicates for the result to have a predicate
                }
            }

            if (first) {
                if (!typePredicateKindsMatch(first, pred)) {
                    // No common type predicate.
                    return undefined;
                }
            }
            else {
                first = pred;
            }
            types.push(pred.type);
        }
        if (!first) {
            // No signatures had a type predicate.
            return undefined;
        }
        const compositeType = getUnionOrIntersectionType(types, kind);
        return createTypePredicate(first.kind, first.parameterName, first.parameterIndex, compositeType);
    }

    function typePredicateKindsMatch(a: ts.TypePredicate, b: ts.TypePredicate): boolean {
        return a.kind === b.kind && a.parameterIndex === b.parameterIndex;
    }

    // This function assumes the constituent type list is sorted and deduplicated.
    function getUnionTypeFromSortedList(types: ts.Type[], objectFlags: ts.ObjectFlags, aliasSymbol?: ts.Symbol, aliasTypeArguments?: readonly ts.Type[], origin?: ts.Type): ts.Type {
        if (types.length === 0) {
            return neverType;
        }
        if (types.length === 1) {
            return types[0];
        }
        const typeKey = !origin ? getTypeListId(types) :
            origin.flags & ts.TypeFlags.Union ? `|${getTypeListId((origin as ts.UnionType).types)}` :
            origin.flags & ts.TypeFlags.Intersection ? `&${getTypeListId((origin as ts.IntersectionType).types)}` :
            `#${(origin as ts.IndexType).type.id}|${getTypeListId(types)}`; // origin type id alone is insufficient, as `keyof x` may resolve to multiple WIP values while `x` is still resolving
        const id = typeKey + getAliasId(aliasSymbol, aliasTypeArguments);
        let type = unionTypes.get(id);
        if (!type) {
            type = createType(ts.TypeFlags.Union) as ts.UnionType;
            type.objectFlags = objectFlags | getPropagatingFlagsOfTypes(types, /*excludeKinds*/ ts.TypeFlags.Nullable);
            type.types = types;
            type.origin = origin;
            type.aliasSymbol = aliasSymbol;
            type.aliasTypeArguments = aliasTypeArguments;
            if (types.length === 2 && types[0].flags & ts.TypeFlags.BooleanLiteral && types[1].flags & ts.TypeFlags.BooleanLiteral) {
                type.flags |= ts.TypeFlags.Boolean;
                (type as ts.UnionType & ts.IntrinsicType).intrinsicName = "boolean";
            }
            unionTypes.set(id, type);
        }
        return type;
    }

    function getTypeFromUnionTypeNode(node: ts.UnionTypeNode): ts.Type {
        const links = getNodeLinks(node);
        if (!links.resolvedType) {
            const aliasSymbol = getAliasSymbolForTypeNode(node);
            links.resolvedType = getUnionType(ts.map(node.types, getTypeFromTypeNode), ts.UnionReduction.Literal,
                aliasSymbol, getTypeArgumentsForAliasSymbol(aliasSymbol));
        }
        return links.resolvedType;
    }

    function addTypeToIntersection(typeSet: ts.ESMap<string, ts.Type>, includes: ts.TypeFlags, type: ts.Type) {
        const flags = type.flags;
        if (flags & ts.TypeFlags.Intersection) {
            return addTypesToIntersection(typeSet, includes, (type as ts.IntersectionType).types);
        }
        if (isEmptyAnonymousObjectType(type)) {
            if (!(includes & ts.TypeFlags.IncludesEmptyObject)) {
                includes |= ts.TypeFlags.IncludesEmptyObject;
                typeSet.set(type.id.toString(), type);
            }
        }
        else {
            if (flags & ts.TypeFlags.AnyOrUnknown) {
                if (type === wildcardType) includes |= ts.TypeFlags.IncludesWildcard;
            }
            else if (strictNullChecks || !(flags & ts.TypeFlags.Nullable)) {
                if (exactOptionalPropertyTypes && type === missingType) {
                    includes |= ts.TypeFlags.IncludesMissingType;
                    type = undefinedType;
                }
                if (!typeSet.has(type.id.toString())) {
                    if (type.flags & ts.TypeFlags.Unit && includes & ts.TypeFlags.Unit) {
                        // We have seen two distinct unit types which means we should reduce to an
                        // empty intersection. Adding TypeFlags.NonPrimitive causes that to happen.
                        includes |= ts.TypeFlags.NonPrimitive;
                    }
                    typeSet.set(type.id.toString(), type);
                }
            }
            includes |= flags & ts.TypeFlags.IncludesMask;
        }
        return includes;
    }

    // Add the given types to the given type set. Order is preserved, freshness is removed from literal
    // types, duplicates are removed, and nested types of the given kind are flattened into the set.
    function addTypesToIntersection(typeSet: ts.ESMap<string, ts.Type>, includes: ts.TypeFlags, types: readonly ts.Type[]) {
        for (const type of types) {
            includes = addTypeToIntersection(typeSet, includes, getRegularTypeOfLiteralType(type));
        }
        return includes;
    }

    function removeRedundantSupertypes(types: ts.Type[], includes: ts.TypeFlags) {
        let i = types.length;
        while (i > 0) {
            i--;
            const t = types[i];
            const remove =
                t.flags & ts.TypeFlags.String && includes & (ts.TypeFlags.StringLiteral | ts.TypeFlags.TemplateLiteral | ts.TypeFlags.StringMapping) ||
                t.flags & ts.TypeFlags.Number && includes & ts.TypeFlags.NumberLiteral ||
                t.flags & ts.TypeFlags.BigInt && includes & ts.TypeFlags.BigIntLiteral ||
                t.flags & ts.TypeFlags.ESSymbol && includes & ts.TypeFlags.UniqueESSymbol ||
                t.flags & ts.TypeFlags.Void && includes & ts.TypeFlags.Undefined ||
                isEmptyAnonymousObjectType(t) && includes & ts.TypeFlags.DefinitelyNonNullable;
            if (remove) {
                ts.orderedRemoveItemAt(types, i);
            }
        }
    }

    // Check that the given type has a match in every union. A given type is matched by
    // an identical type, and a literal type is additionally matched by its corresponding
    // primitive type.
    function eachUnionContains(unionTypes: ts.UnionType[], type: ts.Type) {
        for (const u of unionTypes) {
            if (!containsType(u.types, type)) {
                const primitive = type.flags & ts.TypeFlags.StringLiteral ? stringType :
                    type.flags & ts.TypeFlags.NumberLiteral ? numberType :
                    type.flags & ts.TypeFlags.BigIntLiteral ? bigintType :
                    type.flags & ts.TypeFlags.UniqueESSymbol ? esSymbolType :
                    undefined;
                if (!primitive || !containsType(u.types, primitive)) {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * Returns `true` if the intersection of the template literals and string literals is the empty set, eg `get${string}` & "setX", and should reduce to `never`
     */
    function extractRedundantTemplateLiterals(types: ts.Type[]): boolean {
        let i = types.length;
        const literals = ts.filter(types, t => !!(t.flags & ts.TypeFlags.StringLiteral));
        while (i > 0) {
            i--;
            const t = types[i];
            if (!(t.flags & ts.TypeFlags.TemplateLiteral)) continue;
            for (const t2 of literals) {
                if (isTypeSubtypeOf(t2, t)) {
                    // eg, ``get${T}` & "getX"` is just `"getX"`
                    ts.orderedRemoveItemAt(types, i);
                    break;
                }
                else if (isPatternLiteralType(t)) {
                    return true;
                }
            }
        }
        return false;
    }

    function eachIsUnionContaining(types: ts.Type[], flag: ts.TypeFlags) {
        return ts.every(types, t => !!(t.flags & ts.TypeFlags.Union) && ts.some((t as ts.UnionType).types, tt => !!(tt.flags & flag)));
    }

    function removeFromEach(types: ts.Type[], flag: ts.TypeFlags) {
        for (let i = 0; i < types.length; i++) {
            types[i] = filterType(types[i], t => !(t.flags & flag));
        }
    }

    // If the given list of types contains more than one union of primitive types, replace the
    // first with a union containing an intersection of those primitive types, then remove the
    // other unions and return true. Otherwise, do nothing and return false.
    function intersectUnionsOfPrimitiveTypes(types: ts.Type[]) {
        let unionTypes: ts.UnionType[] | undefined;
        const index = ts.findIndex(types, t => !!(ts.getObjectFlags(t) & ts.ObjectFlags.PrimitiveUnion));
        if (index < 0) {
            return false;
        }
        let i = index + 1;
        // Remove all but the first union of primitive types and collect them in
        // the unionTypes array.
        while (i < types.length) {
            const t = types[i];
            if (ts.getObjectFlags(t) & ts.ObjectFlags.PrimitiveUnion) {
                (unionTypes || (unionTypes = [types[index] as ts.UnionType])).push(t as ts.UnionType);
                ts.orderedRemoveItemAt(types, i);
            }
            else {
                i++;
            }
        }
        // Return false if there was only one union of primitive types
        if (!unionTypes) {
            return false;
        }
        // We have more than one union of primitive types, now intersect them. For each
        // type in each union we check if the type is matched in every union and if so
        // we include it in the result.
        const checked: ts.Type[] = [];
        const result: ts.Type[] = [];
        for (const u of unionTypes) {
            for (const t of u.types) {
                if (insertType(checked, t)) {
                    if (eachUnionContains(unionTypes, t)) {
                        insertType(result, t);
                    }
                }
            }
        }
        // Finally replace the first union with the result
        types[index] = getUnionTypeFromSortedList(result, ts.ObjectFlags.PrimitiveUnion);
        return true;
    }

    function createIntersectionType(types: ts.Type[], aliasSymbol?: ts.Symbol, aliasTypeArguments?: readonly ts.Type[]) {
        const result = createType(ts.TypeFlags.Intersection) as ts.IntersectionType;
        result.objectFlags = getPropagatingFlagsOfTypes(types, /*excludeKinds*/ ts.TypeFlags.Nullable);
        result.types = types;
        result.aliasSymbol = aliasSymbol;
        result.aliasTypeArguments = aliasTypeArguments;
        return result;
    }

    // We normalize combinations of intersection and union types based on the distributive property of the '&'
    // operator. Specifically, because X & (A | B) is equivalent to X & A | X & B, we can transform intersection
    // types with union type constituents into equivalent union types with intersection type constituents and
    // effectively ensure that union types are always at the top level in type representations.
    //
    // We do not perform structural deduplication on intersection types. Intersection types are created only by the &
    // type operator and we can't reduce those because we want to support recursive intersection types. For example,
    // a type alias of the form "type List<T> = T & { next: List<T> }" cannot be reduced during its declaration.
    // Also, unlike union types, the order of the constituent types is preserved in order that overload resolution
    // for intersections of types with signatures can be deterministic.
    function getIntersectionType(types: readonly ts.Type[], aliasSymbol?: ts.Symbol, aliasTypeArguments?: readonly ts.Type[], noSupertypeReduction?: boolean): ts.Type {
        const typeMembershipMap: ts.ESMap<string, ts.Type> = new ts.Map();
        const includes = addTypesToIntersection(typeMembershipMap, 0, types);
        const typeSet: ts.Type[] = ts.arrayFrom(typeMembershipMap.values());
        // An intersection type is considered empty if it contains
        // the type never, or
        // more than one unit type or,
        // an object type and a nullable type (null or undefined), or
        // a string-like type and a type known to be non-string-like, or
        // a number-like type and a type known to be non-number-like, or
        // a symbol-like type and a type known to be non-symbol-like, or
        // a void-like type and a type known to be non-void-like, or
        // a non-primitive type and a type known to be primitive.
        if (includes & ts.TypeFlags.Never) {
            return ts.contains(typeSet, silentNeverType) ? silentNeverType : neverType;
        }
        if (strictNullChecks && includes & ts.TypeFlags.Nullable && includes & (ts.TypeFlags.Object | ts.TypeFlags.NonPrimitive | ts.TypeFlags.IncludesEmptyObject) ||
            includes & ts.TypeFlags.NonPrimitive && includes & (ts.TypeFlags.DisjointDomains & ~ts.TypeFlags.NonPrimitive) ||
            includes & ts.TypeFlags.StringLike && includes & (ts.TypeFlags.DisjointDomains & ~ts.TypeFlags.StringLike) ||
            includes & ts.TypeFlags.NumberLike && includes & (ts.TypeFlags.DisjointDomains & ~ts.TypeFlags.NumberLike) ||
            includes & ts.TypeFlags.BigIntLike && includes & (ts.TypeFlags.DisjointDomains & ~ts.TypeFlags.BigIntLike) ||
            includes & ts.TypeFlags.ESSymbolLike && includes & (ts.TypeFlags.DisjointDomains & ~ts.TypeFlags.ESSymbolLike) ||
            includes & ts.TypeFlags.VoidLike && includes & (ts.TypeFlags.DisjointDomains & ~ts.TypeFlags.VoidLike)) {
            return neverType;
        }
        if (includes & ts.TypeFlags.TemplateLiteral && includes & ts.TypeFlags.StringLiteral && extractRedundantTemplateLiterals(typeSet)) {
            return neverType;
        }
        if (includes & ts.TypeFlags.Any) {
            return includes & ts.TypeFlags.IncludesWildcard ? wildcardType : anyType;
        }
        if (!strictNullChecks && includes & ts.TypeFlags.Nullable) {
            return includes & ts.TypeFlags.IncludesEmptyObject ? neverType : includes & ts.TypeFlags.Undefined ? undefinedType : nullType;
        }
        if (includes & ts.TypeFlags.String && includes & (ts.TypeFlags.StringLiteral | ts.TypeFlags.TemplateLiteral | ts.TypeFlags.StringMapping) ||
            includes & ts.TypeFlags.Number && includes & ts.TypeFlags.NumberLiteral ||
            includes & ts.TypeFlags.BigInt && includes & ts.TypeFlags.BigIntLiteral ||
            includes & ts.TypeFlags.ESSymbol && includes & ts.TypeFlags.UniqueESSymbol ||
            includes & ts.TypeFlags.Void && includes & ts.TypeFlags.Undefined ||
            includes & ts.TypeFlags.IncludesEmptyObject && includes & ts.TypeFlags.DefinitelyNonNullable) {
            if (!noSupertypeReduction) removeRedundantSupertypes(typeSet, includes);
        }
        if (includes & ts.TypeFlags.IncludesMissingType) {
            typeSet[typeSet.indexOf(undefinedType)] = missingType;
        }
        if (typeSet.length === 0) {
            return unknownType;
        }
        if (typeSet.length === 1) {
            return typeSet[0];
        }
        const id = getTypeListId(typeSet) + getAliasId(aliasSymbol, aliasTypeArguments);
        let result = intersectionTypes.get(id);
        if (!result) {
            if (includes & ts.TypeFlags.Union) {
                if (intersectUnionsOfPrimitiveTypes(typeSet)) {
                    // When the intersection creates a reduced set (which might mean that *all* union types have
                    // disappeared), we restart the operation to get a new set of combined flags. Once we have
                    // reduced we'll never reduce again, so this occurs at most once.
                    result = getIntersectionType(typeSet, aliasSymbol, aliasTypeArguments);
                }
                else if (eachIsUnionContaining(typeSet, ts.TypeFlags.Undefined)) {
                    const undefinedOrMissingType = exactOptionalPropertyTypes && ts.some(typeSet, t => containsType((t as ts.UnionType).types, missingType)) ? missingType : undefinedType;
                    removeFromEach(typeSet, ts.TypeFlags.Undefined);
                    result = getUnionType([getIntersectionType(typeSet), undefinedOrMissingType], ts.UnionReduction.Literal, aliasSymbol, aliasTypeArguments);
                }
                else if (eachIsUnionContaining(typeSet, ts.TypeFlags.Null)) {
                    removeFromEach(typeSet, ts.TypeFlags.Null);
                    result = getUnionType([getIntersectionType(typeSet), nullType], ts.UnionReduction.Literal, aliasSymbol, aliasTypeArguments);
                }
                else {
                    // We are attempting to construct a type of the form X & (A | B) & (C | D). Transform this into a type of
                    // the form X & A & C | X & A & D | X & B & C | X & B & D. If the estimated size of the resulting union type
                    // exceeds 100000 constituents, report an error.
                    if (!checkCrossProductUnion(typeSet)) {
                        return errorType;
                    }
                    const constituents = getCrossProductIntersections(typeSet);
                    // We attach a denormalized origin type when at least one constituent of the cross-product union is an
                    // intersection (i.e. when the intersection didn't just reduce one or more unions to smaller unions) and
                    // the denormalized origin has fewer constituents than the union itself.
                    const origin = ts.some(constituents, t => !!(t.flags & ts.TypeFlags.Intersection)) && getConstituentCountOfTypes(constituents) > getConstituentCountOfTypes(typeSet) ? createOriginUnionOrIntersectionType(ts.TypeFlags.Intersection, typeSet) : undefined;
                    result = getUnionType(constituents, ts.UnionReduction.Literal, aliasSymbol, aliasTypeArguments, origin);
                }
            }
            else {
                result = createIntersectionType(typeSet, aliasSymbol, aliasTypeArguments);
            }
            intersectionTypes.set(id, result);
        }
        return result;
    }

    function getCrossProductUnionSize(types: readonly ts.Type[]) {
        return ts.reduceLeft(types, (n, t) => t.flags & ts.TypeFlags.Union ? n * (t as ts.UnionType).types.length : t.flags & ts.TypeFlags.Never ? 0 : n, 1);
    }

    function checkCrossProductUnion(types: readonly ts.Type[]) {
        const size = getCrossProductUnionSize(types);
        if (size >= 100000) {
            ts.tracing?.instant(ts.tracing.Phase.CheckTypes, "checkCrossProductUnion_DepthLimit", { typeIds: types.map(t => t.id), size });
            error(currentNode, ts.Diagnostics.Expression_produces_a_union_type_that_is_too_complex_to_represent);
            return false;
        }
        return true;
    }

    function getCrossProductIntersections(types: readonly ts.Type[]) {
        const count = getCrossProductUnionSize(types);
        const intersections: ts.Type[] = [];
        for (let i = 0; i < count; i++) {
            const constituents = types.slice();
            let n = i;
            for (let j = types.length - 1; j >= 0; j--) {
                if (types[j].flags & ts.TypeFlags.Union) {
                    const sourceTypes = (types[j] as ts.UnionType).types;
                    const length = sourceTypes.length;
                    constituents[j] = sourceTypes[n % length];
                    n = Math.floor(n / length);
                }
            }
            const t = getIntersectionType(constituents);
            if (!(t.flags & ts.TypeFlags.Never)) intersections.push(t);
        }
        return intersections;
    }

    function getConstituentCount(type: ts.Type): number {
        return !(type.flags & ts.TypeFlags.UnionOrIntersection) || type.aliasSymbol ? 1 :
            type.flags & ts.TypeFlags.Union && (type as ts.UnionType).origin ? getConstituentCount((type as ts.UnionType).origin!) :
            getConstituentCountOfTypes((type as ts.UnionOrIntersectionType).types);
    }

    function getConstituentCountOfTypes(types: ts.Type[]): number {
        return ts.reduceLeft(types, (n, t) => n + getConstituentCount(t), 0);
    }

    function getTypeFromIntersectionTypeNode(node: ts.IntersectionTypeNode): ts.Type {
        const links = getNodeLinks(node);
        if (!links.resolvedType) {
            const aliasSymbol = getAliasSymbolForTypeNode(node);
            const types = ts.map(node.types, getTypeFromTypeNode);
            const noSupertypeReduction = types.length === 2 && !!(types[0].flags & (ts.TypeFlags.String | ts.TypeFlags.Number | ts.TypeFlags.BigInt)) && types[1] === emptyTypeLiteralType;
            links.resolvedType = getIntersectionType(types, aliasSymbol, getTypeArgumentsForAliasSymbol(aliasSymbol), noSupertypeReduction);
        }
        return links.resolvedType;
    }

    function createIndexType(type: ts.InstantiableType | ts.UnionOrIntersectionType, stringsOnly: boolean) {
        const result = createType(ts.TypeFlags.Index) as ts.IndexType;
        result.type = type;
        result.stringsOnly = stringsOnly;
        return result;
    }

    function createOriginIndexType(type: ts.InstantiableType | ts.UnionOrIntersectionType) {
        const result = createOriginType(ts.TypeFlags.Index) as ts.IndexType;
        result.type = type;
        return result;
    }

    function getIndexTypeForGenericType(type: ts.InstantiableType | ts.UnionOrIntersectionType, stringsOnly: boolean) {
        return stringsOnly ?
            type.resolvedStringIndexType || (type.resolvedStringIndexType = createIndexType(type, /*stringsOnly*/ true)) :
            type.resolvedIndexType || (type.resolvedIndexType = createIndexType(type, /*stringsOnly*/ false));
    }

    /**
     * This roughly mirrors `resolveMappedTypeMembers` in the nongeneric case, except only reports a union of the keys calculated,
     * rather than manufacturing the properties. We can't just fetch the `constraintType` since that would ignore mappings
     * and mapping the `constraintType` directly ignores how mapped types map _properties_ and not keys (thus ignoring subtype
     * reduction in the constraintType) when possible.
     * @param noIndexSignatures Indicates if _string_ index signatures should be elided. (other index signatures are always reported)
     */
    function getIndexTypeForMappedType(type: ts.MappedType, stringsOnly: boolean, noIndexSignatures: boolean | undefined) {
        const typeParameter = getTypeParameterFromMappedType(type);
        const constraintType = getConstraintTypeFromMappedType(type);
        const nameType = getNameTypeFromMappedType(type.target as ts.MappedType || type);
        if (!nameType && !noIndexSignatures) {
            // no mapping and no filtering required, just quickly bail to returning the constraint in the common case
            return constraintType;
        }
        const keyTypes: ts.Type[] = [];
        if (isMappedTypeWithKeyofConstraintDeclaration(type)) {
            // We have a { [P in keyof T]: X }

            // `getApparentType` on the T in a generic mapped type can trigger a circularity
            // (conditionals and `infer` types create a circular dependency in the constraint resolution)
            // so we only eagerly manifest the keys if the constraint is nongeneric
            if (!isGenericIndexType(constraintType)) {
                const modifiersType = getApparentType(getModifiersTypeFromMappedType(type)); // The 'T' in 'keyof T'
                forEachMappedTypePropertyKeyTypeAndIndexSignatureKeyType(modifiersType, ts.TypeFlags.StringOrNumberLiteralOrUnique, stringsOnly, addMemberForKeyType);
            }
            else {
                // we have a generic index and a homomorphic mapping (but a distributive key remapping) - we need to defer the whole `keyof whatever` for later
                // since it's not safe to resolve the shape of modifier type
                return getIndexTypeForGenericType(type, stringsOnly);
            }
        }
        else {
            forEachType(getLowerBoundOfKeyType(constraintType), addMemberForKeyType);
        }
        if (isGenericIndexType(constraintType)) { // include the generic component in the resulting type
            forEachType(constraintType, addMemberForKeyType);
        }
        // we had to pick apart the constraintType to potentially map/filter it - compare the final resulting list with the original constraintType,
        // so we can return the union that preserves aliases/origin data if possible
        const result = noIndexSignatures ? filterType(getUnionType(keyTypes), t => !(t.flags & (ts.TypeFlags.Any | ts.TypeFlags.String))) : getUnionType(keyTypes);
        if (result.flags & ts.TypeFlags.Union && constraintType.flags & ts.TypeFlags.Union && getTypeListId((result as ts.UnionType).types) === getTypeListId((constraintType as ts.UnionType).types)){
            return constraintType;
        }
        return result;

        function addMemberForKeyType(keyType: ts.Type) {
            const propNameType = nameType ? instantiateType(nameType, appendTypeMapping(type.mapper, typeParameter, keyType)) : keyType;
            // `keyof` currently always returns `string | number` for concrete `string` index signatures - the below ternary keeps that behavior for mapped types
            // See `getLiteralTypeFromProperties` where there's a similar ternary to cause the same behavior.
            keyTypes.push(propNameType === stringType ? stringOrNumberType : propNameType);
        }
    }

    // Ordinarily we reduce a keyof M, where M is a mapped type { [P in K as N<P>]: X }, to simply N<K>. This however presumes
    // that N distributes over union types, i.e. that N<A | B | C> is equivalent to N<A> | N<B> | N<C>. Specifically, we only
    // want to perform the reduction when the name type of a mapped type is distributive with respect to the type variable
    // introduced by the 'in' clause of the mapped type. Note that non-generic types are considered to be distributive because
    // they're the same type regardless of what's being distributed over.
    function hasDistributiveNameType(mappedType: ts.MappedType) {
        const typeVariable = getTypeParameterFromMappedType(mappedType);
        return isDistributive(getNameTypeFromMappedType(mappedType) || typeVariable);
        function isDistributive(type: ts.Type): boolean {
            return type.flags & (ts.TypeFlags.AnyOrUnknown | ts.TypeFlags.Primitive | ts.TypeFlags.Never | ts.TypeFlags.TypeParameter | ts.TypeFlags.Object | ts.TypeFlags.NonPrimitive) ? true :
                type.flags & ts.TypeFlags.Conditional ? (type as ts.ConditionalType).root.isDistributive && (type as ts.ConditionalType).checkType === typeVariable :
                type.flags & (ts.TypeFlags.UnionOrIntersection | ts.TypeFlags.TemplateLiteral) ? ts.every((type as ts.UnionOrIntersectionType | ts.TemplateLiteralType).types, isDistributive) :
                type.flags & ts.TypeFlags.IndexedAccess ? isDistributive((type as ts.IndexedAccessType).objectType) && isDistributive((type as ts.IndexedAccessType).indexType) :
                type.flags & ts.TypeFlags.Substitution ? isDistributive((type as ts.SubstitutionType).baseType) && isDistributive((type as ts.SubstitutionType).constraint):
                type.flags & ts.TypeFlags.StringMapping ? isDistributive((type as ts.StringMappingType).type) :
                false;
        }
    }

    function getLiteralTypeFromPropertyName(name: ts.PropertyName) {
        if (ts.isPrivateIdentifier(name)) {
            return neverType;
        }
        return ts.isIdentifier(name) ? getStringLiteralType(ts.unescapeLeadingUnderscores(name.escapedText)) :
            getRegularTypeOfLiteralType(ts.isComputedPropertyName(name) ? checkComputedPropertyName(name) : checkExpression(name));
    }

    function getLiteralTypeFromProperty(prop: ts.Symbol, include: ts.TypeFlags, includeNonPublic?: boolean) {
        if (includeNonPublic || !(ts.getDeclarationModifierFlagsFromSymbol(prop) & ts.ModifierFlags.NonPublicAccessibilityModifier)) {
            let type = getSymbolLinks(getLateBoundSymbol(prop)).nameType;
            if (!type) {
                const name = ts.getNameOfDeclaration(prop.valueDeclaration) as ts.PropertyName;
                type = prop.escapedName === ts.InternalSymbolName.Default ? getStringLiteralType("default") :
                    name && getLiteralTypeFromPropertyName(name) || (!ts.isKnownSymbol(prop) ? getStringLiteralType(ts.symbolName(prop)) : undefined);
            }
            if (type && type.flags & include) {
                return type;
            }
        }
        return neverType;
    }

    function isKeyTypeIncluded(keyType: ts.Type, include: ts.TypeFlags): boolean {
        return !!(keyType.flags & include || keyType.flags & ts.TypeFlags.Intersection && ts.some((keyType as ts.IntersectionType).types, t => isKeyTypeIncluded(t, include)));
    }

    function getLiteralTypeFromProperties(type: ts.Type, include: ts.TypeFlags, includeOrigin: boolean) {
        const origin = includeOrigin && (ts.getObjectFlags(type) & (ts.ObjectFlags.ClassOrInterface | ts.ObjectFlags.Reference) || type.aliasSymbol) ? createOriginIndexType(type) : undefined;
        const propertyTypes = ts.map(getPropertiesOfType(type), prop => getLiteralTypeFromProperty(prop, include));
        const indexKeyTypes = ts.map(getIndexInfosOfType(type), info => info !== enumNumberIndexInfo && isKeyTypeIncluded(info.keyType, include) ?
            info.keyType === stringType && include & ts.TypeFlags.Number ? stringOrNumberType : info.keyType : neverType);
        return getUnionType(ts.concatenate(propertyTypes, indexKeyTypes), ts.UnionReduction.Literal,
            /*aliasSymbol*/ undefined, /*aliasTypeArguments*/ undefined, origin);
    }

    /**
     * A union type which is reducible upon instantiation (meaning some members are removed under certain instantiations)
     * must be kept generic, as that instantiation information needs to flow through the type system. By replacing all
     * type parameters in the union with a special never type that is treated as a literal in `getReducedType`, we can cause the `getReducedType` logic
     * to reduce the resulting type if possible (since only intersections with conflicting literal-typed properties are reducible).
     */
    function isPossiblyReducibleByInstantiation(type: ts.Type): boolean {
        const uniqueFilled = getUniqueLiteralFilledInstantiation(type);
        return getReducedType(uniqueFilled) !== uniqueFilled;
    }

    function shouldDeferIndexType(type: ts.Type) {
        return !!(type.flags & ts.TypeFlags.InstantiableNonPrimitive ||
            isGenericTupleType(type) ||
            isGenericMappedType(type) && !hasDistributiveNameType(type) ||
            type.flags & ts.TypeFlags.Union && ts.some((type as ts.UnionType).types, isPossiblyReducibleByInstantiation) ||
            type.flags & ts.TypeFlags.Intersection && maybeTypeOfKind(type, ts.TypeFlags.Instantiable) && ts.some((type as ts.IntersectionType).types, isEmptyAnonymousObjectType));
    }

    function getIndexType(type: ts.Type, stringsOnly = keyofStringsOnly, noIndexSignatures?: boolean): ts.Type {
        type = getReducedType(type);
        return shouldDeferIndexType(type) ? getIndexTypeForGenericType(type as ts.InstantiableType | ts.UnionOrIntersectionType, stringsOnly) :
            type.flags & ts.TypeFlags.Union ? getIntersectionType(ts.map((type as ts.UnionType).types, t => getIndexType(t, stringsOnly, noIndexSignatures))) :
            type.flags & ts.TypeFlags.Intersection ? getUnionType(ts.map((type as ts.IntersectionType).types, t => getIndexType(t, stringsOnly, noIndexSignatures))) :
            ts.getObjectFlags(type) & ts.ObjectFlags.Mapped ? getIndexTypeForMappedType(type as ts.MappedType, stringsOnly, noIndexSignatures) :
            type === wildcardType ? wildcardType :
            type.flags & ts.TypeFlags.Unknown ? neverType :
            type.flags & (ts.TypeFlags.Any | ts.TypeFlags.Never) ? keyofConstraintType :
            getLiteralTypeFromProperties(type, (noIndexSignatures ? ts.TypeFlags.StringLiteral : ts.TypeFlags.StringLike) | (stringsOnly ? 0 : ts.TypeFlags.NumberLike | ts.TypeFlags.ESSymbolLike),
                stringsOnly === keyofStringsOnly && !noIndexSignatures);
    }

    function getExtractStringType(type: ts.Type) {
        if (keyofStringsOnly) {
            return type;
        }
        const extractTypeAlias = getGlobalExtractSymbol();
        return extractTypeAlias ? getTypeAliasInstantiation(extractTypeAlias, [type, stringType]) : stringType;
    }

    function getIndexTypeOrString(type: ts.Type): ts.Type {
        const indexType = getExtractStringType(getIndexType(type));
        return indexType.flags & ts.TypeFlags.Never ? stringType : indexType;
    }

    function getTypeFromTypeOperatorNode(node: ts.TypeOperatorNode): ts.Type {
        const links = getNodeLinks(node);
        if (!links.resolvedType) {
            switch (node.operator) {
                case ts.SyntaxKind.KeyOfKeyword:
                    links.resolvedType = getIndexType(getTypeFromTypeNode(node.type));
                    break;
                case ts.SyntaxKind.UniqueKeyword:
                    links.resolvedType = node.type.kind === ts.SyntaxKind.SymbolKeyword
                        ? getESSymbolLikeTypeForNode(ts.walkUpParenthesizedTypes(node.parent))
                        : errorType;
                    break;
                case ts.SyntaxKind.ReadonlyKeyword:
                    links.resolvedType = getTypeFromTypeNode(node.type);
                    break;
                default:
                    throw ts.Debug.assertNever(node.operator);
            }
        }
        return links.resolvedType;
    }

    function getTypeFromTemplateTypeNode(node: ts.TemplateLiteralTypeNode) {
        const links = getNodeLinks(node);
        if (!links.resolvedType) {
            links.resolvedType = getTemplateLiteralType(
                [node.head.text, ...ts.map(node.templateSpans, span => span.literal.text)],
                ts.map(node.templateSpans, span => getTypeFromTypeNode(span.type)));
        }
        return links.resolvedType;
    }

    function getTemplateLiteralType(texts: readonly string[], types: readonly ts.Type[]): ts.Type {
        const unionIndex = ts.findIndex(types, t => !!(t.flags & (ts.TypeFlags.Never | ts.TypeFlags.Union)));
        if (unionIndex >= 0) {
            return checkCrossProductUnion(types) ?
                mapType(types[unionIndex], t => getTemplateLiteralType(texts, ts.replaceElement(types, unionIndex, t))) :
                errorType;
        }
        if (ts.contains(types, wildcardType)) {
            return wildcardType;
        }
        const newTypes: ts.Type[] = [];
        const newTexts: string[] = [];
        let text = texts[0];
        if (!addSpans(texts, types)) {
            return stringType;
        }
        if (newTypes.length === 0) {
            return getStringLiteralType(text);
        }
        newTexts.push(text);
        if (ts.every(newTexts, t => t === "")) {
            if (ts.every(newTypes, t => !!(t.flags & ts.TypeFlags.String))) {
                return stringType;
            }
            // Normalize `${Mapping<xxx>}` into Mapping<xxx>
            if (newTypes.length === 1 && isPatternLiteralType(newTypes[0])) {
                return newTypes[0];
            }
        }
        const id = `${getTypeListId(newTypes)}|${ts.map(newTexts, t => t.length).join(",")}|${newTexts.join("")}`;
        let type = templateLiteralTypes.get(id);
        if (!type) {
            templateLiteralTypes.set(id, type = createTemplateLiteralType(newTexts, newTypes));
        }
        return type;

        function addSpans(texts: readonly string[] | string, types: readonly ts.Type[]): boolean {
            const isTextsArray = ts.isArray(texts);
            for (let i = 0; i < types.length; i++) {
                const t = types[i];
                const addText = isTextsArray ? texts[i + 1] : texts;
                if (t.flags & (ts.TypeFlags.Literal | ts.TypeFlags.Null | ts.TypeFlags.Undefined)) {
                    text += getTemplateStringForType(t) || "";
                    text += addText;
                    if (!isTextsArray) return true;
                }
                else if (t.flags & ts.TypeFlags.TemplateLiteral) {
                    text += (t as ts.TemplateLiteralType).texts[0];
                    if (!addSpans((t as ts.TemplateLiteralType).texts, (t as ts.TemplateLiteralType).types)) return false;
                    text += addText;
                    if (!isTextsArray) return true;
                }
                else if (isGenericIndexType(t) || isPatternLiteralPlaceholderType(t)) {
                    newTypes.push(t);
                    newTexts.push(text);
                    text = addText;
                }
                else if (t.flags & ts.TypeFlags.Intersection) {
                    const added = addSpans(texts[i + 1], (t as ts.IntersectionType).types);
                    if (!added) return false;
                }
                else if (isTextsArray) {
                    return false;
                }
            }
            return true;
        }
    }

    function getTemplateStringForType(type: ts.Type) {
        return type.flags & ts.TypeFlags.StringLiteral ? (type as ts.StringLiteralType).value :
            type.flags & ts.TypeFlags.NumberLiteral ? "" + (type as ts.NumberLiteralType).value :
            type.flags & ts.TypeFlags.BigIntLiteral ? ts.pseudoBigIntToString((type as ts.BigIntLiteralType).value) :
            type.flags & (ts.TypeFlags.BooleanLiteral | ts.TypeFlags.Nullable) ? (type as ts.IntrinsicType).intrinsicName :
            undefined;
    }

    function createTemplateLiteralType(texts: readonly string[], types: readonly ts.Type[]) {
        const type = createType(ts.TypeFlags.TemplateLiteral) as ts.TemplateLiteralType;
        type.texts = texts;
        type.types = types;
        return type;
    }

    function getStringMappingType(symbol: ts.Symbol, type: ts.Type): ts.Type {
        return type.flags & (ts.TypeFlags.Union | ts.TypeFlags.Never) ? mapType(type, t => getStringMappingType(symbol, t)) :
            type.flags & ts.TypeFlags.StringLiteral ? getStringLiteralType(applyStringMapping(symbol, (type as ts.StringLiteralType).value)) :
            type.flags & ts.TypeFlags.TemplateLiteral ? getTemplateLiteralType(...applyTemplateStringMapping(symbol, (type as ts.TemplateLiteralType).texts, (type as ts.TemplateLiteralType).types)) :
            // Mapping<Mapping<T>> === Mapping<T>
            type.flags & ts.TypeFlags.StringMapping && symbol === type.symbol ? type :
            type.flags & (ts.TypeFlags.Any | ts.TypeFlags.String | ts.TypeFlags.StringMapping) || isGenericIndexType(type) ? getStringMappingTypeForGenericType(symbol, type) :
            // This handles Mapping<`${number}`> and Mapping<`${bigint}`>
            isPatternLiteralPlaceholderType(type) ? getStringMappingTypeForGenericType(symbol, getTemplateLiteralType(["", ""], [type])) :
            type;
    }

    function applyStringMapping(symbol: ts.Symbol, str: string) {
        switch (intrinsicTypeKinds.get(symbol.escapedName as string)) {
            case IntrinsicTypeKind.Uppercase: return str.toUpperCase();
            case IntrinsicTypeKind.Lowercase: return str.toLowerCase();
            case IntrinsicTypeKind.Capitalize: return str.charAt(0).toUpperCase() + str.slice(1);
            case IntrinsicTypeKind.Uncapitalize: return str.charAt(0).toLowerCase() + str.slice(1);
        }
        return str;
    }

    function applyTemplateStringMapping(symbol: ts.Symbol, texts: readonly string[], types: readonly ts.Type[]): [texts: readonly string[], types: readonly ts.Type[]] {
        switch (intrinsicTypeKinds.get(symbol.escapedName as string)) {
            case IntrinsicTypeKind.Uppercase: return [texts.map(t => t.toUpperCase()), types.map(t => getStringMappingType(symbol, t))];
            case IntrinsicTypeKind.Lowercase: return [texts.map(t => t.toLowerCase()), types.map(t => getStringMappingType(symbol, t))];
            case IntrinsicTypeKind.Capitalize: return [texts[0] === "" ? texts : [texts[0].charAt(0).toUpperCase() + texts[0].slice(1), ...texts.slice(1)], texts[0] === "" ? [getStringMappingType(symbol, types[0]), ...types.slice(1)] : types];
            case IntrinsicTypeKind.Uncapitalize: return [texts[0] === "" ? texts : [texts[0].charAt(0).toLowerCase() + texts[0].slice(1), ...texts.slice(1)], texts[0] === "" ? [getStringMappingType(symbol, types[0]), ...types.slice(1)] : types];
        }
        return [texts, types];
    }

    function getStringMappingTypeForGenericType(symbol: ts.Symbol, type: ts.Type): ts.Type {
        const id = `${getSymbolId(symbol)},${getTypeId(type)}`;
        let result = stringMappingTypes.get(id);
        if (!result) {
            stringMappingTypes.set(id, result = createStringMappingType(symbol, type));
        }
        return result;
    }

    function createStringMappingType(symbol: ts.Symbol, type: ts.Type) {
        const result = createTypeWithSymbol(ts.TypeFlags.StringMapping, symbol) as ts.StringMappingType;
        result.type = type;
        return result;
    }

    function createIndexedAccessType(objectType: ts.Type, indexType: ts.Type, accessFlags: ts.AccessFlags, aliasSymbol: ts.Symbol | undefined, aliasTypeArguments: readonly ts.Type[] | undefined) {
        const type = createType(ts.TypeFlags.IndexedAccess) as ts.IndexedAccessType;
        type.objectType = objectType;
        type.indexType = indexType;
        type.accessFlags = accessFlags;
        type.aliasSymbol = aliasSymbol;
        type.aliasTypeArguments = aliasTypeArguments;
        return type;
    }

    /**
     * Returns if a type is or consists of a JSLiteral object type
     * In addition to objects which are directly literals,
     * * unions where every element is a jsliteral
     * * intersections where at least one element is a jsliteral
     * * and instantiable types constrained to a jsliteral
     * Should all count as literals and not print errors on access or assignment of possibly existing properties.
     * This mirrors the behavior of the index signature propagation, to which this behaves similarly (but doesn't affect assignability or inference).
     */
    function isJSLiteralType(type: ts.Type): boolean {
        if (noImplicitAny) {
            return false; // Flag is meaningless under `noImplicitAny` mode
        }
        if (ts.getObjectFlags(type) & ts.ObjectFlags.JSLiteral) {
            return true;
        }
        if (type.flags & ts.TypeFlags.Union) {
            return ts.every((type as ts.UnionType).types, isJSLiteralType);
        }
        if (type.flags & ts.TypeFlags.Intersection) {
            return ts.some((type as ts.IntersectionType).types, isJSLiteralType);
        }
        if (type.flags & ts.TypeFlags.Instantiable) {
            const constraint = getResolvedBaseConstraint(type);
            return constraint !== type && isJSLiteralType(constraint);
        }
        return false;
    }

    function getPropertyNameFromIndex(indexType: ts.Type, accessNode: ts.StringLiteral | ts.Identifier | ts.PrivateIdentifier | ts.ObjectBindingPattern | ts.ArrayBindingPattern | ts.ComputedPropertyName | ts.NumericLiteral | ts.IndexedAccessTypeNode | ts.ElementAccessExpression | ts.SyntheticExpression | undefined) {
        return isTypeUsableAsPropertyName(indexType) ?
            getPropertyNameFromType(indexType) :
                accessNode && ts.isPropertyName(accessNode) ?
                    // late bound names are handled in the first branch, so here we only need to handle normal names
                    ts.getPropertyNameForPropertyNameNode(accessNode) :
                    undefined;
    }

    function isUncalledFunctionReference(node: ts.Node, symbol: ts.Symbol) {
        if (symbol.flags & (ts.SymbolFlags.Function | ts.SymbolFlags.Method)) {
            const parent = ts.findAncestor(node.parent, n => !ts.isAccessExpression(n)) || node.parent;
            if (ts.isCallLikeExpression(parent)) {
                return ts.isCallOrNewExpression(parent) && ts.isIdentifier(node) && hasMatchingArgument(parent, node);
            }
            return ts.every(symbol.declarations, d => !ts.isFunctionLike(d) || !!(ts.getCombinedNodeFlags(d) & ts.NodeFlags.Deprecated));
        }
        return true;
    }

    function getPropertyTypeForIndexType(originalObjectType: ts.Type, objectType: ts.Type, indexType: ts.Type, fullIndexType: ts.Type, accessNode: ts.ElementAccessExpression | ts.IndexedAccessTypeNode | ts.PropertyName | ts.BindingName | ts.SyntheticExpression | undefined, accessFlags: ts.AccessFlags) {
        const accessExpression = accessNode && accessNode.kind === ts.SyntaxKind.ElementAccessExpression ? accessNode : undefined;
        const propName = accessNode && ts.isPrivateIdentifier(accessNode) ? undefined : getPropertyNameFromIndex(indexType, accessNode);

        if (propName !== undefined) {
            if (accessFlags & ts.AccessFlags.Contextual) {
                return getTypeOfPropertyOfContextualType(objectType, propName) || anyType;
            }
            const prop = getPropertyOfType(objectType, propName);
            if (prop) {
                if (accessFlags & ts.AccessFlags.ReportDeprecated && accessNode && prop.declarations && isDeprecatedSymbol(prop) && isUncalledFunctionReference(accessNode, prop)) {
                    const deprecatedNode = accessExpression?.argumentExpression ?? (ts.isIndexedAccessTypeNode(accessNode) ? accessNode.indexType : accessNode);
                    addDeprecatedSuggestion(deprecatedNode, prop.declarations, propName as string);
                }
                if (accessExpression) {
                    markPropertyAsReferenced(prop, accessExpression, isSelfTypeAccess(accessExpression.expression, objectType.symbol));
                    if (isAssignmentToReadonlyEntity(accessExpression, prop, ts.getAssignmentTargetKind(accessExpression))) {
                        error(accessExpression.argumentExpression, ts.Diagnostics.Cannot_assign_to_0_because_it_is_a_read_only_property, symbolToString(prop));
                        return undefined;
                    }
                    if (accessFlags & ts.AccessFlags.CacheSymbol) {
                        getNodeLinks(accessNode!).resolvedSymbol = prop;
                    }
                    if (isThisPropertyAccessInConstructor(accessExpression, prop)) {
                        return autoType;
                    }
                }
                const propType = getTypeOfSymbol(prop);
                return accessExpression && ts.getAssignmentTargetKind(accessExpression) !== ts.AssignmentKind.Definite ?
                    getFlowTypeOfReference(accessExpression, propType) :
                    propType;
            }
            if (everyType(objectType, isTupleType) && ts.isNumericLiteralName(propName)) {
                const index = +propName;
                if (accessNode && everyType(objectType, t => !(t as ts.TupleTypeReference).target.hasRestElement) && !(accessFlags & ts.AccessFlags.NoTupleBoundsCheck)) {
                    const indexNode = getIndexNodeForAccessExpression(accessNode);
                    if (isTupleType(objectType)) {
                        if (index < 0) {
                            error(indexNode, ts.Diagnostics.A_tuple_type_cannot_be_indexed_with_a_negative_value);
                            return undefinedType;
                        }
                        error(indexNode, ts.Diagnostics.Tuple_type_0_of_length_1_has_no_element_at_index_2,
                            typeToString(objectType), getTypeReferenceArity(objectType), ts.unescapeLeadingUnderscores(propName));
                    }
                    else {
                        error(indexNode, ts.Diagnostics.Property_0_does_not_exist_on_type_1, ts.unescapeLeadingUnderscores(propName), typeToString(objectType));
                    }
                }
                if (index >= 0) {
                    errorIfWritingToReadonlyIndex(getIndexInfoOfType(objectType, numberType));
                    return mapType(objectType, t => {
                        const restType = getRestTypeOfTupleType(t as ts.TupleTypeReference) || undefinedType;
                        return accessFlags & ts.AccessFlags.IncludeUndefined ? getUnionType([restType, undefinedType]) : restType;
                    });
                }
            }
        }
        if (!(indexType.flags & ts.TypeFlags.Nullable) && isTypeAssignableToKind(indexType, ts.TypeFlags.StringLike | ts.TypeFlags.NumberLike | ts.TypeFlags.ESSymbolLike)) {
            if (objectType.flags & (ts.TypeFlags.Any | ts.TypeFlags.Never)) {
                return objectType;
            }
            // If no index signature is applicable, we default to the string index signature. In effect, this means the string
            // index signature applies even when accessing with a symbol-like type.
            const indexInfo = getApplicableIndexInfo(objectType, indexType) || getIndexInfoOfType(objectType, stringType);
            if (indexInfo) {
                if (accessFlags & ts.AccessFlags.NoIndexSignatures && indexInfo.keyType !== numberType) {
                    if (accessExpression) {
                        error(accessExpression, ts.Diagnostics.Type_0_cannot_be_used_to_index_type_1, typeToString(indexType), typeToString(originalObjectType));
                    }
                    return undefined;
                }
                if (accessNode && indexInfo.keyType === stringType && !isTypeAssignableToKind(indexType, ts.TypeFlags.String | ts.TypeFlags.Number)) {
                    const indexNode = getIndexNodeForAccessExpression(accessNode);
                    error(indexNode, ts.Diagnostics.Type_0_cannot_be_used_as_an_index_type, typeToString(indexType));
                    return accessFlags & ts.AccessFlags.IncludeUndefined ? getUnionType([indexInfo.type, undefinedType]) : indexInfo.type;
                }
                errorIfWritingToReadonlyIndex(indexInfo);
                // When accessing an enum object with its own type,
                // e.g. E[E.A] for enum E { A }, undefined shouldn't
                // be included in the result type
                if ((accessFlags & ts.AccessFlags.IncludeUndefined) &&
                    !(objectType.symbol &&
                        objectType.symbol.flags & (ts.SymbolFlags.RegularEnum | ts.SymbolFlags.ConstEnum) &&
                        (indexType.symbol &&
                        indexType.flags & ts.TypeFlags.EnumLiteral &&
                        getParentOfSymbol(indexType.symbol) === objectType.symbol))) {
                    return getUnionType([indexInfo.type, undefinedType]);
                }
                return indexInfo.type;
            }
            if (indexType.flags & ts.TypeFlags.Never) {
                return neverType;
            }
            if (isJSLiteralType(objectType)) {
                return anyType;
            }
            if (accessExpression && !isConstEnumObjectType(objectType)) {
                if (isObjectLiteralType(objectType)) {
                    if (noImplicitAny && indexType.flags & (ts.TypeFlags.StringLiteral | ts.TypeFlags.NumberLiteral)) {
                        diagnostics.add(ts.createDiagnosticForNode(accessExpression, ts.Diagnostics.Property_0_does_not_exist_on_type_1, (indexType as ts.StringLiteralType).value, typeToString(objectType)));
                        return undefinedType;
                    }
                    else if (indexType.flags & (ts.TypeFlags.Number | ts.TypeFlags.String)) {
                        const types = ts.map((objectType as ts.ResolvedType).properties, property => {
                            return getTypeOfSymbol(property);
                        });
                        return getUnionType(ts.append(types, undefinedType));
                    }
                }

                if (objectType.symbol === globalThisSymbol && propName !== undefined && globalThisSymbol.exports!.has(propName) && (globalThisSymbol.exports!.get(propName)!.flags & ts.SymbolFlags.BlockScoped)) {
                    error(accessExpression, ts.Diagnostics.Property_0_does_not_exist_on_type_1, ts.unescapeLeadingUnderscores(propName), typeToString(objectType));
                }
                else if (noImplicitAny && !compilerOptions.suppressImplicitAnyIndexErrors && !(accessFlags & ts.AccessFlags.SuppressNoImplicitAnyError)) {
                    if (propName !== undefined && typeHasStaticProperty(propName, objectType)) {
                        const typeName = typeToString(objectType);
                        error(accessExpression, ts.Diagnostics.Property_0_does_not_exist_on_type_1_Did_you_mean_to_access_the_static_member_2_instead, propName as string, typeName, typeName + "[" + ts.getTextOfNode(accessExpression.argumentExpression) + "]");
                    }
                    else if (getIndexTypeOfType(objectType, numberType)) {
                        error(accessExpression.argumentExpression, ts.Diagnostics.Element_implicitly_has_an_any_type_because_index_expression_is_not_of_type_number);
                    }
                    else {
                        let suggestion: string | undefined;
                        if (propName !== undefined && (suggestion = getSuggestionForNonexistentProperty(propName as string, objectType))) {
                            if (suggestion !== undefined) {
                                error(accessExpression.argumentExpression, ts.Diagnostics.Property_0_does_not_exist_on_type_1_Did_you_mean_2, propName as string, typeToString(objectType), suggestion);
                            }
                        }
                        else {
                            const suggestion = getSuggestionForNonexistentIndexSignature(objectType, accessExpression, indexType);
                            if (suggestion !== undefined) {
                                error(accessExpression, ts.Diagnostics.Element_implicitly_has_an_any_type_because_type_0_has_no_index_signature_Did_you_mean_to_call_1, typeToString(objectType), suggestion);
                            }
                            else {
                                let errorInfo: ts.DiagnosticMessageChain | undefined;
                                if (indexType.flags & ts.TypeFlags.EnumLiteral) {
                                    errorInfo = ts.chainDiagnosticMessages(/* details */ undefined, ts.Diagnostics.Property_0_does_not_exist_on_type_1, "[" + typeToString(indexType) + "]", typeToString(objectType));
                                }
                                else if (indexType.flags & ts.TypeFlags.UniqueESSymbol) {
                                    const symbolName = getFullyQualifiedName((indexType as ts.UniqueESSymbolType).symbol, accessExpression);
                                    errorInfo = ts.chainDiagnosticMessages(/* details */ undefined, ts.Diagnostics.Property_0_does_not_exist_on_type_1, "[" + symbolName + "]", typeToString(objectType));
                                }
                                else if (indexType.flags & ts.TypeFlags.StringLiteral) {
                                    errorInfo = ts.chainDiagnosticMessages(/* details */ undefined, ts.Diagnostics.Property_0_does_not_exist_on_type_1, (indexType as ts.StringLiteralType).value, typeToString(objectType));
                                }
                                else if (indexType.flags & ts.TypeFlags.NumberLiteral) {
                                    errorInfo = ts.chainDiagnosticMessages(/* details */ undefined, ts.Diagnostics.Property_0_does_not_exist_on_type_1, (indexType as ts.NumberLiteralType).value, typeToString(objectType));
                                }
                                else if (indexType.flags & (ts.TypeFlags.Number | ts.TypeFlags.String)) {
                                    errorInfo = ts.chainDiagnosticMessages(/* details */ undefined, ts.Diagnostics.No_index_signature_with_a_parameter_of_type_0_was_found_on_type_1, typeToString(indexType), typeToString(objectType));
                                }

                                errorInfo = ts.chainDiagnosticMessages(
                                    errorInfo,
                                    ts.Diagnostics.Element_implicitly_has_an_any_type_because_expression_of_type_0_can_t_be_used_to_index_type_1, typeToString(fullIndexType), typeToString(objectType)
                                );
                                diagnostics.add(ts.createDiagnosticForNodeFromMessageChain(accessExpression, errorInfo));
                            }
                        }
                    }
                }
                return undefined;
            }
        }
        if (isJSLiteralType(objectType)) {
            return anyType;
        }
        if (accessNode) {
            const indexNode = getIndexNodeForAccessExpression(accessNode);
            if (indexType.flags & (ts.TypeFlags.StringLiteral | ts.TypeFlags.NumberLiteral)) {
                error(indexNode, ts.Diagnostics.Property_0_does_not_exist_on_type_1, "" + (indexType as ts.StringLiteralType | ts.NumberLiteralType).value, typeToString(objectType));
            }
            else if (indexType.flags & (ts.TypeFlags.String | ts.TypeFlags.Number)) {
                error(indexNode, ts.Diagnostics.Type_0_has_no_matching_index_signature_for_type_1, typeToString(objectType), typeToString(indexType));
            }
            else {
                error(indexNode, ts.Diagnostics.Type_0_cannot_be_used_as_an_index_type, typeToString(indexType));
            }
        }
        if (isTypeAny(indexType)) {
            return indexType;
        }
        return undefined;

        function errorIfWritingToReadonlyIndex(indexInfo: ts.IndexInfo | undefined): void {
            if (indexInfo && indexInfo.isReadonly && accessExpression && (ts.isAssignmentTarget(accessExpression) || ts.isDeleteTarget(accessExpression))) {
                error(accessExpression, ts.Diagnostics.Index_signature_in_type_0_only_permits_reading, typeToString(objectType));
            }
        }
    }

    function getIndexNodeForAccessExpression(accessNode: ts.ElementAccessExpression | ts.IndexedAccessTypeNode | ts.PropertyName | ts.BindingName | ts.SyntheticExpression) {
        return accessNode.kind === ts.SyntaxKind.ElementAccessExpression ? accessNode.argumentExpression :
            accessNode.kind === ts.SyntaxKind.IndexedAccessType ? accessNode.indexType :
            accessNode.kind === ts.SyntaxKind.ComputedPropertyName ? accessNode.expression :
            accessNode;
    }

    function isPatternLiteralPlaceholderType(type: ts.Type): boolean {
        return !!(type.flags & (ts.TypeFlags.Any | ts.TypeFlags.String | ts.TypeFlags.Number | ts.TypeFlags.BigInt)) || isPatternLiteralType(type);
    }

    function isPatternLiteralType(type: ts.Type) {
        return !!(type.flags & ts.TypeFlags.TemplateLiteral) && ts.every((type as ts.TemplateLiteralType).types, isPatternLiteralPlaceholderType) ||
            !!(type.flags & ts.TypeFlags.StringMapping) && isPatternLiteralPlaceholderType((type as ts.StringMappingType).type);
    }

    function isGenericType(type: ts.Type): boolean {
        return !!getGenericObjectFlags(type);
    }

    function isGenericObjectType(type: ts.Type): boolean {
        return !!(getGenericObjectFlags(type) & ts.ObjectFlags.IsGenericObjectType);
    }

    function isGenericIndexType(type: ts.Type): boolean {
        return !!(getGenericObjectFlags(type) & ts.ObjectFlags.IsGenericIndexType);
    }

    function getGenericObjectFlags(type: ts.Type): ts.ObjectFlags {
        if (type.flags & ts.TypeFlags.UnionOrIntersection) {
            if (!((type as ts.UnionOrIntersectionType).objectFlags & ts.ObjectFlags.IsGenericTypeComputed)) {
                (type as ts.UnionOrIntersectionType).objectFlags |= ts.ObjectFlags.IsGenericTypeComputed |
                    ts.reduceLeft((type as ts.UnionOrIntersectionType).types, (flags, t) => flags | getGenericObjectFlags(t), 0);
            }
            return (type as ts.UnionOrIntersectionType).objectFlags & ts.ObjectFlags.IsGenericType;
        }
        if (type.flags & ts.TypeFlags.Substitution) {
            if (!((type as ts.SubstitutionType).objectFlags & ts.ObjectFlags.IsGenericTypeComputed)) {
                (type as ts.SubstitutionType).objectFlags |= ts.ObjectFlags.IsGenericTypeComputed |
                    getGenericObjectFlags((type as ts.SubstitutionType).baseType) | getGenericObjectFlags((type as ts.SubstitutionType).constraint);
            }
            return (type as ts.SubstitutionType).objectFlags & ts.ObjectFlags.IsGenericType;
        }
        return (type.flags & ts.TypeFlags.InstantiableNonPrimitive || isGenericMappedType(type) || isGenericTupleType(type) ? ts.ObjectFlags.IsGenericObjectType : 0) |
            (type.flags & (ts.TypeFlags.InstantiableNonPrimitive | ts.TypeFlags.Index | ts.TypeFlags.TemplateLiteral | ts.TypeFlags.StringMapping) && !isPatternLiteralType(type) ? ts.ObjectFlags.IsGenericIndexType : 0);
    }

    function getSimplifiedType(type: ts.Type, writing: boolean): ts.Type {
        return type.flags & ts.TypeFlags.IndexedAccess ? getSimplifiedIndexedAccessType(type as ts.IndexedAccessType, writing) :
            type.flags & ts.TypeFlags.Conditional ? getSimplifiedConditionalType(type as ts.ConditionalType, writing) :
            type;
    }

    function distributeIndexOverObjectType(objectType: ts.Type, indexType: ts.Type, writing: boolean) {
        // (T | U)[K] -> T[K] | U[K] (reading)
        // (T | U)[K] -> T[K] & U[K] (writing)
        // (T & U)[K] -> T[K] & U[K]
        if (objectType.flags & ts.TypeFlags.Union || objectType.flags & ts.TypeFlags.Intersection && !shouldDeferIndexType(objectType)) {
            const types = ts.map((objectType as ts.UnionOrIntersectionType).types, t => getSimplifiedType(getIndexedAccessType(t, indexType), writing));
            return objectType.flags & ts.TypeFlags.Intersection || writing ? getIntersectionType(types) : getUnionType(types);
        }
    }

    function distributeObjectOverIndexType(objectType: ts.Type, indexType: ts.Type, writing: boolean) {
        // T[A | B] -> T[A] | T[B] (reading)
        // T[A | B] -> T[A] & T[B] (writing)
        if (indexType.flags & ts.TypeFlags.Union) {
            const types = ts.map((indexType as ts.UnionType).types, t => getSimplifiedType(getIndexedAccessType(objectType, t), writing));
            return writing ? getIntersectionType(types) : getUnionType(types);
        }
    }

    // Transform an indexed access to a simpler form, if possible. Return the simpler form, or return
    // the type itself if no transformation is possible. The writing flag indicates that the type is
    // the target of an assignment.
    function getSimplifiedIndexedAccessType(type: ts.IndexedAccessType, writing: boolean): ts.Type {
        const cache = writing ? "simplifiedForWriting" : "simplifiedForReading";
        if (type[cache]) {
            return type[cache] === circularConstraintType ? type : type[cache]!;
        }
        type[cache] = circularConstraintType;
        // We recursively simplify the object type as it may in turn be an indexed access type. For example, with
        // '{ [P in T]: { [Q in U]: number } }[T][U]' we want to first simplify the inner indexed access type.
        const objectType = getSimplifiedType(type.objectType, writing);
        const indexType = getSimplifiedType(type.indexType, writing);
        // T[A | B] -> T[A] | T[B] (reading)
        // T[A | B] -> T[A] & T[B] (writing)
        const distributedOverIndex = distributeObjectOverIndexType(objectType, indexType, writing);
        if (distributedOverIndex) {
            return type[cache] = distributedOverIndex;
        }
        // Only do the inner distributions if the index can no longer be instantiated to cause index distribution again
        if (!(indexType.flags & ts.TypeFlags.Instantiable)) {
            // (T | U)[K] -> T[K] | U[K] (reading)
            // (T | U)[K] -> T[K] & U[K] (writing)
            // (T & U)[K] -> T[K] & U[K]
            const distributedOverObject = distributeIndexOverObjectType(objectType, indexType, writing);
            if (distributedOverObject) {
                return type[cache] = distributedOverObject;
            }
        }
        // So ultimately (reading):
        // ((A & B) | C)[K1 | K2] -> ((A & B) | C)[K1] | ((A & B) | C)[K2] -> (A & B)[K1] | C[K1] | (A & B)[K2] | C[K2] -> (A[K1] & B[K1]) | C[K1] | (A[K2] & B[K2]) | C[K2]

        // A generic tuple type indexed by a number exists only when the index type doesn't select a
        // fixed element. We simplify to either the combined type of all elements (when the index type
        // the actual number type) or to the combined type of all non-fixed elements.
        if (isGenericTupleType(objectType) && indexType.flags & ts.TypeFlags.NumberLike) {
            const elementType = getElementTypeOfSliceOfTupleType(objectType, indexType.flags & ts.TypeFlags.Number ? 0 : objectType.target.fixedLength, /*endSkipCount*/ 0, writing);
            if (elementType) {
                return type[cache] = elementType;
            }
        }
        // If the object type is a mapped type { [P in K]: E }, where K is generic, or { [P in K as N]: E }, where
        // K is generic and N is assignable to P, instantiate E using a mapper that substitutes the index type for P.
        // For example, for an index access { [P in K]: Box<T[P]> }[X], we construct the type Box<T[X]>.
        if (isGenericMappedType(objectType)) {
            const nameType = getNameTypeFromMappedType(objectType);
            if (!nameType || isTypeAssignableTo(nameType, getTypeParameterFromMappedType(objectType))) {
                return type[cache] = mapType(substituteIndexedMappedType(objectType, type.indexType), t => getSimplifiedType(t, writing));
            }
        }
        return type[cache] = type;
    }

    function getSimplifiedConditionalType(type: ts.ConditionalType, writing: boolean) {
        const checkType = type.checkType;
        const extendsType = type.extendsType;
        const trueType = getTrueTypeFromConditionalType(type);
        const falseType = getFalseTypeFromConditionalType(type);
        // Simplifications for types of the form `T extends U ? T : never` and `T extends U ? never : T`.
        if (falseType.flags & ts.TypeFlags.Never && getActualTypeVariable(trueType) === getActualTypeVariable(checkType)) {
            if (checkType.flags & ts.TypeFlags.Any || isTypeAssignableTo(getRestrictiveInstantiation(checkType), getRestrictiveInstantiation(extendsType))) { // Always true
                return getSimplifiedType(trueType, writing);
            }
            else if (isIntersectionEmpty(checkType, extendsType)) { // Always false
                return neverType;
            }
        }
        else if (trueType.flags & ts.TypeFlags.Never && getActualTypeVariable(falseType) === getActualTypeVariable(checkType)) {
            if (!(checkType.flags & ts.TypeFlags.Any) && isTypeAssignableTo(getRestrictiveInstantiation(checkType), getRestrictiveInstantiation(extendsType))) { // Always true
                return neverType;
            }
            else if (checkType.flags & ts.TypeFlags.Any || isIntersectionEmpty(checkType, extendsType)) { // Always false
                return getSimplifiedType(falseType, writing);
            }
        }
        return type;
    }

    /**
     * Invokes union simplification logic to determine if an intersection is considered empty as a union constituent
     */
    function isIntersectionEmpty(type1: ts.Type, type2: ts.Type) {
        return !!(getUnionType([intersectTypes(type1, type2), neverType]).flags & ts.TypeFlags.Never);
    }

    function substituteIndexedMappedType(objectType: ts.MappedType, index: ts.Type) {
        const mapper = createTypeMapper([getTypeParameterFromMappedType(objectType)], [index]);
        const templateMapper = combineTypeMappers(objectType.mapper, mapper);
        return instantiateType(getTemplateTypeFromMappedType(objectType.target as ts.MappedType || objectType), templateMapper);
    }

    function getIndexedAccessType(objectType: ts.Type, indexType: ts.Type, accessFlags = ts.AccessFlags.None, accessNode?: ts.ElementAccessExpression | ts.IndexedAccessTypeNode | ts.PropertyName | ts.BindingName | ts.SyntheticExpression, aliasSymbol?: ts.Symbol, aliasTypeArguments?: readonly ts.Type[]): ts.Type {
        return getIndexedAccessTypeOrUndefined(objectType, indexType, accessFlags, accessNode, aliasSymbol, aliasTypeArguments) || (accessNode ? errorType : unknownType);
    }

    function indexTypeLessThan(indexType: ts.Type, limit: number) {
        return everyType(indexType, t => {
            if (t.flags & ts.TypeFlags.StringOrNumberLiteral) {
                const propName = getPropertyNameFromType(t as ts.StringLiteralType | ts.NumberLiteralType);
                if (ts.isNumericLiteralName(propName)) {
                    const index = +propName;
                    return index >= 0 && index < limit;
                }
            }
            return false;
        });
    }

    function getIndexedAccessTypeOrUndefined(objectType: ts.Type, indexType: ts.Type, accessFlags = ts.AccessFlags.None, accessNode?: ts.ElementAccessExpression | ts.IndexedAccessTypeNode | ts.PropertyName | ts.BindingName | ts.SyntheticExpression, aliasSymbol?: ts.Symbol, aliasTypeArguments?: readonly ts.Type[]): ts.Type | undefined {
        if (objectType === wildcardType || indexType === wildcardType) {
            return wildcardType;
        }
        // If the object type has a string index signature and no other members we know that the result will
        // always be the type of that index signature and we can simplify accordingly.
        if (isStringIndexSignatureOnlyType(objectType) && !(indexType.flags & ts.TypeFlags.Nullable) && isTypeAssignableToKind(indexType, ts.TypeFlags.String | ts.TypeFlags.Number)) {
            indexType = stringType;
        }
        // In noUncheckedIndexedAccess mode, indexed access operations that occur in an expression in a read position and resolve to
        // an index signature have 'undefined' included in their type.
        if (compilerOptions.noUncheckedIndexedAccess && accessFlags & ts.AccessFlags.ExpressionPosition) accessFlags |= ts.AccessFlags.IncludeUndefined;
        // If the index type is generic, or if the object type is generic and doesn't originate in an expression and
        // the operation isn't exclusively indexing the fixed (non-variadic) portion of a tuple type, we are performing
        // a higher-order index access where we cannot meaningfully access the properties of the object type. Note that
        // for a generic T and a non-generic K, we eagerly resolve T[K] if it originates in an expression. This is to
        // preserve backwards compatibility. For example, an element access 'this["foo"]' has always been resolved
        // eagerly using the constraint type of 'this' at the given location.
        if (isGenericIndexType(indexType) || (accessNode && accessNode.kind !== ts.SyntaxKind.IndexedAccessType ?
            isGenericTupleType(objectType) && !indexTypeLessThan(indexType, objectType.target.fixedLength) :
            isGenericObjectType(objectType) && !(isTupleType(objectType) && indexTypeLessThan(indexType, objectType.target.fixedLength)))) {
            if (objectType.flags & ts.TypeFlags.AnyOrUnknown) {
                return objectType;
            }
            // Defer the operation by creating an indexed access type.
            const persistentAccessFlags = accessFlags & ts.AccessFlags.Persistent;
            const id = objectType.id + "," + indexType.id + "," + persistentAccessFlags + getAliasId(aliasSymbol, aliasTypeArguments);
            let type = indexedAccessTypes.get(id);
            if (!type) {
                indexedAccessTypes.set(id, type = createIndexedAccessType(objectType, indexType, persistentAccessFlags, aliasSymbol, aliasTypeArguments));
            }

            return type;
        }
        // In the following we resolve T[K] to the type of the property in T selected by K.
        // We treat boolean as different from other unions to improve errors;
        // skipping straight to getPropertyTypeForIndexType gives errors with 'boolean' instead of 'true'.
        const apparentObjectType = getReducedApparentType(objectType);
        if (indexType.flags & ts.TypeFlags.Union && !(indexType.flags & ts.TypeFlags.Boolean)) {
            const propTypes: ts.Type[] = [];
            let wasMissingProp = false;
            for (const t of (indexType as ts.UnionType).types) {
                const propType = getPropertyTypeForIndexType(objectType, apparentObjectType, t, indexType, accessNode, accessFlags | (wasMissingProp ? ts.AccessFlags.SuppressNoImplicitAnyError : 0));
                if (propType) {
                    propTypes.push(propType);
                }
                else if (!accessNode) {
                    // If there's no error node, we can immeditely stop, since error reporting is off
                    return undefined;
                }
                else {
                    // Otherwise we set a flag and return at the end of the loop so we still mark all errors
                    wasMissingProp = true;
                }
            }
            if (wasMissingProp) {
                return undefined;
            }
            return accessFlags & ts.AccessFlags.Writing
                ? getIntersectionType(propTypes, aliasSymbol, aliasTypeArguments)
                : getUnionType(propTypes, ts.UnionReduction.Literal, aliasSymbol, aliasTypeArguments);
        }
        return getPropertyTypeForIndexType(objectType, apparentObjectType, indexType, indexType, accessNode, accessFlags | ts.AccessFlags.CacheSymbol | ts.AccessFlags.ReportDeprecated);
    }

    function getTypeFromIndexedAccessTypeNode(node: ts.IndexedAccessTypeNode) {
        const links = getNodeLinks(node);
        if (!links.resolvedType) {
            const objectType = getTypeFromTypeNode(node.objectType);
            const indexType = getTypeFromTypeNode(node.indexType);
            const potentialAlias = getAliasSymbolForTypeNode(node);
            links.resolvedType = getIndexedAccessType(objectType, indexType, ts.AccessFlags.None, node, potentialAlias, getTypeArgumentsForAliasSymbol(potentialAlias));
        }
        return links.resolvedType;
    }

    function getTypeFromMappedTypeNode(node: ts.MappedTypeNode): ts.Type {
        const links = getNodeLinks(node);
        if (!links.resolvedType) {
            const type = createObjectType(ts.ObjectFlags.Mapped, node.symbol) as ts.MappedType;
            type.declaration = node;
            type.aliasSymbol = getAliasSymbolForTypeNode(node);
            type.aliasTypeArguments = getTypeArgumentsForAliasSymbol(type.aliasSymbol);
            links.resolvedType = type;
            // Eagerly resolve the constraint type which forces an error if the constraint type circularly
            // references itself through one or more type aliases.
            getConstraintTypeFromMappedType(type);
        }
        return links.resolvedType;
    }

    function getActualTypeVariable(type: ts.Type): ts.Type {
        if (type.flags & ts.TypeFlags.Substitution) {
            return (type as ts.SubstitutionType).baseType;
        }
        if (type.flags & ts.TypeFlags.IndexedAccess && (
            (type as ts.IndexedAccessType).objectType.flags & ts.TypeFlags.Substitution ||
            (type as ts.IndexedAccessType).indexType.flags & ts.TypeFlags.Substitution)) {
            return getIndexedAccessType(getActualTypeVariable((type as ts.IndexedAccessType).objectType), getActualTypeVariable((type as ts.IndexedAccessType).indexType));
        }
        return type;
    }

    function maybeCloneTypeParameter(p: ts.TypeParameter) {
        const constraint = getConstraintOfTypeParameter(p);
        return constraint && (isGenericObjectType(constraint) || isGenericIndexType(constraint)) ? cloneTypeParameter(p) : p;
    }

    function isTypicalNondistributiveConditional(root: ts.ConditionalRoot) {
        return !root.isDistributive && isSingletonTupleType(root.node.checkType) && isSingletonTupleType(root.node.extendsType);
    }

    function isSingletonTupleType(node: ts.TypeNode) {
        return ts.isTupleTypeNode(node) &&
            ts.length(node.elements) === 1 &&
            !ts.isOptionalTypeNode(node.elements[0]) &&
            !ts.isRestTypeNode(node.elements[0]) &&
            !(ts.isNamedTupleMember(node.elements[0]) && (node.elements[0].questionToken || node.elements[0].dotDotDotToken));
    }

    /**
     * We syntactually check for common nondistributive conditional shapes and unwrap them into
     * the intended comparison - we do this so we can check if the unwrapped types are generic or
     * not and appropriately defer condition calculation
     */
    function unwrapNondistributiveConditionalTuple(root: ts.ConditionalRoot, type: ts.Type) {
        return isTypicalNondistributiveConditional(root) && isTupleType(type) ? getTypeArguments(type)[0] : type;
    }

    function getConditionalType(root: ts.ConditionalRoot, mapper: ts.TypeMapper | undefined, aliasSymbol?: ts.Symbol, aliasTypeArguments?: readonly ts.Type[]): ts.Type {
        let result;
        let extraTypes: ts.Type[] | undefined;
        let tailCount = 0;
        // We loop here for an immediately nested conditional type in the false position, effectively treating
        // types of the form 'A extends B ? X : C extends D ? Y : E extends F ? Z : ...' as a single construct for
        // purposes of resolution. We also loop here when resolution of a conditional type ends in resolution of
        // another (or, through recursion, possibly the same) conditional type. In the potentially tail-recursive
        // cases we increment the tail recursion counter and stop after 1000 iterations.
        while (true) {
            if (tailCount === 1000) {
                error(currentNode, ts.Diagnostics.Type_instantiation_is_excessively_deep_and_possibly_infinite);
                result = errorType;
                break;
            }
            const isUnwrapped = isTypicalNondistributiveConditional(root);
            const checkType = instantiateType(unwrapNondistributiveConditionalTuple(root, getActualTypeVariable(root.checkType)), mapper);
            const checkTypeInstantiable = isGenericType(checkType);
            const extendsType = instantiateType(unwrapNondistributiveConditionalTuple(root, root.extendsType), mapper);
            if (checkType === wildcardType || extendsType === wildcardType) {
                return wildcardType;
            }
            let combinedMapper: ts.TypeMapper | undefined;
            if (root.inferTypeParameters) {
                // When we're looking at making an inference for an infer type, when we get its constraint, it'll automagically be
                // instantiated with the context, so it doesn't need the mapper for the inference contex - however the constraint
                // may refer to another _root_, _uncloned_ `infer` type parameter [1], or to something mapped by `mapper` [2].
                // [1] Eg, if we have `Foo<T, U extends T>` and `Foo<number, infer B>` - `B` is constrained to `T`, which, in turn, has been instantiated
                // as `number`
                // Conversely, if we have `Foo<infer A, infer B>`, `B` is still constrained to `T` and `T` is instantiated as `A`
                // [2] Eg, if we have `Foo<T, U extends T>` and `Foo<Q, infer B>` where `Q` is mapped by `mapper` into `number` - `B` is constrained to `T`
                // which is in turn instantiated as `Q`, which is in turn instantiated as `number`.
                // So we need to:
                //    * Clone the type parameters so their constraints can be instantiated in the context of `mapper` (otherwise theyd only get inference context information)
                //    * Set the clones to both map the conditional's enclosing `mapper` and the original params
                //    * instantiate the extends type with the clones
                //    * incorporate all of the component mappers into the combined mapper for the true and false members
                // This means we have three mappers that need applying:
                //    * The original `mapper` used to create this conditional
                //    * The mapper that maps the old root type parameter to the clone (`freshMapper`)
                //    * The mapper that maps the clone to its inference result (`context.mapper`)
                const freshParams = ts.sameMap(root.inferTypeParameters, maybeCloneTypeParameter);
                const freshMapper = freshParams !== root.inferTypeParameters ? createTypeMapper(root.inferTypeParameters, freshParams) : undefined;
                const context = createInferenceContext(freshParams, /*signature*/ undefined, ts.InferenceFlags.None);
                if (freshMapper) {
                    const freshCombinedMapper = combineTypeMappers(mapper, freshMapper);
                    for (const p of freshParams) {
                        if (root.inferTypeParameters.indexOf(p) === -1) {
                            p.mapper = freshCombinedMapper;
                        }
                    }
                }
                if (!checkTypeInstantiable) {
                    // We don't want inferences from constraints as they may cause us to eagerly resolve the
                    // conditional type instead of deferring resolution. Also, we always want strict function
                    // types rules (i.e. proper contravariance) for inferences.
                    inferTypes(context.inferences, checkType, instantiateType(extendsType, freshMapper), ts.InferencePriority.NoConstraints | ts.InferencePriority.AlwaysStrict);
                }
                const innerMapper = combineTypeMappers(freshMapper, context.mapper);
                // It's possible for 'infer T' type paramteters to be given uninstantiated constraints when the
                // those type parameters are used in type references (see getInferredTypeParameterConstraint). For
                // that reason we need context.mapper to be first in the combined mapper. See #42636 for examples.
                combinedMapper = mapper ? combineTypeMappers(innerMapper, mapper) : innerMapper;
            }
            // Instantiate the extends type including inferences for 'infer T' type parameters
            const inferredExtendsType = combinedMapper ? instantiateType(unwrapNondistributiveConditionalTuple(root, root.extendsType), combinedMapper) : extendsType;
            // We attempt to resolve the conditional type only when the check and extends types are non-generic
            if (!checkTypeInstantiable && !isGenericType(inferredExtendsType)) {
                // Return falseType for a definitely false extends check. We check an instantiations of the two
                // types with type parameters mapped to the wildcard type, the most permissive instantiations
                // possible (the wildcard type is assignable to and from all types). If those are not related,
                // then no instantiations will be and we can just return the false branch type.
                if (!(inferredExtendsType.flags & ts.TypeFlags.AnyOrUnknown) && ((checkType.flags & ts.TypeFlags.Any && !isUnwrapped) || !isTypeAssignableTo(getPermissiveInstantiation(checkType), getPermissiveInstantiation(inferredExtendsType)))) {
                    // Return union of trueType and falseType for 'any' since it matches anything
                    if (checkType.flags & ts.TypeFlags.Any && !isUnwrapped) {
                        (extraTypes || (extraTypes = [])).push(instantiateType(getTypeFromTypeNode(root.node.trueType), combinedMapper || mapper));
                    }
                    // If falseType is an immediately nested conditional type that isn't distributive or has an
                    // identical checkType, switch to that type and loop.
                    const falseType = getTypeFromTypeNode(root.node.falseType);
                    if (falseType.flags & ts.TypeFlags.Conditional) {
                        const newRoot = (falseType as ts.ConditionalType).root;
                        if (newRoot.node.parent === root.node && (!newRoot.isDistributive || newRoot.checkType === root.checkType)) {
                            root = newRoot;
                            continue;
                        }
                        if (canTailRecurse(falseType, mapper)) {
                            continue;
                        }
                    }
                    result = instantiateType(falseType, mapper);
                    break;
                }
                // Return trueType for a definitely true extends check. We check instantiations of the two
                // types with type parameters mapped to their restrictive form, i.e. a form of the type parameter
                // that has no constraint. This ensures that, for example, the type
                //   type Foo<T extends { x: any }> = T extends { x: string } ? string : number
                // doesn't immediately resolve to 'string' instead of being deferred.
                if (inferredExtendsType.flags & ts.TypeFlags.AnyOrUnknown || isTypeAssignableTo(getRestrictiveInstantiation(checkType), getRestrictiveInstantiation(inferredExtendsType))) {
                    const trueType = getTypeFromTypeNode(root.node.trueType);
                    const trueMapper = combinedMapper || mapper;
                    if (canTailRecurse(trueType, trueMapper)) {
                        continue;
                    }
                    result = instantiateType(trueType, trueMapper);
                    break;
                }
            }
            // Return a deferred type for a check that is neither definitely true nor definitely false
            result = createType(ts.TypeFlags.Conditional) as ts.ConditionalType;
            result.root = root;
            result.checkType = instantiateType(root.checkType, mapper);
            result.extendsType = instantiateType(root.extendsType, mapper);
            result.mapper = mapper;
            result.combinedMapper = combinedMapper;
            result.aliasSymbol = aliasSymbol || root.aliasSymbol;
            result.aliasTypeArguments = aliasSymbol ? aliasTypeArguments : instantiateTypes(root.aliasTypeArguments, mapper!); // TODO: GH#18217
            break;
        }
        return extraTypes ? getUnionType(ts.append(extraTypes, result)) : result;
        // We tail-recurse for generic conditional types that (a) have not already been evaluated and cached, and
        // (b) are non distributive, have a check type that is unaffected by instantiation, or have a non-union check
        // type. Note that recursion is possible only through aliased conditional types, so we only increment the tail
        // recursion counter for those.
        function canTailRecurse(newType: ts.Type, newMapper: ts.TypeMapper | undefined) {
            if (newType.flags & ts.TypeFlags.Conditional && newMapper) {
                const newRoot = (newType as ts.ConditionalType).root;
                if (newRoot.outerTypeParameters) {
                    const typeParamMapper = combineTypeMappers((newType as ts.ConditionalType).mapper, newMapper);
                    const typeArguments = ts.map(newRoot.outerTypeParameters, t => getMappedType(t, typeParamMapper));
                    const newRootMapper = createTypeMapper(newRoot.outerTypeParameters, typeArguments);
                    const newCheckType = newRoot.isDistributive ? getMappedType(newRoot.checkType, newRootMapper) : undefined;
                    if (!newCheckType || newCheckType === newRoot.checkType || !(newCheckType.flags & (ts.TypeFlags.Union | ts.TypeFlags.Never))) {
                        root = newRoot;
                        mapper = newRootMapper;
                        aliasSymbol = undefined;
                        aliasTypeArguments = undefined;
                        if (newRoot.aliasSymbol) {
                            tailCount++;
                        }
                        return true;
                    }
                }
            }
            return false;
        }
    }

    function getTrueTypeFromConditionalType(type: ts.ConditionalType) {
        return type.resolvedTrueType || (type.resolvedTrueType = instantiateType(getTypeFromTypeNode(type.root.node.trueType), type.mapper));
    }

    function getFalseTypeFromConditionalType(type: ts.ConditionalType) {
        return type.resolvedFalseType || (type.resolvedFalseType = instantiateType(getTypeFromTypeNode(type.root.node.falseType), type.mapper));
    }

    function getInferredTrueTypeFromConditionalType(type: ts.ConditionalType) {
        return type.resolvedInferredTrueType || (type.resolvedInferredTrueType = type.combinedMapper ? instantiateType(getTypeFromTypeNode(type.root.node.trueType), type.combinedMapper) : getTrueTypeFromConditionalType(type));
    }

    function getInferTypeParameters(node: ts.ConditionalTypeNode): ts.TypeParameter[] | undefined {
        let result: ts.TypeParameter[] | undefined;
        if (node.locals) {
            node.locals.forEach(symbol => {
                if (symbol.flags & ts.SymbolFlags.TypeParameter) {
                    result = ts.append(result, getDeclaredTypeOfSymbol(symbol));
                }
            });
        }
        return result;
    }

    function isDistributionDependent(root: ts.ConditionalRoot) {
        return root.isDistributive && (
            isTypeParameterPossiblyReferenced(root.checkType as ts.TypeParameter, root.node.trueType) ||
            isTypeParameterPossiblyReferenced(root.checkType as ts.TypeParameter, root.node.falseType));
    }

    function getTypeFromConditionalTypeNode(node: ts.ConditionalTypeNode): ts.Type {
        const links = getNodeLinks(node);
        if (!links.resolvedType) {
            const checkType = getTypeFromTypeNode(node.checkType);
            const aliasSymbol = getAliasSymbolForTypeNode(node);
            const aliasTypeArguments = getTypeArgumentsForAliasSymbol(aliasSymbol);
            const allOuterTypeParameters = getOuterTypeParameters(node, /*includeThisTypes*/ true);
            const outerTypeParameters = aliasTypeArguments ? allOuterTypeParameters : ts.filter(allOuterTypeParameters, tp => isTypeParameterPossiblyReferenced(tp, node));
            const root: ts.ConditionalRoot = {
                node,
                checkType,
                extendsType: getTypeFromTypeNode(node.extendsType),
                isDistributive: !!(checkType.flags & ts.TypeFlags.TypeParameter),
                inferTypeParameters: getInferTypeParameters(node),
                outerTypeParameters,
                instantiations: undefined,
                aliasSymbol,
                aliasTypeArguments
            };
            links.resolvedType = getConditionalType(root, /*mapper*/ undefined);
            if (outerTypeParameters) {
                root.instantiations = new ts.Map<string, ts.Type>();
                root.instantiations.set(getTypeListId(outerTypeParameters), links.resolvedType);
            }
        }
        return links.resolvedType;
    }

    function getTypeFromInferTypeNode(node: ts.InferTypeNode): ts.Type {
        const links = getNodeLinks(node);
        if (!links.resolvedType) {
            links.resolvedType = getDeclaredTypeOfTypeParameter(getSymbolOfNode(node.typeParameter));
        }
        return links.resolvedType;
    }

    function getIdentifierChain(node: ts.EntityName): ts.Identifier[] {
        if (ts.isIdentifier(node)) {
            return [node];
        }
        else {
            return ts.append(getIdentifierChain(node.left), node.right);
        }
    }

    function getTypeFromImportTypeNode(node: ts.ImportTypeNode): ts.Type {
        const links = getNodeLinks(node);
        if (!links.resolvedType) {
            if (node.isTypeOf && node.typeArguments) { // Only the non-typeof form can make use of type arguments
                error(node, ts.Diagnostics.Type_arguments_cannot_be_used_here);
                links.resolvedSymbol = unknownSymbol;
                return links.resolvedType = errorType;
            }
            if (!ts.isLiteralImportTypeNode(node)) {
                error(node.argument, ts.Diagnostics.String_literal_expected);
                links.resolvedSymbol = unknownSymbol;
                return links.resolvedType = errorType;
            }
            const targetMeaning = node.isTypeOf ? ts.SymbolFlags.Value : node.flags & ts.NodeFlags.JSDoc ? ts.SymbolFlags.Value | ts.SymbolFlags.Type : ts.SymbolFlags.Type;
            // TODO: Future work: support unions/generics/whatever via a deferred import-type
            const innerModuleSymbol = resolveExternalModuleName(node, node.argument.literal);
            if (!innerModuleSymbol) {
                links.resolvedSymbol = unknownSymbol;
                return links.resolvedType = errorType;
            }
            const isExportEquals = !!innerModuleSymbol.exports?.get(ts.InternalSymbolName.ExportEquals);
            const moduleSymbol = resolveExternalModuleSymbol(innerModuleSymbol, /*dontResolveAlias*/ false);
            if (!ts.nodeIsMissing(node.qualifier)) {
                const nameStack: ts.Identifier[] = getIdentifierChain(node.qualifier!);
                let currentNamespace = moduleSymbol;
                let current: ts.Identifier | undefined;
                while (current = nameStack.shift()) {
                    const meaning = nameStack.length ? ts.SymbolFlags.Namespace : targetMeaning;
                    // typeof a.b.c is normally resolved using `checkExpression` which in turn defers to `checkQualifiedName`
                    // That, in turn, ultimately uses `getPropertyOfType` on the type of the symbol, which differs slightly from
                    // the `exports` lookup process that only looks up namespace members which is used for most type references
                    const mergedResolvedSymbol = getMergedSymbol(resolveSymbol(currentNamespace));
                    const symbolFromVariable = node.isTypeOf || ts.isInJSFile(node) && isExportEquals
                        ? getPropertyOfType(getTypeOfSymbol(mergedResolvedSymbol), current.escapedText, /*skipObjectFunctionPropertyAugment*/ false, /*includeTypeOnlyMembers*/ true)
                        : undefined;
                    const symbolFromModule = node.isTypeOf ? undefined : getSymbol(getExportsOfSymbol(mergedResolvedSymbol), current.escapedText, meaning);
                    const next = symbolFromModule ?? symbolFromVariable;
                    if (!next) {
                        error(current, ts.Diagnostics.Namespace_0_has_no_exported_member_1, getFullyQualifiedName(currentNamespace), ts.declarationNameToString(current));
                        return links.resolvedType = errorType;
                    }
                    getNodeLinks(current).resolvedSymbol = next;
                    getNodeLinks(current.parent).resolvedSymbol = next;
                    currentNamespace = next;
                }
                links.resolvedType = resolveImportSymbolType(node, links, currentNamespace, targetMeaning);
            }
            else {
                if (moduleSymbol.flags & targetMeaning) {
                    links.resolvedType = resolveImportSymbolType(node, links, moduleSymbol, targetMeaning);
                }
                else {
                    const errorMessage = targetMeaning === ts.SymbolFlags.Value
                        ? ts.Diagnostics.Module_0_does_not_refer_to_a_value_but_is_used_as_a_value_here
                        : ts.Diagnostics.Module_0_does_not_refer_to_a_type_but_is_used_as_a_type_here_Did_you_mean_typeof_import_0;

                    error(node, errorMessage, node.argument.literal.text);

                    links.resolvedSymbol = unknownSymbol;
                    links.resolvedType = errorType;
                }
            }
        }
        return links.resolvedType;
    }

    function resolveImportSymbolType(node: ts.ImportTypeNode, links: ts.NodeLinks, symbol: ts.Symbol, meaning: ts.SymbolFlags) {
        const resolvedSymbol = resolveSymbol(symbol);
        links.resolvedSymbol = resolvedSymbol;
        if (meaning === ts.SymbolFlags.Value) {
            return getTypeOfSymbol(symbol); // intentionally doesn't use resolved symbol so type is cached as expected on the alias
        }
        else {
            return getTypeReferenceType(node, resolvedSymbol); // getTypeReferenceType doesn't handle aliases - it must get the resolved symbol
        }
    }

    function getTypeFromTypeLiteralOrFunctionOrConstructorTypeNode(node: ts.TypeNode): ts.Type {
        const links = getNodeLinks(node);
        if (!links.resolvedType) {
            // Deferred resolution of members is handled by resolveObjectTypeMembers
            const aliasSymbol = getAliasSymbolForTypeNode(node);
            if (getMembersOfSymbol(node.symbol).size === 0 && !aliasSymbol) {
                links.resolvedType = emptyTypeLiteralType;
            }
            else {
                let type = createObjectType(ts.ObjectFlags.Anonymous, node.symbol);
                type.aliasSymbol = aliasSymbol;
                type.aliasTypeArguments = getTypeArgumentsForAliasSymbol(aliasSymbol);
                if (ts.isJSDocTypeLiteral(node) && node.isArrayType) {
                    type = createArrayType(type);
                }
                links.resolvedType = type;
            }
        }
        return links.resolvedType;
    }

    function getAliasSymbolForTypeNode(node: ts.Node) {
        let host = node.parent;
        while (ts.isParenthesizedTypeNode(host) || ts.isJSDocTypeExpression(host) || ts.isTypeOperatorNode(host) && host.operator === ts.SyntaxKind.ReadonlyKeyword) {
            host = host.parent;
        }
        return ts.isTypeAlias(host) ? getSymbolOfNode(host) : undefined;
    }

    function getTypeArgumentsForAliasSymbol(symbol: ts.Symbol | undefined) {
        return symbol ? getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol) : undefined;
    }

    function isNonGenericObjectType(type: ts.Type) {
        return !!(type.flags & ts.TypeFlags.Object) && !isGenericMappedType(type);
    }

    function isEmptyObjectTypeOrSpreadsIntoEmptyObject(type: ts.Type) {
        return isEmptyObjectType(type) || !!(type.flags & (ts.TypeFlags.Null | ts.TypeFlags.Undefined | ts.TypeFlags.BooleanLike | ts.TypeFlags.NumberLike | ts.TypeFlags.BigIntLike | ts.TypeFlags.StringLike | ts.TypeFlags.EnumLike | ts.TypeFlags.NonPrimitive | ts.TypeFlags.Index));
    }

    function tryMergeUnionOfObjectTypeAndEmptyObject(type: ts.Type, readonly: boolean): ts.Type {
        if (!(type.flags & ts.TypeFlags.Union)) {
            return type;
        }
        if (ts.every((type as ts.UnionType).types, isEmptyObjectTypeOrSpreadsIntoEmptyObject)) {
            return ts.find((type as ts.UnionType).types, isEmptyObjectType) || emptyObjectType;
        }
        const firstType = ts.find((type as ts.UnionType).types, t => !isEmptyObjectTypeOrSpreadsIntoEmptyObject(t));
        if (!firstType) {
            return type;
        }
        const secondType = ts.find((type as ts.UnionType).types, t => t !== firstType && !isEmptyObjectTypeOrSpreadsIntoEmptyObject(t));
        if (secondType) {
            return type;
        }
        return getAnonymousPartialType(firstType);

        function getAnonymousPartialType(type: ts.Type) {
            // gets the type as if it had been spread, but where everything in the spread is made optional
            const members = ts.createSymbolTable();
            for (const prop of getPropertiesOfType(type)) {
                if (ts.getDeclarationModifierFlagsFromSymbol(prop) & (ts.ModifierFlags.Private | ts.ModifierFlags.Protected)) {
                    // do nothing, skip privates
                }
                else if (isSpreadableProperty(prop)) {
                    const isSetonlyAccessor = prop.flags & ts.SymbolFlags.SetAccessor && !(prop.flags & ts.SymbolFlags.GetAccessor);
                    const flags = ts.SymbolFlags.Property | ts.SymbolFlags.Optional;
                    const result = createSymbol(flags, prop.escapedName, getIsLateCheckFlag(prop) | (readonly ? ts.CheckFlags.Readonly : 0));
                    result.type = isSetonlyAccessor ? undefinedType : addOptionality(getTypeOfSymbol(prop), /*isProperty*/ true);
                    result.declarations = prop.declarations;
                    result.nameType = getSymbolLinks(prop).nameType;
                    result.syntheticOrigin = prop;
                    members.set(prop.escapedName, result);
                }
            }
            const spread = createAnonymousType(type.symbol, members, ts.emptyArray, ts.emptyArray, getIndexInfosOfType(type));
            spread.objectFlags |= ts.ObjectFlags.ObjectLiteral | ts.ObjectFlags.ContainsObjectOrArrayLiteral;
            return spread;
        }
    }

    /**
     * Since the source of spread types are object literals, which are not binary,
     * this function should be called in a left folding style, with left = previous result of getSpreadType
     * and right = the new element to be spread.
     */
    function getSpreadType(left: ts.Type, right: ts.Type, symbol: ts.Symbol | undefined, objectFlags: ts.ObjectFlags, readonly: boolean): ts.Type {
        if (left.flags & ts.TypeFlags.Any || right.flags & ts.TypeFlags.Any) {
            return anyType;
        }
        if (left.flags & ts.TypeFlags.Unknown || right.flags & ts.TypeFlags.Unknown) {
            return unknownType;
        }
        if (left.flags & ts.TypeFlags.Never) {
            return right;
        }
        if (right.flags & ts.TypeFlags.Never) {
            return left;
        }
        left = tryMergeUnionOfObjectTypeAndEmptyObject(left, readonly);
        if (left.flags & ts.TypeFlags.Union) {
            return checkCrossProductUnion([left, right])
                ? mapType(left, t => getSpreadType(t, right, symbol, objectFlags, readonly))
                : errorType;
        }
        right = tryMergeUnionOfObjectTypeAndEmptyObject(right, readonly);
        if (right.flags & ts.TypeFlags.Union) {
            return checkCrossProductUnion([left, right])
                ? mapType(right, t => getSpreadType(left, t, symbol, objectFlags, readonly))
                : errorType;
        }
        if (right.flags & (ts.TypeFlags.BooleanLike | ts.TypeFlags.NumberLike | ts.TypeFlags.BigIntLike | ts.TypeFlags.StringLike | ts.TypeFlags.EnumLike | ts.TypeFlags.NonPrimitive | ts.TypeFlags.Index)) {
            return left;
        }

        if (isGenericObjectType(left) || isGenericObjectType(right)) {
            if (isEmptyObjectType(left)) {
                return right;
            }
            // When the left type is an intersection, we may need to merge the last constituent of the
            // intersection with the right type. For example when the left type is 'T & { a: string }'
            // and the right type is '{ b: string }' we produce 'T & { a: string, b: string }'.
            if (left.flags & ts.TypeFlags.Intersection) {
                const types = (left as ts.IntersectionType).types;
                const lastLeft = types[types.length - 1];
                if (isNonGenericObjectType(lastLeft) && isNonGenericObjectType(right)) {
                    return getIntersectionType(ts.concatenate(types.slice(0, types.length - 1), [getSpreadType(lastLeft, right, symbol, objectFlags, readonly)]));
                }
            }
            return getIntersectionType([left, right]);
        }

        const members = ts.createSymbolTable();
        const skippedPrivateMembers = new ts.Set<ts.__String>();
        const indexInfos = left === emptyObjectType ? getIndexInfosOfType(right) : getUnionIndexInfos([left, right]);

        for (const rightProp of getPropertiesOfType(right)) {
            if (ts.getDeclarationModifierFlagsFromSymbol(rightProp) & (ts.ModifierFlags.Private | ts.ModifierFlags.Protected)) {
                skippedPrivateMembers.add(rightProp.escapedName);
            }
            else if (isSpreadableProperty(rightProp)) {
                members.set(rightProp.escapedName, getSpreadSymbol(rightProp, readonly));
            }
        }

        for (const leftProp of getPropertiesOfType(left)) {
            if (skippedPrivateMembers.has(leftProp.escapedName) || !isSpreadableProperty(leftProp)) {
                continue;
            }
            if (members.has(leftProp.escapedName)) {
                const rightProp = members.get(leftProp.escapedName)!;
                const rightType = getTypeOfSymbol(rightProp);
                if (rightProp.flags & ts.SymbolFlags.Optional) {
                    const declarations = ts.concatenate(leftProp.declarations, rightProp.declarations);
                    const flags = ts.SymbolFlags.Property | (leftProp.flags & ts.SymbolFlags.Optional);
                    const result = createSymbol(flags, leftProp.escapedName);
                    result.type = getUnionType([getTypeOfSymbol(leftProp), removeMissingOrUndefinedType(rightType)], ts.UnionReduction.Subtype);
                    result.leftSpread = leftProp;
                    result.rightSpread = rightProp;
                    result.declarations = declarations;
                    result.nameType = getSymbolLinks(leftProp).nameType;
                    members.set(leftProp.escapedName, result);
                }
            }
            else {
                members.set(leftProp.escapedName, getSpreadSymbol(leftProp, readonly));
            }
        }

        const spread = createAnonymousType(symbol, members, ts.emptyArray, ts.emptyArray, ts.sameMap(indexInfos, info => getIndexInfoWithReadonly(info, readonly)));
        spread.objectFlags |= ts.ObjectFlags.ObjectLiteral | ts.ObjectFlags.ContainsObjectOrArrayLiteral | ts.ObjectFlags.ContainsSpread | objectFlags;
        return spread;
    }

    /** We approximate own properties as non-methods plus methods that are inside the object literal */
    function isSpreadableProperty(prop: ts.Symbol): boolean {
        return !ts.some(prop.declarations, ts.isPrivateIdentifierClassElementDeclaration) &&
            (!(prop.flags & (ts.SymbolFlags.Method | ts.SymbolFlags.GetAccessor | ts.SymbolFlags.SetAccessor)) ||
                !prop.declarations?.some(decl => ts.isClassLike(decl.parent)));
    }

    function getSpreadSymbol(prop: ts.Symbol, readonly: boolean) {
        const isSetonlyAccessor = prop.flags & ts.SymbolFlags.SetAccessor && !(prop.flags & ts.SymbolFlags.GetAccessor);
        if (!isSetonlyAccessor && readonly === isReadonlySymbol(prop)) {
            return prop;
        }
        const flags = ts.SymbolFlags.Property | (prop.flags & ts.SymbolFlags.Optional);
        const result = createSymbol(flags, prop.escapedName, getIsLateCheckFlag(prop) | (readonly ? ts.CheckFlags.Readonly : 0));
        result.type = isSetonlyAccessor ? undefinedType : getTypeOfSymbol(prop);
        result.declarations = prop.declarations;
        result.nameType = getSymbolLinks(prop).nameType;
        result.syntheticOrigin = prop;
        return result;
    }

    function getIndexInfoWithReadonly(info: ts.IndexInfo, readonly: boolean) {
        return info.isReadonly !== readonly ? createIndexInfo(info.keyType, info.type, readonly, info.declaration) : info;
    }

    function createLiteralType(flags: ts.TypeFlags, value: string | number | ts.PseudoBigInt, symbol?: ts.Symbol, regularType?: ts.LiteralType) {
        const type = createTypeWithSymbol(flags, symbol!) as ts.LiteralType;
        type.value = value;
        type.regularType = regularType || type;
        return type;
    }

    function getFreshTypeOfLiteralType(type: ts.Type): ts.Type {
        if (type.flags & ts.TypeFlags.Literal) {
            if (!(type as ts.LiteralType).freshType) {
                const freshType = createLiteralType(type.flags, (type as ts.LiteralType).value, (type as ts.LiteralType).symbol, type as ts.LiteralType);
                freshType.freshType = freshType;
                (type as ts.LiteralType).freshType = freshType;
            }
            return (type as ts.LiteralType).freshType;
        }
        return type;
    }

    function getRegularTypeOfLiteralType(type: ts.Type): ts.Type {
        return type.flags & ts.TypeFlags.Literal ? (type as ts.LiteralType).regularType :
            type.flags & ts.TypeFlags.Union ? ((type as ts.UnionType).regularType || ((type as ts.UnionType).regularType = mapType(type, getRegularTypeOfLiteralType) as ts.UnionType)) :
            type;
    }

    function isFreshLiteralType(type: ts.Type) {
        return !!(type.flags & ts.TypeFlags.Literal) && (type as ts.LiteralType).freshType === type;
    }

    function getStringLiteralType(value: string): ts.StringLiteralType {
        let type;
        return stringLiteralTypes.get(value) ||
            (stringLiteralTypes.set(value, type = createLiteralType(ts.TypeFlags.StringLiteral, value) as ts.StringLiteralType), type);
    }

    function getNumberLiteralType(value: number): ts.NumberLiteralType {
        let type;
        return numberLiteralTypes.get(value) ||
            (numberLiteralTypes.set(value, type = createLiteralType(ts.TypeFlags.NumberLiteral, value) as ts.NumberLiteralType), type);
    }

    function getBigIntLiteralType(value: ts.PseudoBigInt): ts.BigIntLiteralType {
        let type;
        const key = ts.pseudoBigIntToString(value);
        return bigIntLiteralTypes.get(key) ||
            (bigIntLiteralTypes.set(key, type = createLiteralType(ts.TypeFlags.BigIntLiteral, value) as ts.BigIntLiteralType), type);
    }

    function getEnumLiteralType(value: string | number, enumId: number, symbol: ts.Symbol): ts.LiteralType {
        let type;
        const key = `${enumId}${typeof value === "string" ? "@" : "#"}${value}`;
        const flags = ts.TypeFlags.EnumLiteral | (typeof value === "string" ? ts.TypeFlags.StringLiteral : ts.TypeFlags.NumberLiteral);
        return enumLiteralTypes.get(key) ||
            (enumLiteralTypes.set(key, type = createLiteralType(flags, value, symbol)), type);
    }

    function getTypeFromLiteralTypeNode(node: ts.LiteralTypeNode): ts.Type {
        if (node.literal.kind === ts.SyntaxKind.NullKeyword) {
            return nullType;
        }
        const links = getNodeLinks(node);
        if (!links.resolvedType) {
            links.resolvedType = getRegularTypeOfLiteralType(checkExpression(node.literal));
        }
        return links.resolvedType;
    }

    function createUniqueESSymbolType(symbol: ts.Symbol) {
        const type = createTypeWithSymbol(ts.TypeFlags.UniqueESSymbol, symbol) as ts.UniqueESSymbolType;
        type.escapedName = `__@${type.symbol.escapedName}@${getSymbolId(type.symbol)}` as ts.__String;
        return type;
    }

    function getESSymbolLikeTypeForNode(node: ts.Node) {
        if (ts.isValidESSymbolDeclaration(node)) {
            const symbol = ts.isCommonJsExportPropertyAssignment(node) ? getSymbolOfNode((node as ts.BinaryExpression).left) : getSymbolOfNode(node);
            if (symbol) {
                const links = getSymbolLinks(symbol);
                return links.uniqueESSymbolType || (links.uniqueESSymbolType = createUniqueESSymbolType(symbol));
            }
        }
        return esSymbolType;
    }

    function getThisType(node: ts.Node): ts.Type {
        const container = ts.getThisContainer(node, /*includeArrowFunctions*/ false);
        const parent = container && container.parent;
        if (parent && (ts.isClassLike(parent) || parent.kind === ts.SyntaxKind.InterfaceDeclaration)) {
            if (!ts.isStatic(container) &&
                (!ts.isConstructorDeclaration(container) || ts.isNodeDescendantOf(node, container.body))) {
                return getDeclaredTypeOfClassOrInterface(getSymbolOfNode(parent as ts.ClassLikeDeclaration | ts.InterfaceDeclaration)).thisType!;
            }
        }

        // inside x.prototype = { ... }
        if (parent && ts.isObjectLiteralExpression(parent) && ts.isBinaryExpression(parent.parent) && ts.getAssignmentDeclarationKind(parent.parent) === ts.AssignmentDeclarationKind.Prototype) {
            return getDeclaredTypeOfClassOrInterface(getSymbolOfNode(parent.parent.left)!.parent!).thisType!;
        }
        // /** @return {this} */
        // x.prototype.m = function() { ... }
        const host = node.flags & ts.NodeFlags.JSDoc ? ts.getHostSignatureFromJSDoc(node) : undefined;
        if (host && ts.isFunctionExpression(host) && ts.isBinaryExpression(host.parent) && ts.getAssignmentDeclarationKind(host.parent) === ts.AssignmentDeclarationKind.PrototypeProperty) {
            return getDeclaredTypeOfClassOrInterface(getSymbolOfNode(host.parent.left)!.parent!).thisType!;
        }
        // inside constructor function C() { ... }
        if (isJSConstructor(container) && ts.isNodeDescendantOf(node, container.body)) {
            return getDeclaredTypeOfClassOrInterface(getSymbolOfNode(container)).thisType!;
        }
        error(node, ts.Diagnostics.A_this_type_is_available_only_in_a_non_static_member_of_a_class_or_interface);
        return errorType;
    }

    function getTypeFromThisTypeNode(node: ts.ThisExpression | ts.ThisTypeNode): ts.Type {
        const links = getNodeLinks(node);
        if (!links.resolvedType) {
            links.resolvedType = getThisType(node);
        }
        return links.resolvedType;
    }

    function getTypeFromRestTypeNode(node: ts.RestTypeNode | ts.NamedTupleMember) {
        return getTypeFromTypeNode(getArrayElementTypeNode(node.type) || node.type);
    }

    function getArrayElementTypeNode(node: ts.TypeNode): ts.TypeNode | undefined {
        switch (node.kind) {
            case ts.SyntaxKind.ParenthesizedType:
                return getArrayElementTypeNode((node as ts.ParenthesizedTypeNode).type);
            case ts.SyntaxKind.TupleType:
                if ((node as ts.TupleTypeNode).elements.length === 1) {
                    node = (node as ts.TupleTypeNode).elements[0];
                    if (node.kind === ts.SyntaxKind.RestType || node.kind === ts.SyntaxKind.NamedTupleMember && (node as ts.NamedTupleMember).dotDotDotToken) {
                        return getArrayElementTypeNode((node as ts.RestTypeNode | ts.NamedTupleMember).type);
                    }
                }
                break;
            case ts.SyntaxKind.ArrayType:
                return (node as ts.ArrayTypeNode).elementType;
        }
        return undefined;
    }

    function getTypeFromNamedTupleTypeNode(node: ts.NamedTupleMember): ts.Type {
        const links = getNodeLinks(node);
        return links.resolvedType || (links.resolvedType =
                node.dotDotDotToken ? getTypeFromRestTypeNode(node) :
                addOptionality(getTypeFromTypeNode(node.type), /*isProperty*/ true, !!node.questionToken));
    }

    function getTypeFromTypeNode(node: ts.TypeNode): ts.Type {
        return getConditionalFlowTypeOfType(getTypeFromTypeNodeWorker(node), node);
    }

    function getTypeFromTypeNodeWorker(node: ts.TypeNode): ts.Type {
        switch (node.kind) {
            case ts.SyntaxKind.AnyKeyword:
            case ts.SyntaxKind.JSDocAllType:
            case ts.SyntaxKind.JSDocUnknownType:
                return anyType;
            case ts.SyntaxKind.UnknownKeyword:
                return unknownType;
            case ts.SyntaxKind.StringKeyword:
                return stringType;
            case ts.SyntaxKind.NumberKeyword:
                return numberType;
            case ts.SyntaxKind.BigIntKeyword:
                return bigintType;
            case ts.SyntaxKind.BooleanKeyword:
                return booleanType;
            case ts.SyntaxKind.SymbolKeyword:
                return esSymbolType;
            case ts.SyntaxKind.VoidKeyword:
                return voidType;
            case ts.SyntaxKind.UndefinedKeyword:
                return undefinedType;
            case ts.SyntaxKind.NullKeyword as ts.TypeNodeSyntaxKind:
                // TODO(rbuckton): `NullKeyword` is no longer a `TypeNode`, but we defensively allow it here because of incorrect casts in the Language Service.
                return nullType;
            case ts.SyntaxKind.NeverKeyword:
                return neverType;
            case ts.SyntaxKind.ObjectKeyword:
                return node.flags & ts.NodeFlags.JavaScriptFile && !noImplicitAny ? anyType : nonPrimitiveType;
            case ts.SyntaxKind.IntrinsicKeyword:
                return intrinsicMarkerType;
            case ts.SyntaxKind.ThisType:
            case ts.SyntaxKind.ThisKeyword as ts.TypeNodeSyntaxKind:
                // TODO(rbuckton): `ThisKeyword` is no longer a `TypeNode`, but we defensively allow it here because of incorrect casts in the Language Service and because of `isPartOfTypeNode`.
                return getTypeFromThisTypeNode(node as ts.ThisExpression | ts.ThisTypeNode);
            case ts.SyntaxKind.LiteralType:
                return getTypeFromLiteralTypeNode(node as ts.LiteralTypeNode);
            case ts.SyntaxKind.TypeReference:
                return getTypeFromTypeReference(node as ts.TypeReferenceNode);
            case ts.SyntaxKind.TypePredicate:
                return (node as ts.TypePredicateNode).assertsModifier ? voidType : booleanType;
            case ts.SyntaxKind.ExpressionWithTypeArguments:
                return getTypeFromTypeReference(node as ts.ExpressionWithTypeArguments);
            case ts.SyntaxKind.TypeQuery:
                return getTypeFromTypeQueryNode(node as ts.TypeQueryNode);
            case ts.SyntaxKind.ArrayType:
            case ts.SyntaxKind.TupleType:
                return getTypeFromArrayOrTupleTypeNode(node as ts.ArrayTypeNode | ts.TupleTypeNode);
            case ts.SyntaxKind.OptionalType:
                return getTypeFromOptionalTypeNode(node as ts.OptionalTypeNode);
            case ts.SyntaxKind.UnionType:
                return getTypeFromUnionTypeNode(node as ts.UnionTypeNode);
            case ts.SyntaxKind.IntersectionType:
                return getTypeFromIntersectionTypeNode(node as ts.IntersectionTypeNode);
            case ts.SyntaxKind.JSDocNullableType:
                return getTypeFromJSDocNullableTypeNode(node as ts.JSDocNullableType);
            case ts.SyntaxKind.JSDocOptionalType:
                return addOptionality(getTypeFromTypeNode((node as ts.JSDocOptionalType).type));
            case ts.SyntaxKind.NamedTupleMember:
                return getTypeFromNamedTupleTypeNode(node as ts.NamedTupleMember);
            case ts.SyntaxKind.ParenthesizedType:
            case ts.SyntaxKind.JSDocNonNullableType:
            case ts.SyntaxKind.JSDocTypeExpression:
                return getTypeFromTypeNode((node as ts.ParenthesizedTypeNode | ts.JSDocTypeReferencingNode | ts.JSDocTypeExpression | ts.NamedTupleMember).type);
            case ts.SyntaxKind.RestType:
                return getTypeFromRestTypeNode(node as ts.RestTypeNode);
            case ts.SyntaxKind.JSDocVariadicType:
                return getTypeFromJSDocVariadicType(node as ts.JSDocVariadicType);
            case ts.SyntaxKind.FunctionType:
            case ts.SyntaxKind.ConstructorType:
            case ts.SyntaxKind.TypeLiteral:
            case ts.SyntaxKind.JSDocTypeLiteral:
            case ts.SyntaxKind.JSDocFunctionType:
            case ts.SyntaxKind.JSDocSignature:
                return getTypeFromTypeLiteralOrFunctionOrConstructorTypeNode(node);
            case ts.SyntaxKind.TypeOperator:
                return getTypeFromTypeOperatorNode(node as ts.TypeOperatorNode);
            case ts.SyntaxKind.IndexedAccessType:
                return getTypeFromIndexedAccessTypeNode(node as ts.IndexedAccessTypeNode);
            case ts.SyntaxKind.MappedType:
                return getTypeFromMappedTypeNode(node as ts.MappedTypeNode);
            case ts.SyntaxKind.ConditionalType:
                return getTypeFromConditionalTypeNode(node as ts.ConditionalTypeNode);
            case ts.SyntaxKind.InferType:
                return getTypeFromInferTypeNode(node as ts.InferTypeNode);
            case ts.SyntaxKind.TemplateLiteralType:
                return getTypeFromTemplateTypeNode(node as ts.TemplateLiteralTypeNode);
            case ts.SyntaxKind.ImportType:
                return getTypeFromImportTypeNode(node as ts.ImportTypeNode);
            // This function assumes that an identifier, qualified name, or property access expression is a type expression
            // Callers should first ensure this by calling `isPartOfTypeNode`
            // TODO(rbuckton): These aren't valid TypeNodes, but we treat them as such because of `isPartOfTypeNode`, which returns `true` for things that aren't `TypeNode`s.
            case ts.SyntaxKind.Identifier as ts.TypeNodeSyntaxKind:
            case ts.SyntaxKind.QualifiedName as ts.TypeNodeSyntaxKind:
            case ts.SyntaxKind.PropertyAccessExpression as ts.TypeNodeSyntaxKind:
                const symbol = getSymbolAtLocation(node);
                return symbol ? getDeclaredTypeOfSymbol(symbol) : errorType;
            default:
                return errorType;
        }
    }

    function instantiateList<T>(items: readonly T[], mapper: ts.TypeMapper, instantiator: (item: T, mapper: ts.TypeMapper) => T): readonly T[];
    function instantiateList<T>(items: readonly T[] | undefined, mapper: ts.TypeMapper, instantiator: (item: T, mapper: ts.TypeMapper) => T): readonly T[] | undefined;
    function instantiateList<T>(items: readonly T[] | undefined, mapper: ts.TypeMapper, instantiator: (item: T, mapper: ts.TypeMapper) => T): readonly T[] | undefined {
        if (items && items.length) {
            for (let i = 0; i < items.length; i++) {
                const item = items[i];
                const mapped = instantiator(item, mapper);
                if (item !== mapped) {
                    const result = i === 0 ? [] : items.slice(0, i);
                    result.push(mapped);
                    for (i++; i < items.length; i++) {
                        result.push(instantiator(items[i], mapper));
                    }
                    return result;
                }
            }
        }
        return items;
    }

    function instantiateTypes(types: readonly ts.Type[], mapper: ts.TypeMapper): readonly ts.Type[];
    function instantiateTypes(types: readonly ts.Type[] | undefined, mapper: ts.TypeMapper): readonly ts.Type[] | undefined;
    function instantiateTypes(types: readonly ts.Type[] | undefined, mapper: ts.TypeMapper): readonly ts.Type[] | undefined {
        return instantiateList<ts.Type>(types, mapper, instantiateType);
    }

    function instantiateSignatures(signatures: readonly ts.Signature[], mapper: ts.TypeMapper): readonly ts.Signature[] {
        return instantiateList<ts.Signature>(signatures, mapper, instantiateSignature);
    }

    function instantiateIndexInfos(indexInfos: readonly ts.IndexInfo[], mapper: ts.TypeMapper): readonly ts.IndexInfo[] {
        return instantiateList<ts.IndexInfo>(indexInfos, mapper, instantiateIndexInfo);
    }

    function createTypeMapper(sources: readonly ts.TypeParameter[], targets: readonly ts.Type[] | undefined): ts.TypeMapper {
        return sources.length === 1 ? makeUnaryTypeMapper(sources[0], targets ? targets[0] : anyType) : makeArrayTypeMapper(sources, targets);
    }

    function getMappedType(type: ts.Type, mapper: ts.TypeMapper): ts.Type {
        switch (mapper.kind) {
            case ts.TypeMapKind.Simple:
                return type === mapper.source ? mapper.target : type;
            case ts.TypeMapKind.Array: {
                const sources = mapper.sources;
                const targets = mapper.targets;
                for (let i = 0; i < sources.length; i++) {
                    if (type === sources[i]) {
                        return targets ? targets[i] : anyType;
                    }
                }
                return type;
            }
            case ts.TypeMapKind.Deferred: {
                const sources = mapper.sources;
                const targets = mapper.targets;
                for (let i = 0; i < sources.length; i++) {
                    if (type === sources[i]) {
                        return targets[i]();
                    }
                }
                return type;
            }
            case ts.TypeMapKind.Function:
                return mapper.func(type);
            case ts.TypeMapKind.Composite:
            case ts.TypeMapKind.Merged:
                const t1 = getMappedType(type, mapper.mapper1);
                return t1 !== type && mapper.kind === ts.TypeMapKind.Composite ? instantiateType(t1, mapper.mapper2) : getMappedType(t1, mapper.mapper2);
        }
    }

    function makeUnaryTypeMapper(source: ts.Type, target: ts.Type): ts.TypeMapper {
        return ts.Debug.attachDebugPrototypeIfDebug({ kind: ts.TypeMapKind.Simple, source, target });
    }

    function makeArrayTypeMapper(sources: readonly ts.TypeParameter[], targets: readonly ts.Type[] | undefined): ts.TypeMapper {
        return ts.Debug.attachDebugPrototypeIfDebug({ kind: ts.TypeMapKind.Array, sources, targets });
    }

    function makeFunctionTypeMapper(func: (t: ts.Type) => ts.Type, debugInfo: () => string): ts.TypeMapper {
        return ts.Debug.attachDebugPrototypeIfDebug({ kind: ts.TypeMapKind.Function, func, debugInfo: ts.Debug.isDebugging ? debugInfo : undefined });
    }

    function makeDeferredTypeMapper(sources: readonly ts.TypeParameter[], targets: (() => ts.Type)[]) {
        return ts.Debug.attachDebugPrototypeIfDebug({ kind: ts.TypeMapKind.Deferred, sources, targets });
    }

    function makeCompositeTypeMapper(kind: ts.TypeMapKind.Composite | ts.TypeMapKind.Merged, mapper1: ts.TypeMapper, mapper2: ts.TypeMapper): ts.TypeMapper {
        return ts.Debug.attachDebugPrototypeIfDebug({ kind, mapper1, mapper2 });
    }

    function createTypeEraser(sources: readonly ts.TypeParameter[]): ts.TypeMapper {
        return createTypeMapper(sources, /*targets*/ undefined);
    }

    /**
     * Maps forward-references to later types parameters to the empty object type.
     * This is used during inference when instantiating type parameter defaults.
     */
    function createBackreferenceMapper(context: ts.InferenceContext, index: number): ts.TypeMapper {
        const forwardInferences = context.inferences.slice(index);
        return createTypeMapper(ts.map(forwardInferences, i => i.typeParameter), ts.map(forwardInferences, () => unknownType));
    }

    function combineTypeMappers(mapper1: ts.TypeMapper | undefined, mapper2: ts.TypeMapper): ts.TypeMapper {
        return mapper1 ? makeCompositeTypeMapper(ts.TypeMapKind.Composite, mapper1, mapper2) : mapper2;
    }

    function mergeTypeMappers(mapper1: ts.TypeMapper | undefined, mapper2: ts.TypeMapper): ts.TypeMapper {
        return mapper1 ? makeCompositeTypeMapper(ts.TypeMapKind.Merged, mapper1, mapper2) : mapper2;
    }

    function prependTypeMapping(source: ts.Type, target: ts.Type, mapper: ts.TypeMapper | undefined) {
        return !mapper ? makeUnaryTypeMapper(source, target) : makeCompositeTypeMapper(ts.TypeMapKind.Merged, makeUnaryTypeMapper(source, target), mapper);
    }

    function appendTypeMapping(mapper: ts.TypeMapper | undefined, source: ts.Type, target: ts.Type) {
        return !mapper ? makeUnaryTypeMapper(source, target) : makeCompositeTypeMapper(ts.TypeMapKind.Merged, mapper, makeUnaryTypeMapper(source, target));
    }

    function getRestrictiveTypeParameter(tp: ts.TypeParameter) {
        return !tp.constraint && !getConstraintDeclaration(tp) || tp.constraint === noConstraintType ? tp : tp.restrictiveInstantiation || (
            tp.restrictiveInstantiation = createTypeParameter(tp.symbol),
            (tp.restrictiveInstantiation as ts.TypeParameter).constraint = noConstraintType,
            tp.restrictiveInstantiation
        );
    }

    function cloneTypeParameter(typeParameter: ts.TypeParameter): ts.TypeParameter {
        const result = createTypeParameter(typeParameter.symbol);
        result.target = typeParameter;
        return result;
    }

    function instantiateTypePredicate(predicate: ts.TypePredicate, mapper: ts.TypeMapper): ts.TypePredicate {
        return createTypePredicate(predicate.kind, predicate.parameterName, predicate.parameterIndex, instantiateType(predicate.type, mapper));
    }

    function instantiateSignature(signature: ts.Signature, mapper: ts.TypeMapper, eraseTypeParameters?: boolean): ts.Signature {
        let freshTypeParameters: ts.TypeParameter[] | undefined;
        if (signature.typeParameters && !eraseTypeParameters) {
            // First create a fresh set of type parameters, then include a mapping from the old to the
            // new type parameters in the mapper function. Finally store this mapper in the new type
            // parameters such that we can use it when instantiating constraints.
            freshTypeParameters = ts.map(signature.typeParameters, cloneTypeParameter);
            mapper = combineTypeMappers(createTypeMapper(signature.typeParameters, freshTypeParameters), mapper);
            for (const tp of freshTypeParameters) {
                tp.mapper = mapper;
            }
        }
        // Don't compute resolvedReturnType and resolvedTypePredicate now,
        // because using `mapper` now could trigger inferences to become fixed. (See `createInferenceContext`.)
        // See GH#17600.
        const result = createSignature(signature.declaration, freshTypeParameters,
            signature.thisParameter && instantiateSymbol(signature.thisParameter, mapper),
            instantiateList(signature.parameters, mapper, instantiateSymbol),
            /*resolvedReturnType*/ undefined,
            /*resolvedTypePredicate*/ undefined,
            signature.minArgumentCount,
            signature.flags & ts.SignatureFlags.PropagatingFlags);
        result.target = signature;
        result.mapper = mapper;
        return result;
    }

    function instantiateSymbol(symbol: ts.Symbol, mapper: ts.TypeMapper): ts.Symbol {
        const links = getSymbolLinks(symbol);
        if (links.type && !couldContainTypeVariables(links.type)) {
            // If the type of the symbol is already resolved, and if that type could not possibly
            // be affected by instantiation, simply return the symbol itself.
            return symbol;
        }
        if (ts.getCheckFlags(symbol) & ts.CheckFlags.Instantiated) {
            // If symbol being instantiated is itself a instantiation, fetch the original target and combine the
            // type mappers. This ensures that original type identities are properly preserved and that aliases
            // always reference a non-aliases.
            symbol = links.target!;
            mapper = combineTypeMappers(links.mapper, mapper);
        }
        // Keep the flags from the symbol we're instantiating.  Mark that is instantiated, and
        // also transient so that we can just store data on it directly.
        const result = createSymbol(symbol.flags, symbol.escapedName, ts.CheckFlags.Instantiated | ts.getCheckFlags(symbol) & (ts.CheckFlags.Readonly | ts.CheckFlags.Late | ts.CheckFlags.OptionalParameter | ts.CheckFlags.RestParameter));
        result.declarations = symbol.declarations;
        result.parent = symbol.parent;
        result.target = symbol;
        result.mapper = mapper;
        if (symbol.valueDeclaration) {
            result.valueDeclaration = symbol.valueDeclaration;
        }
        if (links.nameType) {
            result.nameType = links.nameType;
        }
        return result;
    }

    function getObjectTypeInstantiation(type: ts.AnonymousType | ts.DeferredTypeReference, mapper: ts.TypeMapper, aliasSymbol?: ts.Symbol, aliasTypeArguments?: readonly ts.Type[]) {
        const declaration = type.objectFlags & ts.ObjectFlags.Reference ? (type as ts.TypeReference).node! :
            type.objectFlags & ts.ObjectFlags.InstantiationExpressionType ? (type as ts.InstantiationExpressionType).node :
            type.symbol.declarations![0];
        const links = getNodeLinks(declaration);
        const target = type.objectFlags & ts.ObjectFlags.Reference ? links.resolvedType! as ts.DeferredTypeReference :
            type.objectFlags & ts.ObjectFlags.Instantiated ? type.target! : type;
        let typeParameters = links.outerTypeParameters;
        if (!typeParameters) {
            // The first time an anonymous type is instantiated we compute and store a list of the type
            // parameters that are in scope (and therefore potentially referenced). For type literals that
            // aren't the right hand side of a generic type alias declaration we optimize by reducing the
            // set of type parameters to those that are possibly referenced in the literal.
            let outerTypeParameters = getOuterTypeParameters(declaration, /*includeThisTypes*/ true);
            if (isJSConstructor(declaration)) {
                const templateTagParameters = getTypeParametersFromDeclaration(declaration as ts.DeclarationWithTypeParameters);
                outerTypeParameters = ts.addRange(outerTypeParameters, templateTagParameters);
            }
            typeParameters = outerTypeParameters || ts.emptyArray;
            const allDeclarations = type.objectFlags & (ts.ObjectFlags.Reference | ts.ObjectFlags.InstantiationExpressionType) ? [declaration] : type.symbol.declarations!;
            typeParameters = (target.objectFlags & (ts.ObjectFlags.Reference | ts.ObjectFlags.InstantiationExpressionType) || target.symbol.flags & ts.SymbolFlags.Method || target.symbol.flags & ts.SymbolFlags.TypeLiteral) && !target.aliasTypeArguments ?
                ts.filter(typeParameters, tp => ts.some(allDeclarations, d => isTypeParameterPossiblyReferenced(tp, d))) :
                typeParameters;
            links.outerTypeParameters = typeParameters;
        }
        if (typeParameters.length) {
            // We are instantiating an anonymous type that has one or more type parameters in scope. Apply the
            // mapper to the type parameters to produce the effective list of type arguments, and compute the
            // instantiation cache key from the type IDs of the type arguments.
            const combinedMapper = combineTypeMappers(type.mapper, mapper);
            const typeArguments = ts.map(typeParameters, t => getMappedType(t, combinedMapper));
            const newAliasSymbol = aliasSymbol || type.aliasSymbol;
            const newAliasTypeArguments = aliasSymbol ? aliasTypeArguments : instantiateTypes(type.aliasTypeArguments, mapper);
            const id = getTypeListId(typeArguments) + getAliasId(newAliasSymbol, newAliasTypeArguments);
            if (!target.instantiations) {
                target.instantiations = new ts.Map<string, ts.Type>();
                target.instantiations.set(getTypeListId(typeParameters) + getAliasId(target.aliasSymbol, target.aliasTypeArguments), target);
            }
            let result = target.instantiations.get(id);
            if (!result) {
                const newMapper = createTypeMapper(typeParameters, typeArguments);
                result = target.objectFlags & ts.ObjectFlags.Reference ? createDeferredTypeReference((type as ts.DeferredTypeReference).target, (type as ts.DeferredTypeReference).node, newMapper, newAliasSymbol, newAliasTypeArguments) :
                    target.objectFlags & ts.ObjectFlags.Mapped ? instantiateMappedType(target as ts.MappedType, newMapper, newAliasSymbol, newAliasTypeArguments) :
                    instantiateAnonymousType(target, newMapper, newAliasSymbol, newAliasTypeArguments);
                target.instantiations.set(id, result);
            }
            return result;
        }
        return type;
    }

    function maybeTypeParameterReference(node: ts.Node) {
        return !(node.parent.kind === ts.SyntaxKind.TypeReference && (node.parent as ts.TypeReferenceNode).typeArguments && node === (node.parent as ts.TypeReferenceNode).typeName ||
            node.parent.kind === ts.SyntaxKind.ImportType && (node.parent as ts.ImportTypeNode).typeArguments && node === (node.parent as ts.ImportTypeNode).qualifier);
    }

    function isTypeParameterPossiblyReferenced(tp: ts.TypeParameter, node: ts.Node) {
        // If the type parameter doesn't have exactly one declaration, if there are intervening statement blocks
        // between the node and the type parameter declaration, if the node contains actual references to the
        // type parameter, or if the node contains type queries that we can't prove couldn't contain references to the type parameter,
        // we consider the type parameter possibly referenced.
        if (tp.symbol && tp.symbol.declarations && tp.symbol.declarations.length === 1) {
            const container = tp.symbol.declarations[0].parent;
            for (let n = node; n !== container; n = n.parent) {
                if (!n || n.kind === ts.SyntaxKind.Block || n.kind === ts.SyntaxKind.ConditionalType && ts.forEachChild((n as ts.ConditionalTypeNode).extendsType, containsReference)) {
                    return true;
                }
            }
            return containsReference(node);
        }
        return true;
        function containsReference(node: ts.Node): boolean {
            switch (node.kind) {
                case ts.SyntaxKind.ThisType:
                    return !!tp.isThisType;
                case ts.SyntaxKind.Identifier:
                    return !tp.isThisType && ts.isPartOfTypeNode(node) && maybeTypeParameterReference(node) &&
                        getTypeFromTypeNodeWorker(node as ts.TypeNode) === tp; // use worker because we're looking for === equality
                case ts.SyntaxKind.TypeQuery:
                    const entityName = (node as ts.TypeQueryNode).exprName;
                    const firstIdentifier = ts.getFirstIdentifier(entityName);
                    const firstIdentifierSymbol = getResolvedSymbol(firstIdentifier);
                    const tpDeclaration = tp.symbol.declarations![0]; // There is exactly one declaration, otherwise `containsReference` is not called
                    let tpScope: ts.Node;
                    if (tpDeclaration.kind === ts.SyntaxKind.TypeParameter) { // Type parameter is a regular type parameter, e.g. foo<T>
                        tpScope = tpDeclaration.parent;
                    }
                    else if (tp.isThisType) {
                         // Type parameter is the this type, and its declaration is the class declaration.
                        tpScope = tpDeclaration;
                    }
                    else {
                        // Type parameter's declaration was unrecognized.
                        // This could happen if the type parameter comes from e.g. a JSDoc annotation, so we default to returning true.
                        return true;
                    }

                    if (firstIdentifierSymbol.declarations) {
                        return ts.some(firstIdentifierSymbol.declarations, idDecl => ts.isNodeDescendantOf(idDecl, tpScope)) ||
                            ts.some((node as ts.TypeQueryNode).typeArguments, containsReference);
                    }
                    return true;
                case ts.SyntaxKind.MethodDeclaration:
                case ts.SyntaxKind.MethodSignature:
                    return !(node as ts.FunctionLikeDeclaration).type && !!(node as ts.FunctionLikeDeclaration).body ||
                        ts.some((node as ts.FunctionLikeDeclaration).typeParameters, containsReference) ||
                        ts.some((node as ts.FunctionLikeDeclaration).parameters, containsReference) ||
                        !!(node as ts.FunctionLikeDeclaration).type && containsReference((node as ts.FunctionLikeDeclaration).type!);
            }
            return !!ts.forEachChild(node, containsReference);
        }
    }

    function getHomomorphicTypeVariable(type: ts.MappedType) {
        const constraintType = getConstraintTypeFromMappedType(type);
        if (constraintType.flags & ts.TypeFlags.Index) {
            const typeVariable = getActualTypeVariable((constraintType as ts.IndexType).type);
            if (typeVariable.flags & ts.TypeFlags.TypeParameter) {
                return typeVariable as ts.TypeParameter;
            }
        }
        return undefined;
    }

    function instantiateMappedType(type: ts.MappedType, mapper: ts.TypeMapper, aliasSymbol?: ts.Symbol, aliasTypeArguments?: readonly ts.Type[]): ts.Type {
        // For a homomorphic mapped type { [P in keyof T]: X }, where T is some type variable, the mapping
        // operation depends on T as follows:
        // * If T is a primitive type no mapping is performed and the result is simply T.
        // * If T is a union type we distribute the mapped type over the union.
        // * If T is an array we map to an array where the element type has been transformed.
        // * If T is a tuple we map to a tuple where the element types have been transformed.
        // * Otherwise we map to an object type where the type of each property has been transformed.
        // For example, when T is instantiated to a union type A | B, we produce { [P in keyof A]: X } |
        // { [P in keyof B]: X }, and when when T is instantiated to a union type A | undefined, we produce
        // { [P in keyof A]: X } | undefined.
        const typeVariable = getHomomorphicTypeVariable(type);
        if (typeVariable) {
            const mappedTypeVariable = instantiateType(typeVariable, mapper);
            if (typeVariable !== mappedTypeVariable) {
                return mapTypeWithAlias(getReducedType(mappedTypeVariable), t => {
                    if (t.flags & (ts.TypeFlags.AnyOrUnknown | ts.TypeFlags.InstantiableNonPrimitive | ts.TypeFlags.Object | ts.TypeFlags.Intersection) && t !== wildcardType && !isErrorType(t)) {
                        if (!type.declaration.nameType) {
                            let constraint;
                            if (isArrayType(t) || t.flags & ts.TypeFlags.Any && findResolutionCycleStartIndex(typeVariable, TypeSystemPropertyName.ImmediateBaseConstraint) < 0 &&
                                (constraint = getConstraintOfTypeParameter(typeVariable)) && everyType(constraint, isArrayOrTupleType)) {
                                return instantiateMappedArrayType(t, type, prependTypeMapping(typeVariable, t, mapper));
                            }
                            if (isGenericTupleType(t)) {
                                return instantiateMappedGenericTupleType(t, type, typeVariable, mapper);
                            }
                            if (isTupleType(t)) {
                                return instantiateMappedTupleType(t, type, prependTypeMapping(typeVariable, t, mapper));
                            }
                        }
                        return instantiateAnonymousType(type, prependTypeMapping(typeVariable, t, mapper));
                    }
                    return t;
                }, aliasSymbol, aliasTypeArguments);
            }
        }
        // If the constraint type of the instantiation is the wildcard type, return the wildcard type.
        return instantiateType(getConstraintTypeFromMappedType(type), mapper) === wildcardType ? wildcardType : instantiateAnonymousType(type, mapper, aliasSymbol, aliasTypeArguments);
    }

    function getModifiedReadonlyState(state: boolean, modifiers: MappedTypeModifiers) {
        return modifiers & MappedTypeModifiers.IncludeReadonly ? true : modifiers & MappedTypeModifiers.ExcludeReadonly ? false : state;
    }

    function instantiateMappedGenericTupleType(tupleType: ts.TupleTypeReference, mappedType: ts.MappedType, typeVariable: ts.TypeVariable, mapper: ts.TypeMapper) {
        // When a tuple type is generic (i.e. when it contains variadic elements), we want to eagerly map the
        // non-generic elements and defer mapping the generic elements. In order to facilitate this, we transform
        // M<[A, B?, ...T, ...C[]] into [...M<[A]>, ...M<[B?]>, ...M<T>, ...M<C[]>] and then rely on tuple type
        // normalization to resolve the non-generic parts of the resulting tuple.
        const elementFlags = tupleType.target.elementFlags;
        const elementTypes = ts.map(getTypeArguments(tupleType), (t, i) => {
            const singleton = elementFlags[i] & ts.ElementFlags.Variadic ? t :
                elementFlags[i] & ts.ElementFlags.Rest ? createArrayType(t) :
                createTupleType([t], [elementFlags[i]]);
            // The singleton is never a generic tuple type, so it is safe to recurse here.
            return instantiateMappedType(mappedType, prependTypeMapping(typeVariable, singleton, mapper));
        });
        const newReadonly = getModifiedReadonlyState(tupleType.target.readonly, getMappedTypeModifiers(mappedType));
        return createTupleType(elementTypes, ts.map(elementTypes, _ => ts.ElementFlags.Variadic), newReadonly);
    }

    function instantiateMappedArrayType(arrayType: ts.Type, mappedType: ts.MappedType, mapper: ts.TypeMapper) {
        const elementType = instantiateMappedTypeTemplate(mappedType, numberType, /*isOptional*/ true, mapper);
        return isErrorType(elementType) ? errorType :
            createArrayType(elementType, getModifiedReadonlyState(isReadonlyArrayType(arrayType), getMappedTypeModifiers(mappedType)));
    }

    function instantiateMappedTupleType(tupleType: ts.TupleTypeReference, mappedType: ts.MappedType, mapper: ts.TypeMapper) {
        const elementFlags = tupleType.target.elementFlags;
        const elementTypes = ts.map(getTypeArguments(tupleType), (_, i) =>
            instantiateMappedTypeTemplate(mappedType, getStringLiteralType("" + i), !!(elementFlags[i] & ts.ElementFlags.Optional), mapper));
        const modifiers = getMappedTypeModifiers(mappedType);
        const newTupleModifiers = modifiers & MappedTypeModifiers.IncludeOptional ? ts.map(elementFlags, f => f & ts.ElementFlags.Required ? ts.ElementFlags.Optional : f) :
            modifiers & MappedTypeModifiers.ExcludeOptional ? ts.map(elementFlags, f => f & ts.ElementFlags.Optional ? ts.ElementFlags.Required : f) :
            elementFlags;
        const newReadonly = getModifiedReadonlyState(tupleType.target.readonly, modifiers);
        return ts.contains(elementTypes, errorType) ? errorType :
            createTupleType(elementTypes, newTupleModifiers, newReadonly, tupleType.target.labeledElementDeclarations);
    }

    function instantiateMappedTypeTemplate(type: ts.MappedType, key: ts.Type, isOptional: boolean, mapper: ts.TypeMapper) {
        const templateMapper = appendTypeMapping(mapper, getTypeParameterFromMappedType(type), key);
        const propType = instantiateType(getTemplateTypeFromMappedType(type.target as ts.MappedType || type), templateMapper);
        const modifiers = getMappedTypeModifiers(type);
        return strictNullChecks && modifiers & MappedTypeModifiers.IncludeOptional && !maybeTypeOfKind(propType, ts.TypeFlags.Undefined | ts.TypeFlags.Void) ? getOptionalType(propType, /*isProperty*/ true) :
            strictNullChecks && modifiers & MappedTypeModifiers.ExcludeOptional && isOptional ? getTypeWithFacts(propType, TypeFacts.NEUndefined) :
            propType;
    }

    function instantiateAnonymousType(type: ts.AnonymousType, mapper: ts.TypeMapper, aliasSymbol?: ts.Symbol, aliasTypeArguments?: readonly ts.Type[]): ts.AnonymousType {
        const result = createObjectType(type.objectFlags | ts.ObjectFlags.Instantiated, type.symbol) as ts.AnonymousType;
        if (type.objectFlags & ts.ObjectFlags.Mapped) {
            (result as ts.MappedType).declaration = (type as ts.MappedType).declaration;
            // C.f. instantiateSignature
            const origTypeParameter = getTypeParameterFromMappedType(type as ts.MappedType);
            const freshTypeParameter = cloneTypeParameter(origTypeParameter);
            (result as ts.MappedType).typeParameter = freshTypeParameter;
            mapper = combineTypeMappers(makeUnaryTypeMapper(origTypeParameter, freshTypeParameter), mapper);
            freshTypeParameter.mapper = mapper;
        }
        if (type.objectFlags & ts.ObjectFlags.InstantiationExpressionType) {
            (result as ts.InstantiationExpressionType).node = (type as ts.InstantiationExpressionType).node;
        }
        result.target = type;
        result.mapper = mapper;
        result.aliasSymbol = aliasSymbol || type.aliasSymbol;
        result.aliasTypeArguments = aliasSymbol ? aliasTypeArguments : instantiateTypes(type.aliasTypeArguments, mapper);
        result.objectFlags |= result.aliasTypeArguments ? getPropagatingFlagsOfTypes(result.aliasTypeArguments) : 0;
        return result;
    }

    function getConditionalTypeInstantiation(type: ts.ConditionalType, mapper: ts.TypeMapper, aliasSymbol?: ts.Symbol, aliasTypeArguments?: readonly ts.Type[]): ts.Type {
        const root = type.root;
        if (root.outerTypeParameters) {
            // We are instantiating a conditional type that has one or more type parameters in scope. Apply the
            // mapper to the type parameters to produce the effective list of type arguments, and compute the
            // instantiation cache key from the type IDs of the type arguments.
            const typeArguments = ts.map(root.outerTypeParameters, t => getMappedType(t, mapper));
            const id = getTypeListId(typeArguments) + getAliasId(aliasSymbol, aliasTypeArguments);
            let result = root.instantiations!.get(id);
            if (!result) {
                const newMapper = createTypeMapper(root.outerTypeParameters, typeArguments);
                const checkType = root.checkType;
                const distributionType = root.isDistributive ? getMappedType(checkType, newMapper) : undefined;
                // Distributive conditional types are distributed over union types. For example, when the
                // distributive conditional type T extends U ? X : Y is instantiated with A | B for T, the
                // result is (A extends U ? X : Y) | (B extends U ? X : Y).
                result = distributionType && checkType !== distributionType && distributionType.flags & (ts.TypeFlags.Union | ts.TypeFlags.Never) ?
                    mapTypeWithAlias(getReducedType(distributionType), t => getConditionalType(root, prependTypeMapping(checkType, t, newMapper)), aliasSymbol, aliasTypeArguments) :
                    getConditionalType(root, newMapper, aliasSymbol, aliasTypeArguments);
                root.instantiations!.set(id, result);
            }
            return result;
        }
        return type;
    }

    function instantiateType(type: ts.Type, mapper: ts.TypeMapper | undefined): ts.Type;
    function instantiateType(type: ts.Type | undefined, mapper: ts.TypeMapper | undefined): ts.Type | undefined;
    function instantiateType(type: ts.Type | undefined, mapper: ts.TypeMapper | undefined): ts.Type | undefined {
        return type && mapper ? instantiateTypeWithAlias(type, mapper, /*aliasSymbol*/ undefined, /*aliasTypeArguments*/ undefined) : type;
    }

    function instantiateTypeWithAlias(type: ts.Type, mapper: ts.TypeMapper, aliasSymbol: ts.Symbol | undefined, aliasTypeArguments: readonly ts.Type[] | undefined): ts.Type {
        if (!couldContainTypeVariables(type)) {
            return type;
        }
        if (instantiationDepth === 100 || instantiationCount >= 5000000) {
            // We have reached 100 recursive type instantiations, or 5M type instantiations caused by the same statement
            // or expression. There is a very high likelyhood we're dealing with a combination of infinite generic types
            // that perpetually generate new type identities, so we stop the recursion here by yielding the error type.
            ts.tracing?.instant(ts.tracing.Phase.CheckTypes, "instantiateType_DepthLimit", { typeId: type.id, instantiationDepth, instantiationCount });
            error(currentNode, ts.Diagnostics.Type_instantiation_is_excessively_deep_and_possibly_infinite);
            return errorType;
        }
        totalInstantiationCount++;
        instantiationCount++;
        instantiationDepth++;
        const result = instantiateTypeWorker(type, mapper, aliasSymbol, aliasTypeArguments);
        instantiationDepth--;
        return result;
    }

    function instantiateTypeWorker(type: ts.Type, mapper: ts.TypeMapper, aliasSymbol: ts.Symbol | undefined, aliasTypeArguments: readonly ts.Type[] | undefined): ts.Type {
        const flags = type.flags;
        if (flags & ts.TypeFlags.TypeParameter) {
            return getMappedType(type, mapper);
        }
        if (flags & ts.TypeFlags.Object) {
            const objectFlags = (type as ts.ObjectType).objectFlags;
            if (objectFlags & (ts.ObjectFlags.Reference | ts.ObjectFlags.Anonymous | ts.ObjectFlags.Mapped)) {
                if (objectFlags & ts.ObjectFlags.Reference && !(type as ts.TypeReference).node) {
                    const resolvedTypeArguments = (type as ts.TypeReference).resolvedTypeArguments;
                    const newTypeArguments = instantiateTypes(resolvedTypeArguments, mapper);
                    return newTypeArguments !== resolvedTypeArguments ? createNormalizedTypeReference((type as ts.TypeReference).target, newTypeArguments) : type;
                }
                if (objectFlags & ts.ObjectFlags.ReverseMapped) {
                    return instantiateReverseMappedType(type as ts.ReverseMappedType, mapper);
                }
                return getObjectTypeInstantiation(type as ts.TypeReference | ts.AnonymousType | ts.MappedType, mapper, aliasSymbol, aliasTypeArguments);
            }
            return type;
        }
        if (flags & ts.TypeFlags.UnionOrIntersection) {
            const origin = type.flags & ts.TypeFlags.Union ? (type as ts.UnionType).origin : undefined;
            const types = origin && origin.flags & ts.TypeFlags.UnionOrIntersection ? (origin as ts.UnionOrIntersectionType).types : (type as ts.UnionOrIntersectionType).types;
            const newTypes = instantiateTypes(types, mapper);
            if (newTypes === types && aliasSymbol === type.aliasSymbol) {
                return type;
            }
            const newAliasSymbol = aliasSymbol || type.aliasSymbol;
            const newAliasTypeArguments = aliasSymbol ? aliasTypeArguments : instantiateTypes(type.aliasTypeArguments, mapper);
            return flags & ts.TypeFlags.Intersection || origin && origin.flags & ts.TypeFlags.Intersection ?
                getIntersectionType(newTypes, newAliasSymbol, newAliasTypeArguments) :
                getUnionType(newTypes, ts.UnionReduction.Literal, newAliasSymbol, newAliasTypeArguments);
        }
        if (flags & ts.TypeFlags.Index) {
            return getIndexType(instantiateType((type as ts.IndexType).type, mapper));
        }
        if (flags & ts.TypeFlags.TemplateLiteral) {
            return getTemplateLiteralType((type as ts.TemplateLiteralType).texts, instantiateTypes((type as ts.TemplateLiteralType).types, mapper));
        }
        if (flags & ts.TypeFlags.StringMapping) {
            return getStringMappingType((type as ts.StringMappingType).symbol, instantiateType((type as ts.StringMappingType).type, mapper));
        }
        if (flags & ts.TypeFlags.IndexedAccess) {
            const newAliasSymbol = aliasSymbol || type.aliasSymbol;
            const newAliasTypeArguments = aliasSymbol ? aliasTypeArguments : instantiateTypes(type.aliasTypeArguments, mapper);
            return getIndexedAccessType(instantiateType((type as ts.IndexedAccessType).objectType, mapper), instantiateType((type as ts.IndexedAccessType).indexType, mapper), (type as ts.IndexedAccessType).accessFlags, /*accessNode*/ undefined, newAliasSymbol, newAliasTypeArguments);
        }
        if (flags & ts.TypeFlags.Conditional) {
            return getConditionalTypeInstantiation(type as ts.ConditionalType, combineTypeMappers((type as ts.ConditionalType).mapper, mapper), aliasSymbol, aliasTypeArguments);
        }
        if (flags & ts.TypeFlags.Substitution) {
            const newBaseType = instantiateType((type as ts.SubstitutionType).baseType, mapper);
            const newConstraint = instantiateType((type as ts.SubstitutionType).constraint, mapper);
            // A substitution type originates in the true branch of a conditional type and can be resolved
            // to just the base type in the same cases as the conditional type resolves to its true branch
            // (because the base type is then known to satisfy the constraint).
            if (newBaseType.flags & ts.TypeFlags.TypeVariable && isGenericType(newConstraint)) {
                return getSubstitutionType(newBaseType, newConstraint);
            }
            if (newConstraint.flags & ts.TypeFlags.AnyOrUnknown || isTypeAssignableTo(getRestrictiveInstantiation(newBaseType), getRestrictiveInstantiation(newConstraint))) {
                return newBaseType;
            }
            return newBaseType.flags & ts.TypeFlags.TypeVariable ? getSubstitutionType(newBaseType, newConstraint) : getIntersectionType([newConstraint, newBaseType]);
        }
        return type;
    }

    function instantiateReverseMappedType(type: ts.ReverseMappedType, mapper: ts.TypeMapper) {
        const innerMappedType = instantiateType(type.mappedType, mapper);
        if (!(ts.getObjectFlags(innerMappedType) & ts.ObjectFlags.Mapped)) {
            return type;
        }
        const innerIndexType = instantiateType(type.constraintType, mapper);
        if (!(innerIndexType.flags & ts.TypeFlags.Index)) {
            return type;
        }
        const instantiated = inferTypeForHomomorphicMappedType(
            instantiateType(type.source, mapper),
            innerMappedType as ts.MappedType,
            innerIndexType as ts.IndexType
        );
        if (instantiated) {
            return instantiated;
        }
        return type; // Nested invocation of `inferTypeForHomomorphicMappedType` or the `source` instantiated into something unmappable
    }

    function getUniqueLiteralFilledInstantiation(type: ts.Type) {
        return type.flags & (ts.TypeFlags.Primitive | ts.TypeFlags.AnyOrUnknown | ts.TypeFlags.Never) ? type :
            type.uniqueLiteralFilledInstantiation || (type.uniqueLiteralFilledInstantiation = instantiateType(type, uniqueLiteralMapper));
    }

    function getPermissiveInstantiation(type: ts.Type) {
        return type.flags & (ts.TypeFlags.Primitive | ts.TypeFlags.AnyOrUnknown | ts.TypeFlags.Never) ? type :
            type.permissiveInstantiation || (type.permissiveInstantiation = instantiateType(type, permissiveMapper));
    }

    function getRestrictiveInstantiation(type: ts.Type) {
        if (type.flags & (ts.TypeFlags.Primitive | ts.TypeFlags.AnyOrUnknown | ts.TypeFlags.Never)) {
            return type;
        }
        if (type.restrictiveInstantiation) {
            return type.restrictiveInstantiation;
        }
        type.restrictiveInstantiation = instantiateType(type, restrictiveMapper);
        // We set the following so we don't attempt to set the restrictive instance of a restrictive instance
        // which is redundant - we'll produce new type identities, but all type params have already been mapped.
        // This also gives us a way to detect restrictive instances upon comparisons and _disable_ the "distributeive constraint"
        // assignability check for them, which is distinctly unsafe, as once you have a restrctive instance, all the type parameters
        // are constrained to `unknown` and produce tons of false positives/negatives!
        type.restrictiveInstantiation.restrictiveInstantiation = type.restrictiveInstantiation;
        return type.restrictiveInstantiation;
    }

    function instantiateIndexInfo(info: ts.IndexInfo, mapper: ts.TypeMapper) {
        return createIndexInfo(info.keyType, instantiateType(info.type, mapper), info.isReadonly, info.declaration);
    }

    // Returns true if the given expression contains (at any level of nesting) a function or arrow expression
    // that is subject to contextual typing.
    function isContextSensitive(node: ts.Expression | ts.MethodDeclaration | ts.ObjectLiteralElementLike | ts.JsxAttributeLike | ts.JsxChild): boolean {
        ts.Debug.assert(node.kind !== ts.SyntaxKind.MethodDeclaration || ts.isObjectLiteralMethod(node));
        switch (node.kind) {
            case ts.SyntaxKind.FunctionExpression:
            case ts.SyntaxKind.ArrowFunction:
            case ts.SyntaxKind.MethodDeclaration:
            case ts.SyntaxKind.FunctionDeclaration: // Function declarations can have context when annotated with a jsdoc @type
                return isContextSensitiveFunctionLikeDeclaration(node as ts.FunctionExpression | ts.ArrowFunction | ts.MethodDeclaration);
            case ts.SyntaxKind.ObjectLiteralExpression:
                return ts.some((node as ts.ObjectLiteralExpression).properties, isContextSensitive);
            case ts.SyntaxKind.ArrayLiteralExpression:
                return ts.some((node as ts.ArrayLiteralExpression).elements, isContextSensitive);
            case ts.SyntaxKind.ConditionalExpression:
                return isContextSensitive((node as ts.ConditionalExpression).whenTrue) ||
                    isContextSensitive((node as ts.ConditionalExpression).whenFalse);
            case ts.SyntaxKind.BinaryExpression:
                return ((node as ts.BinaryExpression).operatorToken.kind === ts.SyntaxKind.BarBarToken || (node as ts.BinaryExpression).operatorToken.kind === ts.SyntaxKind.QuestionQuestionToken) &&
                    (isContextSensitive((node as ts.BinaryExpression).left) || isContextSensitive((node as ts.BinaryExpression).right));
            case ts.SyntaxKind.PropertyAssignment:
                return isContextSensitive((node as ts.PropertyAssignment).initializer);
            case ts.SyntaxKind.ParenthesizedExpression:
                return isContextSensitive((node as ts.ParenthesizedExpression).expression);
            case ts.SyntaxKind.JsxAttributes:
                return ts.some((node as ts.JsxAttributes).properties, isContextSensitive) || ts.isJsxOpeningElement(node.parent) && ts.some(node.parent.parent.children, isContextSensitive);
            case ts.SyntaxKind.JsxAttribute: {
                // If there is no initializer, JSX attribute has a boolean value of true which is not context sensitive.
                const { initializer } = node as ts.JsxAttribute;
                return !!initializer && isContextSensitive(initializer);
            }
            case ts.SyntaxKind.JsxExpression: {
                // It is possible to that node.expression is undefined (e.g <div x={} />)
                const { expression } = node as ts.JsxExpression;
                return !!expression && isContextSensitive(expression);
            }
        }

        return false;
    }

    function isContextSensitiveFunctionLikeDeclaration(node: ts.FunctionLikeDeclaration): boolean {
        return ts.hasContextSensitiveParameters(node) || hasContextSensitiveReturnExpression(node);
    }

    function hasContextSensitiveReturnExpression(node: ts.FunctionLikeDeclaration) {
        // TODO(anhans): A block should be context-sensitive if it has a context-sensitive return value.
        return !node.typeParameters && !ts.getEffectiveReturnTypeNode(node) && !!node.body && node.body.kind !== ts.SyntaxKind.Block && isContextSensitive(node.body);
    }

    function isContextSensitiveFunctionOrObjectLiteralMethod(func: ts.Node): func is ts.FunctionExpression | ts.ArrowFunction | ts.MethodDeclaration {
        return (ts.isFunctionExpressionOrArrowFunction(func) || ts.isObjectLiteralMethod(func)) &&
            isContextSensitiveFunctionLikeDeclaration(func);
    }

    function getTypeWithoutSignatures(type: ts.Type): ts.Type {
        if (type.flags & ts.TypeFlags.Object) {
            const resolved = resolveStructuredTypeMembers(type as ts.ObjectType);
            if (resolved.constructSignatures.length || resolved.callSignatures.length) {
                const result = createObjectType(ts.ObjectFlags.Anonymous, type.symbol);
                result.members = resolved.members;
                result.properties = resolved.properties;
                result.callSignatures = ts.emptyArray;
                result.constructSignatures = ts.emptyArray;
                result.indexInfos = ts.emptyArray;
                return result;
            }
        }
        else if (type.flags & ts.TypeFlags.Intersection) {
            return getIntersectionType(ts.map((type as ts.IntersectionType).types, getTypeWithoutSignatures));
        }
        return type;
    }

    // TYPE CHECKING

    function isTypeIdenticalTo(source: ts.Type, target: ts.Type): boolean {
        return isTypeRelatedTo(source, target, identityRelation);
    }

    function compareTypesIdentical(source: ts.Type, target: ts.Type): ts.Ternary {
        return isTypeRelatedTo(source, target, identityRelation) ? ts.Ternary.True : ts.Ternary.False;
    }

    function compareTypesAssignable(source: ts.Type, target: ts.Type): ts.Ternary {
        return isTypeRelatedTo(source, target, assignableRelation) ? ts.Ternary.True : ts.Ternary.False;
    }

    function compareTypesSubtypeOf(source: ts.Type, target: ts.Type): ts.Ternary {
        return isTypeRelatedTo(source, target, subtypeRelation) ? ts.Ternary.True : ts.Ternary.False;
    }

    function isTypeSubtypeOf(source: ts.Type, target: ts.Type): boolean {
        return isTypeRelatedTo(source, target, subtypeRelation);
    }

    function isTypeAssignableTo(source: ts.Type, target: ts.Type): boolean {
        return isTypeRelatedTo(source, target, assignableRelation);
    }

    // An object type S is considered to be derived from an object type T if
    // S is a union type and every constituent of S is derived from T,
    // T is a union type and S is derived from at least one constituent of T, or
    // S is a type variable with a base constraint that is derived from T,
    // T is one of the global types Object and Function and S is a subtype of T, or
    // T occurs directly or indirectly in an 'extends' clause of S.
    // Note that this check ignores type parameters and only considers the
    // inheritance hierarchy.
    function isTypeDerivedFrom(source: ts.Type, target: ts.Type): boolean {
        return source.flags & ts.TypeFlags.Union ? ts.every((source as ts.UnionType).types, t => isTypeDerivedFrom(t, target)) :
            target.flags & ts.TypeFlags.Union ? ts.some((target as ts.UnionType).types, t => isTypeDerivedFrom(source, t)) :
            source.flags & ts.TypeFlags.InstantiableNonPrimitive ? isTypeDerivedFrom(getBaseConstraintOfType(source) || unknownType, target) :
            target === globalObjectType ? !!(source.flags & (ts.TypeFlags.Object | ts.TypeFlags.NonPrimitive)) :
            target === globalFunctionType ? !!(source.flags & ts.TypeFlags.Object) && isFunctionObjectType(source as ts.ObjectType) :
            hasBaseType(source, getTargetType(target)) || (isArrayType(target) && !isReadonlyArrayType(target) && isTypeDerivedFrom(source, globalReadonlyArrayType));
    }

    /**
     * This is *not* a bi-directional relationship.
     * If one needs to check both directions for comparability, use a second call to this function or 'checkTypeComparableTo'.
     *
     * A type S is comparable to a type T if some (but not necessarily all) of the possible values of S are also possible values of T.
     * It is used to check following cases:
     *   - the types of the left and right sides of equality/inequality operators (`===`, `!==`, `==`, `!=`).
     *   - the types of `case` clause expressions and their respective `switch` expressions.
     *   - the type of an expression in a type assertion with the type being asserted.
     */
    function isTypeComparableTo(source: ts.Type, target: ts.Type): boolean {
        return isTypeRelatedTo(source, target, comparableRelation);
    }

    function areTypesComparable(type1: ts.Type, type2: ts.Type): boolean {
        return isTypeComparableTo(type1, type2) || isTypeComparableTo(type2, type1);
    }

    function checkTypeAssignableTo(source: ts.Type, target: ts.Type, errorNode: ts.Node | undefined, headMessage?: ts.DiagnosticMessage, containingMessageChain?: () => ts.DiagnosticMessageChain | undefined, errorOutputObject?: { errors?: ts.Diagnostic[] }): boolean {
        return checkTypeRelatedTo(source, target, assignableRelation, errorNode, headMessage, containingMessageChain, errorOutputObject);
    }

    /**
     * Like `checkTypeAssignableTo`, but if it would issue an error, instead performs structural comparisons of the types using the given expression node to
     * attempt to issue more specific errors on, for example, specific object literal properties or tuple members.
     */
    function checkTypeAssignableToAndOptionallyElaborate(source: ts.Type, target: ts.Type, errorNode: ts.Node | undefined, expr: ts.Expression | undefined, headMessage?: ts.DiagnosticMessage, containingMessageChain?: () => ts.DiagnosticMessageChain | undefined): boolean {
        return checkTypeRelatedToAndOptionallyElaborate(source, target, assignableRelation, errorNode, expr, headMessage, containingMessageChain, /*errorOutputContainer*/ undefined);
    }

    function checkTypeRelatedToAndOptionallyElaborate(
        source: ts.Type,
        target: ts.Type,
        relation: ts.ESMap<string, ts.RelationComparisonResult>,
        errorNode: ts.Node | undefined,
        expr: ts.Expression | undefined,
        headMessage: ts.DiagnosticMessage | undefined,
        containingMessageChain: (() => ts.DiagnosticMessageChain | undefined) | undefined,
        errorOutputContainer: { errors?: ts.Diagnostic[], skipLogging?: boolean } | undefined
    ): boolean {
        if (isTypeRelatedTo(source, target, relation)) return true;
        if (!errorNode || !elaborateError(expr, source, target, relation, headMessage, containingMessageChain, errorOutputContainer)) {
            return checkTypeRelatedTo(source, target, relation, errorNode, headMessage, containingMessageChain, errorOutputContainer);
        }
        return false;
    }

    function isOrHasGenericConditional(type: ts.Type): boolean {
        return !!(type.flags & ts.TypeFlags.Conditional || (type.flags & ts.TypeFlags.Intersection && ts.some((type as ts.IntersectionType).types, isOrHasGenericConditional)));
    }

    function elaborateError(
        node: ts.Expression | undefined,
        source: ts.Type,
        target: ts.Type,
        relation: ts.ESMap<string, ts.RelationComparisonResult>,
        headMessage: ts.DiagnosticMessage | undefined,
        containingMessageChain: (() => ts.DiagnosticMessageChain | undefined) | undefined,
        errorOutputContainer: { errors?: ts.Diagnostic[], skipLogging?: boolean } | undefined
    ): boolean {
        if (!node || isOrHasGenericConditional(target)) return false;
        if (!checkTypeRelatedTo(source, target, relation, /*errorNode*/ undefined)
            && elaborateDidYouMeanToCallOrConstruct(node, source, target, relation, headMessage, containingMessageChain, errorOutputContainer)) {
            return true;
        }
        switch (node.kind) {
            case ts.SyntaxKind.JsxExpression:
            case ts.SyntaxKind.ParenthesizedExpression:
                return elaborateError((node as ts.ParenthesizedExpression | ts.JsxExpression).expression, source, target, relation, headMessage, containingMessageChain, errorOutputContainer);
            case ts.SyntaxKind.BinaryExpression:
                switch ((node as ts.BinaryExpression).operatorToken.kind) {
                    case ts.SyntaxKind.EqualsToken:
                    case ts.SyntaxKind.CommaToken:
                        return elaborateError((node as ts.BinaryExpression).right, source, target, relation, headMessage, containingMessageChain, errorOutputContainer);
                }
                break;
            case ts.SyntaxKind.ObjectLiteralExpression:
                return elaborateObjectLiteral(node as ts.ObjectLiteralExpression, source, target, relation, containingMessageChain, errorOutputContainer);
            case ts.SyntaxKind.ArrayLiteralExpression:
                return elaborateArrayLiteral(node as ts.ArrayLiteralExpression, source, target, relation, containingMessageChain, errorOutputContainer);
            case ts.SyntaxKind.JsxAttributes:
                return elaborateJsxComponents(node as ts.JsxAttributes, source, target, relation, containingMessageChain, errorOutputContainer);
            case ts.SyntaxKind.ArrowFunction:
                return elaborateArrowFunction(node as ts.ArrowFunction, source, target, relation, containingMessageChain, errorOutputContainer);
        }
        return false;
    }

    function elaborateDidYouMeanToCallOrConstruct(
        node: ts.Expression,
        source: ts.Type,
        target: ts.Type,
        relation: ts.ESMap<string, ts.RelationComparisonResult>,
        headMessage: ts.DiagnosticMessage | undefined,
        containingMessageChain: (() => ts.DiagnosticMessageChain | undefined) | undefined,
        errorOutputContainer: { errors?: ts.Diagnostic[], skipLogging?: boolean } | undefined
    ): boolean {
        const callSignatures = getSignaturesOfType(source, ts.SignatureKind.Call);
        const constructSignatures = getSignaturesOfType(source, ts.SignatureKind.Construct);
        for (const signatures of [constructSignatures, callSignatures]) {
            if (ts.some(signatures, s => {
                const returnType = getReturnTypeOfSignature(s);
                return !(returnType.flags & (ts.TypeFlags.Any | ts.TypeFlags.Never)) && checkTypeRelatedTo(returnType, target, relation, /*errorNode*/ undefined);
            })) {
                const resultObj: { errors?: ts.Diagnostic[] } = errorOutputContainer || {};
                checkTypeAssignableTo(source, target, node, headMessage, containingMessageChain, resultObj);
                const diagnostic = resultObj.errors![resultObj.errors!.length - 1];
                ts.addRelatedInfo(diagnostic, ts.createDiagnosticForNode(
                    node,
                    signatures === constructSignatures ? ts.Diagnostics.Did_you_mean_to_use_new_with_this_expression : ts.Diagnostics.Did_you_mean_to_call_this_expression
                ));
                return true;
            }
        }
        return false;
    }

    function elaborateArrowFunction(
        node: ts.ArrowFunction,
        source: ts.Type,
        target: ts.Type,
        relation: ts.ESMap<string, ts.RelationComparisonResult>,
        containingMessageChain: (() => ts.DiagnosticMessageChain | undefined) | undefined,
        errorOutputContainer: { errors?: ts.Diagnostic[], skipLogging?: boolean } | undefined
    ): boolean {
        // Don't elaborate blocks
        if (ts.isBlock(node.body)) {
            return false;
        }
        // Or functions with annotated parameter types
        if (ts.some(node.parameters, ts.hasType)) {
            return false;
        }
        const sourceSig = getSingleCallSignature(source);
        if (!sourceSig) {
            return false;
        }
        const targetSignatures = getSignaturesOfType(target, ts.SignatureKind.Call);
        if (!ts.length(targetSignatures)) {
            return false;
        }
        const returnExpression = node.body;
        const sourceReturn = getReturnTypeOfSignature(sourceSig);
        const targetReturn = getUnionType(ts.map(targetSignatures, getReturnTypeOfSignature));
        if (!checkTypeRelatedTo(sourceReturn, targetReturn, relation, /*errorNode*/ undefined)) {
            const elaborated = returnExpression && elaborateError(returnExpression, sourceReturn, targetReturn, relation, /*headMessage*/ undefined, containingMessageChain, errorOutputContainer);
            if (elaborated) {
                return elaborated;
            }
            const resultObj: { errors?: ts.Diagnostic[] } = errorOutputContainer || {};
            checkTypeRelatedTo(sourceReturn, targetReturn, relation, returnExpression, /*message*/ undefined, containingMessageChain, resultObj);
            if (resultObj.errors) {
                if (target.symbol && ts.length(target.symbol.declarations)) {
                    ts.addRelatedInfo(resultObj.errors[resultObj.errors.length - 1], ts.createDiagnosticForNode(
                        target.symbol.declarations![0],
                        ts.Diagnostics.The_expected_type_comes_from_the_return_type_of_this_signature,
                    ));
                }
                if ((ts.getFunctionFlags(node) & ts.FunctionFlags.Async) === 0
                    // exclude cases where source itself is promisy - this way we don't make a suggestion when relating
                    // an IPromise and a Promise that are slightly different
                    && !getTypeOfPropertyOfType(sourceReturn, "then" as ts.__String)
                    && checkTypeRelatedTo(createPromiseType(sourceReturn), targetReturn, relation, /*errorNode*/ undefined)
                ) {
                    ts.addRelatedInfo(resultObj.errors[resultObj.errors.length - 1], ts.createDiagnosticForNode(
                        node,
                        ts.Diagnostics.Did_you_mean_to_mark_this_function_as_async
                    ));
                }
                return true;
            }
        }
        return false;
    }

    function getBestMatchIndexedAccessTypeOrUndefined(source: ts.Type, target: ts.Type, nameType: ts.Type) {
        const idx = getIndexedAccessTypeOrUndefined(target, nameType);
        if (idx) {
            return idx;
        }
        if (target.flags & ts.TypeFlags.Union) {
            const best = getBestMatchingType(source, target as ts.UnionType);
            if (best) {
                return getIndexedAccessTypeOrUndefined(best, nameType);
            }
        }
    }

    function checkExpressionForMutableLocationWithContextualType(next: ts.Expression, sourcePropType: ts.Type) {
        next.contextualType = sourcePropType;
        try {
            return checkExpressionForMutableLocation(next, CheckMode.Contextual, sourcePropType);
        }
        finally {
            next.contextualType = undefined;
        }
    }

    type ElaborationIterator = IterableIterator<{ errorNode: ts.Node, innerExpression: ts.Expression | undefined, nameType: ts.Type, errorMessage?: ts.DiagnosticMessage | undefined }>;
    /**
     * For every element returned from the iterator, checks that element to issue an error on a property of that element's type
     * If that element would issue an error, we first attempt to dive into that element's inner expression and issue a more specific error by recuring into `elaborateError`
     * Otherwise, we issue an error on _every_ element which fail the assignability check
     */
    function elaborateElementwise(
        iterator: ElaborationIterator,
        source: ts.Type,
        target: ts.Type,
        relation: ts.ESMap<string, ts.RelationComparisonResult>,
        containingMessageChain: (() => ts.DiagnosticMessageChain | undefined) | undefined,
        errorOutputContainer: { errors?: ts.Diagnostic[], skipLogging?: boolean } | undefined
    ) {
        // Assignability failure - check each prop individually, and if that fails, fall back on the bad error span
        let reportedError = false;
        for (let status = iterator.next(); !status.done; status = iterator.next()) {
            const { errorNode: prop, innerExpression: next, nameType, errorMessage } = status.value;
            let targetPropType = getBestMatchIndexedAccessTypeOrUndefined(source, target, nameType);
            if (!targetPropType || targetPropType.flags & ts.TypeFlags.IndexedAccess) continue; // Don't elaborate on indexes on generic variables
            let sourcePropType = getIndexedAccessTypeOrUndefined(source, nameType);
            if (!sourcePropType) continue;
            const propName = getPropertyNameFromIndex(nameType, /*accessNode*/ undefined);
            if (!checkTypeRelatedTo(sourcePropType, targetPropType, relation, /*errorNode*/ undefined)) {
                const elaborated = next && elaborateError(next, sourcePropType, targetPropType, relation, /*headMessage*/ undefined, containingMessageChain, errorOutputContainer);
                reportedError = true;
                if (!elaborated) {
                    // Issue error on the prop itself, since the prop couldn't elaborate the error
                    const resultObj: { errors?: ts.Diagnostic[] } = errorOutputContainer || {};
                    // Use the expression type, if available
                    const specificSource = next ? checkExpressionForMutableLocationWithContextualType(next, sourcePropType) : sourcePropType;
                    if (exactOptionalPropertyTypes && isExactOptionalPropertyMismatch(specificSource, targetPropType)) {
                        const diag = ts.createDiagnosticForNode(prop, ts.Diagnostics.Type_0_is_not_assignable_to_type_1_with_exactOptionalPropertyTypes_Colon_true_Consider_adding_undefined_to_the_type_of_the_target, typeToString(specificSource), typeToString(targetPropType));
                        diagnostics.add(diag);
                        resultObj.errors = [diag];
                    }
                    else {
                        const targetIsOptional = !!(propName && (getPropertyOfType(target, propName) || unknownSymbol).flags & ts.SymbolFlags.Optional);
                        const sourceIsOptional = !!(propName && (getPropertyOfType(source, propName) || unknownSymbol).flags & ts.SymbolFlags.Optional);
                        targetPropType = removeMissingType(targetPropType, targetIsOptional);
                        sourcePropType = removeMissingType(sourcePropType, targetIsOptional && sourceIsOptional);
                        const result = checkTypeRelatedTo(specificSource, targetPropType, relation, prop, errorMessage, containingMessageChain, resultObj);
                        if (result && specificSource !== sourcePropType) {
                            // If for whatever reason the expression type doesn't yield an error, make sure we still issue an error on the sourcePropType
                            checkTypeRelatedTo(sourcePropType, targetPropType, relation, prop, errorMessage, containingMessageChain, resultObj);
                        }
                    }
                    if (resultObj.errors) {
                        const reportedDiag = resultObj.errors[resultObj.errors.length - 1];
                        const propertyName = isTypeUsableAsPropertyName(nameType) ? getPropertyNameFromType(nameType) : undefined;
                        const targetProp = propertyName !== undefined ? getPropertyOfType(target, propertyName) : undefined;

                        let issuedElaboration = false;
                        if (!targetProp) {
                            const indexInfo = getApplicableIndexInfo(target, nameType);
                            if (indexInfo && indexInfo.declaration && !ts.getSourceFileOfNode(indexInfo.declaration).hasNoDefaultLib) {
                                issuedElaboration = true;
                                ts.addRelatedInfo(reportedDiag, ts.createDiagnosticForNode(indexInfo.declaration, ts.Diagnostics.The_expected_type_comes_from_this_index_signature));
                            }
                        }

                        if (!issuedElaboration && (targetProp && ts.length(targetProp.declarations) || target.symbol && ts.length(target.symbol.declarations))) {
                            const targetNode = targetProp && ts.length(targetProp.declarations) ? targetProp.declarations![0] : target.symbol.declarations![0];
                            if (!ts.getSourceFileOfNode(targetNode).hasNoDefaultLib) {
                                ts.addRelatedInfo(reportedDiag, ts.createDiagnosticForNode(
                                    targetNode,
                                    ts.Diagnostics.The_expected_type_comes_from_property_0_which_is_declared_here_on_type_1,
                                    propertyName && !(nameType.flags & ts.TypeFlags.UniqueESSymbol) ? ts.unescapeLeadingUnderscores(propertyName) : typeToString(nameType),
                                    typeToString(target)
                                ));
                            }
                        }
                    }
                }
            }
        }
        return reportedError;
    }

    function *generateJsxAttributes(node: ts.JsxAttributes): ElaborationIterator {
        if (!ts.length(node.properties)) return;
        for (const prop of node.properties) {
            if (ts.isJsxSpreadAttribute(prop) || isHyphenatedJsxName(ts.idText(prop.name))) continue;
            yield { errorNode: prop.name, innerExpression: prop.initializer, nameType: getStringLiteralType(ts.idText(prop.name)) };
        }
    }

    function *generateJsxChildren(node: ts.JsxElement, getInvalidTextDiagnostic: () => ts.DiagnosticMessage): ElaborationIterator {
        if (!ts.length(node.children)) return;
        let memberOffset = 0;
        for (let i = 0; i < node.children.length; i++) {
            const child = node.children[i];
            const nameType = getNumberLiteralType(i - memberOffset);
            const elem = getElaborationElementForJsxChild(child, nameType, getInvalidTextDiagnostic);
            if (elem) {
                yield elem;
            }
            else {
                memberOffset++;
            }
        }
    }

    function getElaborationElementForJsxChild(child: ts.JsxChild, nameType: ts.LiteralType, getInvalidTextDiagnostic: () => ts.DiagnosticMessage) {
        switch (child.kind) {
            case ts.SyntaxKind.JsxExpression:
                // child is of the type of the expression
                return { errorNode: child, innerExpression: child.expression, nameType };
            case ts.SyntaxKind.JsxText:
                if (child.containsOnlyTriviaWhiteSpaces) {
                    break; // Whitespace only jsx text isn't real jsx text
                }
                // child is a string
                return { errorNode: child, innerExpression: undefined, nameType, errorMessage: getInvalidTextDiagnostic() };
            case ts.SyntaxKind.JsxElement:
            case ts.SyntaxKind.JsxSelfClosingElement:
            case ts.SyntaxKind.JsxFragment:
                // child is of type JSX.Element
                return { errorNode: child, innerExpression: child, nameType };
            default:
                return ts.Debug.assertNever(child, "Found invalid jsx child");
        }
    }

    function elaborateJsxComponents(
        node: ts.JsxAttributes,
        source: ts.Type,
        target: ts.Type,
        relation: ts.ESMap<string, ts.RelationComparisonResult>,
        containingMessageChain: (() => ts.DiagnosticMessageChain | undefined) | undefined,
        errorOutputContainer: { errors?: ts.Diagnostic[], skipLogging?: boolean } | undefined
    ) {
        let result = elaborateElementwise(generateJsxAttributes(node), source, target, relation, containingMessageChain, errorOutputContainer);
        let invalidTextDiagnostic: ts.DiagnosticMessage | undefined;
        if (ts.isJsxOpeningElement(node.parent) && ts.isJsxElement(node.parent.parent)) {
            const containingElement = node.parent.parent;
            const childPropName = getJsxElementChildrenPropertyName(getJsxNamespaceAt(node));
            const childrenPropName = childPropName === undefined ? "children" : ts.unescapeLeadingUnderscores(childPropName);
            const childrenNameType = getStringLiteralType(childrenPropName);
            const childrenTargetType = getIndexedAccessType(target, childrenNameType);
            const validChildren = ts.getSemanticJsxChildren(containingElement.children);
            if (!ts.length(validChildren)) {
                return result;
            }
            const moreThanOneRealChildren = ts.length(validChildren) > 1;
            const arrayLikeTargetParts = filterType(childrenTargetType, isArrayOrTupleLikeType);
            const nonArrayLikeTargetParts = filterType(childrenTargetType, t => !isArrayOrTupleLikeType(t));
            if (moreThanOneRealChildren) {
                if (arrayLikeTargetParts !== neverType) {
                    const realSource = createTupleType(checkJsxChildren(containingElement, CheckMode.Normal));
                    const children = generateJsxChildren(containingElement, getInvalidTextualChildDiagnostic);
                    result = elaborateElementwise(children, realSource, arrayLikeTargetParts, relation, containingMessageChain, errorOutputContainer) || result;
                }
                else if (!isTypeRelatedTo(getIndexedAccessType(source, childrenNameType), childrenTargetType, relation)) {
                    // arity mismatch
                    result = true;
                    const diag = error(
                        containingElement.openingElement.tagName,
                        ts.Diagnostics.This_JSX_tag_s_0_prop_expects_a_single_child_of_type_1_but_multiple_children_were_provided,
                        childrenPropName,
                        typeToString(childrenTargetType)
                    );
                    if (errorOutputContainer && errorOutputContainer.skipLogging) {
                        (errorOutputContainer.errors || (errorOutputContainer.errors = [])).push(diag);
                    }
                }
            }
            else {
                if (nonArrayLikeTargetParts !== neverType) {
                    const child = validChildren[0];
                    const elem = getElaborationElementForJsxChild(child, childrenNameType, getInvalidTextualChildDiagnostic);
                    if (elem) {
                        result = elaborateElementwise(
                            (function*() { yield elem; })(),
                            source,
                            target,
                            relation,
                            containingMessageChain,
                            errorOutputContainer
                        ) || result;
                    }
                }
                else if (!isTypeRelatedTo(getIndexedAccessType(source, childrenNameType), childrenTargetType, relation)) {
                    // arity mismatch
                    result = true;
                    const diag = error(
                        containingElement.openingElement.tagName,
                        ts.Diagnostics.This_JSX_tag_s_0_prop_expects_type_1_which_requires_multiple_children_but_only_a_single_child_was_provided,
                        childrenPropName,
                        typeToString(childrenTargetType)
                    );
                    if (errorOutputContainer && errorOutputContainer.skipLogging) {
                        (errorOutputContainer.errors || (errorOutputContainer.errors = [])).push(diag);
                    }
                }
            }
        }
        return result;

        function getInvalidTextualChildDiagnostic() {
            if (!invalidTextDiagnostic) {
                const tagNameText = ts.getTextOfNode(node.parent.tagName);
                const childPropName = getJsxElementChildrenPropertyName(getJsxNamespaceAt(node));
                const childrenPropName = childPropName === undefined ? "children" : ts.unescapeLeadingUnderscores(childPropName);
                const childrenTargetType = getIndexedAccessType(target, getStringLiteralType(childrenPropName));
                const diagnostic = ts.Diagnostics._0_components_don_t_accept_text_as_child_elements_Text_in_JSX_has_the_type_string_but_the_expected_type_of_1_is_2;
                invalidTextDiagnostic = { ...diagnostic, key: "!!ALREADY FORMATTED!!", message: ts.formatMessage(/*_dummy*/ undefined, diagnostic, tagNameText, childrenPropName, typeToString(childrenTargetType)) };
            }
            return invalidTextDiagnostic;
        }
    }

    function *generateLimitedTupleElements(node: ts.ArrayLiteralExpression, target: ts.Type): ElaborationIterator {
        const len = ts.length(node.elements);
        if (!len) return;
        for (let i = 0; i < len; i++) {
            // Skip elements which do not exist in the target - a length error on the tuple overall is likely better than an error on a mismatched index signature
            if (isTupleLikeType(target) && !getPropertyOfType(target, ("" + i) as ts.__String)) continue;
            const elem = node.elements[i];
            if (ts.isOmittedExpression(elem)) continue;
            const nameType = getNumberLiteralType(i);
            yield { errorNode: elem, innerExpression: elem, nameType };
        }
    }

    function elaborateArrayLiteral(
        node: ts.ArrayLiteralExpression,
        source: ts.Type,
        target: ts.Type,
        relation: ts.ESMap<string, ts.RelationComparisonResult>,
        containingMessageChain: (() => ts.DiagnosticMessageChain | undefined) | undefined,
        errorOutputContainer: { errors?: ts.Diagnostic[], skipLogging?: boolean } | undefined
    ) {
        if (target.flags & (ts.TypeFlags.Primitive | ts.TypeFlags.Never)) return false;
        if (isTupleLikeType(source)) {
            return elaborateElementwise(generateLimitedTupleElements(node, target), source, target, relation, containingMessageChain, errorOutputContainer);
        }
        // recreate a tuple from the elements, if possible
        // Since we're re-doing the expression type, we need to reapply the contextual type
        const oldContext = node.contextualType;
        node.contextualType = target;
        try {
            const tupleizedType = checkArrayLiteral(node, CheckMode.Contextual, /*forceTuple*/ true);
            node.contextualType = oldContext;
            if (isTupleLikeType(tupleizedType)) {
                return elaborateElementwise(generateLimitedTupleElements(node, target), tupleizedType, target, relation, containingMessageChain, errorOutputContainer);
            }
            return false;
        }
        finally {
            node.contextualType = oldContext;
        }
    }

    function *generateObjectLiteralElements(node: ts.ObjectLiteralExpression): ElaborationIterator {
        if (!ts.length(node.properties)) return;
        for (const prop of node.properties) {
            if (ts.isSpreadAssignment(prop)) continue;
            const type = getLiteralTypeFromProperty(getSymbolOfNode(prop), ts.TypeFlags.StringOrNumberLiteralOrUnique);
            if (!type || (type.flags & ts.TypeFlags.Never)) {
                continue;
            }
            switch (prop.kind) {
                case ts.SyntaxKind.SetAccessor:
                case ts.SyntaxKind.GetAccessor:
                case ts.SyntaxKind.MethodDeclaration:
                case ts.SyntaxKind.ShorthandPropertyAssignment:
                    yield { errorNode: prop.name, innerExpression: undefined, nameType: type };
                    break;
                case ts.SyntaxKind.PropertyAssignment:
                    yield { errorNode: prop.name, innerExpression: prop.initializer, nameType: type, errorMessage: ts.isComputedNonLiteralName(prop.name) ? ts.Diagnostics.Type_of_computed_property_s_value_is_0_which_is_not_assignable_to_type_1 : undefined };
                    break;
                default:
                    ts.Debug.assertNever(prop);
            }
        }
    }

    function elaborateObjectLiteral(
        node: ts.ObjectLiteralExpression,
        source: ts.Type,
        target: ts.Type,
        relation: ts.ESMap<string, ts.RelationComparisonResult>,
        containingMessageChain: (() => ts.DiagnosticMessageChain | undefined) | undefined,
        errorOutputContainer: { errors?: ts.Diagnostic[], skipLogging?: boolean } | undefined
    ) {
        if (target.flags & (ts.TypeFlags.Primitive | ts.TypeFlags.Never)) return false;
        return elaborateElementwise(generateObjectLiteralElements(node), source, target, relation, containingMessageChain, errorOutputContainer);
    }

    /**
     * This is *not* a bi-directional relationship.
     * If one needs to check both directions for comparability, use a second call to this function or 'isTypeComparableTo'.
     */
    function checkTypeComparableTo(source: ts.Type, target: ts.Type, errorNode: ts.Node, headMessage?: ts.DiagnosticMessage, containingMessageChain?: () => ts.DiagnosticMessageChain | undefined): boolean {
        return checkTypeRelatedTo(source, target, comparableRelation, errorNode, headMessage, containingMessageChain);
    }

    function isSignatureAssignableTo(source: ts.Signature,
        target: ts.Signature,
        ignoreReturnTypes: boolean): boolean {
        return compareSignaturesRelated(source, target, ignoreReturnTypes ? SignatureCheckMode.IgnoreReturnTypes : 0, /*reportErrors*/ false,
            /*errorReporter*/ undefined, /*errorReporter*/ undefined, compareTypesAssignable, /*reportUnreliableMarkers*/ undefined) !== ts.Ternary.False;
    }

    type ErrorReporter = (message: ts.DiagnosticMessage, arg0?: string, arg1?: string) => void;

    /**
     * Returns true if `s` is `(...args: any[]) => any` or `(this: any, ...args: any[]) => any`
     */
    function isAnySignature(s: ts.Signature) {
        return !s.typeParameters && (!s.thisParameter || isTypeAny(getTypeOfParameter(s.thisParameter))) && s.parameters.length === 1 &&
            signatureHasRestParameter(s) && (getTypeOfParameter(s.parameters[0]) === anyArrayType || isTypeAny(getTypeOfParameter(s.parameters[0]))) &&
            isTypeAny(getReturnTypeOfSignature(s));
    }

    /**
     * See signatureRelatedTo, compareSignaturesIdentical
     */
    function compareSignaturesRelated(source: ts.Signature,
        target: ts.Signature,
        checkMode: SignatureCheckMode,
        reportErrors: boolean,
        errorReporter: ErrorReporter | undefined,
        incompatibleErrorReporter: ((source: ts.Type, target: ts.Type) => void) | undefined,
        compareTypes: ts.TypeComparer,
        reportUnreliableMarkers: ts.TypeMapper | undefined): ts.Ternary {
        // TODO (drosen): De-duplicate code between related functions.
        if (source === target) {
            return ts.Ternary.True;
        }

        if (isAnySignature(target)) {
            return ts.Ternary.True;
        }

        const targetCount = getParameterCount(target);
        const sourceHasMoreParameters = !hasEffectiveRestParameter(target) &&
            (checkMode & SignatureCheckMode.StrictArity ? hasEffectiveRestParameter(source) || getParameterCount(source) > targetCount : getMinArgumentCount(source) > targetCount);
        if (sourceHasMoreParameters) {
            return ts.Ternary.False;
        }

        if (source.typeParameters && source.typeParameters !== target.typeParameters) {
            target = getCanonicalSignature(target);
            source = instantiateSignatureInContextOf(source, target, /*inferenceContext*/ undefined, compareTypes);
        }

        const sourceCount = getParameterCount(source);
        const sourceRestType = getNonArrayRestType(source);
        const targetRestType = getNonArrayRestType(target);
        if (sourceRestType || targetRestType) {
            void instantiateType(sourceRestType || targetRestType, reportUnreliableMarkers);
        }

        const kind = target.declaration ? target.declaration.kind : ts.SyntaxKind.Unknown;
        const strictVariance = !(checkMode & SignatureCheckMode.Callback) && strictFunctionTypes && kind !== ts.SyntaxKind.MethodDeclaration &&
            kind !== ts.SyntaxKind.MethodSignature && kind !== ts.SyntaxKind.Constructor;
        let result = ts.Ternary.True;

        const sourceThisType = getThisTypeOfSignature(source);
        if (sourceThisType && sourceThisType !== voidType) {
            const targetThisType = getThisTypeOfSignature(target);
            if (targetThisType) {
                // void sources are assignable to anything.
                const related = !strictVariance && compareTypes(sourceThisType, targetThisType, /*reportErrors*/ false)
                    || compareTypes(targetThisType, sourceThisType, reportErrors);
                if (!related) {
                    if (reportErrors) {
                        errorReporter!(ts.Diagnostics.The_this_types_of_each_signature_are_incompatible);
                    }
                    return ts.Ternary.False;
                }
                result &= related;
            }
        }

        const paramCount = sourceRestType || targetRestType ? Math.min(sourceCount, targetCount) : Math.max(sourceCount, targetCount);
        const restIndex = sourceRestType || targetRestType ? paramCount - 1 : -1;

        for (let i = 0; i < paramCount; i++) {
            const sourceType = i === restIndex ? getRestTypeAtPosition(source, i) : tryGetTypeAtPosition(source, i);
            const targetType = i === restIndex ? getRestTypeAtPosition(target, i) : tryGetTypeAtPosition(target, i);
            if (sourceType && targetType) {
                // In order to ensure that any generic type Foo<T> is at least co-variant with respect to T no matter
                // how Foo uses T, we need to relate parameters bi-variantly (given that parameters are input positions,
                // they naturally relate only contra-variantly). However, if the source and target parameters both have
                // function types with a single call signature, we know we are relating two callback parameters. In
                // that case it is sufficient to only relate the parameters of the signatures co-variantly because,
                // similar to return values, callback parameters are output positions. This means that a Promise<T>,
                // where T is used only in callback parameter positions, will be co-variant (as opposed to bi-variant)
                // with respect to T.
                const sourceSig = checkMode & SignatureCheckMode.Callback ? undefined : getSingleCallSignature(getNonNullableType(sourceType));
                const targetSig = checkMode & SignatureCheckMode.Callback ? undefined : getSingleCallSignature(getNonNullableType(targetType));
                const callbacks = sourceSig && targetSig && !getTypePredicateOfSignature(sourceSig) && !getTypePredicateOfSignature(targetSig) &&
                    (getTypeFacts(sourceType) & TypeFacts.IsUndefinedOrNull) === (getTypeFacts(targetType) & TypeFacts.IsUndefinedOrNull);
                let related = callbacks ?
                    compareSignaturesRelated(targetSig, sourceSig, (checkMode & SignatureCheckMode.StrictArity) | (strictVariance ? SignatureCheckMode.StrictCallback : SignatureCheckMode.BivariantCallback), reportErrors, errorReporter, incompatibleErrorReporter, compareTypes, reportUnreliableMarkers) :
                    !(checkMode & SignatureCheckMode.Callback) && !strictVariance && compareTypes(sourceType, targetType, /*reportErrors*/ false) || compareTypes(targetType, sourceType, reportErrors);
                // With strict arity, (x: number | undefined) => void is a subtype of (x?: number | undefined) => void
                if (related && checkMode & SignatureCheckMode.StrictArity && i >= getMinArgumentCount(source) && i < getMinArgumentCount(target) && compareTypes(sourceType, targetType, /*reportErrors*/ false)) {
                    related = ts.Ternary.False;
                }
                if (!related) {
                    if (reportErrors) {
                        errorReporter!(ts.Diagnostics.Types_of_parameters_0_and_1_are_incompatible,
                            ts.unescapeLeadingUnderscores(getParameterNameAtPosition(source, i)),
                            ts.unescapeLeadingUnderscores(getParameterNameAtPosition(target, i)));
                    }
                    return ts.Ternary.False;
                }
                result &= related;
            }
        }

        if (!(checkMode & SignatureCheckMode.IgnoreReturnTypes)) {
            // If a signature resolution is already in-flight, skip issuing a circularity error
            // here and just use the `any` type directly
            const targetReturnType = isResolvingReturnTypeOfSignature(target) ? anyType
                : target.declaration && isJSConstructor(target.declaration) ? getDeclaredTypeOfClassOrInterface(getMergedSymbol(target.declaration.symbol))
                : getReturnTypeOfSignature(target);
            if (targetReturnType === voidType || targetReturnType === anyType) {
                return result;
            }
            const sourceReturnType = isResolvingReturnTypeOfSignature(source) ? anyType
                : source.declaration && isJSConstructor(source.declaration) ? getDeclaredTypeOfClassOrInterface(getMergedSymbol(source.declaration.symbol))
                : getReturnTypeOfSignature(source);

            // The following block preserves behavior forbidding boolean returning functions from being assignable to type guard returning functions
            const targetTypePredicate = getTypePredicateOfSignature(target);
            if (targetTypePredicate) {
                const sourceTypePredicate = getTypePredicateOfSignature(source);
                if (sourceTypePredicate) {
                    result &= compareTypePredicateRelatedTo(sourceTypePredicate, targetTypePredicate, reportErrors, errorReporter, compareTypes);
                }
                else if (ts.isIdentifierTypePredicate(targetTypePredicate)) {
                    if (reportErrors) {
                        errorReporter!(ts.Diagnostics.Signature_0_must_be_a_type_predicate, signatureToString(source));
                    }
                    return ts.Ternary.False;
                }
            }
            else {
                // When relating callback signatures, we still need to relate return types bi-variantly as otherwise
                // the containing type wouldn't be co-variant. For example, interface Foo<T> { add(cb: () => T): void }
                // wouldn't be co-variant for T without this rule.
                result &= checkMode & SignatureCheckMode.BivariantCallback && compareTypes(targetReturnType, sourceReturnType, /*reportErrors*/ false) ||
                    compareTypes(sourceReturnType, targetReturnType, reportErrors);
                if (!result && reportErrors && incompatibleErrorReporter) {
                    incompatibleErrorReporter(sourceReturnType, targetReturnType);
                }
            }

        }

        return result;
    }

    function compareTypePredicateRelatedTo(
        source: ts.TypePredicate,
        target: ts.TypePredicate,
        reportErrors: boolean,
        errorReporter: ErrorReporter | undefined,
        compareTypes: (s: ts.Type, t: ts.Type, reportErrors?: boolean) => ts.Ternary): ts.Ternary {
        if (source.kind !== target.kind) {
            if (reportErrors) {
                errorReporter!(ts.Diagnostics.A_this_based_type_guard_is_not_compatible_with_a_parameter_based_type_guard);
                errorReporter!(ts.Diagnostics.Type_predicate_0_is_not_assignable_to_1, typePredicateToString(source), typePredicateToString(target));
            }
            return ts.Ternary.False;
        }

        if (source.kind === ts.TypePredicateKind.Identifier || source.kind === ts.TypePredicateKind.AssertsIdentifier) {
            if (source.parameterIndex !== (target as ts.IdentifierTypePredicate).parameterIndex) {
                if (reportErrors) {
                    errorReporter!(ts.Diagnostics.Parameter_0_is_not_in_the_same_position_as_parameter_1, source.parameterName, (target as ts.IdentifierTypePredicate).parameterName);
                    errorReporter!(ts.Diagnostics.Type_predicate_0_is_not_assignable_to_1, typePredicateToString(source), typePredicateToString(target));
                }
                return ts.Ternary.False;
            }
        }

        const related = source.type === target.type ? ts.Ternary.True :
            source.type && target.type ? compareTypes(source.type, target.type, reportErrors) :
            ts.Ternary.False;
        if (related === ts.Ternary.False && reportErrors) {
            errorReporter!(ts.Diagnostics.Type_predicate_0_is_not_assignable_to_1, typePredicateToString(source), typePredicateToString(target));
        }
        return related;
    }

    function isImplementationCompatibleWithOverload(implementation: ts.Signature, overload: ts.Signature): boolean {
        const erasedSource = getErasedSignature(implementation);
        const erasedTarget = getErasedSignature(overload);

        // First see if the return types are compatible in either direction.
        const sourceReturnType = getReturnTypeOfSignature(erasedSource);
        const targetReturnType = getReturnTypeOfSignature(erasedTarget);
        if (targetReturnType === voidType
            || isTypeRelatedTo(targetReturnType, sourceReturnType, assignableRelation)
            || isTypeRelatedTo(sourceReturnType, targetReturnType, assignableRelation)) {

            return isSignatureAssignableTo(erasedSource, erasedTarget, /*ignoreReturnTypes*/ true);
        }

        return false;
    }

    function isEmptyResolvedType(t: ts.ResolvedType) {
        return t !== anyFunctionType &&
            t.properties.length === 0 &&
            t.callSignatures.length === 0 &&
            t.constructSignatures.length === 0 &&
            t.indexInfos.length === 0;
    }

    function isEmptyObjectType(type: ts.Type): boolean {
        return type.flags & ts.TypeFlags.Object ? !isGenericMappedType(type) && isEmptyResolvedType(resolveStructuredTypeMembers(type as ts.ObjectType)) :
            type.flags & ts.TypeFlags.NonPrimitive ? true :
            type.flags & ts.TypeFlags.Union ? ts.some((type as ts.UnionType).types, isEmptyObjectType) :
            type.flags & ts.TypeFlags.Intersection ? ts.every((type as ts.UnionType).types, isEmptyObjectType) :
            false;
    }

    function isEmptyAnonymousObjectType(type: ts.Type) {
        return !!(ts.getObjectFlags(type) & ts.ObjectFlags.Anonymous && (
            (type as ts.ResolvedType).members && isEmptyResolvedType(type as ts.ResolvedType) ||
            type.symbol && type.symbol.flags & ts.SymbolFlags.TypeLiteral && getMembersOfSymbol(type.symbol).size === 0));
    }

    function isUnknownLikeUnionType(type: ts.Type) {
        if (strictNullChecks && type.flags & ts.TypeFlags.Union) {
            if (!((type as ts.UnionType).objectFlags & ts.ObjectFlags.IsUnknownLikeUnionComputed)) {
                const types = (type as ts.UnionType).types;
                (type as ts.UnionType).objectFlags |= ts.ObjectFlags.IsUnknownLikeUnionComputed | (types.length >= 3 && types[0].flags & ts.TypeFlags.Undefined &&
                    types[1].flags & ts.TypeFlags.Null && ts.some(types, isEmptyAnonymousObjectType) ? ts.ObjectFlags.IsUnknownLikeUnion : 0);
            }
            return !!((type as ts.UnionType).objectFlags & ts.ObjectFlags.IsUnknownLikeUnion);
        }
        return false;
    }

    function containsUndefinedType(type: ts.Type) {
        return !!((type.flags & ts.TypeFlags.Union ? (type as ts.UnionType).types[0] : type).flags & ts.TypeFlags.Undefined);
    }

    function isStringIndexSignatureOnlyType(type: ts.Type): boolean {
        return type.flags & ts.TypeFlags.Object && !isGenericMappedType(type) && getPropertiesOfType(type).length === 0 && getIndexInfosOfType(type).length === 1 && !!getIndexInfoOfType(type, stringType) ||
            type.flags & ts.TypeFlags.UnionOrIntersection && ts.every((type as ts.UnionOrIntersectionType).types, isStringIndexSignatureOnlyType) ||
            false;
    }

    function isEnumTypeRelatedTo(source: ts.Symbol, target: ts.Symbol, errorReporter?: ErrorReporter) {
        const sourceSymbol = source.flags & ts.SymbolFlags.EnumMember ? getParentOfSymbol(source)! : source;
        const targetSymbol = target.flags & ts.SymbolFlags.EnumMember ? getParentOfSymbol(target)! : target;
        if (sourceSymbol === targetSymbol) {
            return true;
        }
        if (sourceSymbol.escapedName !== targetSymbol.escapedName || !(sourceSymbol.flags & ts.SymbolFlags.RegularEnum) || !(targetSymbol.flags & ts.SymbolFlags.RegularEnum)) {
            return false;
        }
        const id = getSymbolId(sourceSymbol) + "," + getSymbolId(targetSymbol);
        const entry = enumRelation.get(id);
        if (entry !== undefined && !(!(entry & ts.RelationComparisonResult.Reported) && entry & ts.RelationComparisonResult.Failed && errorReporter)) {
            return !!(entry & ts.RelationComparisonResult.Succeeded);
        }
        const targetEnumType = getTypeOfSymbol(targetSymbol);
        for (const property of getPropertiesOfType(getTypeOfSymbol(sourceSymbol))) {
            if (property.flags & ts.SymbolFlags.EnumMember) {
                const targetProperty = getPropertyOfType(targetEnumType, property.escapedName);
                if (!targetProperty || !(targetProperty.flags & ts.SymbolFlags.EnumMember)) {
                    if (errorReporter) {
                        errorReporter(ts.Diagnostics.Property_0_is_missing_in_type_1, ts.symbolName(property),
                            typeToString(getDeclaredTypeOfSymbol(targetSymbol), /*enclosingDeclaration*/ undefined, ts.TypeFormatFlags.UseFullyQualifiedType));
                        enumRelation.set(id, ts.RelationComparisonResult.Failed | ts.RelationComparisonResult.Reported);
                    }
                    else {
                        enumRelation.set(id, ts.RelationComparisonResult.Failed);
                    }
                    return false;
                }
            }
        }
        enumRelation.set(id, ts.RelationComparisonResult.Succeeded);
        return true;
    }

    function isSimpleTypeRelatedTo(source: ts.Type, target: ts.Type, relation: ts.ESMap<string, ts.RelationComparisonResult>, errorReporter?: ErrorReporter) {
        const s = source.flags;
        const t = target.flags;
        if (t & ts.TypeFlags.AnyOrUnknown || s & ts.TypeFlags.Never || source === wildcardType) return true;
        if (t & ts.TypeFlags.Never) return false;
        if (s & ts.TypeFlags.StringLike && t & ts.TypeFlags.String) return true;
        if (s & ts.TypeFlags.StringLiteral && s & ts.TypeFlags.EnumLiteral &&
            t & ts.TypeFlags.StringLiteral && !(t & ts.TypeFlags.EnumLiteral) &&
            (source as ts.StringLiteralType).value === (target as ts.StringLiteralType).value) return true;
        if (s & ts.TypeFlags.NumberLike && t & ts.TypeFlags.Number) return true;
        if (s & ts.TypeFlags.NumberLiteral && s & ts.TypeFlags.EnumLiteral &&
            t & ts.TypeFlags.NumberLiteral && !(t & ts.TypeFlags.EnumLiteral) &&
            (source as ts.NumberLiteralType).value === (target as ts.NumberLiteralType).value) return true;
        if (s & ts.TypeFlags.BigIntLike && t & ts.TypeFlags.BigInt) return true;
        if (s & ts.TypeFlags.BooleanLike && t & ts.TypeFlags.Boolean) return true;
        if (s & ts.TypeFlags.ESSymbolLike && t & ts.TypeFlags.ESSymbol) return true;
        if (s & ts.TypeFlags.Enum && t & ts.TypeFlags.Enum && source.symbol.escapedName === target.symbol.escapedName &&
            isEnumTypeRelatedTo(source.symbol, target.symbol, errorReporter)) return true;
        if (s & ts.TypeFlags.EnumLiteral && t & ts.TypeFlags.EnumLiteral) {
            if (s & ts.TypeFlags.Union && t & ts.TypeFlags.Union && isEnumTypeRelatedTo(source.symbol, target.symbol, errorReporter)) return true;
            if (s & ts.TypeFlags.Literal && t & ts.TypeFlags.Literal && (source as ts.LiteralType).value === (target as ts.LiteralType).value &&
                isEnumTypeRelatedTo(source.symbol, target.symbol, errorReporter)) return true;
        }
        // In non-strictNullChecks mode, `undefined` and `null` are assignable to anything except `never`.
        // Since unions and intersections may reduce to `never`, we exclude them here.
        if (s & ts.TypeFlags.Undefined && (!strictNullChecks && !(t & ts.TypeFlags.UnionOrIntersection) || t & (ts.TypeFlags.Undefined | ts.TypeFlags.Void))) return true;
        if (s & ts.TypeFlags.Null && (!strictNullChecks && !(t & ts.TypeFlags.UnionOrIntersection) || t & ts.TypeFlags.Null)) return true;
        if (s & ts.TypeFlags.Object && t & ts.TypeFlags.NonPrimitive && !(relation === strictSubtypeRelation && isEmptyAnonymousObjectType(source) && !(ts.getObjectFlags(source) & ts.ObjectFlags.FreshLiteral))) return true;
        if (relation === assignableRelation || relation === comparableRelation) {
            if (s & ts.TypeFlags.Any) return true;
            // Type number or any numeric literal type is assignable to any numeric enum type or any
            // numeric enum literal type. This rule exists for backwards compatibility reasons because
            // bit-flag enum types sometimes look like literal enum types with numeric literal values.
            if (s & (ts.TypeFlags.Number | ts.TypeFlags.NumberLiteral) && !(s & ts.TypeFlags.EnumLiteral) && (
                t & ts.TypeFlags.Enum || relation === assignableRelation && t & ts.TypeFlags.NumberLiteral && t & ts.TypeFlags.EnumLiteral)) return true;
            // Anything is assignable to a union containing undefined, null, and {}
            if (isUnknownLikeUnionType(target)) return true;
        }
        return false;
    }

    function isTypeRelatedTo(source: ts.Type, target: ts.Type, relation: ts.ESMap<string, ts.RelationComparisonResult>) {
        if (isFreshLiteralType(source)) {
            source = (source as ts.FreshableType).regularType;
        }
        if (isFreshLiteralType(target)) {
            target = (target as ts.FreshableType).regularType;
        }
        if (source === target) {
            return true;
        }
        if (relation !== identityRelation) {
            if (relation === comparableRelation && !(target.flags & ts.TypeFlags.Never) && isSimpleTypeRelatedTo(target, source, relation) || isSimpleTypeRelatedTo(source, target, relation)) {
                return true;
            }
        }
        else if (!((source.flags | target.flags) & (ts.TypeFlags.UnionOrIntersection | ts.TypeFlags.IndexedAccess | ts.TypeFlags.Conditional | ts.TypeFlags.Substitution))) {
            // We have excluded types that may simplify to other forms, so types must have identical flags
            if (source.flags !== target.flags) return false;
            if (source.flags & ts.TypeFlags.Singleton) return true;
        }
        if (source.flags & ts.TypeFlags.Object && target.flags & ts.TypeFlags.Object) {
            const related = relation.get(getRelationKey(source, target, IntersectionState.None, relation, /*ignoreConstraints*/ false));
            if (related !== undefined) {
                return !!(related & ts.RelationComparisonResult.Succeeded);
            }
        }
        if (source.flags & ts.TypeFlags.StructuredOrInstantiable || target.flags & ts.TypeFlags.StructuredOrInstantiable) {
            return checkTypeRelatedTo(source, target, relation, /*errorNode*/ undefined);
        }
        return false;
    }

    function isIgnoredJsxProperty(source: ts.Type, sourceProp: ts.Symbol) {
        return ts.getObjectFlags(source) & ts.ObjectFlags.JsxAttributes && isHyphenatedJsxName(sourceProp.escapedName);
    }

    function getNormalizedType(type: ts.Type, writing: boolean): ts.Type {
        while (true) {
            const t = isFreshLiteralType(type) ? (type as ts.FreshableType).regularType :
                ts.getObjectFlags(type) & ts.ObjectFlags.Reference ? (type as ts.TypeReference).node ? createTypeReference((type as ts.TypeReference).target, getTypeArguments(type as ts.TypeReference)) : getSingleBaseForNonAugmentingSubtype(type) || type :
                type.flags & ts.TypeFlags.UnionOrIntersection ? getNormalizedUnionOrIntersectionType(type as ts.UnionOrIntersectionType, writing) :
                type.flags & ts.TypeFlags.Substitution ? writing ? (type as ts.SubstitutionType).baseType : getSubstitutionIntersection(type as ts.SubstitutionType) :
                type.flags & ts.TypeFlags.Simplifiable ? getSimplifiedType(type, writing) :
                type;
            if (t === type) return t;
            type = t;
        }
    }

    function getNormalizedUnionOrIntersectionType(type: ts.UnionOrIntersectionType, writing: boolean) {
        const reduced = getReducedType(type);
        if (reduced !== type) {
            return reduced;
        }
        if (type.flags & ts.TypeFlags.Intersection && ts.some((type as ts.IntersectionType).types, isEmptyAnonymousObjectType)) {
            const normalizedTypes = ts.sameMap(type.types, t => getNormalizedType(t, writing));
            if (normalizedTypes !== type.types) {
                return getIntersectionType(normalizedTypes);
            }
        }
        return type;
    }

    /**
     * Checks if 'source' is related to 'target' (e.g.: is a assignable to).
     * @param source The left-hand-side of the relation.
     * @param target The right-hand-side of the relation.
     * @param relation The relation considered. One of 'identityRelation', 'subtypeRelation', 'assignableRelation', or 'comparableRelation'.
     * Used as both to determine which checks are performed and as a cache of previously computed results.
     * @param errorNode The suggested node upon which all errors will be reported, if defined. This may or may not be the actual node used.
     * @param headMessage If the error chain should be prepended by a head message, then headMessage will be used.
     * @param containingMessageChain A chain of errors to prepend any new errors found.
     * @param errorOutputContainer Return the diagnostic. Do not log if 'skipLogging' is truthy.
     */
    function checkTypeRelatedTo(
        source: ts.Type,
        target: ts.Type,
        relation: ts.ESMap<string, ts.RelationComparisonResult>,
        errorNode: ts.Node | undefined,
        headMessage?: ts.DiagnosticMessage,
        containingMessageChain?: () => ts.DiagnosticMessageChain | undefined,
        errorOutputContainer?: { errors?: ts.Diagnostic[], skipLogging?: boolean },
    ): boolean {

        let errorInfo: ts.DiagnosticMessageChain | undefined;
        let relatedInfo: [ts.DiagnosticRelatedInformation, ...ts.DiagnosticRelatedInformation[]] | undefined;
        let maybeKeys: string[];
        let sourceStack: ts.Type[];
        let targetStack: ts.Type[];
        let maybeCount = 0;
        let sourceDepth = 0;
        let targetDepth = 0;
        let expandingFlags = ExpandingFlags.None;
        let overflow = false;
        let overrideNextErrorInfo = 0; // How many `reportRelationError` calls should be skipped in the elaboration pyramid
        let lastSkippedInfo: [ts.Type, ts.Type] | undefined;
        let incompatibleStack: [ts.DiagnosticMessage, (string | number)?, (string | number)?, (string | number)?, (string | number)?][] | undefined;
        let inPropertyCheck = false;

        ts.Debug.assert(relation !== identityRelation || !errorNode, "no error reporting in identity checking");

        const result = isRelatedTo(source, target, RecursionFlags.Both, /*reportErrors*/ !!errorNode, headMessage);
        if (incompatibleStack) {
            reportIncompatibleStack();
        }
        if (overflow) {
            ts.tracing?.instant(ts.tracing.Phase.CheckTypes, "checkTypeRelatedTo_DepthLimit", { sourceId: source.id, targetId: target.id, depth: sourceDepth, targetDepth });
            const diag = error(errorNode || currentNode, ts.Diagnostics.Excessive_stack_depth_comparing_types_0_and_1, typeToString(source), typeToString(target));
            if (errorOutputContainer) {
                (errorOutputContainer.errors || (errorOutputContainer.errors = [])).push(diag);
            }
        }
        else if (errorInfo) {
            if (containingMessageChain) {
                const chain = containingMessageChain();
                if (chain) {
                    ts.concatenateDiagnosticMessageChains(chain, errorInfo);
                    errorInfo = chain;
                }
            }

            let relatedInformation: ts.DiagnosticRelatedInformation[] | undefined;
            // Check if we should issue an extra diagnostic to produce a quickfix for a slightly incorrect import statement
            if (headMessage && errorNode && !result && source.symbol) {
                const links = getSymbolLinks(source.symbol);
                if (links.originatingImport && !ts.isImportCall(links.originatingImport)) {
                    const helpfulRetry = checkTypeRelatedTo(getTypeOfSymbol(links.target!), target, relation, /*errorNode*/ undefined);
                    if (helpfulRetry) {
                        // Likely an incorrect import. Issue a helpful diagnostic to produce a quickfix to change the import
                        const diag = ts.createDiagnosticForNode(links.originatingImport, ts.Diagnostics.Type_originates_at_this_import_A_namespace_style_import_cannot_be_called_or_constructed_and_will_cause_a_failure_at_runtime_Consider_using_a_default_import_or_import_require_here_instead);
                        relatedInformation = ts.append(relatedInformation, diag); // Cause the error to appear with the error that triggered it
                    }
                }
            }
            const diag = ts.createDiagnosticForNodeFromMessageChain(errorNode!, errorInfo, relatedInformation);
            if (relatedInfo) {
                ts.addRelatedInfo(diag, ...relatedInfo);
            }
            if (errorOutputContainer) {
                (errorOutputContainer.errors || (errorOutputContainer.errors = [])).push(diag);
            }
            if (!errorOutputContainer || !errorOutputContainer.skipLogging) {
                diagnostics.add(diag);
            }
        }
        if (errorNode && errorOutputContainer && errorOutputContainer.skipLogging && result === ts.Ternary.False) {
            ts.Debug.assert(!!errorOutputContainer.errors, "missed opportunity to interact with error.");
        }


        return result !== ts.Ternary.False;

        function resetErrorInfo(saved: ReturnType<typeof captureErrorCalculationState>) {
            errorInfo = saved.errorInfo;
            lastSkippedInfo = saved.lastSkippedInfo;
            incompatibleStack = saved.incompatibleStack;
            overrideNextErrorInfo = saved.overrideNextErrorInfo;
            relatedInfo = saved.relatedInfo;
        }

        function captureErrorCalculationState() {
            return {
                errorInfo,
                lastSkippedInfo,
                incompatibleStack: incompatibleStack?.slice(),
                overrideNextErrorInfo,
                relatedInfo: relatedInfo?.slice() as [ts.DiagnosticRelatedInformation, ...ts.DiagnosticRelatedInformation[]] | undefined,
            };
        }

        function reportIncompatibleError(message: ts.DiagnosticMessage, arg0?: string | number, arg1?: string | number, arg2?: string | number, arg3?: string | number) {
            overrideNextErrorInfo++; // Suppress the next relation error
            lastSkippedInfo = undefined; // Reset skipped info cache
            (incompatibleStack ||= []).push([message, arg0, arg1, arg2, arg3]);
        }

        function reportIncompatibleStack() {
            const stack = incompatibleStack || [];
            incompatibleStack = undefined;
            const info = lastSkippedInfo;
            lastSkippedInfo = undefined;
            if (stack.length === 1) {
                reportError(...stack[0]);
                if (info) {
                    // Actually do the last relation error
                    reportRelationError(/*headMessage*/ undefined, ...info);
                }
                return;
            }
            // The first error will be the innermost, while the last will be the outermost - so by popping off the end,
            // we can build from left to right
            let path = "";
            const secondaryRootErrors: [ts.DiagnosticMessage, (string | number)?, (string | number)?, (string | number)?, (string | number)?][] = [];
            while (stack.length) {
                const [msg, ...args] = stack.pop()!;
                switch (msg.code) {
                    case ts.Diagnostics.Types_of_property_0_are_incompatible.code: {
                        // Parenthesize a `new` if there is one
                        if (path.indexOf("new ") === 0) {
                            path = `(${path})`;
                        }
                        const str = "" + args[0];
                        // If leading, just print back the arg (irrespective of if it's a valid identifier)
                        if (path.length === 0) {
                            path = `${str}`;
                        }
                        // Otherwise write a dotted name if possible
                        else if (ts.isIdentifierText(str, ts.getEmitScriptTarget(compilerOptions))) {
                            path = `${path}.${str}`;
                        }
                        // Failing that, check if the name is already a computed name
                        else if (str[0] === "[" && str[str.length - 1] === "]") {
                            path = `${path}${str}`;
                        }
                        // And finally write out a computed name as a last resort
                        else {
                            path = `${path}[${str}]`;
                        }
                        break;
                    }
                    case ts.Diagnostics.Call_signature_return_types_0_and_1_are_incompatible.code:
                    case ts.Diagnostics.Construct_signature_return_types_0_and_1_are_incompatible.code:
                    case ts.Diagnostics.Call_signatures_with_no_arguments_have_incompatible_return_types_0_and_1.code:
                    case ts.Diagnostics.Construct_signatures_with_no_arguments_have_incompatible_return_types_0_and_1.code: {
                        if (path.length === 0) {
                            // Don't flatten signature compatability errors at the start of a chain - instead prefer
                            // to unify (the with no arguments bit is excessive for printback) and print them back
                            let mappedMsg = msg;
                            if (msg.code === ts.Diagnostics.Call_signatures_with_no_arguments_have_incompatible_return_types_0_and_1.code) {
                                mappedMsg = ts.Diagnostics.Call_signature_return_types_0_and_1_are_incompatible;
                            }
                            else if (msg.code === ts.Diagnostics.Construct_signatures_with_no_arguments_have_incompatible_return_types_0_and_1.code) {
                                mappedMsg = ts.Diagnostics.Construct_signature_return_types_0_and_1_are_incompatible;
                            }
                            secondaryRootErrors.unshift([mappedMsg, args[0], args[1]]);
                        }
                        else {
                            const prefix = (msg.code === ts.Diagnostics.Construct_signature_return_types_0_and_1_are_incompatible.code ||
                                msg.code === ts.Diagnostics.Construct_signatures_with_no_arguments_have_incompatible_return_types_0_and_1.code)
                                    ? "new "
                                    : "";
                            const params = (msg.code === ts.Diagnostics.Call_signatures_with_no_arguments_have_incompatible_return_types_0_and_1.code ||
                                msg.code === ts.Diagnostics.Construct_signatures_with_no_arguments_have_incompatible_return_types_0_and_1.code)
                                    ? ""
                                    : "...";
                            path = `${prefix}${path}(${params})`;
                        }
                        break;
                    }
                    case ts.Diagnostics.Type_at_position_0_in_source_is_not_compatible_with_type_at_position_1_in_target.code: {
                        secondaryRootErrors.unshift([ts.Diagnostics.Type_at_position_0_in_source_is_not_compatible_with_type_at_position_1_in_target, args[0], args[1]]);
                        break;
                    }
                    case ts.Diagnostics.Type_at_positions_0_through_1_in_source_is_not_compatible_with_type_at_position_2_in_target.code: {
                        secondaryRootErrors.unshift([ts.Diagnostics.Type_at_positions_0_through_1_in_source_is_not_compatible_with_type_at_position_2_in_target, args[0], args[1], args[2]]);
                        break;
                    }
                    default:
                        return ts.Debug.fail(`Unhandled Diagnostic: ${msg.code}`);
                }
            }
            if (path) {
                reportError(path[path.length - 1] === ")"
                    ? ts.Diagnostics.The_types_returned_by_0_are_incompatible_between_these_types
                    : ts.Diagnostics.The_types_of_0_are_incompatible_between_these_types,
                    path
                );
            }
            else {
                // Remove the innermost secondary error as it will duplicate the error already reported by `reportRelationError` on entry
                secondaryRootErrors.shift();
            }
            for (const [msg, ...args] of secondaryRootErrors) {
                const originalValue = msg.elidedInCompatabilityPyramid;
                msg.elidedInCompatabilityPyramid = false; // Temporarily override elision to ensure error is reported
                reportError(msg, ...args);
                msg.elidedInCompatabilityPyramid = originalValue;
            }
            if (info) {
                // Actually do the last relation error
                reportRelationError(/*headMessage*/ undefined, ...info);
            }
        }

        function reportError(message: ts.DiagnosticMessage, arg0?: string | number, arg1?: string | number, arg2?: string | number, arg3?: string | number): void {
            ts.Debug.assert(!!errorNode);
            if (incompatibleStack) reportIncompatibleStack();
            if (message.elidedInCompatabilityPyramid) return;
            errorInfo = ts.chainDiagnosticMessages(errorInfo, message, arg0, arg1, arg2, arg3);
        }

        function associateRelatedInfo(info: ts.DiagnosticRelatedInformation) {
            ts.Debug.assert(!!errorInfo);
            if (!relatedInfo) {
                relatedInfo = [info];
            }
            else {
                relatedInfo.push(info);
            }
        }

        function reportRelationError(message: ts.DiagnosticMessage | undefined, source: ts.Type, target: ts.Type) {
            if (incompatibleStack) reportIncompatibleStack();
            const [sourceType, targetType] = getTypeNamesForErrorDisplay(source, target);
            let generalizedSource = source;
            let generalizedSourceType = sourceType;

            if (isLiteralType(source) && !typeCouldHaveTopLevelSingletonTypes(target)) {
                generalizedSource = getBaseTypeOfLiteralType(source);
                ts.Debug.assert(!isTypeAssignableTo(generalizedSource, target), "generalized source shouldn't be assignable");
                generalizedSourceType = getTypeNameForErrorDisplay(generalizedSource);
            }

            if (target.flags & ts.TypeFlags.TypeParameter && target !== markerSuperTypeForCheck && target !== markerSubTypeForCheck) {
                const constraint = getBaseConstraintOfType(target);
                let needsOriginalSource;
                if (constraint && (isTypeAssignableTo(generalizedSource, constraint) || (needsOriginalSource = isTypeAssignableTo(source, constraint)))) {
                    reportError(
                        ts.Diagnostics._0_is_assignable_to_the_constraint_of_type_1_but_1_could_be_instantiated_with_a_different_subtype_of_constraint_2,
                        needsOriginalSource ? sourceType : generalizedSourceType,
                        targetType,
                        typeToString(constraint),
                    );
                }
                else {
                    errorInfo = undefined;
                    reportError(
                        ts.Diagnostics._0_could_be_instantiated_with_an_arbitrary_type_which_could_be_unrelated_to_1,
                        targetType,
                        generalizedSourceType
                    );
                }
            }

            if (!message) {
                if (relation === comparableRelation) {
                    message = ts.Diagnostics.Type_0_is_not_comparable_to_type_1;
                }
                else if (sourceType === targetType) {
                    message = ts.Diagnostics.Type_0_is_not_assignable_to_type_1_Two_different_types_with_this_name_exist_but_they_are_unrelated;
                }
                else if (exactOptionalPropertyTypes && getExactOptionalUnassignableProperties(source, target).length) {
                    message = ts.Diagnostics.Type_0_is_not_assignable_to_type_1_with_exactOptionalPropertyTypes_Colon_true_Consider_adding_undefined_to_the_types_of_the_target_s_properties;
                }
                else {
                    if (source.flags & ts.TypeFlags.StringLiteral && target.flags & ts.TypeFlags.Union) {
                        const suggestedType = getSuggestedTypeForNonexistentStringLiteralType(source as ts.StringLiteralType, target as ts.UnionType);
                        if (suggestedType) {
                            reportError(ts.Diagnostics.Type_0_is_not_assignable_to_type_1_Did_you_mean_2, generalizedSourceType, targetType, typeToString(suggestedType));
                            return;
                        }
                    }
                    message = ts.Diagnostics.Type_0_is_not_assignable_to_type_1;
                }
            }
            else if (message === ts.Diagnostics.Argument_of_type_0_is_not_assignable_to_parameter_of_type_1
                && exactOptionalPropertyTypes
                && getExactOptionalUnassignableProperties(source, target).length) {
                message = ts.Diagnostics.Argument_of_type_0_is_not_assignable_to_parameter_of_type_1_with_exactOptionalPropertyTypes_Colon_true_Consider_adding_undefined_to_the_types_of_the_target_s_properties;
            }

            reportError(message, generalizedSourceType, targetType);
        }

        function tryElaborateErrorsForPrimitivesAndObjects(source: ts.Type, target: ts.Type) {
            const sourceType = symbolValueDeclarationIsContextSensitive(source.symbol) ? typeToString(source, source.symbol.valueDeclaration) : typeToString(source);
            const targetType = symbolValueDeclarationIsContextSensitive(target.symbol) ? typeToString(target, target.symbol.valueDeclaration) : typeToString(target);

            if ((globalStringType === source && stringType === target) ||
                (globalNumberType === source && numberType === target) ||
                (globalBooleanType === source && booleanType === target) ||
                (getGlobalESSymbolType() === source && esSymbolType === target)) {
                reportError(ts.Diagnostics._0_is_a_primitive_but_1_is_a_wrapper_object_Prefer_using_0_when_possible, targetType, sourceType);
            }
        }

        /**
         * Try and elaborate array and tuple errors. Returns false
         * if we have found an elaboration, or we should ignore
         * any other elaborations when relating the `source` and
         * `target` types.
         */
        function tryElaborateArrayLikeErrors(source: ts.Type, target: ts.Type, reportErrors: boolean): boolean {
            /**
             * The spec for elaboration is:
             * - If the source is a readonly tuple and the target is a mutable array or tuple, elaborate on mutability and skip property elaborations.
             * - If the source is a tuple then skip property elaborations if the target is an array or tuple.
             * - If the source is a readonly array and the target is a mutable array or tuple, elaborate on mutability and skip property elaborations.
             * - If the source an array then skip property elaborations if the target is a tuple.
             */
            if (isTupleType(source)) {
                if (source.target.readonly && isMutableArrayOrTuple(target)) {
                    if (reportErrors) {
                        reportError(ts.Diagnostics.The_type_0_is_readonly_and_cannot_be_assigned_to_the_mutable_type_1, typeToString(source), typeToString(target));
                    }
                    return false;
                }
                return isArrayOrTupleType(target);
            }
            if (isReadonlyArrayType(source) && isMutableArrayOrTuple(target)) {
                if (reportErrors) {
                    reportError(ts.Diagnostics.The_type_0_is_readonly_and_cannot_be_assigned_to_the_mutable_type_1, typeToString(source), typeToString(target));
                }
                return false;
            }
            if (isTupleType(target)) {
                return isArrayType(source);
            }
            return true;
        }

        function isRelatedToWorker(source: ts.Type, target: ts.Type, reportErrors: boolean) {
            return isRelatedTo(source, target, RecursionFlags.Both, reportErrors);
        }

        /**
         * Compare two types and return
         * * Ternary.True if they are related with no assumptions,
         * * Ternary.Maybe if they are related with assumptions of other relationships, or
         * * Ternary.False if they are not related.
         */
        function isRelatedTo(originalSource: ts.Type, originalTarget: ts.Type, recursionFlags: RecursionFlags = RecursionFlags.Both, reportErrors = false, headMessage?: ts.DiagnosticMessage, intersectionState = IntersectionState.None): ts.Ternary {
            // Before normalization: if `source` is type an object type, and `target` is primitive,
            // skip all the checks we don't need and just return `isSimpleTypeRelatedTo` result
            if (originalSource.flags & ts.TypeFlags.Object && originalTarget.flags & ts.TypeFlags.Primitive) {
                if (relation === comparableRelation && !(originalTarget.flags & ts.TypeFlags.Never) && isSimpleTypeRelatedTo(originalTarget, originalSource, relation) ||
                    isSimpleTypeRelatedTo(originalSource, originalTarget, relation, reportErrors ? reportError : undefined)) {
                    return ts.Ternary.True;
                }
                if (reportErrors) {
                    reportErrorResults(originalSource, originalTarget, originalSource, originalTarget, headMessage);
                }
                return ts.Ternary.False;
            }

            // Normalize the source and target types: Turn fresh literal types into regular literal types,
            // turn deferred type references into regular type references, simplify indexed access and
            // conditional types, and resolve substitution types to either the substitution (on the source
            // side) or the type variable (on the target side).
            const source = getNormalizedType(originalSource, /*writing*/ false);
            let target = getNormalizedType(originalTarget, /*writing*/ true);

            if (source === target) return ts.Ternary.True;

            if (relation === identityRelation) {
                if (source.flags !== target.flags) return ts.Ternary.False;
                if (source.flags & ts.TypeFlags.Singleton) return ts.Ternary.True;
                traceUnionsOrIntersectionsTooLarge(source, target);
                return recursiveTypeRelatedTo(source, target, /*reportErrors*/ false, IntersectionState.None, recursionFlags);
            }

            // We fastpath comparing a type parameter to exactly its constraint, as this is _super_ common,
            // and otherwise, for type parameters in large unions, causes us to need to compare the union to itself,
            // as we break down the _target_ union first, _then_ get the source constraint - so for every
            // member of the target, we attempt to find a match in the source. This avoids that in cases where
            // the target is exactly the constraint.
            if (source.flags & ts.TypeFlags.TypeParameter && getConstraintOfType(source) === target) {
                return ts.Ternary.True;
            }

            // See if we're relating a definitely non-nullable type to a union that includes null and/or undefined
            // plus a single non-nullable type. If so, remove null and/or undefined from the target type.
            if (source.flags & ts.TypeFlags.DefinitelyNonNullable && target.flags & ts.TypeFlags.Union) {
                const types = (target as ts.UnionType).types;
                const candidate = types.length === 2 && types[0].flags & ts.TypeFlags.Nullable ? types[1] :
                    types.length === 3 && types[0].flags & ts.TypeFlags.Nullable && types[1].flags & ts.TypeFlags.Nullable ? types[2] :
                    undefined;
                if (candidate && !(candidate.flags & ts.TypeFlags.Nullable)) {
                    target = getNormalizedType(candidate, /*writing*/ true);
                    if (source === target) return ts.Ternary.True;
                }
            }

            if (relation === comparableRelation && !(target.flags & ts.TypeFlags.Never) && isSimpleTypeRelatedTo(target, source, relation) ||
                isSimpleTypeRelatedTo(source, target, relation, reportErrors ? reportError : undefined)) return ts.Ternary.True;

            if (source.flags & ts.TypeFlags.StructuredOrInstantiable || target.flags & ts.TypeFlags.StructuredOrInstantiable) {
                const isPerformingExcessPropertyChecks = !(intersectionState & IntersectionState.Target) && (isObjectLiteralType(source) && ts.getObjectFlags(source) & ts.ObjectFlags.FreshLiteral);
                if (isPerformingExcessPropertyChecks) {
                    if (hasExcessProperties(source as ts.FreshObjectLiteralType, target, reportErrors)) {
                        if (reportErrors) {
                            reportRelationError(headMessage, source, originalTarget.aliasSymbol ? originalTarget : target);
                        }
                        return ts.Ternary.False;
                    }
                }

                const isPerformingCommonPropertyChecks = (relation !== comparableRelation || isUnitType(source)) &&
                    !(intersectionState & IntersectionState.Target) &&
                    source.flags & (ts.TypeFlags.Primitive | ts.TypeFlags.Object | ts.TypeFlags.Intersection) && source !== globalObjectType &&
                    target.flags & (ts.TypeFlags.Object | ts.TypeFlags.Intersection) && isWeakType(target) &&
                    (getPropertiesOfType(source).length > 0 || typeHasCallOrConstructSignatures(source));
                const isComparingJsxAttributes = !!(ts.getObjectFlags(source) & ts.ObjectFlags.JsxAttributes);
                if (isPerformingCommonPropertyChecks && !hasCommonProperties(source, target, isComparingJsxAttributes)) {
                    if (reportErrors) {
                        const sourceString = typeToString(originalSource.aliasSymbol ? originalSource : source);
                        const targetString = typeToString(originalTarget.aliasSymbol ? originalTarget : target);
                        const calls = getSignaturesOfType(source, ts.SignatureKind.Call);
                        const constructs = getSignaturesOfType(source, ts.SignatureKind.Construct);
                        if (calls.length > 0 && isRelatedTo(getReturnTypeOfSignature(calls[0]), target, RecursionFlags.Source, /*reportErrors*/ false) ||
                            constructs.length > 0 && isRelatedTo(getReturnTypeOfSignature(constructs[0]), target, RecursionFlags.Source, /*reportErrors*/ false)) {
                            reportError(ts.Diagnostics.Value_of_type_0_has_no_properties_in_common_with_type_1_Did_you_mean_to_call_it, sourceString, targetString);
                        }
                        else {
                            reportError(ts.Diagnostics.Type_0_has_no_properties_in_common_with_type_1, sourceString, targetString);
                        }
                    }
                    return ts.Ternary.False;
                }

                traceUnionsOrIntersectionsTooLarge(source, target);

                const skipCaching = source.flags & ts.TypeFlags.Union && (source as ts.UnionType).types.length < 4 && !(target.flags & ts.TypeFlags.Union) ||
                    target.flags & ts.TypeFlags.Union && (target as ts.UnionType).types.length < 4 && !(source.flags & ts.TypeFlags.StructuredOrInstantiable);
                const result = skipCaching ?
                    unionOrIntersectionRelatedTo(source, target, reportErrors, intersectionState) :
                    recursiveTypeRelatedTo(source, target, reportErrors, intersectionState, recursionFlags);
                if (result) {
                    return result;
                }
            }

            if (reportErrors) {
                reportErrorResults(originalSource, originalTarget, source, target, headMessage);
            }
            return ts.Ternary.False;
        }

        function reportErrorResults(originalSource: ts.Type, originalTarget: ts.Type, source: ts.Type, target: ts.Type, headMessage: ts.DiagnosticMessage | undefined) {
            const sourceHasBase = !!getSingleBaseForNonAugmentingSubtype(originalSource);
            const targetHasBase = !!getSingleBaseForNonAugmentingSubtype(originalTarget);
            source = (originalSource.aliasSymbol || sourceHasBase) ? originalSource : source;
            target = (originalTarget.aliasSymbol || targetHasBase) ? originalTarget : target;
            let maybeSuppress = overrideNextErrorInfo > 0;
            if (maybeSuppress) {
                overrideNextErrorInfo--;
            }
            if (source.flags & ts.TypeFlags.Object && target.flags & ts.TypeFlags.Object) {
                const currentError = errorInfo;
                tryElaborateArrayLikeErrors(source, target, /*reportErrors*/ true);
                if (errorInfo !== currentError) {
                    maybeSuppress = !!errorInfo;
                }
            }
            if (source.flags & ts.TypeFlags.Object && target.flags & ts.TypeFlags.Primitive) {
                tryElaborateErrorsForPrimitivesAndObjects(source, target);
            }
            else if (source.symbol && source.flags & ts.TypeFlags.Object && globalObjectType === source) {
                reportError(ts.Diagnostics.The_Object_type_is_assignable_to_very_few_other_types_Did_you_mean_to_use_the_any_type_instead);
            }
            else if (ts.getObjectFlags(source) & ts.ObjectFlags.JsxAttributes && target.flags & ts.TypeFlags.Intersection) {
                const targetTypes = (target as ts.IntersectionType).types;
                const intrinsicAttributes = getJsxType(JsxNames.IntrinsicAttributes, errorNode);
                const intrinsicClassAttributes = getJsxType(JsxNames.IntrinsicClassAttributes, errorNode);
                if (!isErrorType(intrinsicAttributes) && !isErrorType(intrinsicClassAttributes) &&
                    (ts.contains(targetTypes, intrinsicAttributes) || ts.contains(targetTypes, intrinsicClassAttributes))) {
                    // do not report top error
                    return;
                }
            }
            else {
                errorInfo = elaborateNeverIntersection(errorInfo, originalTarget);
            }
            if (!headMessage && maybeSuppress) {
                lastSkippedInfo = [source, target];
                // Used by, eg, missing property checking to replace the top-level message with a more informative one
                return;
            }
            reportRelationError(headMessage, source, target);
            if (source.flags & ts.TypeFlags.TypeParameter && source.symbol?.declarations?.[0] && !getConstraintOfType(source as ts.TypeVariable)) {
                const syntheticParam = cloneTypeParameter(source as ts.TypeParameter);
                syntheticParam.constraint = instantiateType(target, makeUnaryTypeMapper(source, syntheticParam));
                if (hasNonCircularBaseConstraint(syntheticParam)) {
                    const targetConstraintString = typeToString(target, source.symbol.declarations[0]);
                    associateRelatedInfo(ts.createDiagnosticForNode(source.symbol.declarations[0], ts.Diagnostics.This_type_parameter_might_need_an_extends_0_constraint, targetConstraintString));
                }
            }
        }

        function traceUnionsOrIntersectionsTooLarge(source: ts.Type, target: ts.Type): void {
            if (!ts.tracing) {
                return;
            }

            if ((source.flags & ts.TypeFlags.UnionOrIntersection) && (target.flags & ts.TypeFlags.UnionOrIntersection)) {
                const sourceUnionOrIntersection = source as ts.UnionOrIntersectionType;
                const targetUnionOrIntersection = target as ts.UnionOrIntersectionType;

                if (sourceUnionOrIntersection.objectFlags & targetUnionOrIntersection.objectFlags & ts.ObjectFlags.PrimitiveUnion) {
                    // There's a fast path for comparing primitive unions
                    return;
                }

                const sourceSize = sourceUnionOrIntersection.types.length;
                const targetSize = targetUnionOrIntersection.types.length;
                if (sourceSize * targetSize > 1E6) {
                    ts.tracing.instant(ts.tracing.Phase.CheckTypes, "traceUnionsOrIntersectionsTooLarge_DepthLimit", {
                        sourceId: source.id,
                        sourceSize,
                        targetId: target.id,
                        targetSize,
                        pos: errorNode?.pos,
                        end: errorNode?.end
                    });
                }
            }
        }

        function getTypeOfPropertyInTypes(types: ts.Type[], name: ts.__String) {
            const appendPropType = (propTypes: ts.Type[] | undefined, type: ts.Type) => {
                type = getApparentType(type);
                const prop = type.flags & ts.TypeFlags.UnionOrIntersection ? getPropertyOfUnionOrIntersectionType(type as ts.UnionOrIntersectionType, name) : getPropertyOfObjectType(type, name);
                const propType = prop && getTypeOfSymbol(prop) || getApplicableIndexInfoForName(type, name)?.type || undefinedType;
                return ts.append(propTypes, propType);
            };
            return getUnionType(ts.reduceLeft(types, appendPropType, /*initial*/ undefined) || ts.emptyArray);
        }

        function hasExcessProperties(source: ts.FreshObjectLiteralType, target: ts.Type, reportErrors: boolean): boolean {
            if (!isExcessPropertyCheckTarget(target) || !noImplicitAny && ts.getObjectFlags(target) & ts.ObjectFlags.JSLiteral) {
                return false; // Disable excess property checks on JS literals to simulate having an implicit "index signature" - but only outside of noImplicitAny
            }
            const isComparingJsxAttributes = !!(ts.getObjectFlags(source) & ts.ObjectFlags.JsxAttributes);
            if ((relation === assignableRelation || relation === comparableRelation) &&
                (isTypeSubsetOf(globalObjectType, target) || (!isComparingJsxAttributes && isEmptyObjectType(target)))) {
                return false;
            }
            let reducedTarget = target;
            let checkTypes: ts.Type[] | undefined;
            if (target.flags & ts.TypeFlags.Union) {
                reducedTarget = findMatchingDiscriminantType(source, target as ts.UnionType, isRelatedTo) || filterPrimitivesIfContainsNonPrimitive(target as ts.UnionType);
                checkTypes = reducedTarget.flags & ts.TypeFlags.Union ? (reducedTarget as ts.UnionType).types : [reducedTarget];
            }
            for (const prop of getPropertiesOfType(source)) {
                if (shouldCheckAsExcessProperty(prop, source.symbol) && !isIgnoredJsxProperty(source, prop)) {
                    if (!isKnownProperty(reducedTarget, prop.escapedName, isComparingJsxAttributes)) {
                        if (reportErrors) {
                            // Report error in terms of object types in the target as those are the only ones
                            // we check in isKnownProperty.
                            const errorTarget = filterType(reducedTarget, isExcessPropertyCheckTarget);
                            // We know *exactly* where things went wrong when comparing the types.
                            // Use this property as the error node as this will be more helpful in
                            // reasoning about what went wrong.
                            if (!errorNode) return ts.Debug.fail();
                            if (ts.isJsxAttributes(errorNode) || ts.isJsxOpeningLikeElement(errorNode) || ts.isJsxOpeningLikeElement(errorNode.parent)) {
                                // JsxAttributes has an object-literal flag and undergo same type-assignablity check as normal object-literal.
                                // However, using an object-literal error message will be very confusing to the users so we give different a message.
                                if (prop.valueDeclaration && ts.isJsxAttribute(prop.valueDeclaration) && ts.getSourceFileOfNode(errorNode) === ts.getSourceFileOfNode(prop.valueDeclaration.name)) {
                                    // Note that extraneous children (as in `<NoChild>extra</NoChild>`) don't pass this check,
                                    // since `children` is a SyntaxKind.PropertySignature instead of a SyntaxKind.JsxAttribute.
                                    errorNode = prop.valueDeclaration.name;
                                }
                                const propName = symbolToString(prop);
                                const suggestionSymbol = getSuggestedSymbolForNonexistentJSXAttribute(propName, errorTarget);
                                const suggestion = suggestionSymbol ? symbolToString(suggestionSymbol) : undefined;
                                if (suggestion) {
                                    reportError(ts.Diagnostics.Property_0_does_not_exist_on_type_1_Did_you_mean_2, propName, typeToString(errorTarget), suggestion);
                                }
                                else {
                                    reportError(ts.Diagnostics.Property_0_does_not_exist_on_type_1, propName, typeToString(errorTarget));
                                }
                            }
                            else {
                                // use the property's value declaration if the property is assigned inside the literal itself
                                const objectLiteralDeclaration = source.symbol?.declarations && ts.firstOrUndefined(source.symbol.declarations);
                                let suggestion: string | undefined;
                                if (prop.valueDeclaration && ts.findAncestor(prop.valueDeclaration, d => d === objectLiteralDeclaration) && ts.getSourceFileOfNode(objectLiteralDeclaration) === ts.getSourceFileOfNode(errorNode)) {
                                    const propDeclaration = prop.valueDeclaration as ts.ObjectLiteralElementLike;
                                    ts.Debug.assertNode(propDeclaration, ts.isObjectLiteralElementLike);

                                    errorNode = propDeclaration;

                                    const name = propDeclaration.name!;
                                    if (ts.isIdentifier(name)) {
                                        suggestion = getSuggestionForNonexistentProperty(name, errorTarget);
                                    }
                                }
                                if (suggestion !== undefined) {
                                    reportError(ts.Diagnostics.Object_literal_may_only_specify_known_properties_but_0_does_not_exist_in_type_1_Did_you_mean_to_write_2,
                                        symbolToString(prop), typeToString(errorTarget), suggestion);
                                }
                                else {
                                    reportError(ts.Diagnostics.Object_literal_may_only_specify_known_properties_and_0_does_not_exist_in_type_1,
                                        symbolToString(prop), typeToString(errorTarget));
                                }
                            }
                        }
                        return true;
                    }
                    if (checkTypes && !isRelatedTo(getTypeOfSymbol(prop), getTypeOfPropertyInTypes(checkTypes, prop.escapedName), RecursionFlags.Both, reportErrors)) {
                        if (reportErrors) {
                            reportIncompatibleError(ts.Diagnostics.Types_of_property_0_are_incompatible, symbolToString(prop));
                        }
                        return true;
                    }
                }
            }
            return false;
        }

        function shouldCheckAsExcessProperty(prop: ts.Symbol, container: ts.Symbol) {
            return prop.valueDeclaration && container.valueDeclaration && prop.valueDeclaration.parent === container.valueDeclaration;
        }

        function unionOrIntersectionRelatedTo(source: ts.Type, target: ts.Type, reportErrors: boolean, intersectionState: IntersectionState): ts.Ternary {
            // Note that these checks are specifically ordered to produce correct results. In particular,
            // we need to deconstruct unions before intersections (because unions are always at the top),
            // and we need to handle "each" relations before "some" relations for the same kind of type.
            if (source.flags & ts.TypeFlags.Union) {
                return relation === comparableRelation ?
                    someTypeRelatedToType(source as ts.UnionType, target, reportErrors && !(source.flags & ts.TypeFlags.Primitive), intersectionState) :
                    eachTypeRelatedToType(source as ts.UnionType, target, reportErrors && !(source.flags & ts.TypeFlags.Primitive), intersectionState);
            }
            if (target.flags & ts.TypeFlags.Union) {
                return typeRelatedToSomeType(getRegularTypeOfObjectLiteral(source), target as ts.UnionType, reportErrors && !(source.flags & ts.TypeFlags.Primitive) && !(target.flags & ts.TypeFlags.Primitive));
            }
            if (target.flags & ts.TypeFlags.Intersection) {
                return typeRelatedToEachType(source, target as ts.IntersectionType, reportErrors, IntersectionState.Target);
            }
            // Source is an intersection. For the comparable relation, if the target is a primitive type we hoist the
            // constraints of all non-primitive types in the source into a new intersection. We do this because the
            // intersection may further constrain the constraints of the non-primitive types. For example, given a type
            // parameter 'T extends 1 | 2', the intersection 'T & 1' should be reduced to '1' such that it doesn't
            // appear to be comparable to '2'.
            if (relation === comparableRelation && target.flags & ts.TypeFlags.Primitive) {
                const constraints = ts.sameMap((source as ts.IntersectionType).types, t => t.flags & ts.TypeFlags.Instantiable ? getBaseConstraintOfType(t) || unknownType : t);
                if (constraints !== (source as ts.IntersectionType).types) {
                    source = getIntersectionType(constraints);
                    if (source.flags & ts.TypeFlags.Never) {
                        return ts.Ternary.False;
                    }
                    if (!(source.flags & ts.TypeFlags.Intersection)) {
                        return isRelatedTo(source, target, RecursionFlags.Source, /*reportErrors*/ false) ||
                            isRelatedTo(target, source, RecursionFlags.Source, /*reportErrors*/ false);
                    }
                }
            }
            // Check to see if any constituents of the intersection are immediately related to the target.
            // Don't report errors though. Elaborating on whether a source constituent is related to the target is
            // not actually useful and leads to some confusing error messages. Instead, we rely on the caller
            // checking whether the full intersection viewed as an object is related to the target.
            return someTypeRelatedToType(source as ts.IntersectionType, target, /*reportErrors*/ false, IntersectionState.Source);
        }

        function eachTypeRelatedToSomeType(source: ts.UnionOrIntersectionType, target: ts.UnionOrIntersectionType): ts.Ternary {
            let result = ts.Ternary.True;
            const sourceTypes = source.types;
            for (const sourceType of sourceTypes) {
                const related = typeRelatedToSomeType(sourceType, target, /*reportErrors*/ false);
                if (!related) {
                    return ts.Ternary.False;
                }
                result &= related;
            }
            return result;
        }

        function typeRelatedToSomeType(source: ts.Type, target: ts.UnionOrIntersectionType, reportErrors: boolean): ts.Ternary {
            const targetTypes = target.types;
            if (target.flags & ts.TypeFlags.Union) {
                if (containsType(targetTypes, source)) {
                    return ts.Ternary.True;
                }
                const match = getMatchingUnionConstituentForType(target as ts.UnionType, source);
                if (match) {
                    const related = isRelatedTo(source, match, RecursionFlags.Target, /*reportErrors*/ false);
                    if (related) {
                        return related;
                    }
                }
            }
            for (const type of targetTypes) {
                const related = isRelatedTo(source, type, RecursionFlags.Target, /*reportErrors*/ false);
                if (related) {
                    return related;
                }
            }
            if (reportErrors) {
                // Elaborate only if we can find a best matching type in the target union
                const bestMatchingType = getBestMatchingType(source, target, isRelatedTo);
                if (bestMatchingType) {
                    isRelatedTo(source, bestMatchingType, RecursionFlags.Target, /*reportErrors*/ true);
                }
            }
            return ts.Ternary.False;
        }

        function typeRelatedToEachType(source: ts.Type, target: ts.IntersectionType, reportErrors: boolean, intersectionState: IntersectionState): ts.Ternary {
            let result = ts.Ternary.True;
            const targetTypes = target.types;
            for (const targetType of targetTypes) {
                const related = isRelatedTo(source, targetType, RecursionFlags.Target, reportErrors, /*headMessage*/ undefined, intersectionState);
                if (!related) {
                    return ts.Ternary.False;
                }
                result &= related;
            }
            return result;
        }

        function someTypeRelatedToType(source: ts.UnionOrIntersectionType, target: ts.Type, reportErrors: boolean, intersectionState: IntersectionState): ts.Ternary {
            const sourceTypes = source.types;
            if (source.flags & ts.TypeFlags.Union && containsType(sourceTypes, target)) {
                return ts.Ternary.True;
            }
            const len = sourceTypes.length;
            for (let i = 0; i < len; i++) {
                const related = isRelatedTo(sourceTypes[i], target, RecursionFlags.Source, reportErrors && i === len - 1, /*headMessage*/ undefined, intersectionState);
                if (related) {
                    return related;
                }
            }
            return ts.Ternary.False;
        }

        function getUndefinedStrippedTargetIfNeeded(source: ts.Type, target: ts.Type) {
            // As a builtin type, `undefined` is a very low type ID - making it almsot always first, making this a very fast check to see
            // if we need to strip `undefined` from the target
            if (source.flags & ts.TypeFlags.Union && target.flags & ts.TypeFlags.Union &&
                !((source as ts.UnionType).types[0].flags & ts.TypeFlags.Undefined) && (target as ts.UnionType).types[0].flags & ts.TypeFlags.Undefined) {
                return extractTypesOfKind(target, ~ts.TypeFlags.Undefined);
            }
            return target;
        }

        function eachTypeRelatedToType(source: ts.UnionOrIntersectionType, target: ts.Type, reportErrors: boolean, intersectionState: IntersectionState): ts.Ternary {
            let result = ts.Ternary.True;
            const sourceTypes = source.types;
            // We strip `undefined` from the target if the `source` trivially doesn't contain it for our correspondence-checking fastpath
            // since `undefined` is frequently added by optionality and would otherwise spoil a potentially useful correspondence
            const undefinedStrippedTarget = getUndefinedStrippedTargetIfNeeded(source, target as ts.UnionType);
            for (let i = 0; i < sourceTypes.length; i++) {
                const sourceType = sourceTypes[i];
                if (undefinedStrippedTarget.flags & ts.TypeFlags.Union && sourceTypes.length >= (undefinedStrippedTarget as ts.UnionType).types.length && sourceTypes.length % (undefinedStrippedTarget as ts.UnionType).types.length === 0) {
                    // many unions are mappings of one another; in such cases, simply comparing members at the same index can shortcut the comparison
                    // such unions will have identical lengths, and their corresponding elements will match up. Another common scenario is where a large
                    // union has a union of objects intersected with it. In such cases, if the input was, eg `("a" | "b" | "c") & (string | boolean | {} | {whatever})`,
                    // the result will have the structure `"a" | "b" | "c" | "a" & {} | "b" & {} | "c" & {} | "a" & {whatever} | "b" & {whatever} | "c" & {whatever}`
                    // - the resulting union has a length which is a multiple of the original union, and the elements correspond modulo the length of the original union
                    const related = isRelatedTo(sourceType, (undefinedStrippedTarget as ts.UnionType).types[i % (undefinedStrippedTarget as ts.UnionType).types.length], RecursionFlags.Both, /*reportErrors*/ false, /*headMessage*/ undefined, intersectionState);
                    if (related) {
                        result &= related;
                        continue;
                    }
                }
                const related = isRelatedTo(sourceType, target, RecursionFlags.Source, reportErrors, /*headMessage*/ undefined, intersectionState);
                if (!related) {
                    return ts.Ternary.False;
                }
                result &= related;
            }
            return result;
        }

        function typeArgumentsRelatedTo(sources: readonly ts.Type[] = ts.emptyArray, targets: readonly ts.Type[] = ts.emptyArray, variances: readonly ts.VarianceFlags[] = ts.emptyArray, reportErrors: boolean, intersectionState: IntersectionState): ts.Ternary {
            if (sources.length !== targets.length && relation === identityRelation) {
                return ts.Ternary.False;
            }
            const length = sources.length <= targets.length ? sources.length : targets.length;
            let result = ts.Ternary.True;
            for (let i = 0; i < length; i++) {
                // When variance information isn't available we default to covariance. This happens
                // in the process of computing variance information for recursive types and when
                // comparing 'this' type arguments.
                const varianceFlags = i < variances.length ? variances[i] : ts.VarianceFlags.Covariant;
                const variance = varianceFlags & ts.VarianceFlags.VarianceMask;
                // We ignore arguments for independent type parameters (because they're never witnessed).
                if (variance !== ts.VarianceFlags.Independent) {
                    const s = sources[i];
                    const t = targets[i];
                    let related = ts.Ternary.True;
                    if (varianceFlags & ts.VarianceFlags.Unmeasurable) {
                        // Even an `Unmeasurable` variance works out without a structural check if the source and target are _identical_.
                        // We can't simply assume invariance, because `Unmeasurable` marks nonlinear relations, for example, a relation tained by
                        // the `-?` modifier in a mapped type (where, no matter how the inputs are related, the outputs still might not be)
                        related = relation === identityRelation ? isRelatedTo(s, t, RecursionFlags.Both, /*reportErrors*/ false) : compareTypesIdentical(s, t);
                    }
                    else if (variance === ts.VarianceFlags.Covariant) {
                        related = isRelatedTo(s, t, RecursionFlags.Both, reportErrors, /*headMessage*/ undefined, intersectionState);
                    }
                    else if (variance === ts.VarianceFlags.Contravariant) {
                        related = isRelatedTo(t, s, RecursionFlags.Both, reportErrors, /*headMessage*/ undefined, intersectionState);
                    }
                    else if (variance === ts.VarianceFlags.Bivariant) {
                        // In the bivariant case we first compare contravariantly without reporting
                        // errors. Then, if that doesn't succeed, we compare covariantly with error
                        // reporting. Thus, error elaboration will be based on the the covariant check,
                        // which is generally easier to reason about.
                        related = isRelatedTo(t, s, RecursionFlags.Both, /*reportErrors*/ false);
                        if (!related) {
                            related = isRelatedTo(s, t, RecursionFlags.Both, reportErrors, /*headMessage*/ undefined, intersectionState);
                        }
                    }
                    else {
                        // In the invariant case we first compare covariantly, and only when that
                        // succeeds do we proceed to compare contravariantly. Thus, error elaboration
                        // will typically be based on the covariant check.
                        related = isRelatedTo(s, t, RecursionFlags.Both, reportErrors, /*headMessage*/ undefined, intersectionState);
                        if (related) {
                            related &= isRelatedTo(t, s, RecursionFlags.Both, reportErrors, /*headMessage*/ undefined, intersectionState);
                        }
                    }
                    if (!related) {
                        return ts.Ternary.False;
                    }
                    result &= related;
                }
            }
            return result;
        }

        // Determine if possibly recursive types are related. First, check if the result is already available in the global cache.
        // Second, check if we have already started a comparison of the given two types in which case we assume the result to be true.
        // Third, check if both types are part of deeply nested chains of generic type instantiations and if so assume the types are
        // equal and infinitely expanding. Fourth, if we have reached a depth of 100 nested comparisons, assume we have runaway recursion
        // and issue an error. Otherwise, actually compare the structure of the two types.
        function recursiveTypeRelatedTo(source: ts.Type, target: ts.Type, reportErrors: boolean, intersectionState: IntersectionState, recursionFlags: RecursionFlags): ts.Ternary {
            if (overflow) {
                return ts.Ternary.False;
            }
            const id = getRelationKey(source, target, intersectionState, relation, /*ingnoreConstraints*/ false);
            const entry = relation.get(id);
            if (entry !== undefined) {
                if (reportErrors && entry & ts.RelationComparisonResult.Failed && !(entry & ts.RelationComparisonResult.Reported)) {
                    // We are elaborating errors and the cached result is an unreported failure. The result will be reported
                    // as a failure, and should be updated as a reported failure by the bottom of this function.
                }
                else {
                    if (outofbandVarianceMarkerHandler) {
                        // We're in the middle of variance checking - integrate any unmeasurable/unreliable flags from this cached component
                        const saved = entry & ts.RelationComparisonResult.ReportsMask;
                        if (saved & ts.RelationComparisonResult.ReportsUnmeasurable) {
                            instantiateType(source, reportUnmeasurableMapper);
                        }
                        if (saved & ts.RelationComparisonResult.ReportsUnreliable) {
                            instantiateType(source, reportUnreliableMapper);
                        }
                    }
                    return entry & ts.RelationComparisonResult.Succeeded ? ts.Ternary.True : ts.Ternary.False;
                }
            }
            if (!maybeKeys) {
                maybeKeys = [];
                sourceStack = [];
                targetStack = [];
            }
            else {
                // A key that starts with "*" is an indication that we have type references that reference constrained
                // type parameters. For such keys we also check against the key we would have gotten if all type parameters
                // were unconstrained.
                const broadestEquivalentId = id.startsWith("*") ? getRelationKey(source, target, intersectionState, relation, /*ignoreConstraints*/ true) : undefined;
                for (let i = 0; i < maybeCount; i++) {
                    // If source and target are already being compared, consider them related with assumptions
                    if (id === maybeKeys[i] || broadestEquivalentId && broadestEquivalentId === maybeKeys[i]) {
                        return ts.Ternary.Maybe;
                    }
                }
                if (sourceDepth === 100 || targetDepth === 100) {
                    overflow = true;
                    return ts.Ternary.False;
                }
            }
            const maybeStart = maybeCount;
            maybeKeys[maybeCount] = id;
            maybeCount++;
            const saveExpandingFlags = expandingFlags;
            if (recursionFlags & RecursionFlags.Source) {
                sourceStack[sourceDepth] = source;
                sourceDepth++;
                if (!(expandingFlags & ExpandingFlags.Source) && isDeeplyNestedType(source, sourceStack, sourceDepth)) expandingFlags |= ExpandingFlags.Source;
            }
            if (recursionFlags & RecursionFlags.Target) {
                targetStack[targetDepth] = target;
                targetDepth++;
                if (!(expandingFlags & ExpandingFlags.Target) && isDeeplyNestedType(target, targetStack, targetDepth)) expandingFlags |= ExpandingFlags.Target;
            }
            let originalHandler: typeof outofbandVarianceMarkerHandler;
            let propagatingVarianceFlags: ts.RelationComparisonResult = 0;
            if (outofbandVarianceMarkerHandler) {
                originalHandler = outofbandVarianceMarkerHandler;
                outofbandVarianceMarkerHandler = onlyUnreliable => {
                    propagatingVarianceFlags |= onlyUnreliable ? ts.RelationComparisonResult.ReportsUnreliable : ts.RelationComparisonResult.ReportsUnmeasurable;
                    return originalHandler!(onlyUnreliable);
                };
            }

            let result: ts.Ternary;
            if (expandingFlags === ExpandingFlags.Both) {
                ts.tracing?.instant(ts.tracing.Phase.CheckTypes, "recursiveTypeRelatedTo_DepthLimit", {
                    sourceId: source.id,
                    sourceIdStack: sourceStack.map(t => t.id),
                    targetId: target.id,
                    targetIdStack: targetStack.map(t => t.id),
                    depth: sourceDepth,
                    targetDepth
                });
                result = ts.Ternary.Maybe;
            }
            else {
                ts.tracing?.push(ts.tracing.Phase.CheckTypes, "structuredTypeRelatedTo", { sourceId: source.id, targetId: target.id });
                result = structuredTypeRelatedTo(source, target, reportErrors, intersectionState);
                ts.tracing?.pop();
            }

            if (outofbandVarianceMarkerHandler) {
                outofbandVarianceMarkerHandler = originalHandler;
            }
            if (recursionFlags & RecursionFlags.Source) {
                sourceDepth--;
            }
            if (recursionFlags & RecursionFlags.Target) {
                targetDepth--;
            }
            expandingFlags = saveExpandingFlags;
            if (result) {
                if (result === ts.Ternary.True || (sourceDepth === 0 && targetDepth === 0)) {
                    if (result === ts.Ternary.True || result === ts.Ternary.Maybe) {
                        // If result is definitely true, record all maybe keys as having succeeded. Also, record Ternary.Maybe
                        // results as having succeeded once we reach depth 0, but never record Ternary.Unknown results.
                        for (let i = maybeStart; i < maybeCount; i++) {
                            relation.set(maybeKeys[i], ts.RelationComparisonResult.Succeeded | propagatingVarianceFlags);
                        }
                    }
                    maybeCount = maybeStart;
                }
            }
            else {
                // A false result goes straight into global cache (when something is false under
                // assumptions it will also be false without assumptions)
                relation.set(id, (reportErrors ? ts.RelationComparisonResult.Reported : 0) | ts.RelationComparisonResult.Failed | propagatingVarianceFlags);
                maybeCount = maybeStart;
            }
            return result;
        }

        function structuredTypeRelatedTo(source: ts.Type, target: ts.Type, reportErrors: boolean, intersectionState: IntersectionState): ts.Ternary {
            const saveErrorInfo = captureErrorCalculationState();
            let result = structuredTypeRelatedToWorker(source, target, reportErrors, intersectionState, saveErrorInfo);
            if (relation !== identityRelation) {
                // The combined constraint of an intersection type is the intersection of the constraints of
                // the constituents. When an intersection type contains instantiable types with union type
                // constraints, there are situations where we need to examine the combined constraint. One is
                // when the target is a union type. Another is when the intersection contains types belonging
                // to one of the disjoint domains. For example, given type variables T and U, each with the
                // constraint 'string | number', the combined constraint of 'T & U' is 'string | number' and
                // we need to check this constraint against a union on the target side. Also, given a type
                // variable V constrained to 'string | number', 'V & number' has a combined constraint of
                // 'string & number | number & number' which reduces to just 'number'.
                // This also handles type parameters, as a type parameter with a union constraint compared against a union
                // needs to have its constraint hoisted into an intersection with said type parameter, this way
                // the type param can be compared with itself in the target (with the influence of its constraint to match other parts)
                // For example, if `T extends 1 | 2` and `U extends 2 | 3` and we compare `T & U` to `T & U & (1 | 2 | 3)`
                if (!result && (source.flags & ts.TypeFlags.Intersection || source.flags & ts.TypeFlags.TypeParameter && target.flags & ts.TypeFlags.Union)) {
                    const constraint = getEffectiveConstraintOfIntersection(source.flags & ts.TypeFlags.Intersection ? (source as ts.IntersectionType).types: [source], !!(target.flags & ts.TypeFlags.Union));
                    if (constraint && everyType(constraint, c => c !== source)) { // Skip comparison if expansion contains the source itself
                        // TODO: Stack errors so we get a pyramid for the "normal" comparison above, _and_ a second for this
                        result = isRelatedTo(constraint, target, RecursionFlags.Source, /*reportErrors*/ false, /*headMessage*/ undefined, intersectionState);
                    }
                }
                // For certain combinations involving intersections and optional, excess, or mismatched properties we need
                // an extra property check where the intersection is viewed as a single object. The following are motivating
                // examples that all should be errors, but aren't without this extra property check:
                //
                //   let obj: { a: { x: string } } & { c: number } = { a: { x: 'hello', y: 2 }, c: 5 };  // Nested excess property
                //
                //   declare let wrong: { a: { y: string } };
                //   let weak: { a?: { x?: number } } & { c?: string } = wrong;  // Nested weak object type
                //
                //   function foo<T extends object>(x: { a?: string }, y: T & { a: boolean }) {
                //     x = y;  // Mismatched property in source intersection
                //   }
                //
                // We suppress recursive intersection property checks because they can generate lots of work when relating
                // recursive intersections that are structurally similar but not exactly identical. See #37854.
                if (result && !inPropertyCheck && (
                    target.flags & ts.TypeFlags.Intersection && !isGenericObjectType(target) && source.flags & (ts.TypeFlags.Object | ts.TypeFlags.Intersection) ||
                    isNonGenericObjectType(target) && !isArrayOrTupleType(target) && source.flags & ts.TypeFlags.Intersection && getApparentType(source).flags & ts.TypeFlags.StructuredType && !ts.some((source as ts.IntersectionType).types, t => !!(ts.getObjectFlags(t) & ts.ObjectFlags.NonInferrableType)))) {
                    inPropertyCheck = true;
                    result &= propertiesRelatedTo(source, target, reportErrors, /*excludedProperties*/ undefined, IntersectionState.None);
                    inPropertyCheck = false;
                }
            }
            if (result) {
                resetErrorInfo(saveErrorInfo);
            }
            return result;
        }

        function structuredTypeRelatedToWorker(source: ts.Type, target: ts.Type, reportErrors: boolean, intersectionState: IntersectionState, saveErrorInfo: ReturnType<typeof captureErrorCalculationState>): ts.Ternary {
            let result: ts.Ternary;
            let originalErrorInfo: ts.DiagnosticMessageChain | undefined;
            let varianceCheckFailed = false;
            let sourceFlags = source.flags;
            const targetFlags = target.flags;
            if (relation === identityRelation) {
                // We've already checked that source.flags and target.flags are identical
                if (sourceFlags & ts.TypeFlags.UnionOrIntersection) {
                    let result = eachTypeRelatedToSomeType(source as ts.UnionOrIntersectionType, target as ts.UnionOrIntersectionType);
                    if (result) {
                        result &= eachTypeRelatedToSomeType(target as ts.UnionOrIntersectionType, source as ts.UnionOrIntersectionType);
                    }
                    return result;
                }
                if (sourceFlags & ts.TypeFlags.Index) {
                    return isRelatedTo((source as ts.IndexType).type, (target as ts.IndexType).type, RecursionFlags.Both, /*reportErrors*/ false);
                }
                if (sourceFlags & ts.TypeFlags.IndexedAccess) {
                    if (result = isRelatedTo((source as ts.IndexedAccessType).objectType, (target as ts.IndexedAccessType).objectType, RecursionFlags.Both, /*reportErrors*/ false)) {
                        if (result &= isRelatedTo((source as ts.IndexedAccessType).indexType, (target as ts.IndexedAccessType).indexType, RecursionFlags.Both, /*reportErrors*/ false)) {
                            return result;
                        }
                    }
                }
                if (sourceFlags & ts.TypeFlags.Conditional) {
                    if ((source as ts.ConditionalType).root.isDistributive === (target as ts.ConditionalType).root.isDistributive) {
                        if (result = isRelatedTo((source as ts.ConditionalType).checkType, (target as ts.ConditionalType).checkType, RecursionFlags.Both, /*reportErrors*/ false)) {
                            if (result &= isRelatedTo((source as ts.ConditionalType).extendsType, (target as ts.ConditionalType).extendsType, RecursionFlags.Both, /*reportErrors*/ false)) {
                                if (result &= isRelatedTo(getTrueTypeFromConditionalType(source as ts.ConditionalType), getTrueTypeFromConditionalType(target as ts.ConditionalType), RecursionFlags.Both, /*reportErrors*/ false)) {
                                    if (result &= isRelatedTo(getFalseTypeFromConditionalType(source as ts.ConditionalType), getFalseTypeFromConditionalType(target as ts.ConditionalType), RecursionFlags.Both, /*reportErrors*/ false)) {
                                        return result;
                                    }
                                }
                            }
                        }
                    }
                }
                if (sourceFlags & ts.TypeFlags.Substitution) {
                    if (result = isRelatedTo((source as ts.SubstitutionType).baseType, (target as ts.SubstitutionType).baseType, RecursionFlags.Both, /*reportErrors*/ false)) {
                        if (result &= isRelatedTo((source as ts.SubstitutionType).constraint, (target as ts.SubstitutionType).constraint, RecursionFlags.Both, /*reportErrors*/ false)) {
                            return result;
                        }
                    }
                }
                if (!(sourceFlags & ts.TypeFlags.Object)) {
                    return ts.Ternary.False;
                }
            }
            else if (sourceFlags & ts.TypeFlags.UnionOrIntersection || targetFlags & ts.TypeFlags.UnionOrIntersection) {
                if (result = unionOrIntersectionRelatedTo(source, target, reportErrors, intersectionState)) {
                    return result;
                }
                // The ordered decomposition above doesn't handle all cases. Specifically, we also need to handle:
                // Source is instantiable (e.g. source has union or intersection constraint).
                // Source is an object, target is a union (e.g. { a, b: boolean } <=> { a, b: true } | { a, b: false }).
                // Source is an intersection, target is an object (e.g. { a } & { b } <=> { a, b }).
                // Source is an intersection, target is a union (e.g. { a } & { b: boolean } <=> { a, b: true } | { a, b: false }).
                // Source is an intersection, target instantiable (e.g. string & { tag } <=> T["a"] constrained to string & { tag }).
                if (!(sourceFlags & ts.TypeFlags.Instantiable ||
                    sourceFlags & ts.TypeFlags.Object && targetFlags & ts.TypeFlags.Union ||
                    sourceFlags & ts.TypeFlags.Intersection && targetFlags & (ts.TypeFlags.Object | ts.TypeFlags.Union | ts.TypeFlags.Instantiable))) {
                    return ts.Ternary.False;
                }
            }

            // We limit alias variance probing to only object and conditional types since their alias behavior
            // is more predictable than other, interned types, which may or may not have an alias depending on
            // the order in which things were checked.
            if (sourceFlags & (ts.TypeFlags.Object | ts.TypeFlags.Conditional) && source.aliasSymbol && source.aliasTypeArguments &&
                source.aliasSymbol === target.aliasSymbol && !(isMarkerType(source) || isMarkerType(target))) {
                const variances = getAliasVariances(source.aliasSymbol);
                if (variances === ts.emptyArray) {
                    return ts.Ternary.Unknown;
                }
                const varianceResult = relateVariances(source.aliasTypeArguments, target.aliasTypeArguments, variances, intersectionState);
                if (varianceResult !== undefined) {
                    return varianceResult;
                }
            }

            // For a generic type T and a type U that is assignable to T, [...U] is assignable to T, U is assignable to readonly [...T],
            // and U is assignable to [...T] when U is constrained to a mutable array or tuple type.
            if (isSingleElementGenericTupleType(source) && !source.target.readonly && (result = isRelatedTo(getTypeArguments(source)[0], target, RecursionFlags.Source)) ||
                isSingleElementGenericTupleType(target) && (target.target.readonly || isMutableArrayOrTuple(getBaseConstraintOfType(source) || source)) && (result = isRelatedTo(source, getTypeArguments(target)[0], RecursionFlags.Target))) {
                return result;
            }

            if (targetFlags & ts.TypeFlags.TypeParameter) {
                // A source type { [P in Q]: X } is related to a target type T if keyof T is related to Q and X is related to T[Q].
                if (ts.getObjectFlags(source) & ts.ObjectFlags.Mapped && !(source as ts.MappedType).declaration.nameType && isRelatedTo(getIndexType(target), getConstraintTypeFromMappedType(source as ts.MappedType), RecursionFlags.Both)) {

                    if (!(getMappedTypeModifiers(source as ts.MappedType) & MappedTypeModifiers.IncludeOptional)) {
                        const templateType = getTemplateTypeFromMappedType(source as ts.MappedType);
                        const indexedAccessType = getIndexedAccessType(target, getTypeParameterFromMappedType(source as ts.MappedType));
                        if (result = isRelatedTo(templateType, indexedAccessType, RecursionFlags.Both, reportErrors)) {
                            return result;
                        }
                    }
                }
                if (relation === comparableRelation && sourceFlags & ts.TypeFlags.TypeParameter) {
                    // This is a carve-out in comparability to essentially forbid comparing a type parameter
                    // with another type parameter unless one extends the other. (Remember: comparability is mostly bidirectional!)
                    let constraint = getConstraintOfTypeParameter(source);
                    if (constraint && hasNonCircularBaseConstraint(source)) {
                        while (constraint && someType(constraint, c => !!(c.flags & ts.TypeFlags.TypeParameter))) {
                            if (result = isRelatedTo(constraint, target, RecursionFlags.Source, /*reportErrors*/ false)) {
                                return result;
                            }
                            constraint = getConstraintOfTypeParameter(constraint);
                        }
                    }
                    return ts.Ternary.False;
                }
            }
            else if (targetFlags & ts.TypeFlags.Index) {
                const targetType = (target as ts.IndexType).type;
                // A keyof S is related to a keyof T if T is related to S.
                if (sourceFlags & ts.TypeFlags.Index) {
                    if (result = isRelatedTo(targetType, (source as ts.IndexType).type, RecursionFlags.Both, /*reportErrors*/ false)) {
                        return result;
                    }
                }
                if (isTupleType(targetType)) {
                    // An index type can have a tuple type target when the tuple type contains variadic elements.
                    // Check if the source is related to the known keys of the tuple type.
                    if (result = isRelatedTo(source, getKnownKeysOfTupleType(targetType), RecursionFlags.Target, reportErrors)) {
                        return result;
                    }
                }
                else {
                    // A type S is assignable to keyof T if S is assignable to keyof C, where C is the
                    // simplified form of T or, if T doesn't simplify, the constraint of T.
                    const constraint = getSimplifiedTypeOrConstraint(targetType);
                    if (constraint) {
                        // We require Ternary.True here such that circular constraints don't cause
                        // false positives. For example, given 'T extends { [K in keyof T]: string }',
                        // 'keyof T' has itself as its constraint and produces a Ternary.Maybe when
                        // related to other types.
                        if (isRelatedTo(source, getIndexType(constraint, (target as ts.IndexType).stringsOnly), RecursionFlags.Target, reportErrors) === ts.Ternary.True) {
                            return ts.Ternary.True;
                        }
                    }
                    else if (isGenericMappedType(targetType)) {
                        // generic mapped types that don't simplify or have a constraint still have a very simple set of keys we can compare against
                        // - their nameType or constraintType.
                        // In many ways, this comparison is a deferred version of what `getIndexTypeForMappedType` does to actually resolve the keys for _non_-generic types

                        const nameType = getNameTypeFromMappedType(targetType);
                        const constraintType = getConstraintTypeFromMappedType(targetType);
                        let targetKeys;
                        if (nameType && isMappedTypeWithKeyofConstraintDeclaration(targetType)) {
                            // we need to get the apparent mappings and union them with the generic mappings, since some properties may be
                            // missing from the `constraintType` which will otherwise be mapped in the object
                            const modifiersType = getApparentType(getModifiersTypeFromMappedType(targetType));
                            const mappedKeys: ts.Type[] = [];
                            forEachMappedTypePropertyKeyTypeAndIndexSignatureKeyType(
                                modifiersType,
                                ts.TypeFlags.StringOrNumberLiteralOrUnique,
                                /*stringsOnly*/ false,
                                t => void mappedKeys.push(instantiateType(nameType, appendTypeMapping(targetType.mapper, getTypeParameterFromMappedType(targetType), t)))
                            );
                            // We still need to include the non-apparent (and thus still generic) keys in the target side of the comparison (in case they're in the source side)
                            targetKeys = getUnionType([...mappedKeys, nameType]);
                        }
                        else {
                            targetKeys = nameType || constraintType;
                        }
                        if (isRelatedTo(source, targetKeys, RecursionFlags.Target, reportErrors) === ts.Ternary.True) {
                            return ts.Ternary.True;
                        }
                    }
                }
            }
            else if (targetFlags & ts.TypeFlags.IndexedAccess) {
                if (sourceFlags & ts.TypeFlags.IndexedAccess) {
                    // Relate components directly before falling back to constraint relationships
                    // A type S[K] is related to a type T[J] if S is related to T and K is related to J.
                    if (result = isRelatedTo((source as ts.IndexedAccessType).objectType, (target as ts.IndexedAccessType).objectType, RecursionFlags.Both, reportErrors)) {
                        result &= isRelatedTo((source as ts.IndexedAccessType).indexType, (target as ts.IndexedAccessType).indexType, RecursionFlags.Both, reportErrors);
                    }
                    if (result) {
                        return result;
                    }
                    if (reportErrors) {
                        originalErrorInfo = errorInfo;
                    }
                }
                // A type S is related to a type T[K] if S is related to C, where C is the base
                // constraint of T[K] for writing.
                if (relation === assignableRelation || relation === comparableRelation) {
                    const objectType = (target as ts.IndexedAccessType).objectType;
                    const indexType = (target as ts.IndexedAccessType).indexType;
                    const baseObjectType = getBaseConstraintOfType(objectType) || objectType;
                    const baseIndexType = getBaseConstraintOfType(indexType) || indexType;
                    if (!isGenericObjectType(baseObjectType) && !isGenericIndexType(baseIndexType)) {
                        const accessFlags = ts.AccessFlags.Writing | (baseObjectType !== objectType ? ts.AccessFlags.NoIndexSignatures : 0);
                        const constraint = getIndexedAccessTypeOrUndefined(baseObjectType, baseIndexType, accessFlags);
                        if (constraint) {
                            if (reportErrors && originalErrorInfo) {
                                // create a new chain for the constraint error
                                resetErrorInfo(saveErrorInfo);
                            }
                            if (result = isRelatedTo(source, constraint, RecursionFlags.Target, reportErrors, /* headMessage */ undefined, intersectionState)) {
                                return result;
                            }
                            // prefer the shorter chain of the constraint comparison chain, and the direct comparison chain
                            if (reportErrors && originalErrorInfo && errorInfo) {
                                errorInfo = countMessageChainBreadth([originalErrorInfo]) <= countMessageChainBreadth([errorInfo]) ? originalErrorInfo : errorInfo;
                            }
                        }
                    }
                }
                if (reportErrors) {
                    originalErrorInfo = undefined;
                }
            }
            else if (isGenericMappedType(target) && relation !== identityRelation) {
                // Check if source type `S` is related to target type `{ [P in Q]: T }` or `{ [P in Q as R]: T}`.
                const keysRemapped = !!target.declaration.nameType;
                const templateType = getTemplateTypeFromMappedType(target);
                const modifiers = getMappedTypeModifiers(target);
                if (!(modifiers & MappedTypeModifiers.ExcludeOptional)) {
                    // If the mapped type has shape `{ [P in Q]: T[P] }`,
                    // source `S` is related to target if `T` = `S`, i.e. `S` is related to `{ [P in Q]: S[P] }`.
                    if (!keysRemapped && templateType.flags & ts.TypeFlags.IndexedAccess && (templateType as ts.IndexedAccessType).objectType === source &&
                        (templateType as ts.IndexedAccessType).indexType === getTypeParameterFromMappedType(target)) {
                        return ts.Ternary.True;
                    }
                    if (!isGenericMappedType(source)) {
                        // If target has shape `{ [P in Q as R]: T}`, then its keys have type `R`.
                        // If target has shape `{ [P in Q]: T }`, then its keys have type `Q`.
                        const targetKeys = keysRemapped ? getNameTypeFromMappedType(target)! : getConstraintTypeFromMappedType(target);
                        // Type of the keys of source type `S`, i.e. `keyof S`.
                        const sourceKeys = getIndexType(source, /*stringsOnly*/ undefined, /*noIndexSignatures*/ true);
                        const includeOptional = modifiers & MappedTypeModifiers.IncludeOptional;
                        const filteredByApplicability = includeOptional ? intersectTypes(targetKeys, sourceKeys) : undefined;
                        // A source type `S` is related to a target type `{ [P in Q]: T }` if `Q` is related to `keyof S` and `S[Q]` is related to `T`.
                        // A source type `S` is related to a target type `{ [P in Q as R]: T }` if `R` is related to `keyof S` and `S[R]` is related to `T.
                        // A source type `S` is related to a target type `{ [P in Q]?: T }` if some constituent `Q'` of `Q` is related to `keyof S` and `S[Q']` is related to `T`.
                        // A source type `S` is related to a target type `{ [P in Q as R]?: T }` if some constituent `R'` of `R` is related to `keyof S` and `S[R']` is related to `T`.
                        if (includeOptional
                            ? !(filteredByApplicability!.flags & ts.TypeFlags.Never)
                            : isRelatedTo(targetKeys, sourceKeys, RecursionFlags.Both)) {
                            const templateType = getTemplateTypeFromMappedType(target);
                            const typeParameter = getTypeParameterFromMappedType(target);

                            // Fastpath: When the template type has the form `Obj[P]` where `P` is the mapped type parameter, directly compare source `S` with `Obj`
                            // to avoid creating the (potentially very large) number of new intermediate types made by manufacturing `S[P]`.
                            const nonNullComponent = extractTypesOfKind(templateType, ~ts.TypeFlags.Nullable);
                            if (!keysRemapped && nonNullComponent.flags & ts.TypeFlags.IndexedAccess && (nonNullComponent as ts.IndexedAccessType).indexType === typeParameter) {
                                if (result = isRelatedTo(source, (nonNullComponent as ts.IndexedAccessType).objectType, RecursionFlags.Target, reportErrors)) {
                                    return result;
                                }
                            }
                            else {
                                // We need to compare the type of a property on the source type `S` to the type of the same property on the target type,
                                // so we need to construct an indexing type representing a property, and then use indexing type to index the source type for comparison.

                                // If the target type has shape `{ [P in Q]: T }`, then a property of the target has type `P`.
                                // If the target type has shape `{ [P in Q]?: T }`, then a property of the target has type `P`,
                                // but the property is optional, so we only want to compare properties `P` that are common between `keyof S` and `Q`.
                                // If the target type has shape `{ [P in Q as R]: T }`, then a property of the target has type `R`.
                                // If the target type has shape `{ [P in Q as R]?: T }`, then a property of the target has type `R`,
                                // but the property is optional, so we only want to compare properties `R` that are common between `keyof S` and `R`.
                                const indexingType = keysRemapped
                                    ? (filteredByApplicability || targetKeys)
                                    : filteredByApplicability
                                        ? getIntersectionType([filteredByApplicability, typeParameter])
                                        : typeParameter;
                                const indexedAccessType = getIndexedAccessType(source, indexingType);
                                // Compare `S[indexingType]` to `T`, where `T` is the type of a property of the target type.
                                if (result = isRelatedTo(indexedAccessType, templateType, RecursionFlags.Both, reportErrors)) {
                                    return result;
                                }
                            }
                        }
                        originalErrorInfo = errorInfo;
                        resetErrorInfo(saveErrorInfo);
                    }
                }
            }
            else if (targetFlags & ts.TypeFlags.Conditional) {
                // If we reach 10 levels of nesting for the same conditional type, assume it is an infinitely expanding recursive
                // conditional type and bail out with a Ternary.Maybe result.
                if (isDeeplyNestedType(target, targetStack, targetDepth, 10)) {
                    return ts.Ternary.Maybe;
                }
                const c = target as ts.ConditionalType;
                // We check for a relationship to a conditional type target only when the conditional type has no
                // 'infer' positions and is not distributive or is distributive but doesn't reference the check type
                // parameter in either of the result types.
                if (!c.root.inferTypeParameters && !isDistributionDependent(c.root)) {
                    // Check if the conditional is always true or always false but still deferred for distribution purposes.
                    const skipTrue = !isTypeAssignableTo(getPermissiveInstantiation(c.checkType), getPermissiveInstantiation(c.extendsType));
                    const skipFalse = !skipTrue && isTypeAssignableTo(getRestrictiveInstantiation(c.checkType), getRestrictiveInstantiation(c.extendsType));
                    // TODO: Find a nice way to include potential conditional type breakdowns in error output, if they seem good (they usually don't)
                    if (result = skipTrue ? ts.Ternary.True : isRelatedTo(source, getTrueTypeFromConditionalType(c), RecursionFlags.Target, /*reportErrors*/ false, /*headMessage*/ undefined, intersectionState)) {
                        result &= skipFalse ? ts.Ternary.True : isRelatedTo(source, getFalseTypeFromConditionalType(c), RecursionFlags.Target, /*reportErrors*/ false, /*headMessage*/ undefined, intersectionState);
                        if (result) {
                            return result;
                        }
                    }
                }
            }
            else if (targetFlags & ts.TypeFlags.TemplateLiteral) {
                if (sourceFlags & ts.TypeFlags.TemplateLiteral) {
                    if (relation === comparableRelation) {
                        return templateLiteralTypesDefinitelyUnrelated(source as ts.TemplateLiteralType, target as ts.TemplateLiteralType) ? ts.Ternary.False : ts.Ternary.True;
                    }
                    // Report unreliable variance for type variables referenced in template literal type placeholders.
                    // For example, `foo-${number}` is related to `foo-${string}` even though number isn't related to string.
                    instantiateType(source, reportUnreliableMapper);
                }
                if (isTypeMatchedByTemplateLiteralType(source, target as ts.TemplateLiteralType)) {
                    return ts.Ternary.True;
                }
            }
            else if (target.flags & ts.TypeFlags.StringMapping) {
                if (!(source.flags & ts.TypeFlags.StringMapping)) {
                    if (isMemberOfStringMapping(source, target)) {
                        return ts.Ternary.True;
                    }
                }
            }

            if (sourceFlags & ts.TypeFlags.TypeVariable) {
                // IndexedAccess comparisons are handled above in the `targetFlags & TypeFlage.IndexedAccess` branch
                if (!(sourceFlags & ts.TypeFlags.IndexedAccess && targetFlags & ts.TypeFlags.IndexedAccess)) {
                    const constraint = getConstraintOfType(source as ts.TypeVariable) || unknownType;
                    // hi-speed no-this-instantiation check (less accurate, but avoids costly `this`-instantiation when the constraint will suffice), see #28231 for report on why this is needed
                    if (result = isRelatedTo(constraint, target, RecursionFlags.Source, /*reportErrors*/ false, /*headMessage*/ undefined, intersectionState)) {
                        return result;
                    }
                    // slower, fuller, this-instantiated check (necessary when comparing raw `this` types from base classes), see `subclassWithPolymorphicThisIsAssignable.ts` test for example
                    else if (result = isRelatedTo(getTypeWithThisArgument(constraint, source), target, RecursionFlags.Source, reportErrors && constraint !== unknownType && !(targetFlags & sourceFlags & ts.TypeFlags.TypeParameter), /*headMessage*/ undefined, intersectionState)) {
                        return result;
                    }
                    if (isMappedTypeGenericIndexedAccess(source)) {
                        // For an indexed access type { [P in K]: E}[X], above we have already explored an instantiation of E with X
                        // substituted for P. We also want to explore type { [P in K]: E }[C], where C is the constraint of X.
                        const indexConstraint = getConstraintOfType((source as ts.IndexedAccessType).indexType);
                        if (indexConstraint) {
                            if (result = isRelatedTo(getIndexedAccessType((source as ts.IndexedAccessType).objectType, indexConstraint), target, RecursionFlags.Source, reportErrors)) {
                                return result;
                            }
                        }
                    }
                }
            }
            else if (sourceFlags & ts.TypeFlags.Index) {
                if (result = isRelatedTo(keyofConstraintType, target, RecursionFlags.Source, reportErrors)) {
                    return result;
                }
            }
            else if (sourceFlags & ts.TypeFlags.TemplateLiteral && !(targetFlags & ts.TypeFlags.Object)) {
                if (!(targetFlags & ts.TypeFlags.TemplateLiteral)) {
                    const constraint = getBaseConstraintOfType(source);
                    if (constraint && constraint !== source && (result = isRelatedTo(constraint, target, RecursionFlags.Source, reportErrors))) {
                        return result;
                    }
                }
            }
            else if (sourceFlags & ts.TypeFlags.StringMapping) {
                if (targetFlags & ts.TypeFlags.StringMapping) {
                    if ((source as ts.StringMappingType).symbol !== (target as ts.StringMappingType).symbol) {
                        return ts.Ternary.False;
                    }
                    if (result = isRelatedTo((source as ts.StringMappingType).type, (target as ts.StringMappingType).type, RecursionFlags.Both, reportErrors)) {
                        return result;
                    }
                }
                else {
                    const constraint = getBaseConstraintOfType(source);
                    if (constraint && (result = isRelatedTo(constraint, target, RecursionFlags.Source, reportErrors))) {
                        return result;
                    }
                }
            }
            else if (sourceFlags & ts.TypeFlags.Conditional) {
                // If we reach 10 levels of nesting for the same conditional type, assume it is an infinitely expanding recursive
                // conditional type and bail out with a Ternary.Maybe result.
                if (isDeeplyNestedType(source, sourceStack, sourceDepth, 10)) {
                    return ts.Ternary.Maybe;
                }
                if (targetFlags & ts.TypeFlags.Conditional) {
                    // Two conditional types 'T1 extends U1 ? X1 : Y1' and 'T2 extends U2 ? X2 : Y2' are related if
                    // one of T1 and T2 is related to the other, U1 and U2 are identical types, X1 is related to X2,
                    // and Y1 is related to Y2.
                    const sourceParams = (source as ts.ConditionalType).root.inferTypeParameters;
                    let sourceExtends = (source as ts.ConditionalType).extendsType;
                    let mapper: ts.TypeMapper | undefined;
                    if (sourceParams) {
                        // If the source has infer type parameters, we instantiate them in the context of the target
                        const ctx = createInferenceContext(sourceParams, /*signature*/ undefined, ts.InferenceFlags.None, isRelatedToWorker);
                        inferTypes(ctx.inferences, (target as ts.ConditionalType).extendsType, sourceExtends, ts.InferencePriority.NoConstraints | ts.InferencePriority.AlwaysStrict);
                        sourceExtends = instantiateType(sourceExtends, ctx.mapper);
                        mapper = ctx.mapper;
                    }
                    if (isTypeIdenticalTo(sourceExtends, (target as ts.ConditionalType).extendsType) &&
                        (isRelatedTo((source as ts.ConditionalType).checkType, (target as ts.ConditionalType).checkType, RecursionFlags.Both) || isRelatedTo((target as ts.ConditionalType).checkType, (source as ts.ConditionalType).checkType, RecursionFlags.Both))) {
                        if (result = isRelatedTo(instantiateType(getTrueTypeFromConditionalType(source as ts.ConditionalType), mapper), getTrueTypeFromConditionalType(target as ts.ConditionalType), RecursionFlags.Both, reportErrors)) {
                            result &= isRelatedTo(getFalseTypeFromConditionalType(source as ts.ConditionalType), getFalseTypeFromConditionalType(target as ts.ConditionalType), RecursionFlags.Both, reportErrors);
                        }
                        if (result) {
                            return result;
                        }
                    }
                }
                else {
                    // conditionals aren't related to one another via distributive constraint as it is much too inaccurate and allows way
                    // more assignments than are desirable (since it maps the source check type to its constraint, it loses information)
                    const distributiveConstraint = hasNonCircularBaseConstraint(source) ? getConstraintOfDistributiveConditionalType(source as ts.ConditionalType) : undefined;
                    if (distributiveConstraint) {
                        if (result = isRelatedTo(distributiveConstraint, target, RecursionFlags.Source, reportErrors)) {
                            return result;
                        }
                    }
                }

                // conditionals _can_ be related to one another via normal constraint, as, eg, `A extends B ? O : never` should be assignable to `O`
                // when `O` is a conditional (`never` is trivially assignable to `O`, as is `O`!).
                const defaultConstraint = getDefaultConstraintOfConditionalType(source as ts.ConditionalType);
                if (defaultConstraint) {
                    if (result = isRelatedTo(defaultConstraint, target, RecursionFlags.Source, reportErrors)) {
                        return result;
                    }
                }
            }
            else {
                // An empty object type is related to any mapped type that includes a '?' modifier.
                if (relation !== subtypeRelation && relation !== strictSubtypeRelation && isPartialMappedType(target) && isEmptyObjectType(source)) {
                    return ts.Ternary.True;
                }
                if (isGenericMappedType(target)) {
                    if (isGenericMappedType(source)) {
                        if (result = mappedTypeRelatedTo(source, target, reportErrors)) {
                            return result;
                        }
                    }
                    return ts.Ternary.False;
                }
                const sourceIsPrimitive = !!(sourceFlags & ts.TypeFlags.Primitive);
                if (relation !== identityRelation) {
                    source = getApparentType(source);
                    sourceFlags = source.flags;
                }
                else if (isGenericMappedType(source)) {
                    return ts.Ternary.False;
                }
                if (ts.getObjectFlags(source) & ts.ObjectFlags.Reference && ts.getObjectFlags(target) & ts.ObjectFlags.Reference && (source as ts.TypeReference).target === (target as ts.TypeReference).target &&
                    !isTupleType(source) && !(isMarkerType(source) || isMarkerType(target))) {
                    // When strictNullChecks is disabled, the element type of the empty array literal is undefinedWideningType,
                    // and an empty array literal wouldn't be assignable to a `never[]` without this check.
                    if (isEmptyArrayLiteralType(source)) {
                        return ts.Ternary.True;
                    }
                    // We have type references to the same generic type, and the type references are not marker
                    // type references (which are intended by be compared structurally). Obtain the variance
                    // information for the type parameters and relate the type arguments accordingly.
                    const variances = getVariances((source as ts.TypeReference).target);
                    // We return Ternary.Maybe for a recursive invocation of getVariances (signalled by emptyArray). This
                    // effectively means we measure variance only from type parameter occurrences that aren't nested in
                    // recursive instantiations of the generic type.
                    if (variances === ts.emptyArray) {
                        return ts.Ternary.Unknown;
                    }
                    const varianceResult = relateVariances(getTypeArguments(source as ts.TypeReference), getTypeArguments(target as ts.TypeReference), variances, intersectionState);
                    if (varianceResult !== undefined) {
                        return varianceResult;
                    }
                }
                else if (isReadonlyArrayType(target) ? isArrayOrTupleType(source) : isArrayType(target) && isTupleType(source) && !source.target.readonly) {
                    if (relation !== identityRelation) {
                        return isRelatedTo(getIndexTypeOfType(source, numberType) || anyType, getIndexTypeOfType(target, numberType) || anyType, RecursionFlags.Both, reportErrors);
                    }
                    else {
                        // By flags alone, we know that the `target` is a readonly array while the source is a normal array or tuple
                        // or `target` is an array and source is a tuple - in both cases the types cannot be identical, by construction
                        return ts.Ternary.False;
                    }
                }
                // Consider a fresh empty object literal type "closed" under the subtype relationship - this way `{} <- {[idx: string]: any} <- fresh({})`
                // and not `{} <- fresh({}) <- {[idx: string]: any}`
                else if ((relation === subtypeRelation || relation === strictSubtypeRelation) && isEmptyObjectType(target) && ts.getObjectFlags(target) & ts.ObjectFlags.FreshLiteral && !isEmptyObjectType(source)) {
                    return ts.Ternary.False;
                }
                // Even if relationship doesn't hold for unions, intersections, or generic type references,
                // it may hold in a structural comparison.
                // In a check of the form X = A & B, we will have previously checked if A relates to X or B relates
                // to X. Failing both of those we want to check if the aggregation of A and B's members structurally
                // relates to X. Thus, we include intersection types on the source side here.
                if (sourceFlags & (ts.TypeFlags.Object | ts.TypeFlags.Intersection) && targetFlags & ts.TypeFlags.Object) {
                    // Report structural errors only if we haven't reported any errors yet
                    const reportStructuralErrors = reportErrors && errorInfo === saveErrorInfo.errorInfo && !sourceIsPrimitive;
                    result = propertiesRelatedTo(source, target, reportStructuralErrors, /*excludedProperties*/ undefined, intersectionState);
                    if (result) {
                        result &= signaturesRelatedTo(source, target, ts.SignatureKind.Call, reportStructuralErrors);
                        if (result) {
                            result &= signaturesRelatedTo(source, target, ts.SignatureKind.Construct, reportStructuralErrors);
                            if (result) {
                                result &= indexSignaturesRelatedTo(source, target, sourceIsPrimitive, reportStructuralErrors, intersectionState);
                            }
                        }
                    }
                    if (varianceCheckFailed && result) {
                        errorInfo = originalErrorInfo || errorInfo || saveErrorInfo.errorInfo; // Use variance error (there is no structural one) and return false
                    }
                    else if (result) {
                        return result;
                    }
                }
                // If S is an object type and T is a discriminated union, S may be related to T if
                // there exists a constituent of T for every combination of the discriminants of S
                // with respect to T. We do not report errors here, as we will use the existing
                // error result from checking each constituent of the union.
                if (sourceFlags & (ts.TypeFlags.Object | ts.TypeFlags.Intersection) && targetFlags & ts.TypeFlags.Union) {
                    const objectOnlyTarget = extractTypesOfKind(target, ts.TypeFlags.Object | ts.TypeFlags.Intersection | ts.TypeFlags.Substitution);
                    if (objectOnlyTarget.flags & ts.TypeFlags.Union) {
                        const result = typeRelatedToDiscriminatedType(source, objectOnlyTarget as ts.UnionType);
                        if (result) {
                            return result;
                        }
                    }
                }
            }
            return ts.Ternary.False;

            function countMessageChainBreadth(info: ts.DiagnosticMessageChain[] | undefined): number {
                if (!info) return 0;
                return ts.reduceLeft(info, (value, chain) => value + 1 + countMessageChainBreadth(chain.next), 0);
            }

            function relateVariances(sourceTypeArguments: readonly ts.Type[] | undefined, targetTypeArguments: readonly ts.Type[] | undefined, variances: ts.VarianceFlags[], intersectionState: IntersectionState) {
                if (result = typeArgumentsRelatedTo(sourceTypeArguments, targetTypeArguments, variances, reportErrors, intersectionState)) {
                    return result;
                }
                if (ts.some(variances, v => !!(v & ts.VarianceFlags.AllowsStructuralFallback))) {
                    // If some type parameter was `Unmeasurable` or `Unreliable`, and we couldn't pass by assuming it was identical, then we
                    // have to allow a structural fallback check
                    // We elide the variance-based error elaborations, since those might not be too helpful, since we'll potentially
                    // be assuming identity of the type parameter.
                    originalErrorInfo = undefined;
                    resetErrorInfo(saveErrorInfo);
                    return undefined;
                }
                const allowStructuralFallback = targetTypeArguments && hasCovariantVoidArgument(targetTypeArguments, variances);
                varianceCheckFailed = !allowStructuralFallback;
                // The type arguments did not relate appropriately, but it may be because we have no variance
                // information (in which case typeArgumentsRelatedTo defaulted to covariance for all type
                // arguments). It might also be the case that the target type has a 'void' type argument for
                // a covariant type parameter that is only used in return positions within the generic type
                // (in which case any type argument is permitted on the source side). In those cases we proceed
                // with a structural comparison. Otherwise, we know for certain the instantiations aren't
                // related and we can return here.
                if (variances !== ts.emptyArray && !allowStructuralFallback) {
                    // In some cases generic types that are covariant in regular type checking mode become
                    // invariant in --strictFunctionTypes mode because one or more type parameters are used in
                    // both co- and contravariant positions. In order to make it easier to diagnose *why* such
                    // types are invariant, if any of the type parameters are invariant we reset the reported
                    // errors and instead force a structural comparison (which will include elaborations that
                    // reveal the reason).
                    // We can switch on `reportErrors` here, since varianceCheckFailed guarantees we return `False`,
                    // we can return `False` early here to skip calculating the structural error message we don't need.
                    if (varianceCheckFailed && !(reportErrors && ts.some(variances, v => (v & ts.VarianceFlags.VarianceMask) === ts.VarianceFlags.Invariant))) {
                        return ts.Ternary.False;
                    }
                    // We remember the original error information so we can restore it in case the structural
                    // comparison unexpectedly succeeds. This can happen when the structural comparison result
                    // is a Ternary.Maybe for example caused by the recursion depth limiter.
                    originalErrorInfo = errorInfo;
                    resetErrorInfo(saveErrorInfo);
                }
            }
        }

        // A type [P in S]: X is related to a type [Q in T]: Y if T is related to S and X' is
        // related to Y, where X' is an instantiation of X in which P is replaced with Q. Notice
        // that S and T are contra-variant whereas X and Y are co-variant.
        function mappedTypeRelatedTo(source: ts.MappedType, target: ts.MappedType, reportErrors: boolean): ts.Ternary {
            const modifiersRelated = relation === comparableRelation || (relation === identityRelation ? getMappedTypeModifiers(source) === getMappedTypeModifiers(target) :
                getCombinedMappedTypeOptionality(source) <= getCombinedMappedTypeOptionality(target));
            if (modifiersRelated) {
                let result: ts.Ternary;
                const targetConstraint = getConstraintTypeFromMappedType(target);
                const sourceConstraint = instantiateType(getConstraintTypeFromMappedType(source), getCombinedMappedTypeOptionality(source) < 0 ? reportUnmeasurableMapper : reportUnreliableMapper);
                if (result = isRelatedTo(targetConstraint, sourceConstraint, RecursionFlags.Both, reportErrors)) {
                    const mapper = createTypeMapper([getTypeParameterFromMappedType(source)], [getTypeParameterFromMappedType(target)]);
                    if (instantiateType(getNameTypeFromMappedType(source), mapper) === instantiateType(getNameTypeFromMappedType(target), mapper)) {
                        return result & isRelatedTo(instantiateType(getTemplateTypeFromMappedType(source), mapper), getTemplateTypeFromMappedType(target), RecursionFlags.Both, reportErrors);
                    }
                }
            }
            return ts.Ternary.False;
        }

        function typeRelatedToDiscriminatedType(source: ts.Type, target: ts.UnionType) {
            // 1. Generate the combinations of discriminant properties & types 'source' can satisfy.
            //    a. If the number of combinations is above a set limit, the comparison is too complex.
            // 2. Filter 'target' to the subset of types whose discriminants exist in the matrix.
            //    a. If 'target' does not satisfy all discriminants in the matrix, 'source' is not related.
            // 3. For each type in the filtered 'target', determine if all non-discriminant properties of
            //    'target' are related to a property in 'source'.
            //
            // NOTE: See ~/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithDiscriminatedUnion.ts
            //       for examples.

            const sourceProperties = getPropertiesOfType(source);
            const sourcePropertiesFiltered = findDiscriminantProperties(sourceProperties, target);
            if (!sourcePropertiesFiltered) return ts.Ternary.False;

            // Though we could compute the number of combinations as we generate
            // the matrix, this would incur additional memory overhead due to
            // array allocations. To reduce this overhead, we first compute
            // the number of combinations to ensure we will not surpass our
            // fixed limit before incurring the cost of any allocations:
            let numCombinations = 1;
            for (const sourceProperty of sourcePropertiesFiltered) {
                numCombinations *= countTypes(getNonMissingTypeOfSymbol(sourceProperty));
                if (numCombinations > 25) {
                    // We've reached the complexity limit.
                    ts.tracing?.instant(ts.tracing.Phase.CheckTypes, "typeRelatedToDiscriminatedType_DepthLimit", { sourceId: source.id, targetId: target.id, numCombinations });
                    return ts.Ternary.False;
                }
            }

            // Compute the set of types for each discriminant property.
            const sourceDiscriminantTypes: ts.Type[][] = new Array<ts.Type[]>(sourcePropertiesFiltered.length);
            const excludedProperties = new ts.Set<ts.__String>();
            for (let i = 0; i < sourcePropertiesFiltered.length; i++) {
                const sourceProperty = sourcePropertiesFiltered[i];
                const sourcePropertyType = getNonMissingTypeOfSymbol(sourceProperty);
                sourceDiscriminantTypes[i] = sourcePropertyType.flags & ts.TypeFlags.Union
                    ? (sourcePropertyType as ts.UnionType).types
                    : [sourcePropertyType];
                excludedProperties.add(sourceProperty.escapedName);
            }

            // Match each combination of the cartesian product of discriminant properties to one or more
            // constituents of 'target'. If any combination does not have a match then 'source' is not relatable.
            const discriminantCombinations = ts.cartesianProduct(sourceDiscriminantTypes);
            const matchingTypes: ts.Type[] = [];
            for (const combination of discriminantCombinations) {
                let hasMatch = false;
                outer: for (const type of target.types) {
                    for (let i = 0; i < sourcePropertiesFiltered.length; i++) {
                        const sourceProperty = sourcePropertiesFiltered[i];
                        const targetProperty = getPropertyOfType(type, sourceProperty.escapedName);
                        if (!targetProperty) continue outer;
                        if (sourceProperty === targetProperty) continue;
                        // We compare the source property to the target in the context of a single discriminant type.
                        const related = propertyRelatedTo(source, target, sourceProperty, targetProperty, _ => combination[i], /*reportErrors*/ false, IntersectionState.None, /*skipOptional*/ strictNullChecks || relation === comparableRelation);
                        // If the target property could not be found, or if the properties were not related,
                        // then this constituent is not a match.
                        if (!related) {
                            continue outer;
                        }
                    }
                    ts.pushIfUnique(matchingTypes, type, ts.equateValues);
                    hasMatch = true;
                }
                if (!hasMatch) {
                    // We failed to match any type for this combination.
                    return ts.Ternary.False;
                }
            }

            // Compare the remaining non-discriminant properties of each match.
            let result = ts.Ternary.True;
            for (const type of matchingTypes) {
                result &= propertiesRelatedTo(source, type, /*reportErrors*/ false, excludedProperties, IntersectionState.None);
                if (result) {
                    result &= signaturesRelatedTo(source, type, ts.SignatureKind.Call, /*reportStructuralErrors*/ false);
                    if (result) {
                        result &= signaturesRelatedTo(source, type, ts.SignatureKind.Construct, /*reportStructuralErrors*/ false);
                        if (result && !(isTupleType(source) && isTupleType(type))) {
                            // Comparing numeric index types when both `source` and `type` are tuples is unnecessary as the
                            // element types should be sufficiently covered by `propertiesRelatedTo`. It also causes problems
                            // with index type assignability as the types for the excluded discriminants are still included
                            // in the index type.
                            result &= indexSignaturesRelatedTo(source, type, /*sourceIsPrimitive*/ false, /*reportStructuralErrors*/ false, IntersectionState.None);
                        }
                    }
                }
                if (!result) {
                    return result;
                }
            }
            return result;
        }

        function excludeProperties(properties: ts.Symbol[], excludedProperties: ts.Set<ts.__String> | undefined) {
            if (!excludedProperties || properties.length === 0) return properties;
            let result: ts.Symbol[] | undefined;
            for (let i = 0; i < properties.length; i++) {
                if (!excludedProperties.has(properties[i].escapedName)) {
                    if (result) {
                        result.push(properties[i]);
                    }
                }
                else if (!result) {
                    result = properties.slice(0, i);
                }
            }
            return result || properties;
        }

        function isPropertySymbolTypeRelated(sourceProp: ts.Symbol, targetProp: ts.Symbol, getTypeOfSourceProperty: (sym: ts.Symbol) => ts.Type, reportErrors: boolean, intersectionState: IntersectionState): ts.Ternary {
            const targetIsOptional = strictNullChecks && !!(ts.getCheckFlags(targetProp) & ts.CheckFlags.Partial);
            const effectiveTarget = addOptionality(getNonMissingTypeOfSymbol(targetProp), /*isProperty*/ false, targetIsOptional);
            const effectiveSource = getTypeOfSourceProperty(sourceProp);
            return isRelatedTo(effectiveSource, effectiveTarget, RecursionFlags.Both, reportErrors, /*headMessage*/ undefined, intersectionState);
        }

        function propertyRelatedTo(source: ts.Type, target: ts.Type, sourceProp: ts.Symbol, targetProp: ts.Symbol, getTypeOfSourceProperty: (sym: ts.Symbol) => ts.Type, reportErrors: boolean, intersectionState: IntersectionState, skipOptional: boolean): ts.Ternary {
            const sourcePropFlags = ts.getDeclarationModifierFlagsFromSymbol(sourceProp);
            const targetPropFlags = ts.getDeclarationModifierFlagsFromSymbol(targetProp);
            if (sourcePropFlags & ts.ModifierFlags.Private || targetPropFlags & ts.ModifierFlags.Private) {
                if (sourceProp.valueDeclaration !== targetProp.valueDeclaration) {
                    if (reportErrors) {
                        if (sourcePropFlags & ts.ModifierFlags.Private && targetPropFlags & ts.ModifierFlags.Private) {
                            reportError(ts.Diagnostics.Types_have_separate_declarations_of_a_private_property_0, symbolToString(targetProp));
                        }
                        else {
                            reportError(ts.Diagnostics.Property_0_is_private_in_type_1_but_not_in_type_2, symbolToString(targetProp),
                                typeToString(sourcePropFlags & ts.ModifierFlags.Private ? source : target),
                                typeToString(sourcePropFlags & ts.ModifierFlags.Private ? target : source));
                        }
                    }
                    return ts.Ternary.False;
                }
            }
            else if (targetPropFlags & ts.ModifierFlags.Protected) {
                if (!isValidOverrideOf(sourceProp, targetProp)) {
                    if (reportErrors) {
                        reportError(ts.Diagnostics.Property_0_is_protected_but_type_1_is_not_a_class_derived_from_2, symbolToString(targetProp),
                            typeToString(getDeclaringClass(sourceProp) || source), typeToString(getDeclaringClass(targetProp) || target));
                    }
                    return ts.Ternary.False;
                }
            }
            else if (sourcePropFlags & ts.ModifierFlags.Protected) {
                if (reportErrors) {
                    reportError(ts.Diagnostics.Property_0_is_protected_in_type_1_but_public_in_type_2,
                        symbolToString(targetProp), typeToString(source), typeToString(target));
                }
                return ts.Ternary.False;
            }

            // Ensure {readonly a: whatever} is not a subtype of {a: whatever},
            // while {a: whatever} is a subtype of {readonly a: whatever}.
            // This ensures the subtype relationship is ordered, and preventing declaration order
            // from deciding which type "wins" in union subtype reduction.
            // They're still assignable to one another, since `readonly` doesn't affect assignability.
            // This is only applied during the strictSubtypeRelation -- currently used in subtype reduction
            if (
                relation === strictSubtypeRelation &&
                isReadonlySymbol(sourceProp) && !isReadonlySymbol(targetProp)
            ) {
                return ts.Ternary.False;
            }
            // If the target comes from a partial union prop, allow `undefined` in the target type
            const related = isPropertySymbolTypeRelated(sourceProp, targetProp, getTypeOfSourceProperty, reportErrors, intersectionState);
            if (!related) {
                if (reportErrors) {
                    reportIncompatibleError(ts.Diagnostics.Types_of_property_0_are_incompatible, symbolToString(targetProp));
                }
                return ts.Ternary.False;
            }
            // When checking for comparability, be more lenient with optional properties.
            if (!skipOptional && sourceProp.flags & ts.SymbolFlags.Optional && targetProp.flags & ts.SymbolFlags.ClassMember && !(targetProp.flags & ts.SymbolFlags.Optional)) {
                // TypeScript 1.0 spec (April 2014): 3.8.3
                // S is a subtype of a type T, and T is a supertype of S if ...
                // S' and T are object types and, for each member M in T..
                // M is a property and S' contains a property N where
                // if M is a required property, N is also a required property
                // (M - property in T)
                // (N - property in S)
                if (reportErrors) {
                    reportError(ts.Diagnostics.Property_0_is_optional_in_type_1_but_required_in_type_2,
                        symbolToString(targetProp), typeToString(source), typeToString(target));
                }
                return ts.Ternary.False;
            }
            return related;
        }

        function reportUnmatchedProperty(source: ts.Type, target: ts.Type, unmatchedProperty: ts.Symbol, requireOptionalProperties: boolean) {
            let shouldSkipElaboration = false;
            // give specific error in case where private names have the same description
            if (unmatchedProperty.valueDeclaration
                && ts.isNamedDeclaration(unmatchedProperty.valueDeclaration)
                && ts.isPrivateIdentifier(unmatchedProperty.valueDeclaration.name)
                && source.symbol
                && source.symbol.flags & ts.SymbolFlags.Class) {
                const privateIdentifierDescription = unmatchedProperty.valueDeclaration.name.escapedText;
                const symbolTableKey = ts.getSymbolNameForPrivateIdentifier(source.symbol, privateIdentifierDescription);
                if (symbolTableKey && getPropertyOfType(source, symbolTableKey)) {
                    const sourceName = ts.factory.getDeclarationName(source.symbol.valueDeclaration);
                    const targetName = ts.factory.getDeclarationName(target.symbol.valueDeclaration);
                    reportError(
                        ts.Diagnostics.Property_0_in_type_1_refers_to_a_different_member_that_cannot_be_accessed_from_within_type_2,
                        diagnosticName(privateIdentifierDescription),
                        diagnosticName(sourceName.escapedText === "" ? anon : sourceName),
                        diagnosticName(targetName.escapedText === "" ? anon : targetName));
                    return;
                }
            }
            const props = ts.arrayFrom(getUnmatchedProperties(source, target, requireOptionalProperties, /*matchDiscriminantProperties*/ false));
            if (!headMessage || (headMessage.code !== ts.Diagnostics.Class_0_incorrectly_implements_interface_1.code &&
                headMessage.code !== ts.Diagnostics.Class_0_incorrectly_implements_class_1_Did_you_mean_to_extend_1_and_inherit_its_members_as_a_subclass.code)) {
                shouldSkipElaboration = true; // Retain top-level error for interface implementing issues, otherwise omit it
            }
            if (props.length === 1) {
                const propName = symbolToString(unmatchedProperty, /*enclosingDeclaration*/ undefined, ts.SymbolFlags.None, ts.SymbolFormatFlags.AllowAnyNodeKind | ts.SymbolFormatFlags.WriteComputedProps);
                reportError(ts.Diagnostics.Property_0_is_missing_in_type_1_but_required_in_type_2, propName, ...getTypeNamesForErrorDisplay(source, target));
                if (ts.length(unmatchedProperty.declarations)) {
                    associateRelatedInfo(ts.createDiagnosticForNode(unmatchedProperty.declarations![0], ts.Diagnostics._0_is_declared_here, propName));
                }
                if (shouldSkipElaboration && errorInfo) {
                    overrideNextErrorInfo++;
                }
            }
            else if (tryElaborateArrayLikeErrors(source, target, /*reportErrors*/ false)) {
                if (props.length > 5) { // arbitrary cutoff for too-long list form
                    reportError(ts.Diagnostics.Type_0_is_missing_the_following_properties_from_type_1_Colon_2_and_3_more, typeToString(source), typeToString(target), ts.map(props.slice(0, 4), p => symbolToString(p)).join(", "), props.length - 4);
                }
                else {
                    reportError(ts.Diagnostics.Type_0_is_missing_the_following_properties_from_type_1_Colon_2, typeToString(source), typeToString(target), ts.map(props, p => symbolToString(p)).join(", "));
                }
                if (shouldSkipElaboration && errorInfo) {
                    overrideNextErrorInfo++;
                }
            }
            // No array like or unmatched property error - just issue top level error (errorInfo = undefined)
        }

        function propertiesRelatedTo(source: ts.Type, target: ts.Type, reportErrors: boolean, excludedProperties: ts.Set<ts.__String> | undefined, intersectionState: IntersectionState): ts.Ternary {
            if (relation === identityRelation) {
                return propertiesIdenticalTo(source, target, excludedProperties);
            }
            let result = ts.Ternary.True;
            if (isTupleType(target)) {
                if (isArrayOrTupleType(source)) {
                    if (!target.target.readonly && (isReadonlyArrayType(source) || isTupleType(source) && source.target.readonly)) {
                        return ts.Ternary.False;
                    }
                    const sourceArity = getTypeReferenceArity(source);
                    const targetArity = getTypeReferenceArity(target);
                    const sourceRestFlag = isTupleType(source) ? source.target.combinedFlags & ts.ElementFlags.Rest : ts.ElementFlags.Rest;
                    const targetRestFlag = target.target.combinedFlags & ts.ElementFlags.Rest;
                    const sourceMinLength = isTupleType(source) ? source.target.minLength : 0;
                    const targetMinLength = target.target.minLength;
                    if (!sourceRestFlag && sourceArity < targetMinLength) {
                        if (reportErrors) {
                            reportError(ts.Diagnostics.Source_has_0_element_s_but_target_requires_1, sourceArity, targetMinLength);
                        }
                        return ts.Ternary.False;
                    }
                    if (!targetRestFlag && targetArity < sourceMinLength) {
                        if (reportErrors) {
                            reportError(ts.Diagnostics.Source_has_0_element_s_but_target_allows_only_1, sourceMinLength, targetArity);
                        }
                        return ts.Ternary.False;
                    }
                    if (!targetRestFlag && (sourceRestFlag || targetArity < sourceArity)) {
                        if (reportErrors) {
                            if (sourceMinLength < targetMinLength) {
                                reportError(ts.Diagnostics.Target_requires_0_element_s_but_source_may_have_fewer, targetMinLength);
                            }
                            else {
                                reportError(ts.Diagnostics.Target_allows_only_0_element_s_but_source_may_have_more, targetArity);
                            }
                        }
                        return ts.Ternary.False;
                    }
                    const sourceTypeArguments = getTypeArguments(source);
                    const targetTypeArguments = getTypeArguments(target);
                    const targetStartCount = getStartElementCount(target.target, ts.ElementFlags.NonRest);
                    const targetEndCount = getEndElementCount(target.target, ts.ElementFlags.NonRest);
                    const targetHasRestElement = target.target.hasRestElement;
                    let canExcludeDiscriminants = !!excludedProperties;
                    for (let sourcePosition = 0; sourcePosition < sourceArity; sourcePosition++) {
                        const sourceFlags = isTupleType(source) ? source.target.elementFlags[sourcePosition] : ts.ElementFlags.Rest;
                        const sourcePositionFromEnd = sourceArity - 1 - sourcePosition;

                        const targetPosition = targetHasRestElement && sourcePosition >= targetStartCount
                            ? targetArity - 1 - Math.min(sourcePositionFromEnd, targetEndCount)
                            : sourcePosition;

                        const targetFlags = target.target.elementFlags[targetPosition];

                        if (targetFlags & ts.ElementFlags.Variadic && !(sourceFlags & ts.ElementFlags.Variadic)) {
                            if (reportErrors) {
                                reportError(ts.Diagnostics.Source_provides_no_match_for_variadic_element_at_position_0_in_target, targetPosition);
                            }
                            return ts.Ternary.False;
                        }
                        if (sourceFlags & ts.ElementFlags.Variadic && !(targetFlags & ts.ElementFlags.Variable)) {
                            if (reportErrors) {
                                reportError(ts.Diagnostics.Variadic_element_at_position_0_in_source_does_not_match_element_at_position_1_in_target, sourcePosition, targetPosition);
                            }
                            return ts.Ternary.False;
                        }
                        if (targetFlags & ts.ElementFlags.Required && !(sourceFlags & ts.ElementFlags.Required)) {
                            if (reportErrors) {
                                reportError(ts.Diagnostics.Source_provides_no_match_for_required_element_at_position_0_in_target, targetPosition);
                            }
                            return ts.Ternary.False;
                        }
                        // We can only exclude discriminant properties if we have not yet encountered a variable-length element.
                        if (canExcludeDiscriminants) {
                            if (sourceFlags & ts.ElementFlags.Variable || targetFlags & ts.ElementFlags.Variable) {
                                canExcludeDiscriminants = false;
                            }
                            if (canExcludeDiscriminants && excludedProperties?.has(("" + sourcePosition) as ts.__String)) {
                                continue;
                            }
                        }

                        const sourceType = removeMissingType(sourceTypeArguments[sourcePosition], !!(sourceFlags & targetFlags & ts.ElementFlags.Optional));
                        const targetType = targetTypeArguments[targetPosition];

                        const targetCheckType = sourceFlags & ts.ElementFlags.Variadic && targetFlags & ts.ElementFlags.Rest ? createArrayType(targetType) :
                            removeMissingType(targetType, !!(targetFlags & ts.ElementFlags.Optional));
                        const related = isRelatedTo(sourceType, targetCheckType, RecursionFlags.Both, reportErrors, /*headMessage*/ undefined, intersectionState);
                        if (!related) {
                            if (reportErrors && (targetArity > 1 || sourceArity > 1)) {
                                if (targetHasRestElement && sourcePosition >= targetStartCount && sourcePositionFromEnd >= targetEndCount && targetStartCount !== sourceArity - targetEndCount - 1) {
                                    reportIncompatibleError(ts.Diagnostics.Type_at_positions_0_through_1_in_source_is_not_compatible_with_type_at_position_2_in_target, targetStartCount, sourceArity - targetEndCount - 1, targetPosition);
                                }
                                else {
                                    reportIncompatibleError(ts.Diagnostics.Type_at_position_0_in_source_is_not_compatible_with_type_at_position_1_in_target, sourcePosition, targetPosition);
                                }
                            }
                            return ts.Ternary.False;
                        }
                        result &= related;
                    }
                    return result;
                }
                if (target.target.combinedFlags & ts.ElementFlags.Variable) {
                    return ts.Ternary.False;
                }
            }
            const requireOptionalProperties = (relation === subtypeRelation || relation === strictSubtypeRelation) && !isObjectLiteralType(source) && !isEmptyArrayLiteralType(source) && !isTupleType(source);
            const unmatchedProperty = getUnmatchedProperty(source, target, requireOptionalProperties, /*matchDiscriminantProperties*/ false);
            if (unmatchedProperty) {
                if (reportErrors && shouldReportUnmatchedPropertyError(source, target)) {
                    reportUnmatchedProperty(source, target, unmatchedProperty, requireOptionalProperties);
                }
                return ts.Ternary.False;
            }
            if (isObjectLiteralType(target)) {
                for (const sourceProp of excludeProperties(getPropertiesOfType(source), excludedProperties)) {
                    if (!getPropertyOfObjectType(target, sourceProp.escapedName)) {
                        const sourceType = getTypeOfSymbol(sourceProp);
                        if (!(sourceType.flags & ts.TypeFlags.Undefined)) {
                            if (reportErrors) {
                                reportError(ts.Diagnostics.Property_0_does_not_exist_on_type_1, symbolToString(sourceProp), typeToString(target));
                            }
                            return ts.Ternary.False;
                        }
                    }
                }
            }
            // We only call this for union target types when we're attempting to do excess property checking - in those cases, we want to get _all possible props_
            // from the target union, across all members
            const properties = getPropertiesOfType(target);
            const numericNamesOnly = isTupleType(source) && isTupleType(target);
            for (const targetProp of excludeProperties(properties, excludedProperties)) {
                const name = targetProp.escapedName;
                if (!(targetProp.flags & ts.SymbolFlags.Prototype) && (!numericNamesOnly || ts.isNumericLiteralName(name) || name === "length")) {
                    const sourceProp = getPropertyOfType(source, name);
                    if (sourceProp && sourceProp !== targetProp) {
                        const related = propertyRelatedTo(source, target, sourceProp, targetProp, getNonMissingTypeOfSymbol, reportErrors, intersectionState, relation === comparableRelation);
                        if (!related) {
                            return ts.Ternary.False;
                        }
                        result &= related;
                    }
                }
            }
            return result;
        }

        function propertiesIdenticalTo(source: ts.Type, target: ts.Type, excludedProperties: ts.Set<ts.__String> | undefined): ts.Ternary {
            if (!(source.flags & ts.TypeFlags.Object && target.flags & ts.TypeFlags.Object)) {
                return ts.Ternary.False;
            }
            const sourceProperties = excludeProperties(getPropertiesOfObjectType(source), excludedProperties);
            const targetProperties = excludeProperties(getPropertiesOfObjectType(target), excludedProperties);
            if (sourceProperties.length !== targetProperties.length) {
                return ts.Ternary.False;
            }
            let result = ts.Ternary.True;
            for (const sourceProp of sourceProperties) {
                const targetProp = getPropertyOfObjectType(target, sourceProp.escapedName);
                if (!targetProp) {
                    return ts.Ternary.False;
                }
                const related = compareProperties(sourceProp, targetProp, isRelatedTo);
                if (!related) {
                    return ts.Ternary.False;
                }
                result &= related;
            }
            return result;
        }

        function signaturesRelatedTo(source: ts.Type, target: ts.Type, kind: ts.SignatureKind, reportErrors: boolean): ts.Ternary {
            if (relation === identityRelation) {
                return signaturesIdenticalTo(source, target, kind);
            }
            if (target === anyFunctionType || source === anyFunctionType) {
                return ts.Ternary.True;
            }

            const sourceIsJSConstructor = source.symbol && isJSConstructor(source.symbol.valueDeclaration);
            const targetIsJSConstructor = target.symbol && isJSConstructor(target.symbol.valueDeclaration);

            const sourceSignatures = getSignaturesOfType(source, (sourceIsJSConstructor && kind === ts.SignatureKind.Construct) ?
                ts.SignatureKind.Call : kind);
            const targetSignatures = getSignaturesOfType(target, (targetIsJSConstructor && kind === ts.SignatureKind.Construct) ?
                ts.SignatureKind.Call : kind);

            if (kind === ts.SignatureKind.Construct && sourceSignatures.length && targetSignatures.length) {
                const sourceIsAbstract = !!(sourceSignatures[0].flags & ts.SignatureFlags.Abstract);
                const targetIsAbstract = !!(targetSignatures[0].flags & ts.SignatureFlags.Abstract);
                if (sourceIsAbstract && !targetIsAbstract) {
                    // An abstract constructor type is not assignable to a non-abstract constructor type
                    // as it would otherwise be possible to new an abstract class. Note that the assignability
                    // check we perform for an extends clause excludes construct signatures from the target,
                    // so this check never proceeds.
                    if (reportErrors) {
                        reportError(ts.Diagnostics.Cannot_assign_an_abstract_constructor_type_to_a_non_abstract_constructor_type);
                    }
                    return ts.Ternary.False;
                }
                if (!constructorVisibilitiesAreCompatible(sourceSignatures[0], targetSignatures[0], reportErrors)) {
                    return ts.Ternary.False;
                }
            }

            let result = ts.Ternary.True;
            const incompatibleReporter = kind === ts.SignatureKind.Construct ? reportIncompatibleConstructSignatureReturn : reportIncompatibleCallSignatureReturn;
            const sourceObjectFlags = ts.getObjectFlags(source);
            const targetObjectFlags = ts.getObjectFlags(target);
            if (sourceObjectFlags & ts.ObjectFlags.Instantiated && targetObjectFlags & ts.ObjectFlags.Instantiated && source.symbol === target.symbol ||
                sourceObjectFlags & ts.ObjectFlags.Reference && targetObjectFlags & ts.ObjectFlags.Reference && (source as ts.TypeReference).target === (target as ts.TypeReference).target) {
                // We have instantiations of the same anonymous type (which typically will be the type of a
                // method). Simply do a pairwise comparison of the signatures in the two signature lists instead
                // of the much more expensive N * M comparison matrix we explore below. We erase type parameters
                // as they are known to always be the same.
                for (let i = 0; i < targetSignatures.length; i++) {
                    const related = signatureRelatedTo(sourceSignatures[i], targetSignatures[i], /*erase*/ true, reportErrors, incompatibleReporter(sourceSignatures[i], targetSignatures[i]));
                    if (!related) {
                        return ts.Ternary.False;
                    }
                    result &= related;
                }
            }
            else if (sourceSignatures.length === 1 && targetSignatures.length === 1) {
                // For simple functions (functions with a single signature) we only erase type parameters for
                // the comparable relation. Otherwise, if the source signature is generic, we instantiate it
                // in the context of the target signature before checking the relationship. Ideally we'd do
                // this regardless of the number of signatures, but the potential costs are prohibitive due
                // to the quadratic nature of the logic below.
                const eraseGenerics = relation === comparableRelation || !!compilerOptions.noStrictGenericChecks;
                const sourceSignature = ts.first(sourceSignatures);
                const targetSignature = ts.first(targetSignatures);
                result = signatureRelatedTo(sourceSignature, targetSignature, eraseGenerics, reportErrors, incompatibleReporter(sourceSignature, targetSignature));
                if (!result && reportErrors && kind === ts.SignatureKind.Construct && (sourceObjectFlags & targetObjectFlags) &&
                    (targetSignature.declaration?.kind === ts.SyntaxKind.Constructor || sourceSignature.declaration?.kind === ts.SyntaxKind.Constructor)) {
                    const constructSignatureToString = (signature: ts.Signature) =>
                        signatureToString(signature, /*enclosingDeclaration*/ undefined, ts.TypeFormatFlags.WriteArrowStyleSignature, kind);
                    reportError(ts.Diagnostics.Type_0_is_not_assignable_to_type_1, constructSignatureToString(sourceSignature), constructSignatureToString(targetSignature));
                    reportError(ts.Diagnostics.Types_of_construct_signatures_are_incompatible);
                    return result;
                }
            }
            else {
                outer: for (const t of targetSignatures) {
                    const saveErrorInfo = captureErrorCalculationState();
                    // Only elaborate errors from the first failure
                    let shouldElaborateErrors = reportErrors;
                    for (const s of sourceSignatures) {
                        const related = signatureRelatedTo(s, t, /*erase*/ true, shouldElaborateErrors, incompatibleReporter(s, t));
                        if (related) {
                            result &= related;
                            resetErrorInfo(saveErrorInfo);
                            continue outer;
                        }
                        shouldElaborateErrors = false;
                    }
                    if (shouldElaborateErrors) {
                        reportError(ts.Diagnostics.Type_0_provides_no_match_for_the_signature_1,
                            typeToString(source),
                            signatureToString(t, /*enclosingDeclaration*/ undefined, /*flags*/ undefined, kind));
                    }
                    return ts.Ternary.False;
                }
            }
            return result;
        }

        function shouldReportUnmatchedPropertyError(source: ts.Type, target: ts.Type): boolean {
            const typeCallSignatures = getSignaturesOfStructuredType(source, ts.SignatureKind.Call);
            const typeConstructSignatures = getSignaturesOfStructuredType(source, ts.SignatureKind.Construct);
            const typeProperties = getPropertiesOfObjectType(source);
            if ((typeCallSignatures.length || typeConstructSignatures.length) && !typeProperties.length) {
                if ((getSignaturesOfType(target, ts.SignatureKind.Call).length && typeCallSignatures.length) ||
                    (getSignaturesOfType(target, ts.SignatureKind.Construct).length && typeConstructSignatures.length)) {
                    return true; // target has similar signature kinds to source, still focus on the unmatched property
                }
                return false;
            }
            return true;
        }

        function reportIncompatibleCallSignatureReturn(siga: ts.Signature, sigb: ts.Signature) {
            if (siga.parameters.length === 0 && sigb.parameters.length === 0) {
                return (source: ts.Type, target: ts.Type) => reportIncompatibleError(ts.Diagnostics.Call_signatures_with_no_arguments_have_incompatible_return_types_0_and_1, typeToString(source), typeToString(target));
            }
            return (source: ts.Type, target: ts.Type) => reportIncompatibleError(ts.Diagnostics.Call_signature_return_types_0_and_1_are_incompatible, typeToString(source), typeToString(target));
        }

        function reportIncompatibleConstructSignatureReturn(siga: ts.Signature, sigb: ts.Signature) {
            if (siga.parameters.length === 0 && sigb.parameters.length === 0) {
                return (source: ts.Type, target: ts.Type) => reportIncompatibleError(ts.Diagnostics.Construct_signatures_with_no_arguments_have_incompatible_return_types_0_and_1, typeToString(source), typeToString(target));
            }
            return (source: ts.Type, target: ts.Type) => reportIncompatibleError(ts.Diagnostics.Construct_signature_return_types_0_and_1_are_incompatible, typeToString(source), typeToString(target));
        }

        /**
         * See signatureAssignableTo, compareSignaturesIdentical
         */
        function signatureRelatedTo(source: ts.Signature, target: ts.Signature, erase: boolean, reportErrors: boolean, incompatibleReporter: (source: ts.Type, target: ts.Type) => void): ts.Ternary {
            return compareSignaturesRelated(erase ? getErasedSignature(source) : source, erase ? getErasedSignature(target) : target,
                relation === strictSubtypeRelation ? SignatureCheckMode.StrictArity : 0, reportErrors, reportError, incompatibleReporter, isRelatedToWorker, reportUnreliableMapper);
        }

        function signaturesIdenticalTo(source: ts.Type, target: ts.Type, kind: ts.SignatureKind): ts.Ternary {
            const sourceSignatures = getSignaturesOfType(source, kind);
            const targetSignatures = getSignaturesOfType(target, kind);
            if (sourceSignatures.length !== targetSignatures.length) {
                return ts.Ternary.False;
            }
            let result = ts.Ternary.True;
            for (let i = 0; i < sourceSignatures.length; i++) {
                const related = compareSignaturesIdentical(sourceSignatures[i], targetSignatures[i], /*partialMatch*/ false, /*ignoreThisTypes*/ false, /*ignoreReturnTypes*/ false, isRelatedTo);
                if (!related) {
                    return ts.Ternary.False;
                }
                result &= related;
            }
            return result;
        }

        function membersRelatedToIndexInfo(source: ts.Type, targetInfo: ts.IndexInfo, reportErrors: boolean): ts.Ternary {
            let result = ts.Ternary.True;
            const keyType = targetInfo.keyType;
            const props = source.flags & ts.TypeFlags.Intersection ? getPropertiesOfUnionOrIntersectionType(source as ts.IntersectionType) : getPropertiesOfObjectType(source);
            for (const prop of props) {
                // Skip over ignored JSX and symbol-named members
                if (isIgnoredJsxProperty(source, prop)) {
                    continue;
                }
                if (isApplicableIndexType(getLiteralTypeFromProperty(prop, ts.TypeFlags.StringOrNumberLiteralOrUnique), keyType)) {
                    const propType = getNonMissingTypeOfSymbol(prop);
                    const type = exactOptionalPropertyTypes || propType.flags & ts.TypeFlags.Undefined || keyType === numberType || !(prop.flags & ts.SymbolFlags.Optional)
                        ? propType
                        : getTypeWithFacts(propType, TypeFacts.NEUndefined);
                    const related = isRelatedTo(type, targetInfo.type, RecursionFlags.Both, reportErrors);
                    if (!related) {
                        if (reportErrors) {
                            reportError(ts.Diagnostics.Property_0_is_incompatible_with_index_signature, symbolToString(prop));
                        }
                        return ts.Ternary.False;
                    }
                    result &= related;
                }
            }
            for (const info of getIndexInfosOfType(source)) {
                if (isApplicableIndexType(info.keyType, keyType)) {
                    const related = indexInfoRelatedTo(info, targetInfo, reportErrors);
                    if (!related) {
                        return ts.Ternary.False;
                    }
                    result &= related;
                }
            }
            return result;
        }

        function indexInfoRelatedTo(sourceInfo: ts.IndexInfo, targetInfo: ts.IndexInfo, reportErrors: boolean) {
            const related = isRelatedTo(sourceInfo.type, targetInfo.type, RecursionFlags.Both, reportErrors);
            if (!related && reportErrors) {
                if (sourceInfo.keyType === targetInfo.keyType) {
                    reportError(ts.Diagnostics._0_index_signatures_are_incompatible, typeToString(sourceInfo.keyType));
                }
                else {
                    reportError(ts.Diagnostics._0_and_1_index_signatures_are_incompatible, typeToString(sourceInfo.keyType), typeToString(targetInfo.keyType));
                }
            }
            return related;
        }

        function indexSignaturesRelatedTo(source: ts.Type, target: ts.Type, sourceIsPrimitive: boolean, reportErrors: boolean, intersectionState: IntersectionState): ts.Ternary {
            if (relation === identityRelation) {
                return indexSignaturesIdenticalTo(source, target);
            }
            const indexInfos = getIndexInfosOfType(target);
            const targetHasStringIndex = ts.some(indexInfos, info => info.keyType === stringType);
            let result = ts.Ternary.True;
            for (const targetInfo of indexInfos) {
                const related = !sourceIsPrimitive && targetHasStringIndex && targetInfo.type.flags & ts.TypeFlags.Any ? ts.Ternary.True :
                    isGenericMappedType(source) && targetHasStringIndex ? isRelatedTo(getTemplateTypeFromMappedType(source), targetInfo.type, RecursionFlags.Both, reportErrors) :
                    typeRelatedToIndexInfo(source, targetInfo, reportErrors, intersectionState);
                if (!related) {
                    return ts.Ternary.False;
                }
                result &= related;
            }
            return result;
        }

        function typeRelatedToIndexInfo(source: ts.Type, targetInfo: ts.IndexInfo, reportErrors: boolean, intersectionState: IntersectionState): ts.Ternary {
            const sourceInfo = getApplicableIndexInfo(source, targetInfo.keyType);
            if (sourceInfo) {
                return indexInfoRelatedTo(sourceInfo, targetInfo, reportErrors);
            }
            if (!(intersectionState & IntersectionState.Source) && isObjectTypeWithInferableIndex(source)) {
                // Intersection constituents are never considered to have an inferred index signature
                return membersRelatedToIndexInfo(source, targetInfo, reportErrors);
            }
            if (reportErrors) {
                reportError(ts.Diagnostics.Index_signature_for_type_0_is_missing_in_type_1, typeToString(targetInfo.keyType), typeToString(source));
            }
            return ts.Ternary.False;
        }

        function indexSignaturesIdenticalTo(source: ts.Type, target: ts.Type): ts.Ternary {
            const sourceInfos = getIndexInfosOfType(source);
            const targetInfos = getIndexInfosOfType(target);
            if (sourceInfos.length !== targetInfos.length) {
                return ts.Ternary.False;
            }
            for (const targetInfo of targetInfos) {
                const sourceInfo = getIndexInfoOfType(source, targetInfo.keyType);
                if (!(sourceInfo && isRelatedTo(sourceInfo.type, targetInfo.type, RecursionFlags.Both) && sourceInfo.isReadonly === targetInfo.isReadonly)) {
                    return ts.Ternary.False;
                }
            }
            return ts.Ternary.True;
        }

        function constructorVisibilitiesAreCompatible(sourceSignature: ts.Signature, targetSignature: ts.Signature, reportErrors: boolean) {
            if (!sourceSignature.declaration || !targetSignature.declaration) {
                return true;
            }

            const sourceAccessibility = ts.getSelectedEffectiveModifierFlags(sourceSignature.declaration, ts.ModifierFlags.NonPublicAccessibilityModifier);
            const targetAccessibility = ts.getSelectedEffectiveModifierFlags(targetSignature.declaration, ts.ModifierFlags.NonPublicAccessibilityModifier);

            // A public, protected and private signature is assignable to a private signature.
            if (targetAccessibility === ts.ModifierFlags.Private) {
                return true;
            }

            // A public and protected signature is assignable to a protected signature.
            if (targetAccessibility === ts.ModifierFlags.Protected && sourceAccessibility !== ts.ModifierFlags.Private) {
                return true;
            }

            // Only a public signature is assignable to public signature.
            if (targetAccessibility !== ts.ModifierFlags.Protected && !sourceAccessibility) {
                return true;
            }

            if (reportErrors) {
                reportError(ts.Diagnostics.Cannot_assign_a_0_constructor_type_to_a_1_constructor_type, visibilityToString(sourceAccessibility), visibilityToString(targetAccessibility));
            }

            return false;
        }
    }

    function typeCouldHaveTopLevelSingletonTypes(type: ts.Type): boolean {
        // Okay, yes, 'boolean' is a union of 'true | false', but that's not useful
        // in error reporting scenarios. If you need to use this function but that detail matters,
        // feel free to add a flag.
        if (type.flags & ts.TypeFlags.Boolean) {
            return false;
        }

        if (type.flags & ts.TypeFlags.UnionOrIntersection) {
            return !!ts.forEach((type as ts.IntersectionType).types, typeCouldHaveTopLevelSingletonTypes);
        }

        if (type.flags & ts.TypeFlags.Instantiable) {
            const constraint = getConstraintOfType(type);
            if (constraint && constraint !== type) {
                return typeCouldHaveTopLevelSingletonTypes(constraint);
            }
        }

        return isUnitType(type) || !!(type.flags & ts.TypeFlags.TemplateLiteral) || !!(type.flags & ts.TypeFlags.StringMapping);
    }

    function getExactOptionalUnassignableProperties(source: ts.Type, target: ts.Type) {
        if (isTupleType(source) && isTupleType(target)) return ts.emptyArray;
        return getPropertiesOfType(target)
            .filter(targetProp => isExactOptionalPropertyMismatch(getTypeOfPropertyOfType(source, targetProp.escapedName), getTypeOfSymbol(targetProp)));
    }

    function isExactOptionalPropertyMismatch(source: ts.Type | undefined, target: ts.Type | undefined) {
        return !!source && !!target && maybeTypeOfKind(source, ts.TypeFlags.Undefined) && !!containsMissingType(target);
    }

    function getExactOptionalProperties(type: ts.Type) {
        return getPropertiesOfType(type).filter(targetProp => containsMissingType(getTypeOfSymbol(targetProp)));
    }

    function getBestMatchingType(source: ts.Type, target: ts.UnionOrIntersectionType, isRelatedTo = compareTypesAssignable) {
        return findMatchingDiscriminantType(source, target, isRelatedTo, /*skipPartial*/ true) ||
            findMatchingTypeReferenceOrTypeAliasReference(source, target) ||
            findBestTypeForObjectLiteral(source, target) ||
            findBestTypeForInvokable(source, target) ||
            findMostOverlappyType(source, target);
    }

    function discriminateTypeByDiscriminableItems(target: ts.UnionType, discriminators: [() => ts.Type, ts.__String][], related: (source: ts.Type, target: ts.Type) => boolean | ts.Ternary, defaultValue?: undefined, skipPartial?: boolean): ts.Type | undefined;
    function discriminateTypeByDiscriminableItems(target: ts.UnionType, discriminators: [() => ts.Type, ts.__String][], related: (source: ts.Type, target: ts.Type) => boolean | ts.Ternary, defaultValue: ts.Type, skipPartial?: boolean): ts.Type;
    function discriminateTypeByDiscriminableItems(target: ts.UnionType, discriminators: [() => ts.Type, ts.__String][], related: (source: ts.Type, target: ts.Type) => boolean | ts.Ternary, defaultValue?: ts.Type, skipPartial?: boolean) {
        // undefined=unknown, true=discriminated, false=not discriminated
        // The state of each type progresses from left to right. Discriminated types stop at 'true'.
        const discriminable = target.types.map(_ => undefined) as (boolean | undefined)[];
        for (const [getDiscriminatingType, propertyName] of discriminators) {
            const targetProp = getUnionOrIntersectionProperty(target, propertyName);
            if (skipPartial && targetProp && ts.getCheckFlags(targetProp) & ts.CheckFlags.ReadPartial) {
                continue;
            }
            let i = 0;
            for (const type of target.types) {
                const targetType = getTypeOfPropertyOfType(type, propertyName);
                if (targetType && related(getDiscriminatingType(), targetType)) {
                    discriminable[i] = discriminable[i] === undefined ? true : discriminable[i];
                }
                else {
                    discriminable[i] = false;
                }
                i++;
            }
        }
        const match = discriminable.indexOf(/*searchElement*/ true);
        if (match === -1) {
            return defaultValue;
        }
        // make sure exactly 1 matches before returning it
        let nextMatch = discriminable.indexOf(/*searchElement*/ true, match + 1);
        while (nextMatch !== -1) {
            if (!isTypeIdenticalTo(target.types[match], target.types[nextMatch])) {
                return defaultValue;
            }
            nextMatch = discriminable.indexOf(/*searchElement*/ true, nextMatch + 1);
        }
        return target.types[match];
    }

    /**
     * A type is 'weak' if it is an object type with at least one optional property
     * and no required properties, call/construct signatures or index signatures
     */
    function isWeakType(type: ts.Type): boolean {
        if (type.flags & ts.TypeFlags.Object) {
            const resolved = resolveStructuredTypeMembers(type as ts.ObjectType);
            return resolved.callSignatures.length === 0 && resolved.constructSignatures.length === 0 && resolved.indexInfos.length === 0 &&
                resolved.properties.length > 0 && ts.every(resolved.properties, p => !!(p.flags & ts.SymbolFlags.Optional));
        }
        if (type.flags & ts.TypeFlags.Intersection) {
            return ts.every((type as ts.IntersectionType).types, isWeakType);
        }
        return false;
    }

    function hasCommonProperties(source: ts.Type, target: ts.Type, isComparingJsxAttributes: boolean) {
        for (const prop of getPropertiesOfType(source)) {
            if (isKnownProperty(target, prop.escapedName, isComparingJsxAttributes)) {
                return true;
            }
        }
        return false;
    }

    function getVariances(type: ts.GenericType): ts.VarianceFlags[] {
        // Arrays and tuples are known to be covariant, no need to spend time computing this.
        return type === globalArrayType || type === globalReadonlyArrayType || type.objectFlags & ts.ObjectFlags.Tuple ?
            arrayVariances :
            getVariancesWorker(type.symbol, type.typeParameters);
    }

    function getAliasVariances(symbol: ts.Symbol) {
        return getVariancesWorker(symbol, getSymbolLinks(symbol).typeParameters);
    }

    // Return an array containing the variance of each type parameter. The variance is effectively
    // a digest of the type comparisons that occur for each type argument when instantiations of the
    // generic type are structurally compared. We infer the variance information by comparing
    // instantiations of the generic type for type arguments with known relations. The function
    // returns the emptyArray singleton when invoked recursively for the given generic type.
    function getVariancesWorker(symbol: ts.Symbol, typeParameters: readonly ts.TypeParameter[] = ts.emptyArray): ts.VarianceFlags[] {
        const links = getSymbolLinks(symbol);
        if (!links.variances) {
            ts.tracing?.push(ts.tracing.Phase.CheckTypes, "getVariancesWorker", { arity: typeParameters.length, id: getTypeId(getDeclaredTypeOfSymbol(symbol)) });
            links.variances = ts.emptyArray;
            const variances = [];
            for (const tp of typeParameters) {
                const modifiers = getVarianceModifiers(tp);
                let variance = modifiers & ts.ModifierFlags.Out ?
                    modifiers & ts.ModifierFlags.In ? ts.VarianceFlags.Invariant : ts.VarianceFlags.Covariant :
                    modifiers & ts.ModifierFlags.In ? ts.VarianceFlags.Contravariant : undefined;
                if (variance === undefined) {
                    let unmeasurable = false;
                    let unreliable = false;
                    const oldHandler = outofbandVarianceMarkerHandler;
                    outofbandVarianceMarkerHandler = (onlyUnreliable) => onlyUnreliable ? unreliable = true : unmeasurable = true;
                    // We first compare instantiations where the type parameter is replaced with
                    // marker types that have a known subtype relationship. From this we can infer
                    // invariance, covariance, contravariance or bivariance.
                    const typeWithSuper = createMarkerType(symbol, tp, markerSuperType);
                    const typeWithSub = createMarkerType(symbol, tp, markerSubType);
                    variance = (isTypeAssignableTo(typeWithSub, typeWithSuper) ? ts.VarianceFlags.Covariant : 0) |
                        (isTypeAssignableTo(typeWithSuper, typeWithSub) ? ts.VarianceFlags.Contravariant : 0);
                    // If the instantiations appear to be related bivariantly it may be because the
                    // type parameter is independent (i.e. it isn't witnessed anywhere in the generic
                    // type). To determine this we compare instantiations where the type parameter is
                    // replaced with marker types that are known to be unrelated.
                    if (variance === ts.VarianceFlags.Bivariant && isTypeAssignableTo(createMarkerType(symbol, tp, markerOtherType), typeWithSuper)) {
                        variance = ts.VarianceFlags.Independent;
                    }
                    outofbandVarianceMarkerHandler = oldHandler;
                    if (unmeasurable || unreliable) {
                        if (unmeasurable) {
                            variance |= ts.VarianceFlags.Unmeasurable;
                        }
                        if (unreliable) {
                            variance |= ts.VarianceFlags.Unreliable;
                        }
                    }
                }
                variances.push(variance);
            }
            links.variances = variances;
            ts.tracing?.pop({ variances: variances.map(ts.Debug.formatVariance) });
        }
        return links.variances;
    }

    function createMarkerType(symbol: ts.Symbol, source: ts.TypeParameter, target: ts.Type) {
        const mapper = makeUnaryTypeMapper(source, target);
        const type = getDeclaredTypeOfSymbol(symbol);
        if (isErrorType(type)) {
            return type;
        }
        const result = symbol.flags & ts.SymbolFlags.TypeAlias ?
            getTypeAliasInstantiation(symbol, instantiateTypes(getSymbolLinks(symbol).typeParameters!, mapper)) :
            createTypeReference(type as ts.GenericType, instantiateTypes((type as ts.GenericType).typeParameters, mapper));
        markerTypes.add(getTypeId(result));
        return result;
    }

    function isMarkerType(type: ts.Type) {
        return markerTypes.has(getTypeId(type));
    }

    function getVarianceModifiers(tp: ts.TypeParameter): ts.ModifierFlags {
        return (ts.some(tp.symbol?.declarations, d => ts.hasSyntacticModifier(d, ts.ModifierFlags.In)) ? ts.ModifierFlags.In : 0) |
            (ts.some(tp.symbol?.declarations, d => ts.hasSyntacticModifier(d, ts.ModifierFlags.Out)) ? ts.ModifierFlags.Out: 0);
    }

    // Return true if the given type reference has a 'void' type argument for a covariant type parameter.
    // See comment at call in recursiveTypeRelatedTo for when this case matters.
    function hasCovariantVoidArgument(typeArguments: readonly ts.Type[], variances: ts.VarianceFlags[]): boolean {
        for (let i = 0; i < variances.length; i++) {
            if ((variances[i] & ts.VarianceFlags.VarianceMask) === ts.VarianceFlags.Covariant && typeArguments[i].flags & ts.TypeFlags.Void) {
                return true;
            }
        }
        return false;
    }

    function isUnconstrainedTypeParameter(type: ts.Type) {
        return type.flags & ts.TypeFlags.TypeParameter && !getConstraintOfTypeParameter(type as ts.TypeParameter);
    }

    function isNonDeferredTypeReference(type: ts.Type): type is ts.TypeReference {
        return !!(ts.getObjectFlags(type) & ts.ObjectFlags.Reference) && !(type as ts.TypeReference).node;
    }

    function isTypeReferenceWithGenericArguments(type: ts.Type): boolean {
        return isNonDeferredTypeReference(type) && ts.some(getTypeArguments(type), t => !!(t.flags & ts.TypeFlags.TypeParameter) || isTypeReferenceWithGenericArguments(t));
    }

    function getGenericTypeReferenceRelationKey(source: ts.TypeReference, target: ts.TypeReference, postFix: string, ignoreConstraints: boolean) {
        const typeParameters: ts.Type[] = [];
        let constraintMarker = "";
        const sourceId = getTypeReferenceId(source, 0);
        const targetId = getTypeReferenceId(target, 0);
        return `${constraintMarker}${sourceId},${targetId}${postFix}`;
        // getTypeReferenceId(A<T, number, U>) returns "111=0-12=1"
        // where A.id=111 and number.id=12
        function getTypeReferenceId(type: ts.TypeReference, depth = 0) {
            let result = "" + type.target.id;
            for (const t of getTypeArguments(type)) {
                if (t.flags & ts.TypeFlags.TypeParameter) {
                    if (ignoreConstraints || isUnconstrainedTypeParameter(t)) {
                        let index = typeParameters.indexOf(t);
                        if (index < 0) {
                            index = typeParameters.length;
                            typeParameters.push(t);
                        }
                        result += "=" + index;
                        continue;
                    }
                    // We mark type references that reference constrained type parameters such that we know to obtain
                    // and look for a "broadest equivalent key" in the cache.
                    constraintMarker = "*";
                }
                else if (depth < 4 && isTypeReferenceWithGenericArguments(t)) {
                    result += "<" + getTypeReferenceId(t as ts.TypeReference, depth + 1) + ">";
                    continue;
                }
                result += "-" + t.id;
            }
            return result;
        }
    }

    /**
     * To improve caching, the relation key for two generic types uses the target's id plus ids of the type parameters.
     * For other cases, the types ids are used.
     */
    function getRelationKey(source: ts.Type, target: ts.Type, intersectionState: IntersectionState, relation: ts.ESMap<string, ts.RelationComparisonResult>, ignoreConstraints: boolean) {
        if (relation === identityRelation && source.id > target.id) {
            const temp = source;
            source = target;
            target = temp;
        }
        const postFix = intersectionState ? ":" + intersectionState : "";
        return isTypeReferenceWithGenericArguments(source) && isTypeReferenceWithGenericArguments(target) ?
            getGenericTypeReferenceRelationKey(source as ts.TypeReference, target as ts.TypeReference, postFix, ignoreConstraints) :
            `${source.id},${target.id}${postFix}`;
    }

    // Invoke the callback for each underlying property symbol of the given symbol and return the first
    // value that isn't undefined.
    function forEachProperty<T>(prop: ts.Symbol, callback: (p: ts.Symbol) => T): T | undefined {
        if (ts.getCheckFlags(prop) & ts.CheckFlags.Synthetic) {
            for (const t of (prop as ts.TransientSymbol).containingType!.types) {
                const p = getPropertyOfType(t, prop.escapedName);
                const result = p && forEachProperty(p, callback);
                if (result) {
                    return result;
                }
            }
            return undefined;
        }
        return callback(prop);
    }

    // Return the declaring class type of a property or undefined if property not declared in class
    function getDeclaringClass(prop: ts.Symbol) {
        return prop.parent && prop.parent.flags & ts.SymbolFlags.Class ? getDeclaredTypeOfSymbol(getParentOfSymbol(prop)!) as ts.InterfaceType : undefined;
    }

    // Return the inherited type of the given property or undefined if property doesn't exist in a base class.
    function getTypeOfPropertyInBaseClass(property: ts.Symbol) {
        const classType = getDeclaringClass(property);
        const baseClassType = classType && getBaseTypes(classType)[0];
        return baseClassType && getTypeOfPropertyOfType(baseClassType, property.escapedName);
    }

    // Return true if some underlying source property is declared in a class that derives
    // from the given base class.
    function isPropertyInClassDerivedFrom(prop: ts.Symbol, baseClass: ts.Type | undefined) {
        return forEachProperty(prop, sp => {
            const sourceClass = getDeclaringClass(sp);
            return sourceClass ? hasBaseType(sourceClass, baseClass) : false;
        });
    }

    // Return true if source property is a valid override of protected parts of target property.
    function isValidOverrideOf(sourceProp: ts.Symbol, targetProp: ts.Symbol) {
        return !forEachProperty(targetProp, tp => ts.getDeclarationModifierFlagsFromSymbol(tp) & ts.ModifierFlags.Protected ?
            !isPropertyInClassDerivedFrom(sourceProp, getDeclaringClass(tp)) : false);
    }

    // Return true if the given class derives from each of the declaring classes of the protected
    // constituents of the given property.
    function isClassDerivedFromDeclaringClasses<T extends ts.Type>(checkClass: T, prop: ts.Symbol, writing: boolean) {
        return forEachProperty(prop, p => ts.getDeclarationModifierFlagsFromSymbol(p, writing) & ts.ModifierFlags.Protected ?
            !hasBaseType(checkClass, getDeclaringClass(p)) : false) ? undefined : checkClass;
    }

    // Return true if the given type is deeply nested. We consider this to be the case when structural type comparisons
    // for maxDepth or more occurrences or instantiations of the type have been recorded on the given stack. It is possible,
    // though highly unlikely, for this test to be true in a situation where a chain of instantiations is not infinitely
    // expanding. Effectively, we will generate a false positive when two types are structurally equal to at least maxDepth
    // levels, but unequal at some level beyond that.
    // In addition, this will also detect when an indexed access has been chained off of maxDepth more times (which is
    // essentially the dual of the structural comparison), and likewise mark the type as deeply nested, potentially adding
    // false positives for finite but deeply expanding indexed accesses (eg, for `Q[P1][P2][P3][P4][P5]`).
    // It also detects when a recursive type reference has expanded maxDepth or more times, e.g. if the true branch of
    // `type A<T> = null extends T ? [A<NonNullable<T>>] : [T]`
    // has expanded into `[A<NonNullable<NonNullable<NonNullable<NonNullable<NonNullable<T>>>>>>]`. In such cases we need
    // to terminate the expansion, and we do so here.
    function isDeeplyNestedType(type: ts.Type, stack: ts.Type[], depth: number, maxDepth = 3): boolean {
        if (depth >= maxDepth) {
            const identity = getRecursionIdentity(type);
            let count = 0;
            let lastTypeId = 0;
            for (let i = 0; i < depth; i++) {
                const t = stack[i];
                if (getRecursionIdentity(t) === identity) {
                    // We only count occurrences with a higher type id than the previous occurrence, since higher
                    // type ids are an indicator of newer instantiations caused by recursion.
                    if (t.id >= lastTypeId) {
                        count++;
                        if (count >= maxDepth) {
                            return true;
                        }
                    }
                    lastTypeId = t.id;
                }
            }
        }
        return false;
    }

    // The recursion identity of a type is an object identity that is shared among multiple instantiations of the type.
    // We track recursion identities in order to identify deeply nested and possibly infinite type instantiations with
    // the same origin. For example, when type parameters are in scope in an object type such as { x: T }, all
    // instantiations of that type have the same recursion identity. The default recursion identity is the object
    // identity of the type, meaning that every type is unique. Generally, types with constituents that could circularly
    // reference the type have a recursion identity that differs from the object identity.
    function getRecursionIdentity(type: ts.Type): object {
        // Object and array literals are known not to contain recursive references and don't need a recursion identity.
        if (type.flags & ts.TypeFlags.Object && !isObjectOrArrayLiteralType(type)) {
            if (ts.getObjectFlags(type) && ts.ObjectFlags.Reference && (type as ts.TypeReference).node) {
                // Deferred type references are tracked through their associated AST node. This gives us finer
                // granularity than using their associated target because each manifest type reference has a
                // unique AST node.
                return (type as ts.TypeReference).node!;
            }
            if (type.symbol && !(ts.getObjectFlags(type) & ts.ObjectFlags.Anonymous && type.symbol.flags & ts.SymbolFlags.Class)) {
                // We track all object types that have an associated symbol (representing the origin of the type), but
                // exclude the static side of classes from this check since it shares its symbol with the instance side.
                return type.symbol;
            }
            if (isTupleType(type)) {
                // Tuple types are tracked through their target type
                return type.target;
            }
        }
        if (type.flags & ts.TypeFlags.TypeParameter) {
            return type.symbol;
        }
        if (type.flags & ts.TypeFlags.IndexedAccess) {
            // Identity is the leftmost object type in a chain of indexed accesses, eg, in A[P][Q] it is A
            do {
                type = (type as ts.IndexedAccessType).objectType;
            } while (type.flags & ts.TypeFlags.IndexedAccess);
            return type;
        }
        if (type.flags & ts.TypeFlags.Conditional) {
            // The root object represents the origin of the conditional type
            return (type as ts.ConditionalType).root;
        }
        return type;
    }

    function isPropertyIdenticalTo(sourceProp: ts.Symbol, targetProp: ts.Symbol): boolean {
        return compareProperties(sourceProp, targetProp, compareTypesIdentical) !== ts.Ternary.False;
    }

    function compareProperties(sourceProp: ts.Symbol, targetProp: ts.Symbol, compareTypes: (source: ts.Type, target: ts.Type) => ts.Ternary): ts.Ternary {
        // Two members are considered identical when
        // - they are public properties with identical names, optionality, and types,
        // - they are private or protected properties originating in the same declaration and having identical types
        if (sourceProp === targetProp) {
            return ts.Ternary.True;
        }
        const sourcePropAccessibility = ts.getDeclarationModifierFlagsFromSymbol(sourceProp) & ts.ModifierFlags.NonPublicAccessibilityModifier;
        const targetPropAccessibility = ts.getDeclarationModifierFlagsFromSymbol(targetProp) & ts.ModifierFlags.NonPublicAccessibilityModifier;
        if (sourcePropAccessibility !== targetPropAccessibility) {
            return ts.Ternary.False;
        }
        if (sourcePropAccessibility) {
            if (getTargetSymbol(sourceProp) !== getTargetSymbol(targetProp)) {
                return ts.Ternary.False;
            }
        }
        else {
            if ((sourceProp.flags & ts.SymbolFlags.Optional) !== (targetProp.flags & ts.SymbolFlags.Optional)) {
                return ts.Ternary.False;
            }
        }
        if (isReadonlySymbol(sourceProp) !== isReadonlySymbol(targetProp)) {
            return ts.Ternary.False;
        }
        return compareTypes(getTypeOfSymbol(sourceProp), getTypeOfSymbol(targetProp));
    }

    function isMatchingSignature(source: ts.Signature, target: ts.Signature, partialMatch: boolean) {
        const sourceParameterCount = getParameterCount(source);
        const targetParameterCount = getParameterCount(target);
        const sourceMinArgumentCount = getMinArgumentCount(source);
        const targetMinArgumentCount = getMinArgumentCount(target);
        const sourceHasRestParameter = hasEffectiveRestParameter(source);
        const targetHasRestParameter = hasEffectiveRestParameter(target);
        // A source signature matches a target signature if the two signatures have the same number of required,
        // optional, and rest parameters.
        if (sourceParameterCount === targetParameterCount &&
            sourceMinArgumentCount === targetMinArgumentCount &&
            sourceHasRestParameter === targetHasRestParameter) {
            return true;
        }
        // A source signature partially matches a target signature if the target signature has no fewer required
        // parameters
        if (partialMatch && sourceMinArgumentCount <= targetMinArgumentCount) {
            return true;
        }
        return false;
    }

    /**
     * See signatureRelatedTo, compareSignaturesIdentical
     */
    function compareSignaturesIdentical(source: ts.Signature, target: ts.Signature, partialMatch: boolean, ignoreThisTypes: boolean, ignoreReturnTypes: boolean, compareTypes: (s: ts.Type, t: ts.Type) => ts.Ternary): ts.Ternary {
        // TODO (drosen): De-duplicate code between related functions.
        if (source === target) {
            return ts.Ternary.True;
        }
        if (!(isMatchingSignature(source, target, partialMatch))) {
            return ts.Ternary.False;
        }
        // Check that the two signatures have the same number of type parameters.
        if (ts.length(source.typeParameters) !== ts.length(target.typeParameters)) {
            return ts.Ternary.False;
        }
        // Check that type parameter constraints and defaults match. If they do, instantiate the source
        // signature with the type parameters of the target signature and continue the comparison.
        if (target.typeParameters) {
            const mapper = createTypeMapper(source.typeParameters!, target.typeParameters);
            for (let i = 0; i < target.typeParameters.length; i++) {
                const s = source.typeParameters![i];
                const t = target.typeParameters[i];
                if (!(s === t || compareTypes(instantiateType(getConstraintFromTypeParameter(s), mapper) || unknownType, getConstraintFromTypeParameter(t) || unknownType) &&
                    compareTypes(instantiateType(getDefaultFromTypeParameter(s), mapper) || unknownType, getDefaultFromTypeParameter(t) || unknownType))) {
                    return ts.Ternary.False;
                }
            }
            source = instantiateSignature(source, mapper, /*eraseTypeParameters*/ true);
        }
        let result = ts.Ternary.True;
        if (!ignoreThisTypes) {
            const sourceThisType = getThisTypeOfSignature(source);
            if (sourceThisType) {
                const targetThisType = getThisTypeOfSignature(target);
                if (targetThisType) {
                    const related = compareTypes(sourceThisType, targetThisType);
                    if (!related) {
                        return ts.Ternary.False;
                    }
                    result &= related;
                }
            }
        }
        const targetLen = getParameterCount(target);
        for (let i = 0; i < targetLen; i++) {
            const s = getTypeAtPosition(source, i);
            const t = getTypeAtPosition(target, i);
            const related = compareTypes(t, s);
            if (!related) {
                return ts.Ternary.False;
            }
            result &= related;
        }
        if (!ignoreReturnTypes) {
            const sourceTypePredicate = getTypePredicateOfSignature(source);
            const targetTypePredicate = getTypePredicateOfSignature(target);
            result &= sourceTypePredicate || targetTypePredicate ?
                compareTypePredicatesIdentical(sourceTypePredicate, targetTypePredicate, compareTypes) :
                compareTypes(getReturnTypeOfSignature(source), getReturnTypeOfSignature(target));
        }
        return result;
    }

    function compareTypePredicatesIdentical(source: ts.TypePredicate | undefined, target: ts.TypePredicate | undefined, compareTypes: (s: ts.Type, t: ts.Type) => ts.Ternary): ts.Ternary {
        return !(source && target && typePredicateKindsMatch(source, target)) ? ts.Ternary.False :
            source.type === target.type ? ts.Ternary.True :
            source.type && target.type ? compareTypes(source.type, target.type) :
            ts.Ternary.False;
    }

    function literalTypesWithSameBaseType(types: ts.Type[]): boolean {
        let commonBaseType: ts.Type | undefined;
        for (const t of types) {
            if (!(t.flags & ts.TypeFlags.Never)) {
                const baseType = getBaseTypeOfLiteralType(t);
                commonBaseType ??= baseType;
                if (baseType === t || baseType !== commonBaseType) {
                    return false;
                }
            }
        }
        return true;
    }

    function getCombinedTypeFlags(types: ts.Type[]): ts.TypeFlags {
        return ts.reduceLeft(types, (flags, t) => flags | (t.flags & ts.TypeFlags.Union ? getCombinedTypeFlags((t as ts.UnionType).types) : t.flags), 0);
    }

    function getCommonSupertype(types: ts.Type[]): ts.Type {
        if (types.length === 1) {
            return types[0];
        }
        // Remove nullable types from each of the candidates.
        const primaryTypes = strictNullChecks ? ts.sameMap(types, t => filterType(t, u => !(u.flags & ts.TypeFlags.Nullable))) : types;
        // When the candidate types are all literal types with the same base type, return a union
        // of those literal types. Otherwise, return the leftmost type for which no type to the
        // right is a supertype.
        const superTypeOrUnion = literalTypesWithSameBaseType(primaryTypes) ?
            getUnionType(primaryTypes) :
            ts.reduceLeft(primaryTypes, (s, t) => isTypeSubtypeOf(s, t) ? t : s)!;
        // Add any nullable types that occurred in the candidates back to the result.
        return primaryTypes === types ? superTypeOrUnion : getNullableType(superTypeOrUnion, getCombinedTypeFlags(types) & ts.TypeFlags.Nullable);
    }

    // Return the leftmost type for which no type to the right is a subtype.
    function getCommonSubtype(types: ts.Type[]) {
        return ts.reduceLeft(types, (s, t) => isTypeSubtypeOf(t, s) ? t : s)!;
    }

    function isArrayType(type: ts.Type): type is ts.TypeReference {
        return !!(ts.getObjectFlags(type) & ts.ObjectFlags.Reference) && ((type as ts.TypeReference).target === globalArrayType || (type as ts.TypeReference).target === globalReadonlyArrayType);
    }

    function isReadonlyArrayType(type: ts.Type): boolean {
        return !!(ts.getObjectFlags(type) & ts.ObjectFlags.Reference) && (type as ts.TypeReference).target === globalReadonlyArrayType;
    }

    function isArrayOrTupleType(type: ts.Type): type is ts.TypeReference {
        return isArrayType(type) || isTupleType(type);
    }

    function isMutableArrayOrTuple(type: ts.Type): boolean {
        return isArrayType(type) && !isReadonlyArrayType(type) || isTupleType(type) && !type.target.readonly;
    }

    function getElementTypeOfArrayType(type: ts.Type): ts.Type | undefined {
        return isArrayType(type) ? getTypeArguments(type)[0] : undefined;
    }

    function isArrayLikeType(type: ts.Type): boolean {
        // A type is array-like if it is a reference to the global Array or global ReadonlyArray type,
        // or if it is not the undefined or null type and if it is assignable to ReadonlyArray<any>
        return isArrayType(type) || !(type.flags & ts.TypeFlags.Nullable) && isTypeAssignableTo(type, anyReadonlyArrayType);
    }

    function getSingleBaseForNonAugmentingSubtype(type: ts.Type) {
        if (!(ts.getObjectFlags(type) & ts.ObjectFlags.Reference) || !(ts.getObjectFlags((type as ts.TypeReference).target) & ts.ObjectFlags.ClassOrInterface)) {
            return undefined;
        }
        if (ts.getObjectFlags(type) & ts.ObjectFlags.IdenticalBaseTypeCalculated) {
            return ts.getObjectFlags(type) & ts.ObjectFlags.IdenticalBaseTypeExists ? (type as ts.TypeReference).cachedEquivalentBaseType : undefined;
        }
        (type as ts.TypeReference).objectFlags |= ts.ObjectFlags.IdenticalBaseTypeCalculated;
        const target = (type as ts.TypeReference).target as ts.InterfaceType;
        if (ts.getObjectFlags(target) & ts.ObjectFlags.Class) {
            const baseTypeNode = getBaseTypeNodeOfClass(target);
            // A base type expression may circularly reference the class itself (e.g. as an argument to function call), so we only
            // check for base types specified as simple qualified names.
            if (baseTypeNode && baseTypeNode.expression.kind !== ts.SyntaxKind.Identifier && baseTypeNode.expression.kind !== ts.SyntaxKind.PropertyAccessExpression) {
                return undefined;
            }
        }
        const bases = getBaseTypes(target);
        if (bases.length !== 1) {
            return undefined;
        }
        if (getMembersOfSymbol(type.symbol).size) {
            return undefined; // If the interface has any members, they may subtype members in the base, so we should do a full structural comparison
        }
        let instantiatedBase = !ts.length(target.typeParameters) ? bases[0] : instantiateType(bases[0], createTypeMapper(target.typeParameters!, getTypeArguments(type as ts.TypeReference).slice(0, target.typeParameters!.length)));
        if (ts.length(getTypeArguments(type as ts.TypeReference)) > ts.length(target.typeParameters)) {
            instantiatedBase = getTypeWithThisArgument(instantiatedBase, ts.last(getTypeArguments(type as ts.TypeReference)));
        }
        (type as ts.TypeReference).objectFlags |= ts.ObjectFlags.IdenticalBaseTypeExists;
        return (type as ts.TypeReference).cachedEquivalentBaseType = instantiatedBase;
    }

    function isEmptyLiteralType(type: ts.Type): boolean {
        return strictNullChecks ? type === implicitNeverType : type === undefinedWideningType;
    }

    function isEmptyArrayLiteralType(type: ts.Type): boolean {
        const elementType = getElementTypeOfArrayType(type);
        return !!elementType && isEmptyLiteralType(elementType);
    }

    function isTupleLikeType(type: ts.Type): boolean {
        return isTupleType(type) || !!getPropertyOfType(type, "0" as ts.__String);
    }

    function isArrayOrTupleLikeType(type: ts.Type): boolean {
        return isArrayLikeType(type) || isTupleLikeType(type);
    }

    function getTupleElementType(type: ts.Type, index: number) {
        const propType = getTypeOfPropertyOfType(type, "" + index as ts.__String);
        if (propType) {
            return propType;
        }
        if (everyType(type, isTupleType)) {
            return mapType(type, t => getRestTypeOfTupleType(t as ts.TupleTypeReference) || undefinedType);
        }
        return undefined;
    }

    function isNeitherUnitTypeNorNever(type: ts.Type): boolean {
        return !(type.flags & (ts.TypeFlags.Unit | ts.TypeFlags.Never));
    }

    function isUnitType(type: ts.Type): boolean {
        return !!(type.flags & ts.TypeFlags.Unit);
    }

    function isUnitLikeType(type: ts.Type): boolean {
        return isUnitType(getBaseConstraintOrType(type));
    }

    function extractUnitType(type: ts.Type) {
        return type.flags & ts.TypeFlags.Intersection ? ts.find((type as ts.IntersectionType).types, isUnitType) || type : type;
    }

    function isLiteralType(type: ts.Type): boolean {
        return type.flags & ts.TypeFlags.Boolean ? true :
            type.flags & ts.TypeFlags.Union ? type.flags & ts.TypeFlags.EnumLiteral ? true : ts.every((type as ts.UnionType).types, isUnitType) :
            isUnitType(type);
    }

    function getBaseTypeOfLiteralType(type: ts.Type): ts.Type {
        return type.flags & ts.TypeFlags.EnumLiteral ? getBaseTypeOfEnumLiteralType(type as ts.LiteralType) :
            type.flags & (ts.TypeFlags.StringLiteral | ts.TypeFlags.TemplateLiteral | ts.TypeFlags.StringMapping) ? stringType :
            type.flags & ts.TypeFlags.NumberLiteral ? numberType :
            type.flags & ts.TypeFlags.BigIntLiteral ? bigintType :
            type.flags & ts.TypeFlags.BooleanLiteral ? booleanType :
            type.flags & ts.TypeFlags.Union ? getBaseTypeOfLiteralTypeUnion(type as ts.UnionType) :
            type;
    }

    function getBaseTypeOfLiteralTypeUnion(type: ts.UnionType) {
        const key = `B${getTypeId(type)}`;
        return getCachedType(key) ?? setCachedType(key, mapType(type, getBaseTypeOfLiteralType));
    }

    function getWidenedLiteralType(type: ts.Type): ts.Type {
        return type.flags & ts.TypeFlags.EnumLiteral && isFreshLiteralType(type) ? getBaseTypeOfEnumLiteralType(type as ts.LiteralType) :
            type.flags & ts.TypeFlags.StringLiteral && isFreshLiteralType(type) ? stringType :
            type.flags & ts.TypeFlags.NumberLiteral && isFreshLiteralType(type) ? numberType :
            type.flags & ts.TypeFlags.BigIntLiteral && isFreshLiteralType(type) ? bigintType :
            type.flags & ts.TypeFlags.BooleanLiteral && isFreshLiteralType(type) ? booleanType :
            type.flags & ts.TypeFlags.Union ? mapType(type as ts.UnionType, getWidenedLiteralType) :
            type;
    }

    function getWidenedUniqueESSymbolType(type: ts.Type): ts.Type {
        return type.flags & ts.TypeFlags.UniqueESSymbol ? esSymbolType :
            type.flags & ts.TypeFlags.Union ? mapType(type as ts.UnionType, getWidenedUniqueESSymbolType) :
            type;
    }

    function getWidenedLiteralLikeTypeForContextualType(type: ts.Type, contextualType: ts.Type | undefined) {
        if (!isLiteralOfContextualType(type, contextualType)) {
            type = getWidenedUniqueESSymbolType(getWidenedLiteralType(type));
        }
        return getRegularTypeOfLiteralType(type);
    }

    function getWidenedLiteralLikeTypeForContextualReturnTypeIfNeeded(type: ts.Type | undefined, contextualSignatureReturnType: ts.Type | undefined, isAsync: boolean) {
        if (type && isUnitType(type)) {
            const contextualType = !contextualSignatureReturnType ? undefined :
                isAsync ? getPromisedTypeOfPromise(contextualSignatureReturnType) :
                contextualSignatureReturnType;
            type = getWidenedLiteralLikeTypeForContextualType(type, contextualType);
        }
        return type;
    }

    function getWidenedLiteralLikeTypeForContextualIterationTypeIfNeeded(type: ts.Type | undefined, contextualSignatureReturnType: ts.Type | undefined, kind: IterationTypeKind, isAsyncGenerator: boolean) {
        if (type && isUnitType(type)) {
            const contextualType = !contextualSignatureReturnType ? undefined :
                getIterationTypeOfGeneratorFunctionReturnType(kind, contextualSignatureReturnType, isAsyncGenerator);
            type = getWidenedLiteralLikeTypeForContextualType(type, contextualType);
        }
        return type;
    }

    /**
     * Check if a Type was written as a tuple type literal.
     * Prefer using isTupleLikeType() unless the use of `elementTypes`/`getTypeArguments` is required.
     */
    function isTupleType(type: ts.Type): type is ts.TupleTypeReference {
        return !!(ts.getObjectFlags(type) & ts.ObjectFlags.Reference && (type as ts.TypeReference).target.objectFlags & ts.ObjectFlags.Tuple);
    }

    function isGenericTupleType(type: ts.Type): type is ts.TupleTypeReference {
        return isTupleType(type) && !!(type.target.combinedFlags & ts.ElementFlags.Variadic);
    }

    function isSingleElementGenericTupleType(type: ts.Type): type is ts.TupleTypeReference {
        return isGenericTupleType(type) && type.target.elementFlags.length === 1;
    }

    function getRestTypeOfTupleType(type: ts.TupleTypeReference) {
        return getElementTypeOfSliceOfTupleType(type, type.target.fixedLength);
    }

    function getRestArrayTypeOfTupleType(type: ts.TupleTypeReference) {
        const restType = getRestTypeOfTupleType(type);
        return restType && createArrayType(restType);
    }

    function getElementTypeOfSliceOfTupleType(type: ts.TupleTypeReference, index: number, endSkipCount = 0, writing = false) {
        const length = getTypeReferenceArity(type) - endSkipCount;
        if (index < length) {
            const typeArguments = getTypeArguments(type);
            const elementTypes: ts.Type[] = [];
            for (let i = index; i < length; i++) {
                const t = typeArguments[i];
                elementTypes.push(type.target.elementFlags[i] & ts.ElementFlags.Variadic ? getIndexedAccessType(t, numberType) : t);
            }
            return writing ? getIntersectionType(elementTypes) : getUnionType(elementTypes);
        }
        return undefined;
    }

    function isTupleTypeStructureMatching(t1: ts.TupleTypeReference, t2: ts.TupleTypeReference) {
        return getTypeReferenceArity(t1) === getTypeReferenceArity(t2) &&
            ts.every(t1.target.elementFlags, (f, i) => (f & ts.ElementFlags.Variable) === (t2.target.elementFlags[i] & ts.ElementFlags.Variable));
    }

    function isZeroBigInt({value}: ts.BigIntLiteralType) {
        return value.base10Value === "0";
    }

    function removeDefinitelyFalsyTypes(type: ts.Type): ts.Type {
        return filterType(type, t => !!(getTypeFacts(t) & TypeFacts.Truthy));
    }

    function extractDefinitelyFalsyTypes(type: ts.Type): ts.Type {
        return mapType(type, getDefinitelyFalsyPartOfType);
    }

    function getDefinitelyFalsyPartOfType(type: ts.Type): ts.Type {
        return type.flags & ts.TypeFlags.String ? emptyStringType :
            type.flags & ts.TypeFlags.Number ? zeroType :
            type.flags & ts.TypeFlags.BigInt ? zeroBigIntType :
            type === regularFalseType ||
            type === falseType ||
            type.flags & (ts.TypeFlags.Void | ts.TypeFlags.Undefined | ts.TypeFlags.Null | ts.TypeFlags.AnyOrUnknown) ||
            type.flags & ts.TypeFlags.StringLiteral && (type as ts.StringLiteralType).value === "" ||
            type.flags & ts.TypeFlags.NumberLiteral && (type as ts.NumberLiteralType).value === 0 ||
            type.flags & ts.TypeFlags.BigIntLiteral && isZeroBigInt(type as ts.BigIntLiteralType) ? type :
            neverType;
    }

    /**
     * Add undefined or null or both to a type if they are missing.
     * @param type - type to add undefined and/or null to if not present
     * @param flags - Either TypeFlags.Undefined or TypeFlags.Null, or both
     */
    function getNullableType(type: ts.Type, flags: ts.TypeFlags): ts.Type {
        const missing = (flags & ~type.flags) & (ts.TypeFlags.Undefined | ts.TypeFlags.Null);
        return missing === 0 ? type :
            missing === ts.TypeFlags.Undefined ? getUnionType([type, undefinedType]) :
            missing === ts.TypeFlags.Null ? getUnionType([type, nullType]) :
            getUnionType([type, undefinedType, nullType]);
    }

    function getOptionalType(type: ts.Type, isProperty = false): ts.Type {
        ts.Debug.assert(strictNullChecks);
        const missingOrUndefined = isProperty ? missingType : undefinedType;
        return type.flags & ts.TypeFlags.Undefined || type.flags & ts.TypeFlags.Union && (type as ts.UnionType).types[0] === missingOrUndefined ? type : getUnionType([type, missingOrUndefined]);
    }

    function getGlobalNonNullableTypeInstantiation(type: ts.Type) {
        if (!deferredGlobalNonNullableTypeAlias) {
            deferredGlobalNonNullableTypeAlias = getGlobalSymbol("NonNullable" as ts.__String, ts.SymbolFlags.TypeAlias, /*diagnostic*/ undefined) || unknownSymbol;
        }
        return deferredGlobalNonNullableTypeAlias !== unknownSymbol ?
            getTypeAliasInstantiation(deferredGlobalNonNullableTypeAlias, [type]) :
            getIntersectionType([type, emptyObjectType]);
    }

    function getNonNullableType(type: ts.Type): ts.Type {
        return strictNullChecks ? getAdjustedTypeWithFacts(type, TypeFacts.NEUndefinedOrNull) : type;
    }

    function addOptionalTypeMarker(type: ts.Type) {
        return strictNullChecks ? getUnionType([type, optionalType]) : type;
    }

    function removeOptionalTypeMarker(type: ts.Type): ts.Type {
        return strictNullChecks ? removeType(type, optionalType) : type;
    }

    function propagateOptionalTypeMarker(type: ts.Type, node: ts.OptionalChain, wasOptional: boolean) {
        return wasOptional ? ts.isOutermostOptionalChain(node) ? getOptionalType(type) : addOptionalTypeMarker(type) : type;
    }

    function getOptionalExpressionType(exprType: ts.Type, expression: ts.Expression) {
        return ts.isExpressionOfOptionalChainRoot(expression) ? getNonNullableType(exprType) :
            ts.isOptionalChain(expression) ? removeOptionalTypeMarker(exprType) :
            exprType;
    }

    function removeMissingType(type: ts.Type, isOptional: boolean) {
        return exactOptionalPropertyTypes && isOptional ? removeType(type, missingType) : type;
    }

    function containsMissingType(type: ts.Type) {
        return exactOptionalPropertyTypes && (type === missingType || type.flags & ts.TypeFlags.Union && containsType((type as ts.UnionType).types, missingType));
    }

    function removeMissingOrUndefinedType(type: ts.Type): ts.Type {
        return exactOptionalPropertyTypes ? removeType(type, missingType) : getTypeWithFacts(type, TypeFacts.NEUndefined);
    }

    /**
     * Is source potentially coercible to target type under `==`.
     * Assumes that `source` is a constituent of a union, hence
     * the boolean literal flag on the LHS, but not on the RHS.
     *
     * This does not fully replicate the semantics of `==`. The
     * intention is to catch cases that are clearly not right.
     *
     * Comparing (string | number) to number should not remove the
     * string element.
     *
     * Comparing (string | number) to 1 will remove the string
     * element, though this is not sound. This is a pragmatic
     * choice.
     *
     * @see narrowTypeByEquality
     *
     * @param source
     * @param target
     */
    function isCoercibleUnderDoubleEquals(source: ts.Type, target: ts.Type): boolean {
        return ((source.flags & (ts.TypeFlags.Number | ts.TypeFlags.String | ts.TypeFlags.BooleanLiteral)) !== 0)
            && ((target.flags & (ts.TypeFlags.Number | ts.TypeFlags.String | ts.TypeFlags.Boolean)) !== 0);
    }

    /**
     * Return true if type was inferred from an object literal, written as an object type literal, or is the shape of a module
     * with no call or construct signatures.
     */
    function isObjectTypeWithInferableIndex(type: ts.Type): boolean {
        const objectFlags = ts.getObjectFlags(type);
        return type.flags & ts.TypeFlags.Intersection
            ? ts.every((type as ts.IntersectionType).types, isObjectTypeWithInferableIndex)
            : !!(
                type.symbol
                && (type.symbol.flags & (ts.SymbolFlags.ObjectLiteral | ts.SymbolFlags.TypeLiteral | ts.SymbolFlags.Enum | ts.SymbolFlags.ValueModule)) !== 0
                && !(type.symbol.flags & ts.SymbolFlags.Class)
                && !typeHasCallOrConstructSignatures(type)
            ) || !!(
                objectFlags & ts.ObjectFlags.ObjectRestType
            ) || !!(objectFlags & ts.ObjectFlags.ReverseMapped && isObjectTypeWithInferableIndex((type as ts.ReverseMappedType).source));
    }

    function createSymbolWithType(source: ts.Symbol, type: ts.Type | undefined) {
        const symbol = createSymbol(source.flags, source.escapedName, ts.getCheckFlags(source) & ts.CheckFlags.Readonly);
        symbol.declarations = source.declarations;
        symbol.parent = source.parent;
        symbol.type = type;
        symbol.target = source;
        if (source.valueDeclaration) {
            symbol.valueDeclaration = source.valueDeclaration;
        }
        const nameType = getSymbolLinks(source).nameType;
        if (nameType) {
            symbol.nameType = nameType;
        }
        return symbol;
    }

    function transformTypeOfMembers(type: ts.Type, f: (propertyType: ts.Type) => ts.Type) {
        const members = ts.createSymbolTable();
        for (const property of getPropertiesOfObjectType(type)) {
            const original = getTypeOfSymbol(property);
            const updated = f(original);
            members.set(property.escapedName, updated === original ? property : createSymbolWithType(property, updated));
        }
        return members;
    }

    /**
     * If the the provided object literal is subject to the excess properties check,
     * create a new that is exempt. Recursively mark object literal members as exempt.
     * Leave signatures alone since they are not subject to the check.
     */
    function getRegularTypeOfObjectLiteral(type: ts.Type): ts.Type {
        if (!(isObjectLiteralType(type) && ts.getObjectFlags(type) & ts.ObjectFlags.FreshLiteral)) {
            return type;
        }
        const regularType = (type as ts.FreshObjectLiteralType).regularType;
        if (regularType) {
            return regularType;
        }

        const resolved = type as ts.ResolvedType;
        const members = transformTypeOfMembers(type, getRegularTypeOfObjectLiteral);
        const regularNew = createAnonymousType(resolved.symbol, members, resolved.callSignatures, resolved.constructSignatures, resolved.indexInfos);
        regularNew.flags = resolved.flags;
        regularNew.objectFlags |= resolved.objectFlags & ~ts.ObjectFlags.FreshLiteral;
        (type as ts.FreshObjectLiteralType).regularType = regularNew;
        return regularNew;
    }

    function createWideningContext(parent: ts.WideningContext | undefined, propertyName: ts.__String | undefined, siblings: ts.Type[] | undefined): ts.WideningContext {
        return { parent, propertyName, siblings, resolvedProperties: undefined };
    }

    function getSiblingsOfContext(context: ts.WideningContext): ts.Type[] {
        if (!context.siblings) {
            const siblings: ts.Type[] = [];
            for (const type of getSiblingsOfContext(context.parent!)) {
                if (isObjectLiteralType(type)) {
                    const prop = getPropertyOfObjectType(type, context.propertyName!);
                    if (prop) {
                        forEachType(getTypeOfSymbol(prop), t => {
                            siblings.push(t);
                        });
                    }
                }
            }
            context.siblings = siblings;
        }
        return context.siblings;
    }

    function getPropertiesOfContext(context: ts.WideningContext): ts.Symbol[] {
        if (!context.resolvedProperties) {
            const names = new ts.Map<string, ts.Symbol>() as ts.UnderscoreEscapedMap<ts.Symbol>;
            for (const t of getSiblingsOfContext(context)) {
                if (isObjectLiteralType(t) && !(ts.getObjectFlags(t) & ts.ObjectFlags.ContainsSpread)) {
                    for (const prop of getPropertiesOfType(t)) {
                        names.set(prop.escapedName, prop);
                    }
                }
            }
            context.resolvedProperties = ts.arrayFrom(names.values());
        }
        return context.resolvedProperties;
    }

    function getWidenedProperty(prop: ts.Symbol, context: ts.WideningContext | undefined): ts.Symbol {
        if (!(prop.flags & ts.SymbolFlags.Property)) {
            // Since get accessors already widen their return value there is no need to
            // widen accessor based properties here.
            return prop;
        }
        const original = getTypeOfSymbol(prop);
        const propContext = context && createWideningContext(context, prop.escapedName, /*siblings*/ undefined);
        const widened = getWidenedTypeWithContext(original, propContext);
        return widened === original ? prop : createSymbolWithType(prop, widened);
    }

    function getUndefinedProperty(prop: ts.Symbol) {
        const cached = undefinedProperties.get(prop.escapedName);
        if (cached) {
            return cached;
        }
        const result = createSymbolWithType(prop, missingType);
        result.flags |= ts.SymbolFlags.Optional;
        undefinedProperties.set(prop.escapedName, result);
        return result;
    }

    function getWidenedTypeOfObjectLiteral(type: ts.Type, context: ts.WideningContext | undefined): ts.Type {
        const members = ts.createSymbolTable();
        for (const prop of getPropertiesOfObjectType(type)) {
            members.set(prop.escapedName, getWidenedProperty(prop, context));
        }
        if (context) {
            for (const prop of getPropertiesOfContext(context)) {
                if (!members.has(prop.escapedName)) {
                    members.set(prop.escapedName, getUndefinedProperty(prop));
                }
            }
        }
        const result = createAnonymousType(type.symbol, members, ts.emptyArray, ts.emptyArray,
            ts.sameMap(getIndexInfosOfType(type), info => createIndexInfo(info.keyType, getWidenedType(info.type), info.isReadonly)));
        result.objectFlags |= (ts.getObjectFlags(type) & (ts.ObjectFlags.JSLiteral | ts.ObjectFlags.NonInferrableType)); // Retain js literal flag through widening
        return result;
    }

    function getWidenedType(type: ts.Type) {
        return getWidenedTypeWithContext(type, /*context*/ undefined);
    }

    function getWidenedTypeWithContext(type: ts.Type, context: ts.WideningContext | undefined): ts.Type {
        if (ts.getObjectFlags(type) & ts.ObjectFlags.RequiresWidening) {
            if (context === undefined && type.widened) {
                return type.widened;
            }
            let result: ts.Type | undefined;
            if (type.flags & (ts.TypeFlags.Any | ts.TypeFlags.Nullable)) {
                result = anyType;
            }
            else if (isObjectLiteralType(type)) {
                result = getWidenedTypeOfObjectLiteral(type, context);
            }
            else if (type.flags & ts.TypeFlags.Union) {
                const unionContext = context || createWideningContext(/*parent*/ undefined, /*propertyName*/ undefined, (type as ts.UnionType).types);
                const widenedTypes = ts.sameMap((type as ts.UnionType).types, t => t.flags & ts.TypeFlags.Nullable ? t : getWidenedTypeWithContext(t, unionContext));
                // Widening an empty object literal transitions from a highly restrictive type to
                // a highly inclusive one. For that reason we perform subtype reduction here if the
                // union includes empty object types (e.g. reducing {} | string to just {}).
                result = getUnionType(widenedTypes, ts.some(widenedTypes, isEmptyObjectType) ? ts.UnionReduction.Subtype : ts.UnionReduction.Literal);
            }
            else if (type.flags & ts.TypeFlags.Intersection) {
                result = getIntersectionType(ts.sameMap((type as ts.IntersectionType).types, getWidenedType));
            }
            else if (isArrayOrTupleType(type)) {
                result = createTypeReference(type.target, ts.sameMap(getTypeArguments(type), getWidenedType));
            }
            if (result && context === undefined) {
                type.widened = result;
            }
            return result || type;
        }
        return type;
    }

    /**
     * Reports implicit any errors that occur as a result of widening 'null' and 'undefined'
     * to 'any'. A call to reportWideningErrorsInType is normally accompanied by a call to
     * getWidenedType. But in some cases getWidenedType is called without reporting errors
     * (type argument inference is an example).
     *
     * The return value indicates whether an error was in fact reported. The particular circumstances
     * are on a best effort basis. Currently, if the null or undefined that causes widening is inside
     * an object literal property (arbitrarily deeply), this function reports an error. If no error is
     * reported, reportImplicitAnyError is a suitable fallback to report a general error.
     */
    function reportWideningErrorsInType(type: ts.Type): boolean {
        let errorReported = false;
        if (ts.getObjectFlags(type) & ts.ObjectFlags.ContainsWideningType) {
            if (type.flags & ts.TypeFlags.Union) {
                if (ts.some((type as ts.UnionType).types, isEmptyObjectType)) {
                    errorReported = true;
                }
                else {
                    for (const t of (type as ts.UnionType).types) {
                        if (reportWideningErrorsInType(t)) {
                            errorReported = true;
                        }
                    }
                }
            }
            if (isArrayOrTupleType(type)) {
                for (const t of getTypeArguments(type)) {
                    if (reportWideningErrorsInType(t)) {
                        errorReported = true;
                    }
                }
            }
            if (isObjectLiteralType(type)) {
                for (const p of getPropertiesOfObjectType(type)) {
                    const t = getTypeOfSymbol(p);
                    if (ts.getObjectFlags(t) & ts.ObjectFlags.ContainsWideningType) {
                        if (!reportWideningErrorsInType(t)) {
                            error(p.valueDeclaration, ts.Diagnostics.Object_literal_s_property_0_implicitly_has_an_1_type, symbolToString(p), typeToString(getWidenedType(t)));
                        }
                        errorReported = true;
                    }
                }
            }
        }
        return errorReported;
    }

    function reportImplicitAny(declaration: ts.Declaration, type: ts.Type, wideningKind?: WideningKind) {
        const typeAsString = typeToString(getWidenedType(type));
        if (ts.isInJSFile(declaration) && !ts.isCheckJsEnabledForFile(ts.getSourceFileOfNode(declaration), compilerOptions)) {
            // Only report implicit any errors/suggestions in TS and ts-check JS files
            return;
        }
        let diagnostic: ts.DiagnosticMessage;
        switch (declaration.kind) {
            case ts.SyntaxKind.BinaryExpression:
            case ts.SyntaxKind.PropertyDeclaration:
            case ts.SyntaxKind.PropertySignature:
                diagnostic = noImplicitAny ? ts.Diagnostics.Member_0_implicitly_has_an_1_type : ts.Diagnostics.Member_0_implicitly_has_an_1_type_but_a_better_type_may_be_inferred_from_usage;
                break;
            case ts.SyntaxKind.Parameter:
                const param = declaration as ts.ParameterDeclaration;
                if (ts.isIdentifier(param.name) &&
                    (ts.isCallSignatureDeclaration(param.parent) || ts.isMethodSignature(param.parent) || ts.isFunctionTypeNode(param.parent)) &&
                    param.parent.parameters.indexOf(param) > -1 &&
                    (resolveName(param, param.name.escapedText, ts.SymbolFlags.Type, undefined, param.name.escapedText, /*isUse*/ true) ||
                    param.name.originalKeywordKind && ts.isTypeNodeKind(param.name.originalKeywordKind))) {
                    const newName = "arg" + param.parent.parameters.indexOf(param);
                    const typeName = ts.declarationNameToString(param.name) + (param.dotDotDotToken ? "[]" : "");
                    errorOrSuggestion(noImplicitAny, declaration, ts.Diagnostics.Parameter_has_a_name_but_no_type_Did_you_mean_0_Colon_1, newName, typeName);
                    return;
                }
                diagnostic = (declaration as ts.ParameterDeclaration).dotDotDotToken ?
                    noImplicitAny ? ts.Diagnostics.Rest_parameter_0_implicitly_has_an_any_type : ts.Diagnostics.Rest_parameter_0_implicitly_has_an_any_type_but_a_better_type_may_be_inferred_from_usage :
                    noImplicitAny ? ts.Diagnostics.Parameter_0_implicitly_has_an_1_type : ts.Diagnostics.Parameter_0_implicitly_has_an_1_type_but_a_better_type_may_be_inferred_from_usage;
                break;
            case ts.SyntaxKind.BindingElement:
                diagnostic = ts.Diagnostics.Binding_element_0_implicitly_has_an_1_type;
                if (!noImplicitAny) {
                    // Don't issue a suggestion for binding elements since the codefix doesn't yet support them.
                    return;
                }
                break;
            case ts.SyntaxKind.JSDocFunctionType:
                error(declaration, ts.Diagnostics.Function_type_which_lacks_return_type_annotation_implicitly_has_an_0_return_type, typeAsString);
                return;
            case ts.SyntaxKind.FunctionDeclaration:
            case ts.SyntaxKind.MethodDeclaration:
            case ts.SyntaxKind.MethodSignature:
            case ts.SyntaxKind.GetAccessor:
            case ts.SyntaxKind.SetAccessor:
            case ts.SyntaxKind.FunctionExpression:
            case ts.SyntaxKind.ArrowFunction:
                if (noImplicitAny && !(declaration as ts.NamedDeclaration).name) {
                    if (wideningKind === WideningKind.GeneratorYield) {
                        error(declaration, ts.Diagnostics.Generator_implicitly_has_yield_type_0_because_it_does_not_yield_any_values_Consider_supplying_a_return_type_annotation, typeAsString);
                    }
                    else {
                        error(declaration, ts.Diagnostics.Function_expression_which_lacks_return_type_annotation_implicitly_has_an_0_return_type, typeAsString);
                    }
                    return;
                }
                diagnostic = !noImplicitAny ? ts.Diagnostics._0_implicitly_has_an_1_return_type_but_a_better_type_may_be_inferred_from_usage :
                    wideningKind === WideningKind.GeneratorYield ? ts.Diagnostics._0_which_lacks_return_type_annotation_implicitly_has_an_1_yield_type :
                    ts.Diagnostics._0_which_lacks_return_type_annotation_implicitly_has_an_1_return_type;
                break;
            case ts.SyntaxKind.MappedType:
                if (noImplicitAny) {
                    error(declaration, ts.Diagnostics.Mapped_object_type_implicitly_has_an_any_template_type);
                }
                return;
            default:
                diagnostic = noImplicitAny ? ts.Diagnostics.Variable_0_implicitly_has_an_1_type : ts.Diagnostics.Variable_0_implicitly_has_an_1_type_but_a_better_type_may_be_inferred_from_usage;
        }
        errorOrSuggestion(noImplicitAny, declaration, diagnostic, ts.declarationNameToString(ts.getNameOfDeclaration(declaration)), typeAsString);
    }

    function reportErrorsFromWidening(declaration: ts.Declaration, type: ts.Type, wideningKind?: WideningKind) {
        addLazyDiagnostic(() => {
            if (noImplicitAny && ts.getObjectFlags(type) & ts.ObjectFlags.ContainsWideningType && (!wideningKind || !getContextualSignatureForFunctionLikeDeclaration(declaration as ts.FunctionLikeDeclaration))) {
                // Report implicit any error within type if possible, otherwise report error on declaration
                if (!reportWideningErrorsInType(type)) {
                    reportImplicitAny(declaration, type, wideningKind);
                }
            }
        });
    }

    function applyToParameterTypes(source: ts.Signature, target: ts.Signature, callback: (s: ts.Type, t: ts.Type) => void) {
        const sourceCount = getParameterCount(source);
        const targetCount = getParameterCount(target);
        const sourceRestType = getEffectiveRestType(source);
        const targetRestType = getEffectiveRestType(target);
        const targetNonRestCount = targetRestType ? targetCount - 1 : targetCount;
        const paramCount = sourceRestType ? targetNonRestCount : Math.min(sourceCount, targetNonRestCount);
        const sourceThisType = getThisTypeOfSignature(source);
        if (sourceThisType) {
            const targetThisType = getThisTypeOfSignature(target);
            if (targetThisType) {
                callback(sourceThisType, targetThisType);
            }
        }
        for (let i = 0; i < paramCount; i++) {
            callback(getTypeAtPosition(source, i), getTypeAtPosition(target, i));
        }
        if (targetRestType) {
            callback(getRestTypeAtPosition(source, paramCount), targetRestType);
        }
    }

    function applyToReturnTypes(source: ts.Signature, target: ts.Signature, callback: (s: ts.Type, t: ts.Type) => void) {
        const sourceTypePredicate = getTypePredicateOfSignature(source);
        const targetTypePredicate = getTypePredicateOfSignature(target);
        if (sourceTypePredicate && targetTypePredicate && typePredicateKindsMatch(sourceTypePredicate, targetTypePredicate) && sourceTypePredicate.type && targetTypePredicate.type) {
            callback(sourceTypePredicate.type, targetTypePredicate.type);
        }
        else {
            callback(getReturnTypeOfSignature(source), getReturnTypeOfSignature(target));
        }
    }

    function createInferenceContext(typeParameters: readonly ts.TypeParameter[], signature: ts.Signature | undefined, flags: ts.InferenceFlags, compareTypes?: ts.TypeComparer): ts.InferenceContext {
        return createInferenceContextWorker(typeParameters.map(createInferenceInfo), signature, flags, compareTypes || compareTypesAssignable);
    }

    function cloneInferenceContext<T extends ts.InferenceContext | undefined>(context: T, extraFlags: ts.InferenceFlags = 0): ts.InferenceContext | T & undefined {
        return context && createInferenceContextWorker(ts.map(context.inferences, cloneInferenceInfo), context.signature, context.flags | extraFlags, context.compareTypes);
    }

    function createInferenceContextWorker(inferences: ts.InferenceInfo[], signature: ts.Signature | undefined, flags: ts.InferenceFlags, compareTypes: ts.TypeComparer): ts.InferenceContext {
        const context: ts.InferenceContext = {
            inferences,
            signature,
            flags,
            compareTypes,
            mapper: reportUnmeasurableMapper, // initialize to a noop mapper so the context object is available, but the underlying object shape is right upon construction
            nonFixingMapper: reportUnmeasurableMapper,
        };
        context.mapper = makeFixingMapperForContext(context);
        context.nonFixingMapper = makeNonFixingMapperForContext(context);
        return context;
    }

    function makeFixingMapperForContext(context: ts.InferenceContext) {
        return makeDeferredTypeMapper(ts.map(context.inferences, i => i.typeParameter), ts.map(context.inferences, (inference, i) => () => {
            if (!inference.isFixed) {
                // Before we commit to a particular inference (and thus lock out any further inferences),
                // we infer from any intra-expression inference sites we have collected.
                inferFromIntraExpressionSites(context);
                clearCachedInferences(context.inferences);
                inference.isFixed = true;
            }
            return getInferredType(context, i);
        }));
    }

    function makeNonFixingMapperForContext(context: ts.InferenceContext) {
        return makeDeferredTypeMapper(ts.map(context.inferences, i => i.typeParameter), ts.map(context.inferences, (_, i) => () => {
            return getInferredType(context, i);
        }));
    }

    function clearCachedInferences(inferences: ts.InferenceInfo[]) {
        for (const inference of inferences) {
            if (!inference.isFixed) {
                inference.inferredType = undefined;
            }
        }
    }

    function addIntraExpressionInferenceSite(context: ts.InferenceContext, node: ts.Expression | ts.MethodDeclaration, type: ts.Type) {
        (context.intraExpressionInferenceSites ??= []).push({ node, type });
    }

    // We collect intra-expression inference sites within object and array literals to handle cases where
    // inferred types flow between context sensitive element expressions. For example:
    //
    //   declare function foo<T>(arg: [(n: number) => T, (x: T) => void]): void;
    //   foo([_a => 0, n => n.toFixed()]);
    //
    // Above, both arrow functions in the tuple argument are context sensitive, thus both are omitted from the
    // pass that collects inferences from the non-context sensitive parts of the arguments. In the subsequent
    // pass where nothing is omitted, we need to commit to an inference for T in order to contextually type the
    // parameter in the second arrow function, but we want to first infer from the return type of the first
    // arrow function. This happens automatically when the arrow functions are discrete arguments (because we
    // infer from each argument before processing the next), but when the arrow functions are elements of an
    // object or array literal, we need to perform intra-expression inferences early.
    function inferFromIntraExpressionSites(context: ts.InferenceContext) {
        if (context.intraExpressionInferenceSites) {
            for (const { node, type } of context.intraExpressionInferenceSites) {
                const contextualType = node.kind === ts.SyntaxKind.MethodDeclaration ?
                    getContextualTypeForObjectLiteralMethod(node as ts.MethodDeclaration, ts.ContextFlags.NoConstraints) :
                    getContextualType(node, ts.ContextFlags.NoConstraints);
                if (contextualType) {
                    inferTypes(context.inferences, type, contextualType);
                }
            }
            context.intraExpressionInferenceSites = undefined;
        }
    }

    function createInferenceInfo(typeParameter: ts.TypeParameter): ts.InferenceInfo {
        return {
            typeParameter,
            candidates: undefined,
            contraCandidates: undefined,
            inferredType: undefined,
            priority: undefined,
            topLevel: true,
            isFixed: false,
            impliedArity: undefined
        };
    }

    function cloneInferenceInfo(inference: ts.InferenceInfo): ts.InferenceInfo {
        return {
            typeParameter: inference.typeParameter,
            candidates: inference.candidates && inference.candidates.slice(),
            contraCandidates: inference.contraCandidates && inference.contraCandidates.slice(),
            inferredType: inference.inferredType,
            priority: inference.priority,
            topLevel: inference.topLevel,
            isFixed: inference.isFixed,
            impliedArity: inference.impliedArity
        };
    }

    function cloneInferredPartOfContext(context: ts.InferenceContext): ts.InferenceContext | undefined {
        const inferences = ts.filter(context.inferences, hasInferenceCandidates);
        return inferences.length ?
            createInferenceContextWorker(ts.map(inferences, cloneInferenceInfo), context.signature, context.flags, context.compareTypes) :
            undefined;
    }

    function getMapperFromContext<T extends ts.InferenceContext | undefined>(context: T): ts.TypeMapper | T & undefined {
        return context && context.mapper;
    }

    // Return true if the given type could possibly reference a type parameter for which
    // we perform type inference (i.e. a type parameter of a generic function). We cache
    // results for union and intersection types for performance reasons.
    function couldContainTypeVariables(type: ts.Type): boolean {
        const objectFlags = ts.getObjectFlags(type);
        if (objectFlags & ts.ObjectFlags.CouldContainTypeVariablesComputed) {
            return !!(objectFlags & ts.ObjectFlags.CouldContainTypeVariables);
        }
        const result = !!(type.flags & ts.TypeFlags.Instantiable ||
            type.flags & ts.TypeFlags.Object && !isNonGenericTopLevelType(type) && (
                objectFlags & ts.ObjectFlags.Reference && ((type as ts.TypeReference).node || ts.forEach(getTypeArguments(type as ts.TypeReference), couldContainTypeVariables)) ||
                objectFlags & ts.ObjectFlags.Anonymous && type.symbol && type.symbol.flags & (ts.SymbolFlags.Function | ts.SymbolFlags.Method | ts.SymbolFlags.Class | ts.SymbolFlags.TypeLiteral | ts.SymbolFlags.ObjectLiteral) && type.symbol.declarations ||
                objectFlags & (ts.ObjectFlags.Mapped | ts.ObjectFlags.ReverseMapped | ts.ObjectFlags.ObjectRestType | ts.ObjectFlags.InstantiationExpressionType)) ||
            type.flags & ts.TypeFlags.UnionOrIntersection && !(type.flags & ts.TypeFlags.EnumLiteral) && !isNonGenericTopLevelType(type) && ts.some((type as ts.UnionOrIntersectionType).types, couldContainTypeVariables));
        if (type.flags & ts.TypeFlags.ObjectFlagsType) {
            (type as ts.ObjectFlagsType).objectFlags |= ts.ObjectFlags.CouldContainTypeVariablesComputed | (result ? ts.ObjectFlags.CouldContainTypeVariables : 0);
        }
        return result;
    }

    function isNonGenericTopLevelType(type: ts.Type) {
        if (type.aliasSymbol && !type.aliasTypeArguments) {
            const declaration = ts.getDeclarationOfKind(type.aliasSymbol, ts.SyntaxKind.TypeAliasDeclaration);
            return !!(declaration && ts.findAncestor(declaration.parent, n => n.kind === ts.SyntaxKind.SourceFile ? true : n.kind === ts.SyntaxKind.ModuleDeclaration ? false : "quit"));
        }
        return false;
    }

    function isTypeParameterAtTopLevel(type: ts.Type, typeParameter: ts.TypeParameter): boolean {
        return !!(type === typeParameter ||
            type.flags & ts.TypeFlags.UnionOrIntersection && ts.some((type as ts.UnionOrIntersectionType).types, t => isTypeParameterAtTopLevel(t, typeParameter)) ||
            type.flags & ts.TypeFlags.Conditional && (getTrueTypeFromConditionalType(type as ts.ConditionalType) === typeParameter || getFalseTypeFromConditionalType(type as ts.ConditionalType) === typeParameter));
    }

    /** Create an object with properties named in the string literal type. Every property has type `any` */
    function createEmptyObjectTypeFromStringLiteral(type: ts.Type) {
        const members = ts.createSymbolTable();
        forEachType(type, t => {
            if (!(t.flags & ts.TypeFlags.StringLiteral)) {
                return;
            }
            const name = ts.escapeLeadingUnderscores((t as ts.StringLiteralType).value);
            const literalProp = createSymbol(ts.SymbolFlags.Property, name);
            literalProp.type = anyType;
            if (t.symbol) {
                literalProp.declarations = t.symbol.declarations;
                literalProp.valueDeclaration = t.symbol.valueDeclaration;
            }
            members.set(name, literalProp);
        });
        const indexInfos = type.flags & ts.TypeFlags.String ? [createIndexInfo(stringType, emptyObjectType, /*isReadonly*/ false)] : ts.emptyArray;
        return createAnonymousType(undefined, members, ts.emptyArray, ts.emptyArray, indexInfos);
    }

    /**
     * Infer a suitable input type for a homomorphic mapped type { [P in keyof T]: X }. We construct
     * an object type with the same set of properties as the source type, where the type of each
     * property is computed by inferring from the source property type to X for the type
     * variable T[P] (i.e. we treat the type T[P] as the type variable we're inferring for).
     */
    function inferTypeForHomomorphicMappedType(source: ts.Type, target: ts.MappedType, constraint: ts.IndexType): ts.Type | undefined {
        if (inInferTypeForHomomorphicMappedType) {
            return undefined;
        }
        const key = source.id + "," + target.id + "," + constraint.id;
        if (reverseMappedCache.has(key)) {
            return reverseMappedCache.get(key);
        }
        inInferTypeForHomomorphicMappedType = true;
        const type = createReverseMappedType(source, target, constraint);
        inInferTypeForHomomorphicMappedType = false;
        reverseMappedCache.set(key, type);
        return type;
    }

    // We consider a type to be partially inferable if it isn't marked non-inferable or if it is
    // an object literal type with at least one property of an inferable type. For example, an object
    // literal { a: 123, b: x => true } is marked non-inferable because it contains a context sensitive
    // arrow function, but is considered partially inferable because property 'a' has an inferable type.
    function isPartiallyInferableType(type: ts.Type): boolean {
        return !(ts.getObjectFlags(type) & ts.ObjectFlags.NonInferrableType) ||
            isObjectLiteralType(type) && ts.some(getPropertiesOfType(type), prop => isPartiallyInferableType(getTypeOfSymbol(prop))) ||
            isTupleType(type) && ts.some(getTypeArguments(type), isPartiallyInferableType);
    }

    function createReverseMappedType(source: ts.Type, target: ts.MappedType, constraint: ts.IndexType) {
        // We consider a source type reverse mappable if it has a string index signature or if
        // it has one or more properties and is of a partially inferable type.
        if (!(getIndexInfoOfType(source, stringType) || getPropertiesOfType(source).length !== 0 && isPartiallyInferableType(source))) {
            return undefined;
        }
        // For arrays and tuples we infer new arrays and tuples where the reverse mapping has been
        // applied to the element type(s).
        if (isArrayType(source)) {
            return createArrayType(inferReverseMappedType(getTypeArguments(source)[0], target, constraint), isReadonlyArrayType(source));
        }
        if (isTupleType(source)) {
            const elementTypes = ts.map(getTypeArguments(source), t => inferReverseMappedType(t, target, constraint));
            const elementFlags = getMappedTypeModifiers(target) & MappedTypeModifiers.IncludeOptional ?
                ts.sameMap(source.target.elementFlags, f => f & ts.ElementFlags.Optional ? ts.ElementFlags.Required : f) :
                source.target.elementFlags;
            return createTupleType(elementTypes, elementFlags, source.target.readonly, source.target.labeledElementDeclarations);
        }
        // For all other object types we infer a new object type where the reverse mapping has been
        // applied to the type of each property.
        const reversed = createObjectType(ts.ObjectFlags.ReverseMapped | ts.ObjectFlags.Anonymous, /*symbol*/ undefined) as ts.ReverseMappedType;
        reversed.source = source;
        reversed.mappedType = target;
        reversed.constraintType = constraint;
        return reversed;
    }

    function getTypeOfReverseMappedSymbol(symbol: ts.ReverseMappedSymbol) {
        const links = getSymbolLinks(symbol);
        if (!links.type) {
            links.type = inferReverseMappedType(symbol.propertyType, symbol.mappedType, symbol.constraintType);
        }
        return links.type;
    }

    function inferReverseMappedType(sourceType: ts.Type, target: ts.MappedType, constraint: ts.IndexType): ts.Type {
        const typeParameter = getIndexedAccessType(constraint.type, getTypeParameterFromMappedType(target)) as ts.TypeParameter;
        const templateType = getTemplateTypeFromMappedType(target);
        const inference = createInferenceInfo(typeParameter);
        inferTypes([inference], sourceType, templateType);
        return getTypeFromInference(inference) || unknownType;
    }

    function* getUnmatchedProperties(source: ts.Type, target: ts.Type, requireOptionalProperties: boolean, matchDiscriminantProperties: boolean): IterableIterator<ts.Symbol> {
        const properties = getPropertiesOfType(target);
        for (const targetProp of properties) {
            // TODO: remove this when we support static private identifier fields and find other solutions to get privateNamesAndStaticFields test to pass
            if (isStaticPrivateIdentifierProperty(targetProp)) {
                continue;
            }
            if (requireOptionalProperties || !(targetProp.flags & ts.SymbolFlags.Optional || ts.getCheckFlags(targetProp) & ts.CheckFlags.Partial)) {
                const sourceProp = getPropertyOfType(source, targetProp.escapedName);
                if (!sourceProp) {
                    yield targetProp;
                }
                else if (matchDiscriminantProperties) {
                    const targetType = getTypeOfSymbol(targetProp);
                    if (targetType.flags & ts.TypeFlags.Unit) {
                        const sourceType = getTypeOfSymbol(sourceProp);
                        if (!(sourceType.flags & ts.TypeFlags.Any || getRegularTypeOfLiteralType(sourceType) === getRegularTypeOfLiteralType(targetType))) {
                            yield targetProp;
                        }
                    }
                }
            }
        }
    }

    function getUnmatchedProperty(source: ts.Type, target: ts.Type, requireOptionalProperties: boolean, matchDiscriminantProperties: boolean): ts.Symbol | undefined {
        const result = getUnmatchedProperties(source, target, requireOptionalProperties, matchDiscriminantProperties).next();
        if (!result.done) return result.value;
    }

    function tupleTypesDefinitelyUnrelated(source: ts.TupleTypeReference, target: ts.TupleTypeReference) {
        return !(target.target.combinedFlags & ts.ElementFlags.Variadic) && target.target.minLength > source.target.minLength ||
            !target.target.hasRestElement && (source.target.hasRestElement || target.target.fixedLength < source.target.fixedLength);
    }

    function typesDefinitelyUnrelated(source: ts.Type, target: ts.Type) {
        // Two tuple types with incompatible arities are definitely unrelated.
        // Two object types that each have a property that is unmatched in the other are definitely unrelated.
        return isTupleType(source) && isTupleType(target) ? tupleTypesDefinitelyUnrelated(source, target) :
            !!getUnmatchedProperty(source, target, /*requireOptionalProperties*/ false, /*matchDiscriminantProperties*/ true) &&
            !!getUnmatchedProperty(target, source, /*requireOptionalProperties*/ false, /*matchDiscriminantProperties*/ false);
    }

    function getTypeFromInference(inference: ts.InferenceInfo) {
        return inference.candidates ? getUnionType(inference.candidates, ts.UnionReduction.Subtype) :
            inference.contraCandidates ? getIntersectionType(inference.contraCandidates) :
            undefined;
    }

    function hasSkipDirectInferenceFlag(node: ts.Node) {
        return !!getNodeLinks(node).skipDirectInference;
    }

    function isFromInferenceBlockedSource(type: ts.Type) {
        return !!(type.symbol && ts.some(type.symbol.declarations, hasSkipDirectInferenceFlag));
    }

    function templateLiteralTypesDefinitelyUnrelated(source: ts.TemplateLiteralType, target: ts.TemplateLiteralType) {
        // Two template literal types with diffences in their starting or ending text spans are definitely unrelated.
        const sourceStart = source.texts[0];
        const targetStart = target.texts[0];
        const sourceEnd = source.texts[source.texts.length - 1];
        const targetEnd = target.texts[target.texts.length - 1];
        const startLen = Math.min(sourceStart.length, targetStart.length);
        const endLen = Math.min(sourceEnd.length, targetEnd.length);
        return sourceStart.slice(0, startLen) !== targetStart.slice(0, startLen) ||
            sourceEnd.slice(sourceEnd.length - endLen) !== targetEnd.slice(targetEnd.length - endLen);
    }

    /**
     * Tests whether the provided string can be parsed as a number.
     * @param s The string to test.
     * @param roundTripOnly Indicates the resulting number matches the input when converted back to a string.
     */
    function isValidNumberString(s: string, roundTripOnly: boolean): boolean {
        if (s === "") return false;
        const n = +s;
        return isFinite(n) && (!roundTripOnly || "" + n === s);
    }

    /**
     * @param text a valid bigint string excluding a trailing `n`, but including a possible prefix `-`. Use `isValidBigIntString(text, roundTripOnly)` before calling this function.
     */
    function parseBigIntLiteralType(text: string) {
        const negative = text.startsWith("-");
        const base10Value = ts.parsePseudoBigInt(`${negative ? text.slice(1) : text}n`);
        return getBigIntLiteralType({ negative, base10Value });
    }

    /**
     * Tests whether the provided string can be parsed as a bigint.
     * @param s The string to test.
     * @param roundTripOnly Indicates the resulting bigint matches the input when converted back to a string.
     */
    function isValidBigIntString(s: string, roundTripOnly: boolean): boolean {
        if (s === "") return false;
        const scanner = ts.createScanner(ts.ScriptTarget.ESNext, /*skipTrivia*/ false);
        let success = true;
        scanner.setOnError(() => success = false);
        scanner.setText(s + "n");
        let result = scanner.scan();
        const negative = result === ts.SyntaxKind.MinusToken;
        if (negative) {
            result = scanner.scan();
        }
        const flags = scanner.getTokenFlags();
        // validate that
        // * scanning proceeded without error
        // * a bigint can be scanned, and that when it is scanned, it is
        // * the full length of the input string (so the scanner is one character beyond the augmented input length)
        // * it does not contain a numeric seperator (the `BigInt` constructor does not accept a numeric seperator in its input)
        return success && result === ts.SyntaxKind.BigIntLiteral && scanner.getTextPos() === (s.length + 1) && !(flags & ts.TokenFlags.ContainsSeparator)
            && (!roundTripOnly || s === ts.pseudoBigIntToString({ negative, base10Value: ts.parsePseudoBigInt(scanner.getTokenValue()) }));
    }

    function isMemberOfStringMapping(source: ts.Type, target: ts.Type): boolean {
        if (target.flags & (ts.TypeFlags.String | ts.TypeFlags.Any)) {
            return true;
        }
        if (target.flags & ts.TypeFlags.TemplateLiteral) {
            return isTypeAssignableTo(source, target);
        }
        if (target.flags & ts.TypeFlags.StringMapping) {
            // We need to see whether applying the same mappings of the target
            // onto the source would produce an identical type *and* that
            // it's compatible with the inner-most non-string-mapped type.
            //
            // The intuition here is that if same mappings don't affect the source at all,
            // and the source is compatible with the unmapped target, then they must
            // still reside in the same domain.
            const mappingStack = [];
            while (target.flags & ts.TypeFlags.StringMapping) {
                mappingStack.unshift(target.symbol);
                target = (target as ts.StringMappingType).type;
            }
            const mappedSource = ts.reduceLeft(mappingStack, (memo, value) => getStringMappingType(value, memo), source);
            return mappedSource === source && isMemberOfStringMapping(source, target);
        }
        return false;
    }

    function isValidTypeForTemplateLiteralPlaceholder(source: ts.Type, target: ts.Type): boolean {
        if (source === target || target.flags & (ts.TypeFlags.Any | ts.TypeFlags.String)) {
            return true;
        }
        if (source.flags & ts.TypeFlags.StringLiteral) {
            const value = (source as ts.StringLiteralType).value;
            return !!(target.flags & ts.TypeFlags.Number && isValidNumberString(value, /*roundTripOnly*/ false) ||
                target.flags & ts.TypeFlags.BigInt && isValidBigIntString(value, /*roundTripOnly*/ false) ||
                target.flags & (ts.TypeFlags.BooleanLiteral | ts.TypeFlags.Nullable) && value === (target as ts.IntrinsicType).intrinsicName ||
                target.flags & ts.TypeFlags.StringMapping && isMemberOfStringMapping(getStringLiteralType(value), target));
        }
        if (source.flags & ts.TypeFlags.TemplateLiteral) {
            const texts = (source as ts.TemplateLiteralType).texts;
            return texts.length === 2 && texts[0] === "" && texts[1] === "" && isTypeAssignableTo((source as ts.TemplateLiteralType).types[0], target);
        }
        return isTypeAssignableTo(source, target);
    }

    function inferTypesFromTemplateLiteralType(source: ts.Type, target: ts.TemplateLiteralType): ts.Type[] | undefined {
        return source.flags & ts.TypeFlags.StringLiteral ? inferFromLiteralPartsToTemplateLiteral([(source as ts.StringLiteralType).value], ts.emptyArray, target) :
            source.flags & ts.TypeFlags.TemplateLiteral ?
                ts.arraysEqual((source as ts.TemplateLiteralType).texts, target.texts) ? ts.map((source as ts.TemplateLiteralType).types, getStringLikeTypeForType) :
                inferFromLiteralPartsToTemplateLiteral((source as ts.TemplateLiteralType).texts, (source as ts.TemplateLiteralType).types, target) :
            undefined;
    }

    function isTypeMatchedByTemplateLiteralType(source: ts.Type, target: ts.TemplateLiteralType): boolean {
        const inferences = inferTypesFromTemplateLiteralType(source, target);
        return !!inferences && ts.every(inferences, (r, i) => isValidTypeForTemplateLiteralPlaceholder(r, target.types[i]));
    }

    function getStringLikeTypeForType(type: ts.Type) {
        return type.flags & (ts.TypeFlags.Any | ts.TypeFlags.StringLike) ? type : getTemplateLiteralType(["", ""], [type]);
    }

    // This function infers from the text parts and type parts of a source literal to a target template literal. The number
    // of text parts is always one more than the number of type parts, and a source string literal is treated as a source
    // with one text part and zero type parts. The function returns an array of inferred string or template literal types
    // corresponding to the placeholders in the target template literal, or undefined if the source doesn't match the target.
    //
    // We first check that the starting source text part matches the starting target text part, and that the ending source
    // text part ends matches the ending target text part. We then iterate through the remaining target text parts, finding
    // a match for each in the source and inferring string or template literal types created from the segments of the source
    // that occur between the matches. During this iteration, seg holds the index of the current text part in the sourceTexts
    // array and pos holds the current character position in the current text part.
    //
    // Consider inference from type `<<${string}>.<${number}-${number}>>` to type `<${string}.${string}>`, i.e.
    //   sourceTexts = ['<<', '>.<', '-', '>>']
    //   sourceTypes = [string, number, number]
    //   target.texts = ['<', '.', '>']
    // We first match '<' in the target to the start of '<<' in the source and '>' in the target to the end of '>>' in
    // the source. The first match for the '.' in target occurs at character 1 in the source text part at index 1, and thus
    // the first inference is the template literal type `<${string}>`. The remainder of the source makes up the second
    // inference, the template literal type `<${number}-${number}>`.
    function inferFromLiteralPartsToTemplateLiteral(sourceTexts: readonly string[], sourceTypes: readonly ts.Type[], target: ts.TemplateLiteralType): ts.Type[] | undefined {
        const lastSourceIndex = sourceTexts.length - 1;
        const sourceStartText = sourceTexts[0];
        const sourceEndText = sourceTexts[lastSourceIndex];
        const targetTexts = target.texts;
        const lastTargetIndex = targetTexts.length - 1;
        const targetStartText = targetTexts[0];
        const targetEndText = targetTexts[lastTargetIndex];
        if (lastSourceIndex === 0 && sourceStartText.length < targetStartText.length + targetEndText.length ||
            !sourceStartText.startsWith(targetStartText) || !sourceEndText.endsWith(targetEndText)) return undefined;
        const remainingEndText = sourceEndText.slice(0, sourceEndText.length - targetEndText.length);
        const matches: ts.Type[] = [];
        let seg = 0;
        let pos = targetStartText.length;
        for (let i = 1; i < lastTargetIndex; i++) {
            const delim = targetTexts[i];
            if (delim.length > 0) {
                let s = seg;
                let p = pos;
                while (true) {
                    p = getSourceText(s).indexOf(delim, p);
                    if (p >= 0) break;
                    s++;
                    if (s === sourceTexts.length) return undefined;
                    p = 0;
                }
                addMatch(s, p);
                pos += delim.length;
            }
            else if (pos < getSourceText(seg).length) {
                addMatch(seg, pos + 1);
            }
            else if (seg < lastSourceIndex) {
                addMatch(seg + 1, 0);
            }
            else {
                return undefined;
            }
        }
        addMatch(lastSourceIndex, getSourceText(lastSourceIndex).length);
        return matches;
        function getSourceText(index: number) {
            return index < lastSourceIndex ? sourceTexts[index] : remainingEndText;
        }
        function addMatch(s: number, p: number) {
            const matchType = s === seg ?
                getStringLiteralType(getSourceText(s).slice(pos, p)) :
                getTemplateLiteralType(
                    [sourceTexts[seg].slice(pos), ...sourceTexts.slice(seg + 1, s), getSourceText(s).slice(0, p)],
                    sourceTypes.slice(seg, s));
            matches.push(matchType);
            seg = s;
            pos = p;
        }
    }

    function inferTypes(inferences: ts.InferenceInfo[], originalSource: ts.Type, originalTarget: ts.Type, priority: ts.InferencePriority = 0, contravariant = false) {
        let bivariant = false;
        let propagationType: ts.Type;
        let inferencePriority: number = ts.InferencePriority.MaxValue;
        let allowComplexConstraintInference = true;
        let visited: ts.ESMap<string, number>;
        let sourceStack: object[];
        let targetStack: object[];
        let expandingFlags = ExpandingFlags.None;
        inferFromTypes(originalSource, originalTarget);

        function inferFromTypes(source: ts.Type, target: ts.Type): void {
            if (!couldContainTypeVariables(target)) {
                return;
            }
            if (source === wildcardType) {
                // We are inferring from an 'any' type. We want to infer this type for every type parameter
                // referenced in the target type, so we record it as the propagation type and infer from the
                // target to itself. Then, as we find candidates we substitute the propagation type.
                const savePropagationType = propagationType;
                propagationType = source;
                inferFromTypes(target, target);
                propagationType = savePropagationType;
                return;
            }
            if (source.aliasSymbol && source.aliasSymbol === target.aliasSymbol) {
                if (source.aliasTypeArguments) {
                    // Source and target are types originating in the same generic type alias declaration.
                    // Simply infer from source type arguments to target type arguments.
                    inferFromTypeArguments(source.aliasTypeArguments, target.aliasTypeArguments!, getAliasVariances(source.aliasSymbol));
                }
                // And if there weren't any type arguments, there's no reason to run inference as the types must be the same.
                return;
            }
            if (source === target && source.flags & ts.TypeFlags.UnionOrIntersection) {
                // When source and target are the same union or intersection type, just relate each constituent
                // type to itself.
                for (const t of (source as ts.UnionOrIntersectionType).types) {
                    inferFromTypes(t, t);
                }
                return;
            }
            if (target.flags & ts.TypeFlags.Union) {
                // First, infer between identically matching source and target constituents and remove the
                // matching types.
                const [tempSources, tempTargets] = inferFromMatchingTypes(source.flags & ts.TypeFlags.Union ? (source as ts.UnionType).types : [source], (target as ts.UnionType).types, isTypeOrBaseIdenticalTo);
                // Next, infer between closely matching source and target constituents and remove
                // the matching types. Types closely match when they are instantiations of the same
                // object type or instantiations of the same type alias.
                const [sources, targets] = inferFromMatchingTypes(tempSources, tempTargets, isTypeCloselyMatchedBy);
                if (targets.length === 0) {
                    return;
                }
                target = getUnionType(targets);
                if (sources.length === 0) {
                    // All source constituents have been matched and there is nothing further to infer from.
                    // However, simply making no inferences is undesirable because it could ultimately mean
                    // inferring a type parameter constraint. Instead, make a lower priority inference from
                    // the full source to whatever remains in the target. For example, when inferring from
                    // string to 'string | T', make a lower priority inference of string for T.
                    inferWithPriority(source, target, ts.InferencePriority.NakedTypeVariable);
                    return;
                }
                source = getUnionType(sources);
            }
            else if (target.flags & ts.TypeFlags.Intersection && !ts.every((target as ts.IntersectionType).types, isNonGenericObjectType)) {
                // We reduce intersection types unless they're simple combinations of object types. For example,
                // when inferring from 'string[] & { extra: any }' to 'string[] & T' we want to remove string[] and
                // infer { extra: any } for T. But when inferring to 'string[] & Iterable<T>' we want to keep the
                // string[] on the source side and infer string for T.
                if (!(source.flags & ts.TypeFlags.Union)) {
                    // Infer between identically matching source and target constituents and remove the matching types.
                    const [sources, targets] = inferFromMatchingTypes(source.flags & ts.TypeFlags.Intersection ? (source as ts.IntersectionType).types : [source], (target as ts.IntersectionType).types, isTypeIdenticalTo);
                    if (sources.length === 0 || targets.length === 0) {
                        return;
                    }
                    source = getIntersectionType(sources);
                    target = getIntersectionType(targets);
                }
            }
            else if (target.flags & (ts.TypeFlags.IndexedAccess | ts.TypeFlags.Substitution)) {
                target = getActualTypeVariable(target);
            }
            if (target.flags & ts.TypeFlags.TypeVariable) {
                // Skip inference if the source is "blocked", which is used by the language service to
                // prevent inference on nodes currently being edited.
                if (isFromInferenceBlockedSource(source)) {
                    return;
                }
                const inference = getInferenceInfoForType(target);
                if (inference) {
                    // If target is a type parameter, make an inference, unless the source type contains
                    // a "non-inferrable" type. Types with this flag set are markers used to prevent inference.
                    //
                    // For example:
                    //     - anyFunctionType is a wildcard type that's used to avoid contextually typing functions;
                    //       it's internal, so should not be exposed to the user by adding it as a candidate.
                    //     - autoType (and autoArrayType) is a special "any" used in control flow; like anyFunctionType,
                    //       it's internal and should not be observable.
                    //     - silentNeverType is returned by getInferredType when instantiating a generic function for
                    //       inference (and a type variable has no mapping).
                    //
                    // This flag is infectious; if we produce Box<never> (where never is silentNeverType), Box<never> is
                    // also non-inferrable.
                    //
                    // As a special case, also ignore nonInferrableAnyType, which is a special form of the any type
                    // used as a stand-in for binding elements when they are being inferred.
                    if (ts.getObjectFlags(source) & ts.ObjectFlags.NonInferrableType || source === nonInferrableAnyType) {
                        return;
                    }
                    if (!inference.isFixed) {
                        if (inference.priority === undefined || priority < inference.priority) {
                            inference.candidates = undefined;
                            inference.contraCandidates = undefined;
                            inference.topLevel = true;
                            inference.priority = priority;
                        }
                        if (priority === inference.priority) {
                            const candidate = propagationType || source;
                            // We make contravariant inferences only if we are in a pure contravariant position,
                            // i.e. only if we have not descended into a bivariant position.
                            if (contravariant && !bivariant) {
                                if (!ts.contains(inference.contraCandidates, candidate)) {
                                    inference.contraCandidates = ts.append(inference.contraCandidates, candidate);
                                    clearCachedInferences(inferences);
                                }
                            }
                            else if (!ts.contains(inference.candidates, candidate)) {
                                inference.candidates = ts.append(inference.candidates, candidate);
                                clearCachedInferences(inferences);
                            }
                        }
                        if (!(priority & ts.InferencePriority.ReturnType) && target.flags & ts.TypeFlags.TypeParameter && inference.topLevel && !isTypeParameterAtTopLevel(originalTarget, target as ts.TypeParameter)) {
                            inference.topLevel = false;
                            clearCachedInferences(inferences);
                        }
                    }
                    inferencePriority = Math.min(inferencePriority, priority);
                    return;
                }
                // Infer to the simplified version of an indexed access, if possible, to (hopefully) expose more bare type parameters to the inference engine
                const simplified = getSimplifiedType(target, /*writing*/ false);
                if (simplified !== target) {
                    inferFromTypes(source, simplified);
                }
                else if (target.flags & ts.TypeFlags.IndexedAccess) {
                    const indexType = getSimplifiedType((target as ts.IndexedAccessType).indexType, /*writing*/ false);
                    // Generally simplifications of instantiable indexes are avoided to keep relationship checking correct, however if our target is an access, we can consider
                    // that key of that access to be "instantiated", since we're looking to find the infernce goal in any way we can.
                    if (indexType.flags & ts.TypeFlags.Instantiable) {
                        const simplified = distributeIndexOverObjectType(getSimplifiedType((target as ts.IndexedAccessType).objectType, /*writing*/ false), indexType, /*writing*/ false);
                        if (simplified && simplified !== target) {
                            inferFromTypes(source, simplified);
                        }
                    }
                }
            }
            if (ts.getObjectFlags(source) & ts.ObjectFlags.Reference && ts.getObjectFlags(target) & ts.ObjectFlags.Reference && (
                (source as ts.TypeReference).target === (target as ts.TypeReference).target || isArrayType(source) && isArrayType(target)) &&
                !((source as ts.TypeReference).node && (target as ts.TypeReference).node)) {
                // If source and target are references to the same generic type, infer from type arguments
                inferFromTypeArguments(getTypeArguments(source as ts.TypeReference), getTypeArguments(target as ts.TypeReference), getVariances((source as ts.TypeReference).target));
            }
            else if (source.flags & ts.TypeFlags.Index && target.flags & ts.TypeFlags.Index) {
                inferFromContravariantTypes((source as ts.IndexType).type, (target as ts.IndexType).type);
            }
            else if ((isLiteralType(source) || source.flags & ts.TypeFlags.String) && target.flags & ts.TypeFlags.Index) {
                const empty = createEmptyObjectTypeFromStringLiteral(source);
                inferFromContravariantTypesWithPriority(empty, (target as ts.IndexType).type, ts.InferencePriority.LiteralKeyof);
            }
            else if (source.flags & ts.TypeFlags.IndexedAccess && target.flags & ts.TypeFlags.IndexedAccess) {
                inferFromTypes((source as ts.IndexedAccessType).objectType, (target as ts.IndexedAccessType).objectType);
                inferFromTypes((source as ts.IndexedAccessType).indexType, (target as ts.IndexedAccessType).indexType);
            }
            else if (source.flags & ts.TypeFlags.StringMapping && target.flags & ts.TypeFlags.StringMapping) {
                if ((source as ts.StringMappingType).symbol === (target as ts.StringMappingType).symbol) {
                    inferFromTypes((source as ts.StringMappingType).type, (target as ts.StringMappingType).type);
                }
            }
            else if (source.flags & ts.TypeFlags.Substitution) {
                inferFromTypes((source as ts.SubstitutionType).baseType, target);
                inferWithPriority(getSubstitutionIntersection(source as ts.SubstitutionType), target, ts.InferencePriority.SubstituteSource); // Make substitute inference at a lower priority
            }
            else if (target.flags & ts.TypeFlags.Conditional) {
                invokeOnce(source, target, inferToConditionalType);
            }
            else if (target.flags & ts.TypeFlags.UnionOrIntersection) {
                inferToMultipleTypes(source, (target as ts.UnionOrIntersectionType).types, target.flags);
            }
            else if (source.flags & ts.TypeFlags.Union) {
                // Source is a union or intersection type, infer from each constituent type
                const sourceTypes = (source as ts.UnionOrIntersectionType).types;
                for (const sourceType of sourceTypes) {
                    inferFromTypes(sourceType, target);
                }
            }
            else if (target.flags & ts.TypeFlags.TemplateLiteral) {
                inferToTemplateLiteralType(source, target as ts.TemplateLiteralType);
            }
            else {
                source = getReducedType(source);
                if (!(priority & ts.InferencePriority.NoConstraints && source.flags & (ts.TypeFlags.Intersection | ts.TypeFlags.Instantiable))) {
                    const apparentSource = getApparentType(source);
                    // getApparentType can return _any_ type, since an indexed access or conditional may simplify to any other type.
                    // If that occurs and it doesn't simplify to an object or intersection, we'll need to restart `inferFromTypes`
                    // with the simplified source.
                    if (apparentSource !== source && allowComplexConstraintInference && !(apparentSource.flags & (ts.TypeFlags.Object | ts.TypeFlags.Intersection))) {
                        // TODO: The `allowComplexConstraintInference` flag is a hack! This forbids inference from complex constraints within constraints!
                        // This isn't required algorithmically, but rather is used to lower the memory burden caused by performing inference
                        // that is _too good_ in projects with complicated constraints (eg, fp-ts). In such cases, if we did not limit ourselves
                        // here, we might produce more valid inferences for types, causing us to do more checks and perform more instantiations
                        // (in addition to the extra stack depth here) which, in turn, can push the already close process over its limit.
                        // TL;DR: If we ever become generally more memory efficient (or our resource budget ever increases), we should just
                        // remove this `allowComplexConstraintInference` flag.
                        allowComplexConstraintInference = false;
                        return inferFromTypes(apparentSource, target);
                    }
                    source = apparentSource;
                }
                if (source.flags & (ts.TypeFlags.Object | ts.TypeFlags.Intersection)) {
                    invokeOnce(source, target, inferFromObjectTypes);
                }
            }
        }

        function inferWithPriority(source: ts.Type, target: ts.Type, newPriority: ts.InferencePriority) {
            const savePriority = priority;
            priority |= newPriority;
            inferFromTypes(source, target);
            priority = savePriority;
        }

        function inferFromContravariantTypesWithPriority(source: ts.Type, target: ts.Type, newPriority: ts.InferencePriority) {
            const savePriority = priority;
            priority |= newPriority;
            inferFromContravariantTypes(source, target);
            priority = savePriority;
        }

        function inferToMultipleTypesWithPriority(source: ts.Type, targets: ts.Type[], targetFlags: ts.TypeFlags, newPriority: ts.InferencePriority) {
            const savePriority = priority;
            priority |= newPriority;
            inferToMultipleTypes(source, targets, targetFlags);
            priority = savePriority;
        }

        function invokeOnce(source: ts.Type, target: ts.Type, action: (source: ts.Type, target: ts.Type) => void) {
            const key = source.id + "," + target.id;
            const status = visited && visited.get(key);
            if (status !== undefined) {
                inferencePriority = Math.min(inferencePriority, status);
                return;
            }
            (visited || (visited = new ts.Map<string, number>())).set(key, ts.InferencePriority.Circularity);
            const saveInferencePriority = inferencePriority;
            inferencePriority = ts.InferencePriority.MaxValue;
            // We stop inferring and report a circularity if we encounter duplicate recursion identities on both
            // the source side and the target side.
            const saveExpandingFlags = expandingFlags;
            const sourceIdentity = getRecursionIdentity(source);
            const targetIdentity = getRecursionIdentity(target);
            if (ts.contains(sourceStack, sourceIdentity)) expandingFlags |= ExpandingFlags.Source;
            if (ts.contains(targetStack, targetIdentity)) expandingFlags |= ExpandingFlags.Target;
            if (expandingFlags !== ExpandingFlags.Both) {
                (sourceStack || (sourceStack = [])).push(sourceIdentity);
                (targetStack || (targetStack = [])).push(targetIdentity);
                action(source, target);
                targetStack.pop();
                sourceStack.pop();
            }
            else {
                inferencePriority = ts.InferencePriority.Circularity;
            }
            expandingFlags = saveExpandingFlags;
            visited.set(key, inferencePriority);
            inferencePriority = Math.min(inferencePriority, saveInferencePriority);
        }

        function inferFromMatchingTypes(sources: ts.Type[], targets: ts.Type[], matches: (s: ts.Type, t: ts.Type) => boolean): [ts.Type[], ts.Type[]] {
            let matchedSources: ts.Type[] | undefined;
            let matchedTargets: ts.Type[] | undefined;
            for (const t of targets) {
                for (const s of sources) {
                    if (matches(s, t)) {
                        inferFromTypes(s, t);
                        matchedSources = ts.appendIfUnique(matchedSources, s);
                        matchedTargets = ts.appendIfUnique(matchedTargets, t);
                    }
                }
            }
            return [
                matchedSources ? ts.filter(sources, t => !ts.contains(matchedSources, t)) : sources,
                matchedTargets ? ts.filter(targets, t => !ts.contains(matchedTargets, t)) : targets,
            ];
        }

        function inferFromTypeArguments(sourceTypes: readonly ts.Type[], targetTypes: readonly ts.Type[], variances: readonly ts.VarianceFlags[]) {
            const count = sourceTypes.length < targetTypes.length ? sourceTypes.length : targetTypes.length;
            for (let i = 0; i < count; i++) {
                if (i < variances.length && (variances[i] & ts.VarianceFlags.VarianceMask) === ts.VarianceFlags.Contravariant) {
                    inferFromContravariantTypes(sourceTypes[i], targetTypes[i]);
                }
                else {
                    inferFromTypes(sourceTypes[i], targetTypes[i]);
                }
            }
        }

        function inferFromContravariantTypes(source: ts.Type, target: ts.Type) {
            contravariant = !contravariant;
            inferFromTypes(source, target);
            contravariant = !contravariant;
        }

        function inferFromContravariantTypesIfStrictFunctionTypes(source: ts.Type, target: ts.Type) {
            if (strictFunctionTypes || priority & ts.InferencePriority.AlwaysStrict) {
                inferFromContravariantTypes(source, target);
            }
            else {
                inferFromTypes(source, target);
            }
        }

        function getInferenceInfoForType(type: ts.Type) {
            if (type.flags & ts.TypeFlags.TypeVariable) {
                for (const inference of inferences) {
                    if (type === inference.typeParameter) {
                        return inference;
                    }
                }
            }
            return undefined;
        }

        function getSingleTypeVariableFromIntersectionTypes(types: ts.Type[]) {
            let typeVariable: ts.Type | undefined;
            for (const type of types) {
                const t = type.flags & ts.TypeFlags.Intersection && ts.find((type as ts.IntersectionType).types, t => !!getInferenceInfoForType(t));
                if (!t || typeVariable && t !== typeVariable) {
                    return undefined;
                }
                typeVariable = t;
            }
            return typeVariable;
        }

        function inferToMultipleTypes(source: ts.Type, targets: ts.Type[], targetFlags: ts.TypeFlags) {
            let typeVariableCount = 0;
            if (targetFlags & ts.TypeFlags.Union) {
                let nakedTypeVariable: ts.Type | undefined;
                const sources = source.flags & ts.TypeFlags.Union ? (source as ts.UnionType).types : [source];
                const matched = new Array<boolean>(sources.length);
                let inferenceCircularity = false;
                // First infer to types that are not naked type variables. For each source type we
                // track whether inferences were made from that particular type to some target with
                // equal priority (i.e. of equal quality) to what we would infer for a naked type
                // parameter.
                for (const t of targets) {
                    if (getInferenceInfoForType(t)) {
                        nakedTypeVariable = t;
                        typeVariableCount++;
                    }
                    else {
                        for (let i = 0; i < sources.length; i++) {
                            const saveInferencePriority = inferencePriority;
                            inferencePriority = ts.InferencePriority.MaxValue;
                            inferFromTypes(sources[i], t);
                            if (inferencePriority === priority) matched[i] = true;
                            inferenceCircularity = inferenceCircularity || inferencePriority === ts.InferencePriority.Circularity;
                            inferencePriority = Math.min(inferencePriority, saveInferencePriority);
                        }
                    }
                }
                if (typeVariableCount === 0) {
                    // If every target is an intersection of types containing a single naked type variable,
                    // make a lower priority inference to that type variable. This handles inferring from
                    // 'A | B' to 'T & (X | Y)' where we want to infer 'A | B' for T.
                    const intersectionTypeVariable = getSingleTypeVariableFromIntersectionTypes(targets);
                    if (intersectionTypeVariable) {
                        inferWithPriority(source, intersectionTypeVariable, ts.InferencePriority.NakedTypeVariable);
                    }
                    return;
                }
                // If the target has a single naked type variable and no inference circularities were
                // encountered above (meaning we explored the types fully), create a union of the source
                // types from which no inferences have been made so far and infer from that union to the
                // naked type variable.
                if (typeVariableCount === 1 && !inferenceCircularity) {
                    const unmatched = ts.flatMap(sources, (s, i) => matched[i] ? undefined : s);
                    if (unmatched.length) {
                        inferFromTypes(getUnionType(unmatched), nakedTypeVariable!);
                        return;
                    }
                }
            }
            else {
                // We infer from types that are not naked type variables first so that inferences we
                // make from nested naked type variables and given slightly higher priority by virtue
                // of being first in the candidates array.
                for (const t of targets) {
                    if (getInferenceInfoForType(t)) {
                        typeVariableCount++;
                    }
                    else {
                        inferFromTypes(source, t);
                    }
                }
            }
            // Inferences directly to naked type variables are given lower priority as they are
            // less specific. For example, when inferring from Promise<string> to T | Promise<T>,
            // we want to infer string for T, not Promise<string> | string. For intersection types
            // we only infer to single naked type variables.
            if (targetFlags & ts.TypeFlags.Intersection ? typeVariableCount === 1 : typeVariableCount > 0) {
                for (const t of targets) {
                    if (getInferenceInfoForType(t)) {
                        inferWithPriority(source, t, ts.InferencePriority.NakedTypeVariable);
                    }
                }
            }
        }

        function inferToMappedType(source: ts.Type, target: ts.MappedType, constraintType: ts.Type): boolean {
            if (constraintType.flags & ts.TypeFlags.Union) {
                let result = false;
                for (const type of (constraintType as ts.UnionType).types) {
                    result = inferToMappedType(source, target, type) || result;
                }
                return result;
            }
            if (constraintType.flags & ts.TypeFlags.Index) {
                // We're inferring from some source type S to a homomorphic mapped type { [P in keyof T]: X },
                // where T is a type variable. Use inferTypeForHomomorphicMappedType to infer a suitable source
                // type and then make a secondary inference from that type to T. We make a secondary inference
                // such that direct inferences to T get priority over inferences to Partial<T>, for example.
                const inference = getInferenceInfoForType((constraintType as ts.IndexType).type);
                if (inference && !inference.isFixed && !isFromInferenceBlockedSource(source)) {
                    const inferredType = inferTypeForHomomorphicMappedType(source, target, constraintType as ts.IndexType);
                    if (inferredType) {
                        // We assign a lower priority to inferences made from types containing non-inferrable
                        // types because we may only have a partial result (i.e. we may have failed to make
                        // reverse inferences for some properties).
                        inferWithPriority(inferredType, inference.typeParameter,
                            ts.getObjectFlags(source) & ts.ObjectFlags.NonInferrableType ?
                                ts.InferencePriority.PartialHomomorphicMappedType :
                                ts.InferencePriority.HomomorphicMappedType);
                    }
                }
                return true;
            }
            if (constraintType.flags & ts.TypeFlags.TypeParameter) {
                // We're inferring from some source type S to a mapped type { [P in K]: X }, where K is a type
                // parameter. First infer from 'keyof S' to K.
                inferWithPriority(getIndexType(source), constraintType, ts.InferencePriority.MappedTypeConstraint);
                // If K is constrained to a type C, also infer to C. Thus, for a mapped type { [P in K]: X },
                // where K extends keyof T, we make the same inferences as for a homomorphic mapped type
                // { [P in keyof T]: X }. This enables us to make meaningful inferences when the target is a
                // Pick<T, K>.
                const extendedConstraint = getConstraintOfType(constraintType);
                if (extendedConstraint && inferToMappedType(source, target, extendedConstraint)) {
                    return true;
                }
                // If no inferences can be made to K's constraint, infer from a union of the property types
                // in the source to the template type X.
                const propTypes = ts.map(getPropertiesOfType(source), getTypeOfSymbol);
                const indexTypes = ts.map(getIndexInfosOfType(source), info => info !== enumNumberIndexInfo ? info.type : neverType);
                inferFromTypes(getUnionType(ts.concatenate(propTypes, indexTypes)), getTemplateTypeFromMappedType(target));
                return true;
            }
            return false;
        }

        function inferToConditionalType(source: ts.Type, target: ts.ConditionalType) {
            if (source.flags & ts.TypeFlags.Conditional) {
                inferFromTypes((source as ts.ConditionalType).checkType, target.checkType);
                inferFromTypes((source as ts.ConditionalType).extendsType, target.extendsType);
                inferFromTypes(getTrueTypeFromConditionalType(source as ts.ConditionalType), getTrueTypeFromConditionalType(target));
                inferFromTypes(getFalseTypeFromConditionalType(source as ts.ConditionalType), getFalseTypeFromConditionalType(target));
            }
            else {
                const targetTypes = [getTrueTypeFromConditionalType(target), getFalseTypeFromConditionalType(target)];
                inferToMultipleTypesWithPriority(source, targetTypes, target.flags, contravariant ? ts.InferencePriority.ContravariantConditional : 0);
            }
        }

        function inferToTemplateLiteralType(source: ts.Type, target: ts.TemplateLiteralType) {
            const matches = inferTypesFromTemplateLiteralType(source, target);
            const types = target.types;
            // When the target template literal contains only placeholders (meaning that inference is intended to extract
            // single characters and remainder strings) and inference fails to produce matches, we want to infer 'never' for
            // each placeholder such that instantiation with the inferred value(s) produces 'never', a type for which an
            // assignment check will fail. If we make no inferences, we'll likely end up with the constraint 'string' which,
            // upon instantiation, would collapse all the placeholders to just 'string', and an assignment check might
            // succeed. That would be a pointless and confusing outcome.
            if (matches || ts.every(target.texts, s => s.length === 0)) {
                for (let i = 0; i < types.length; i++) {
                    const source = matches ? matches[i] : neverType;
                    const target = types[i];

                    // If we are inferring from a string literal type to a type variable whose constraint includes one of the
                    // allowed template literal placeholder types, infer from a literal type corresponding to the constraint.
                    if (source.flags & ts.TypeFlags.StringLiteral && target.flags & ts.TypeFlags.TypeVariable) {
                        const inferenceContext = getInferenceInfoForType(target);
                        const constraint = inferenceContext ? getBaseConstraintOfType(inferenceContext.typeParameter) : undefined;
                        if (constraint && !isTypeAny(constraint)) {
                            const constraintTypes = constraint.flags & ts.TypeFlags.Union ? (constraint as ts.UnionType).types : [constraint];
                            let allTypeFlags: ts.TypeFlags = ts.reduceLeft(constraintTypes, (flags, t) => flags | t.flags, 0 as ts.TypeFlags);

                            // If the constraint contains `string`, we don't need to look for a more preferred type
                            if (!(allTypeFlags & ts.TypeFlags.String)) {
                                const str = (source as ts.StringLiteralType).value;

                                // If the type contains `number` or a number literal and the string isn't a valid number, exclude numbers
                                if (allTypeFlags & ts.TypeFlags.NumberLike && !isValidNumberString(str, /*roundTripOnly*/ true)) {
                                    allTypeFlags &= ~ts.TypeFlags.NumberLike;
                                }

                                // If the type contains `bigint` or a bigint literal and the string isn't a valid bigint, exclude bigints
                                if (allTypeFlags & ts.TypeFlags.BigIntLike && !isValidBigIntString(str, /*roundTripOnly*/ true)) {
                                    allTypeFlags &= ~ts.TypeFlags.BigIntLike;
                                }

                                // for each type in the constraint, find the highest priority matching type
                                const matchingType = ts.reduceLeft(constraintTypes, (left, right) =>
                                    !(right.flags & allTypeFlags) ? left :
                                    left.flags & ts.TypeFlags.String ? left : right.flags & ts.TypeFlags.String ? source :
                                    left.flags & ts.TypeFlags.TemplateLiteral ? left : right.flags & ts.TypeFlags.TemplateLiteral && isTypeMatchedByTemplateLiteralType(source, right as ts.TemplateLiteralType) ? source :
                                    left.flags & ts.TypeFlags.StringMapping ? left : right.flags & ts.TypeFlags.StringMapping && str === applyStringMapping(right.symbol, str) ? source :
                                    left.flags & ts.TypeFlags.StringLiteral ? left : right.flags & ts.TypeFlags.StringLiteral && (right as ts.StringLiteralType).value === str ? right :
                                    left.flags & ts.TypeFlags.Number ? left : right.flags & ts.TypeFlags.Number ? getNumberLiteralType(+str) :
                                    left.flags & ts.TypeFlags.Enum ? left : right.flags & ts.TypeFlags.Enum ? getNumberLiteralType(+str) :
                                    left.flags & ts.TypeFlags.NumberLiteral ? left : right.flags & ts.TypeFlags.NumberLiteral && (right as ts.NumberLiteralType).value === +str ? right :
                                    left.flags & ts.TypeFlags.BigInt ? left : right.flags & ts.TypeFlags.BigInt ? parseBigIntLiteralType(str) :
                                    left.flags & ts.TypeFlags.BigIntLiteral ? left : right.flags & ts.TypeFlags.BigIntLiteral && ts.pseudoBigIntToString((right as ts.BigIntLiteralType).value) === str ? right :
                                    left.flags & ts.TypeFlags.Boolean ? left : right.flags & ts.TypeFlags.Boolean ? str === "true" ? trueType : str === "false" ? falseType : booleanType :
                                    left.flags & ts.TypeFlags.BooleanLiteral ? left : right.flags & ts.TypeFlags.BooleanLiteral && (right as ts.IntrinsicType).intrinsicName === str ? right :
                                    left.flags & ts.TypeFlags.Undefined ? left : right.flags & ts.TypeFlags.Undefined && (right as ts.IntrinsicType).intrinsicName === str ? right :
                                    left.flags & ts.TypeFlags.Null ? left : right.flags & ts.TypeFlags.Null && (right as ts.IntrinsicType).intrinsicName === str ? right :
                                    left,
                                    neverType as ts.Type);

                                if (!(matchingType.flags & ts.TypeFlags.Never)) {
                                    inferFromTypes(matchingType, target);
                                    continue;
                                }
                            }
                        }
                    }

                    inferFromTypes(source, target);
                }
            }
        }

        function inferFromObjectTypes(source: ts.Type, target: ts.Type) {
            if (ts.getObjectFlags(source) & ts.ObjectFlags.Reference && ts.getObjectFlags(target) & ts.ObjectFlags.Reference && (
                (source as ts.TypeReference).target === (target as ts.TypeReference).target || isArrayType(source) && isArrayType(target))) {
                // If source and target are references to the same generic type, infer from type arguments
                inferFromTypeArguments(getTypeArguments(source as ts.TypeReference), getTypeArguments(target as ts.TypeReference), getVariances((source as ts.TypeReference).target));
                return;
            }
            if (isGenericMappedType(source) && isGenericMappedType(target)) {
                // The source and target types are generic types { [P in S]: X } and { [P in T]: Y }, so we infer
                // from S to T and from X to Y.
                inferFromTypes(getConstraintTypeFromMappedType(source), getConstraintTypeFromMappedType(target));
                inferFromTypes(getTemplateTypeFromMappedType(source), getTemplateTypeFromMappedType(target));
                const sourceNameType = getNameTypeFromMappedType(source);
                const targetNameType = getNameTypeFromMappedType(target);
                if (sourceNameType && targetNameType) inferFromTypes(sourceNameType, targetNameType);
            }
            if (ts.getObjectFlags(target) & ts.ObjectFlags.Mapped && !(target as ts.MappedType).declaration.nameType) {
                const constraintType = getConstraintTypeFromMappedType(target as ts.MappedType);
                if (inferToMappedType(source, target as ts.MappedType, constraintType)) {
                    return;
                }
            }
            // Infer from the members of source and target only if the two types are possibly related
            if (!typesDefinitelyUnrelated(source, target)) {
                if (isArrayOrTupleType(source)) {
                    if (isTupleType(target)) {
                        const sourceArity = getTypeReferenceArity(source);
                        const targetArity = getTypeReferenceArity(target);
                        const elementTypes = getTypeArguments(target);
                        const elementFlags = target.target.elementFlags;
                        // When source and target are tuple types with the same structure (fixed, variadic, and rest are matched
                        // to the same kind in each position), simply infer between the element types.
                        if (isTupleType(source) && isTupleTypeStructureMatching(source, target)) {
                            for (let i = 0; i < targetArity; i++) {
                                inferFromTypes(getTypeArguments(source)[i], elementTypes[i]);
                            }
                            return;
                        }
                        const startLength = isTupleType(source) ? Math.min(source.target.fixedLength, target.target.fixedLength) : 0;
                        const endLength = Math.min(isTupleType(source) ? getEndElementCount(source.target, ts.ElementFlags.Fixed) : 0,
                            target.target.hasRestElement ? getEndElementCount(target.target, ts.ElementFlags.Fixed) : 0);
                        // Infer between starting fixed elements.
                        for (let i = 0; i < startLength; i++) {
                            inferFromTypes(getTypeArguments(source)[i], elementTypes[i]);
                        }
                        if (!isTupleType(source) || sourceArity - startLength - endLength === 1 && source.target.elementFlags[startLength] & ts.ElementFlags.Rest) {
                            // Single rest element remains in source, infer from that to every element in target
                            const restType = getTypeArguments(source)[startLength];
                            for (let i = startLength; i < targetArity - endLength; i++) {
                                inferFromTypes(elementFlags[i] & ts.ElementFlags.Variadic ? createArrayType(restType) : restType, elementTypes[i]);
                            }
                        }
                        else {
                            const middleLength = targetArity - startLength - endLength;
                            if (middleLength === 2 && elementFlags[startLength] & elementFlags[startLength + 1] & ts.ElementFlags.Variadic && isTupleType(source)) {
                                // Middle of target is [...T, ...U] and source is tuple type
                                const targetInfo = getInferenceInfoForType(elementTypes[startLength]);
                                if (targetInfo && targetInfo.impliedArity !== undefined) {
                                    // Infer slices from source based on implied arity of T.
                                    inferFromTypes(sliceTupleType(source, startLength, endLength + sourceArity - targetInfo.impliedArity), elementTypes[startLength]);
                                    inferFromTypes(sliceTupleType(source, startLength + targetInfo.impliedArity, endLength), elementTypes[startLength + 1]);
                                }
                            }
                            else if (middleLength === 1 && elementFlags[startLength] & ts.ElementFlags.Variadic) {
                                // Middle of target is exactly one variadic element. Infer the slice between the fixed parts in the source.
                                // If target ends in optional element(s), make a lower priority a speculative inference.
                                const endsInOptional = target.target.elementFlags[targetArity - 1] & ts.ElementFlags.Optional;
                                const sourceSlice = isTupleType(source) ? sliceTupleType(source, startLength, endLength) : createArrayType(getTypeArguments(source)[0]);
                                inferWithPriority(sourceSlice, elementTypes[startLength], endsInOptional ? ts.InferencePriority.SpeculativeTuple : 0);
                            }
                            else if (middleLength === 1 && elementFlags[startLength] & ts.ElementFlags.Rest) {
                                // Middle of target is exactly one rest element. If middle of source is not empty, infer union of middle element types.
                                const restType = isTupleType(source) ? getElementTypeOfSliceOfTupleType(source, startLength, endLength) : getTypeArguments(source)[0];
                                if (restType) {
                                    inferFromTypes(restType, elementTypes[startLength]);
                                }
                            }
                        }
                        // Infer between ending fixed elements
                        for (let i = 0; i < endLength; i++) {
                            inferFromTypes(getTypeArguments(source)[sourceArity - i - 1], elementTypes[targetArity - i - 1]);
                        }
                        return;
                    }
                    if (isArrayType(target)) {
                        inferFromIndexTypes(source, target);
                        return;
                    }
                }
                inferFromProperties(source, target);
                inferFromSignatures(source, target, ts.SignatureKind.Call);
                inferFromSignatures(source, target, ts.SignatureKind.Construct);
                inferFromIndexTypes(source, target);
            }
        }

        function inferFromProperties(source: ts.Type, target: ts.Type) {
            const properties = getPropertiesOfObjectType(target);
            for (const targetProp of properties) {
                const sourceProp = getPropertyOfType(source, targetProp.escapedName);
                if (sourceProp && !ts.some(sourceProp.declarations, hasSkipDirectInferenceFlag)) {
                    inferFromTypes(getTypeOfSymbol(sourceProp), getTypeOfSymbol(targetProp));
                }
            }
        }

        function inferFromSignatures(source: ts.Type, target: ts.Type, kind: ts.SignatureKind) {
            const sourceSignatures = getSignaturesOfType(source, kind);
            const targetSignatures = getSignaturesOfType(target, kind);
            const sourceLen = sourceSignatures.length;
            const targetLen = targetSignatures.length;
            const len = sourceLen < targetLen ? sourceLen : targetLen;
            for (let i = 0; i < len; i++) {
                inferFromSignature(getBaseSignature(sourceSignatures[sourceLen - len + i]), getErasedSignature(targetSignatures[targetLen - len + i]));
            }
        }

        function inferFromSignature(source: ts.Signature, target: ts.Signature) {
            const saveBivariant = bivariant;
            const kind = target.declaration ? target.declaration.kind : ts.SyntaxKind.Unknown;
            // Once we descend into a bivariant signature we remain bivariant for all nested inferences
            bivariant = bivariant || kind === ts.SyntaxKind.MethodDeclaration || kind === ts.SyntaxKind.MethodSignature || kind === ts.SyntaxKind.Constructor;
            applyToParameterTypes(source, target, inferFromContravariantTypesIfStrictFunctionTypes);
            bivariant = saveBivariant;
            applyToReturnTypes(source, target, inferFromTypes);
        }

        function inferFromIndexTypes(source: ts.Type, target: ts.Type) {
            // Inferences across mapped type index signatures are pretty much the same a inferences to homomorphic variables
            const priority = (ts.getObjectFlags(source) & ts.getObjectFlags(target) & ts.ObjectFlags.Mapped) ? ts.InferencePriority.HomomorphicMappedType : 0;
            const indexInfos = getIndexInfosOfType(target);
            if (isObjectTypeWithInferableIndex(source)) {
                for (const targetInfo of indexInfos) {
                    const propTypes: ts.Type[] = [];
                    for (const prop of getPropertiesOfType(source)) {
                        if (isApplicableIndexType(getLiteralTypeFromProperty(prop, ts.TypeFlags.StringOrNumberLiteralOrUnique), targetInfo.keyType)) {
                            const propType = getTypeOfSymbol(prop);
                            propTypes.push(prop.flags & ts.SymbolFlags.Optional ? removeMissingOrUndefinedType(propType) : propType);
                        }
                    }
                    for (const info of getIndexInfosOfType(source)) {
                        if (isApplicableIndexType(info.keyType, targetInfo.keyType)) {
                            propTypes.push(info.type);
                        }
                    }
                    if (propTypes.length) {
                        inferWithPriority(getUnionType(propTypes), targetInfo.type, priority);
                    }
                }
            }
            for (const targetInfo of indexInfos) {
                const sourceInfo = getApplicableIndexInfo(source, targetInfo.keyType);
                if (sourceInfo) {
                    inferWithPriority(sourceInfo.type, targetInfo.type, priority);
                }
            }
        }
    }

    function isTypeOrBaseIdenticalTo(s: ts.Type, t: ts.Type) {
        return exactOptionalPropertyTypes && t === missingType ? s === t :
            (isTypeIdenticalTo(s, t) || !!(t.flags & ts.TypeFlags.String && s.flags & ts.TypeFlags.StringLiteral || t.flags & ts.TypeFlags.Number && s.flags & ts.TypeFlags.NumberLiteral));
    }

    function isTypeCloselyMatchedBy(s: ts.Type, t: ts.Type) {
        return !!(s.flags & ts.TypeFlags.Object && t.flags & ts.TypeFlags.Object && s.symbol && s.symbol === t.symbol ||
            s.aliasSymbol && s.aliasTypeArguments && s.aliasSymbol === t.aliasSymbol);
    }

    function hasPrimitiveConstraint(type: ts.TypeParameter): boolean {
        const constraint = getConstraintOfTypeParameter(type);
        return !!constraint && maybeTypeOfKind(constraint.flags & ts.TypeFlags.Conditional ? getDefaultConstraintOfConditionalType(constraint as ts.ConditionalType) : constraint, ts.TypeFlags.Primitive | ts.TypeFlags.Index | ts.TypeFlags.TemplateLiteral | ts.TypeFlags.StringMapping);
    }

    function isObjectLiteralType(type: ts.Type) {
        return !!(ts.getObjectFlags(type) & ts.ObjectFlags.ObjectLiteral);
    }

    function isObjectOrArrayLiteralType(type: ts.Type) {
        return !!(ts.getObjectFlags(type) & (ts.ObjectFlags.ObjectLiteral | ts.ObjectFlags.ArrayLiteral));
    }

    function unionObjectAndArrayLiteralCandidates(candidates: ts.Type[]): ts.Type[] {
        if (candidates.length > 1) {
            const objectLiterals = ts.filter(candidates, isObjectOrArrayLiteralType);
            if (objectLiterals.length) {
                const literalsType = getUnionType(objectLiterals, ts.UnionReduction.Subtype);
                return ts.concatenate(ts.filter(candidates, t => !isObjectOrArrayLiteralType(t)), [literalsType]);
            }
        }
        return candidates;
    }

    function getContravariantInference(inference: ts.InferenceInfo) {
        return inference.priority! & ts.InferencePriority.PriorityImpliesCombination ? getIntersectionType(inference.contraCandidates!) : getCommonSubtype(inference.contraCandidates!);
    }

    function getCovariantInference(inference: ts.InferenceInfo, signature: ts.Signature) {
        // Extract all object and array literal types and replace them with a single widened and normalized type.
        const candidates = unionObjectAndArrayLiteralCandidates(inference.candidates!);
        // We widen inferred literal types if
        // all inferences were made to top-level occurrences of the type parameter, and
        // the type parameter has no constraint or its constraint includes no primitive or literal types, and
        // the type parameter was fixed during inference or does not occur at top-level in the return type.
        const primitiveConstraint = hasPrimitiveConstraint(inference.typeParameter);
        const widenLiteralTypes = !primitiveConstraint && inference.topLevel &&
            (inference.isFixed || !isTypeParameterAtTopLevel(getReturnTypeOfSignature(signature), inference.typeParameter));
        const baseCandidates = primitiveConstraint ? ts.sameMap(candidates, getRegularTypeOfLiteralType) :
            widenLiteralTypes ? ts.sameMap(candidates, getWidenedLiteralType) :
            candidates;
        // If all inferences were made from a position that implies a combined result, infer a union type.
        // Otherwise, infer a common supertype.
        const unwidenedType = inference.priority! & ts.InferencePriority.PriorityImpliesCombination ?
            getUnionType(baseCandidates, ts.UnionReduction.Subtype) :
            getCommonSupertype(baseCandidates);
        return getWidenedType(unwidenedType);
    }

    function getInferredType(context: ts.InferenceContext, index: number): ts.Type {
        const inference = context.inferences[index];
        if (!inference.inferredType) {
            let inferredType: ts.Type | undefined;
            const signature = context.signature;
            if (signature) {
                const inferredCovariantType = inference.candidates ? getCovariantInference(inference, signature) : undefined;
                if (inference.contraCandidates) {
                    // If we have both co- and contra-variant inferences, we prefer the contra-variant inference
                    // unless the co-variant inference is a subtype of some contra-variant inference and not 'never'.
                    inferredType = inferredCovariantType && !(inferredCovariantType.flags & ts.TypeFlags.Never) &&
                        ts.some(inference.contraCandidates, t => isTypeSubtypeOf(inferredCovariantType, t)) ?
                        inferredCovariantType : getContravariantInference(inference);
                }
                else if (inferredCovariantType) {
                    inferredType = inferredCovariantType;
                }
                else if (context.flags & ts.InferenceFlags.NoDefault) {
                    // We use silentNeverType as the wildcard that signals no inferences.
                    inferredType = silentNeverType;
                }
                else {
                    // Infer either the default or the empty object type when no inferences were
                    // made. It is important to remember that in this case, inference still
                    // succeeds, meaning there is no error for not having inference candidates. An
                    // inference error only occurs when there are *conflicting* candidates, i.e.
                    // candidates with no common supertype.
                    const defaultType = getDefaultFromTypeParameter(inference.typeParameter);
                    if (defaultType) {
                        // Instantiate the default type. Any forward reference to a type
                        // parameter should be instantiated to the empty object type.
                        inferredType = instantiateType(defaultType, mergeTypeMappers(createBackreferenceMapper(context, index), context.nonFixingMapper));
                    }
                }
            }
            else {
                inferredType = getTypeFromInference(inference);
            }

            inference.inferredType = inferredType || getDefaultTypeArgumentType(!!(context.flags & ts.InferenceFlags.AnyDefault));

            const constraint = getConstraintOfTypeParameter(inference.typeParameter);
            if (constraint) {
                const instantiatedConstraint = instantiateType(constraint, context.nonFixingMapper);
                if (!inferredType || !context.compareTypes(inferredType, getTypeWithThisArgument(instantiatedConstraint, inferredType))) {
                    inference.inferredType = inferredType = instantiatedConstraint;
                }
            }
        }

        return inference.inferredType;
    }

    function getDefaultTypeArgumentType(isInJavaScriptFile: boolean): ts.Type {
        return isInJavaScriptFile ? anyType : unknownType;
    }

    function getInferredTypes(context: ts.InferenceContext): ts.Type[] {
        const result: ts.Type[] = [];
        for (let i = 0; i < context.inferences.length; i++) {
            result.push(getInferredType(context, i));
        }
        return result;
    }

    // EXPRESSION TYPE CHECKING

    function getCannotFindNameDiagnosticForName(node: ts.Identifier): ts.DiagnosticMessage {
        switch (node.escapedText) {
            case "document":
            case "console":
                return ts.Diagnostics.Cannot_find_name_0_Do_you_need_to_change_your_target_library_Try_changing_the_lib_compiler_option_to_include_dom;
            case "$":
                return compilerOptions.types
                    ? ts.Diagnostics.Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_jQuery_Try_npm_i_save_dev_types_Slashjquery_and_then_add_jquery_to_the_types_field_in_your_tsconfig
                    : ts.Diagnostics.Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_jQuery_Try_npm_i_save_dev_types_Slashjquery;
            case "describe":
            case "suite":
            case "it":
            case "test":
                return compilerOptions.types
                    ? ts.Diagnostics.Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_a_test_runner_Try_npm_i_save_dev_types_Slashjest_or_npm_i_save_dev_types_Slashmocha_and_then_add_jest_or_mocha_to_the_types_field_in_your_tsconfig
                    : ts.Diagnostics.Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_a_test_runner_Try_npm_i_save_dev_types_Slashjest_or_npm_i_save_dev_types_Slashmocha;
            case "process":
            case "require":
            case "Buffer":
            case "module":
                return compilerOptions.types
                    ? ts.Diagnostics.Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_node_Try_npm_i_save_dev_types_Slashnode_and_then_add_node_to_the_types_field_in_your_tsconfig
                    : ts.Diagnostics.Cannot_find_name_0_Do_you_need_to_install_type_definitions_for_node_Try_npm_i_save_dev_types_Slashnode;
            case "Map":
            case "Set":
            case "Promise":
            case "Symbol":
            case "WeakMap":
            case "WeakSet":
            case "Iterator":
            case "AsyncIterator":
            case "SharedArrayBuffer":
            case "Atomics":
            case "AsyncIterable":
            case "AsyncIterableIterator":
            case "AsyncGenerator":
            case "AsyncGeneratorFunction":
            case "BigInt":
            case "Reflect":
            case "BigInt64Array":
            case "BigUint64Array":
                return ts.Diagnostics.Cannot_find_name_0_Do_you_need_to_change_your_target_library_Try_changing_the_lib_compiler_option_to_1_or_later;
            case "await":
                if (ts.isCallExpression(node.parent)) {
                    return ts.Diagnostics.Cannot_find_name_0_Did_you_mean_to_write_this_in_an_async_function;
                }
                // falls through
            default:
                if (node.parent.kind === ts.SyntaxKind.ShorthandPropertyAssignment) {
                    return ts.Diagnostics.No_value_exists_in_scope_for_the_shorthand_property_0_Either_declare_one_or_provide_an_initializer;
                }
                else {
                    return ts.Diagnostics.Cannot_find_name_0;
                }
        }
    }

    function getResolvedSymbol(node: ts.Identifier): ts.Symbol {
        const links = getNodeLinks(node);
        if (!links.resolvedSymbol) {
            links.resolvedSymbol = !ts.nodeIsMissing(node) &&
                resolveName(
                    node,
                    node.escapedText,
                    ts.SymbolFlags.Value | ts.SymbolFlags.ExportValue,
                    getCannotFindNameDiagnosticForName(node),
                    node,
                    !ts.isWriteOnlyAccess(node),
                    /*excludeGlobals*/ false) || unknownSymbol;
        }
        return links.resolvedSymbol;
    }

    function isInTypeQuery(node: ts.Node): boolean {
        // TypeScript 1.0 spec (April 2014): 3.6.3
        // A type query consists of the keyword typeof followed by an expression.
        // The expression is restricted to a single identifier or a sequence of identifiers separated by periods
        return !!ts.findAncestor(
            node,
            n => n.kind === ts.SyntaxKind.TypeQuery ? true : n.kind === ts.SyntaxKind.Identifier || n.kind === ts.SyntaxKind.QualifiedName ? false : "quit");
    }

    // Return the flow cache key for a "dotted name" (i.e. a sequence of identifiers
    // separated by dots). The key consists of the id of the symbol referenced by the
    // leftmost identifier followed by zero or more property names separated by dots.
    // The result is undefined if the reference isn't a dotted name.
    function getFlowCacheKey(node: ts.Node, declaredType: ts.Type, initialType: ts.Type, flowContainer: ts.Node | undefined): string | undefined {
        switch (node.kind) {
            case ts.SyntaxKind.Identifier:
                if (!ts.isThisInTypeQuery(node)) {
                    const symbol = getResolvedSymbol(node as ts.Identifier);
                    return symbol !== unknownSymbol ? `${flowContainer ? getNodeId(flowContainer) : "-1"}|${getTypeId(declaredType)}|${getTypeId(initialType)}|${getSymbolId(symbol)}` : undefined;
                }
                // falls through
            case ts.SyntaxKind.ThisKeyword:
                return `0|${flowContainer ? getNodeId(flowContainer) : "-1"}|${getTypeId(declaredType)}|${getTypeId(initialType)}`;
            case ts.SyntaxKind.NonNullExpression:
            case ts.SyntaxKind.ParenthesizedExpression:
                return getFlowCacheKey((node as ts.NonNullExpression | ts.ParenthesizedExpression).expression, declaredType, initialType, flowContainer);
            case ts.SyntaxKind.QualifiedName:
                const left = getFlowCacheKey((node as ts.QualifiedName).left, declaredType, initialType, flowContainer);
                return left && left + "." + (node as ts.QualifiedName).right.escapedText;
            case ts.SyntaxKind.PropertyAccessExpression:
            case ts.SyntaxKind.ElementAccessExpression:
                const propName = getAccessedPropertyName(node as ts.AccessExpression);
                if (propName !== undefined) {
                    const key = getFlowCacheKey((node as ts.AccessExpression).expression, declaredType, initialType, flowContainer);
                    return key && key + "." + propName;
                }
                break;
            case ts.SyntaxKind.ObjectBindingPattern:
            case ts.SyntaxKind.ArrayBindingPattern:
            case ts.SyntaxKind.FunctionDeclaration:
            case ts.SyntaxKind.FunctionExpression:
            case ts.SyntaxKind.ArrowFunction:
            case ts.SyntaxKind.MethodDeclaration:
                // Handle pseudo-references originating in getNarrowedTypeOfSymbol.
                return `${getNodeId(node)}#${getTypeId(declaredType)}`;
        }
        return undefined;
    }

    function isMatchingReference(source: ts.Node, target: ts.Node): boolean {
        switch (target.kind) {
            case ts.SyntaxKind.ParenthesizedExpression:
            case ts.SyntaxKind.NonNullExpression:
                return isMatchingReference(source, (target as ts.NonNullExpression | ts.ParenthesizedExpression).expression);
            case ts.SyntaxKind.BinaryExpression:
                return (ts.isAssignmentExpression(target) && isMatchingReference(source, target.left)) ||
                    (ts.isBinaryExpression(target) && target.operatorToken.kind === ts.SyntaxKind.CommaToken && isMatchingReference(source, target.right));
        }
        switch (source.kind) {
            case ts.SyntaxKind.MetaProperty:
                return target.kind === ts.SyntaxKind.MetaProperty
                    && (source as ts.MetaProperty).keywordToken === (target as ts.MetaProperty).keywordToken
                    && (source as ts.MetaProperty).name.escapedText === (target as ts.MetaProperty).name.escapedText;
            case ts.SyntaxKind.Identifier:
            case ts.SyntaxKind.PrivateIdentifier:
                return ts.isThisInTypeQuery(source) ?
                    target.kind === ts.SyntaxKind.ThisKeyword :
                    target.kind === ts.SyntaxKind.Identifier && getResolvedSymbol(source as ts.Identifier) === getResolvedSymbol(target as ts.Identifier) ||
                        (target.kind === ts.SyntaxKind.VariableDeclaration || target.kind === ts.SyntaxKind.BindingElement) &&
                        getExportSymbolOfValueSymbolIfExported(getResolvedSymbol(source as ts.Identifier)) === getSymbolOfNode(target);
            case ts.SyntaxKind.ThisKeyword:
                return target.kind === ts.SyntaxKind.ThisKeyword;
            case ts.SyntaxKind.SuperKeyword:
                return target.kind === ts.SyntaxKind.SuperKeyword;
            case ts.SyntaxKind.NonNullExpression:
            case ts.SyntaxKind.ParenthesizedExpression:
                return isMatchingReference((source as ts.NonNullExpression | ts.ParenthesizedExpression).expression, target);
            case ts.SyntaxKind.PropertyAccessExpression:
            case ts.SyntaxKind.ElementAccessExpression:
                const sourcePropertyName = getAccessedPropertyName(source as ts.AccessExpression);
                const targetPropertyName = ts.isAccessExpression(target) ? getAccessedPropertyName(target) : undefined;
                return sourcePropertyName !== undefined && targetPropertyName !== undefined && targetPropertyName === sourcePropertyName &&
                    isMatchingReference((source as ts.AccessExpression).expression, (target as ts.AccessExpression).expression);
            case ts.SyntaxKind.QualifiedName:
                return ts.isAccessExpression(target) &&
                    (source as ts.QualifiedName).right.escapedText === getAccessedPropertyName(target) &&
                    isMatchingReference((source as ts.QualifiedName).left, target.expression);
            case ts.SyntaxKind.BinaryExpression:
                return (ts.isBinaryExpression(source) && source.operatorToken.kind === ts.SyntaxKind.CommaToken && isMatchingReference(source.right, target));
        }
        return false;
    }

    function getAccessedPropertyName(access: ts.AccessExpression | ts.BindingElement | ts.ParameterDeclaration): ts.__String | undefined {
        if (ts.isPropertyAccessExpression(access)) {
            return access.name.escapedText;
        }
        if (ts.isElementAccessExpression(access)) {
            return tryGetElementAccessExpressionName(access);
        }
        if (ts.isBindingElement(access)) {
            const name = getDestructuringPropertyName(access);
            return name ? ts.escapeLeadingUnderscores(name) : undefined;
        }
        if (ts.isParameter(access)) {
            return ("" + access.parent.parameters.indexOf(access)) as ts.__String;
        }
        return undefined;
    }

    function tryGetNameFromType(type: ts.Type) {
        return type.flags & ts.TypeFlags.UniqueESSymbol ? (type as ts.UniqueESSymbolType).escapedName :
            type.flags & ts.TypeFlags.StringOrNumberLiteral ? ts.escapeLeadingUnderscores("" + (type as ts.StringLiteralType | ts.NumberLiteralType).value) : undefined;
    }

    function tryGetElementAccessExpressionName(node: ts.ElementAccessExpression) {
        if (ts.isStringOrNumericLiteralLike(node.argumentExpression)) {
            return ts.escapeLeadingUnderscores(node.argumentExpression.text);
        }
        if (ts.isEntityNameExpression(node.argumentExpression)) {
            const symbol = resolveEntityName(node.argumentExpression, ts.SymbolFlags.Value, /*ignoreErrors*/ true);
            if (!symbol || !(isConstVariable(symbol) || (symbol.flags & ts.SymbolFlags.EnumMember))) return undefined;

            const declaration = symbol.valueDeclaration;
            if (declaration === undefined) return undefined;

            const type = tryGetTypeFromEffectiveTypeNode(declaration);
            if (type) {
                const name = tryGetNameFromType(type);
                if (name !== undefined) {
                    return name;
                }
            }

            if (ts.hasOnlyExpressionInitializer(declaration) && isBlockScopedNameDeclaredBeforeUse(declaration, node.argumentExpression)) {
                const initializer = ts.getEffectiveInitializer(declaration);
                if (initializer) {
                    return tryGetNameFromType(getTypeOfExpression(initializer));
                }
                if (ts.isEnumMember(declaration)) {
                    return ts.getTextOfPropertyName(declaration.name);
                }
            }
        }
        return undefined;
    }

    function containsMatchingReference(source: ts.Node, target: ts.Node) {
        while (ts.isAccessExpression(source)) {
            source = source.expression;
            if (isMatchingReference(source, target)) {
                return true;
            }
        }
        return false;
    }

    function optionalChainContainsReference(source: ts.Node, target: ts.Node) {
        while (ts.isOptionalChain(source)) {
            source = source.expression;
            if (isMatchingReference(source, target)) {
                return true;
            }
        }
        return false;
    }

    function isDiscriminantProperty(type: ts.Type | undefined, name: ts.__String) {
        if (type && type.flags & ts.TypeFlags.Union) {
            const prop = getUnionOrIntersectionProperty(type as ts.UnionType, name);
            if (prop && ts.getCheckFlags(prop) & ts.CheckFlags.SyntheticProperty) {
                if ((prop as ts.TransientSymbol).isDiscriminantProperty === undefined) {
                    (prop as ts.TransientSymbol).isDiscriminantProperty =
                        ((prop as ts.TransientSymbol).checkFlags & ts.CheckFlags.Discriminant) === ts.CheckFlags.Discriminant &&
                        !isGenericType(getTypeOfSymbol(prop));
                }
                return !!(prop as ts.TransientSymbol).isDiscriminantProperty;
            }
        }
        return false;
    }

    function findDiscriminantProperties(sourceProperties: ts.Symbol[], target: ts.Type): ts.Symbol[] | undefined {
        let result: ts.Symbol[] | undefined;
        for (const sourceProperty of sourceProperties) {
            if (isDiscriminantProperty(target, sourceProperty.escapedName)) {
                if (result) {
                    result.push(sourceProperty);
                    continue;
                }
                result = [sourceProperty];
            }
        }
        return result;
    }

    // Given a set of constituent types and a property name, create and return a map keyed by the literal
    // types of the property by that name in each constituent type. No map is returned if some key property
    // has a non-literal type or if less than 10 or less than 50% of the constituents have a unique key.
    // Entries with duplicate keys have unknownType as the value.
    function mapTypesByKeyProperty(types: ts.Type[], name: ts.__String) {
        const map = new ts.Map<ts.TypeId, ts.Type>();
        let count = 0;
        for (const type of types) {
            if (type.flags & (ts.TypeFlags.Object | ts.TypeFlags.Intersection | ts.TypeFlags.InstantiableNonPrimitive)) {
                const discriminant = getTypeOfPropertyOfType(type, name);
                if (discriminant) {
                    if (!isLiteralType(discriminant)) {
                        return undefined;
                    }
                    let duplicate = false;
                    forEachType(discriminant, t => {
                        const id = getTypeId(getRegularTypeOfLiteralType(t));
                        const existing = map.get(id);
                        if (!existing) {
                            map.set(id, type);
                        }
                        else if (existing !== unknownType) {
                            map.set(id, unknownType);
                            duplicate = true;
                        }
                    });
                    if (!duplicate) count++;
                }
            }
        }
        return count >= 10 && count * 2 >= types.length ? map : undefined;
    }

    // Return the name of a discriminant property for which it was possible and feasible to construct a map of
    // constituent types keyed by the literal types of the property by that name in each constituent type.
    function getKeyPropertyName(unionType: ts.UnionType): ts.__String | undefined {
        const types = unionType.types;
        // We only construct maps for unions with many non-primitive constituents.
        if (types.length < 10 || ts.getObjectFlags(unionType) & ts.ObjectFlags.PrimitiveUnion ||
            ts.countWhere(types, t => !!(t.flags & (ts.TypeFlags.Object | ts.TypeFlags.InstantiableNonPrimitive))) < 10) {
            return undefined;
        }
        if (unionType.keyPropertyName === undefined) {
            // The candidate key property name is the name of the first property with a unit type in one of the
            // constituent types.
            const keyPropertyName = ts.forEach(types, t =>
                t.flags & (ts.TypeFlags.Object | ts.TypeFlags.InstantiableNonPrimitive) ?
                    ts.forEach(getPropertiesOfType(t), p => isUnitType(getTypeOfSymbol(p)) ? p.escapedName : undefined) :
                    undefined);
            const mapByKeyProperty = keyPropertyName && mapTypesByKeyProperty(types, keyPropertyName);
            unionType.keyPropertyName = mapByKeyProperty ? keyPropertyName : "" as ts.__String;
            unionType.constituentMap = mapByKeyProperty;
        }
        return (unionType.keyPropertyName as string).length ? unionType.keyPropertyName : undefined;
    }

    // Given a union type for which getKeyPropertyName returned a non-undefined result, return the constituent
    // that corresponds to the given key type for that property name.
    function getConstituentTypeForKeyType(unionType: ts.UnionType, keyType: ts.Type) {
        const result = unionType.constituentMap?.get(getTypeId(getRegularTypeOfLiteralType(keyType)));
        return result !== unknownType ? result : undefined;
    }

    function getMatchingUnionConstituentForType(unionType: ts.UnionType, type: ts.Type) {
        const keyPropertyName = getKeyPropertyName(unionType);
        const propType = keyPropertyName && getTypeOfPropertyOfType(type, keyPropertyName);
        return propType && getConstituentTypeForKeyType(unionType, propType);
    }

    function getMatchingUnionConstituentForObjectLiteral(unionType: ts.UnionType, node: ts.ObjectLiteralExpression) {
        const keyPropertyName = getKeyPropertyName(unionType);
        const propNode = keyPropertyName && ts.find(node.properties, p => p.symbol && p.kind === ts.SyntaxKind.PropertyAssignment &&
            p.symbol.escapedName === keyPropertyName && isPossiblyDiscriminantValue(p.initializer));
        const propType = propNode && getContextFreeTypeOfExpression((propNode as ts.PropertyAssignment).initializer);
        return propType && getConstituentTypeForKeyType(unionType, propType);
    }

    function isOrContainsMatchingReference(source: ts.Node, target: ts.Node) {
        return isMatchingReference(source, target) || containsMatchingReference(source, target);
    }

    function hasMatchingArgument(expression: ts.CallExpression | ts.NewExpression, reference: ts.Node) {
        if (expression.arguments) {
            for (const argument of expression.arguments) {
                if (isOrContainsMatchingReference(reference, argument)) {
                    return true;
                }
            }
        }
        if (expression.expression.kind === ts.SyntaxKind.PropertyAccessExpression &&
            isOrContainsMatchingReference(reference, (expression.expression as ts.PropertyAccessExpression).expression)) {
            return true;
        }
        return false;
    }

    function getFlowNodeId(flow: ts.FlowNode): number {
        if (!flow.id || flow.id < 0) {
            flow.id = nextFlowId;
            nextFlowId++;
        }
        return flow.id;
    }

    function typeMaybeAssignableTo(source: ts.Type, target: ts.Type) {
        if (!(source.flags & ts.TypeFlags.Union)) {
            return isTypeAssignableTo(source, target);
        }
        for (const t of (source as ts.UnionType).types) {
            if (isTypeAssignableTo(t, target)) {
                return true;
            }
        }
        return false;
    }

    // Remove those constituent types of declaredType to which no constituent type of assignedType is assignable.
    // For example, when a variable of type number | string | boolean is assigned a value of type number | boolean,
    // we remove type string.
    function getAssignmentReducedType(declaredType: ts.UnionType, assignedType: ts.Type) {
        if (declaredType === assignedType) {
            return declaredType;
        }
        if (assignedType.flags & ts.TypeFlags.Never) {
            return assignedType;
        }
        const key = `A${getTypeId(declaredType)},${getTypeId(assignedType)}`;
        return getCachedType(key) ?? setCachedType(key, getAssignmentReducedTypeWorker(declaredType, assignedType));
    }

    function getAssignmentReducedTypeWorker(declaredType: ts.UnionType, assignedType: ts.Type) {
        const filteredType = filterType(declaredType, t => typeMaybeAssignableTo(assignedType, t));
        // Ensure that we narrow to fresh types if the assignment is a fresh boolean literal type.
        const reducedType = assignedType.flags & ts.TypeFlags.BooleanLiteral && isFreshLiteralType(assignedType) ? mapType(filteredType, getFreshTypeOfLiteralType) : filteredType;
        // Our crude heuristic produces an invalid result in some cases: see GH#26130.
        // For now, when that happens, we give up and don't narrow at all.  (This also
        // means we'll never narrow for erroneous assignments where the assigned type
        // is not assignable to the declared type.)
        return isTypeAssignableTo(assignedType, reducedType) ? reducedType : declaredType;
    }

    function isFunctionObjectType(type: ts.ObjectType): boolean {
        // We do a quick check for a "bind" property before performing the more expensive subtype
        // check. This gives us a quicker out in the common case where an object type is not a function.
        const resolved = resolveStructuredTypeMembers(type);
        return !!(resolved.callSignatures.length || resolved.constructSignatures.length ||
            resolved.members.get("bind" as ts.__String) && isTypeSubtypeOf(type, globalFunctionType));
    }

    function getTypeFacts(type: ts.Type): TypeFacts {
        if (type.flags & (ts.TypeFlags.Intersection | ts.TypeFlags.Instantiable)) {
            type = getBaseConstraintOfType(type) || unknownType;
        }
        const flags = type.flags;
        if (flags & (ts.TypeFlags.String | ts.TypeFlags.StringMapping)) {
            return strictNullChecks ? TypeFacts.StringStrictFacts : TypeFacts.StringFacts;
        }
        if (flags & (ts.TypeFlags.StringLiteral | ts.TypeFlags.TemplateLiteral)) {
            const isEmpty = flags & ts.TypeFlags.StringLiteral && (type as ts.StringLiteralType).value === "";
            return strictNullChecks ?
                isEmpty ? TypeFacts.EmptyStringStrictFacts : TypeFacts.NonEmptyStringStrictFacts :
                isEmpty ? TypeFacts.EmptyStringFacts : TypeFacts.NonEmptyStringFacts;
        }
        if (flags & (ts.TypeFlags.Number | ts.TypeFlags.Enum)) {
            return strictNullChecks ? TypeFacts.NumberStrictFacts : TypeFacts.NumberFacts;
        }
        if (flags & ts.TypeFlags.NumberLiteral) {
            const isZero = (type as ts.NumberLiteralType).value === 0;
            return strictNullChecks ?
                isZero ? TypeFacts.ZeroNumberStrictFacts : TypeFacts.NonZeroNumberStrictFacts :
                isZero ? TypeFacts.ZeroNumberFacts : TypeFacts.NonZeroNumberFacts;
        }
        if (flags & ts.TypeFlags.BigInt) {
            return strictNullChecks ? TypeFacts.BigIntStrictFacts : TypeFacts.BigIntFacts;
        }
        if (flags & ts.TypeFlags.BigIntLiteral) {
            const isZero = isZeroBigInt(type as ts.BigIntLiteralType);
            return strictNullChecks ?
                isZero ? TypeFacts.ZeroBigIntStrictFacts : TypeFacts.NonZeroBigIntStrictFacts :
                isZero ? TypeFacts.ZeroBigIntFacts : TypeFacts.NonZeroBigIntFacts;
        }
        if (flags & ts.TypeFlags.Boolean) {
            return strictNullChecks ? TypeFacts.BooleanStrictFacts : TypeFacts.BooleanFacts;
        }
        if (flags & ts.TypeFlags.BooleanLike) {
            return strictNullChecks ?
                (type === falseType || type === regularFalseType) ? TypeFacts.FalseStrictFacts : TypeFacts.TrueStrictFacts :
                (type === falseType || type === regularFalseType) ? TypeFacts.FalseFacts : TypeFacts.TrueFacts;
        }
        if (flags & ts.TypeFlags.Object) {
            return ts.getObjectFlags(type) & ts.ObjectFlags.Anonymous && isEmptyObjectType(type as ts.ObjectType) ?
                strictNullChecks ? TypeFacts.EmptyObjectStrictFacts : TypeFacts.EmptyObjectFacts :
                isFunctionObjectType(type as ts.ObjectType) ?
                    strictNullChecks ? TypeFacts.FunctionStrictFacts : TypeFacts.FunctionFacts :
                    strictNullChecks ? TypeFacts.ObjectStrictFacts : TypeFacts.ObjectFacts;
        }
        if (flags & ts.TypeFlags.Void) {
            return TypeFacts.VoidFacts;
        }
        if (flags & ts.TypeFlags.Undefined) {
            return TypeFacts.UndefinedFacts;
        }
        if (flags & ts.TypeFlags.Null) {
            return TypeFacts.NullFacts;
        }
        if (flags & ts.TypeFlags.ESSymbolLike) {
            return strictNullChecks ? TypeFacts.SymbolStrictFacts : TypeFacts.SymbolFacts;
        }
        if (flags & ts.TypeFlags.NonPrimitive) {
            return strictNullChecks ? TypeFacts.ObjectStrictFacts : TypeFacts.ObjectFacts;
        }
        if (flags & ts.TypeFlags.Never) {
            return TypeFacts.None;
        }
        if (flags & ts.TypeFlags.Union) {
            return ts.reduceLeft((type as ts.UnionType).types, (facts, t) => facts | getTypeFacts(t), TypeFacts.None);
        }
        if (flags & ts.TypeFlags.Intersection) {
            return getIntersectionTypeFacts(type as ts.IntersectionType);
        }
        return TypeFacts.UnknownFacts;
    }

    function getIntersectionTypeFacts(type: ts.IntersectionType): TypeFacts {
        // When an intersection contains a primitive type we ignore object type constituents as they are
        // presumably type tags. For example, in string & { __kind__: "name" } we ignore the object type.
        const ignoreObjects = maybeTypeOfKind(type, ts.TypeFlags.Primitive);
        // When computing the type facts of an intersection type, certain type facts are computed as `and`
        // and others are computed as `or`.
        let oredFacts = TypeFacts.None;
        let andedFacts = TypeFacts.All;
        for (const t of type.types) {
            if (!(ignoreObjects && t.flags & ts.TypeFlags.Object)) {
                const f = getTypeFacts(t);
                oredFacts |= f;
                andedFacts &= f;
            }
        }
        return oredFacts & TypeFacts.OrFactsMask | andedFacts & TypeFacts.AndFactsMask;
    }

    function getTypeWithFacts(type: ts.Type, include: TypeFacts) {
        return filterType(type, t => (getTypeFacts(t) & include) !== 0);
    }

    // This function is similar to getTypeWithFacts, except that in strictNullChecks mode it replaces type
    // unknown with the union {} | null | undefined (and reduces that accordingly), and it intersects remaining
    // instantiable types with {}, {} | null, or {} | undefined in order to remove null and/or undefined.
    function getAdjustedTypeWithFacts(type: ts.Type, facts: TypeFacts) {
        const reduced = recombineUnknownType(getTypeWithFacts(strictNullChecks && type.flags & ts.TypeFlags.Unknown ? unknownUnionType : type, facts));
        if (strictNullChecks) {
            switch (facts) {
                case TypeFacts.NEUndefined:
                    return mapType(reduced, t => getTypeFacts(t) & TypeFacts.EQUndefined ? getIntersectionType([t, getTypeFacts(t) & TypeFacts.EQNull && !maybeTypeOfKind(reduced, ts.TypeFlags.Null) ? getUnionType([emptyObjectType, nullType]) : emptyObjectType]): t);
                case TypeFacts.NENull:
                    return mapType(reduced, t => getTypeFacts(t) & TypeFacts.EQNull ? getIntersectionType([t, getTypeFacts(t) & TypeFacts.EQUndefined && !maybeTypeOfKind(reduced, ts.TypeFlags.Undefined) ? getUnionType([emptyObjectType, undefinedType]) : emptyObjectType]): t);
                case TypeFacts.NEUndefinedOrNull:
                case TypeFacts.Truthy:
                    return mapType(reduced, t => getTypeFacts(t) & TypeFacts.EQUndefinedOrNull ? getGlobalNonNullableTypeInstantiation(t): t);
            }
        }
        return reduced;
    }

    function recombineUnknownType(type: ts.Type) {
        return type === unknownUnionType ? unknownType : type;
    }

    function getTypeWithDefault(type: ts.Type, defaultExpression: ts.Expression) {
        return defaultExpression ?
            getUnionType([getNonUndefinedType(type), getTypeOfExpression(defaultExpression)]) :
            type;
    }

    function getTypeOfDestructuredProperty(type: ts.Type, name: ts.PropertyName) {
        const nameType = getLiteralTypeFromPropertyName(name);
        if (!isTypeUsableAsPropertyName(nameType)) return errorType;
        const text = getPropertyNameFromType(nameType);
        return getTypeOfPropertyOfType(type, text) || includeUndefinedInIndexSignature(getApplicableIndexInfoForName(type, text)?.type) || errorType;
    }

    function getTypeOfDestructuredArrayElement(type: ts.Type, index: number) {
        return everyType(type, isTupleLikeType) && getTupleElementType(type, index) ||
            includeUndefinedInIndexSignature(checkIteratedTypeOrElementType(IterationUse.Destructuring, type, undefinedType, /*errorNode*/ undefined)) ||
            errorType;
    }

    function includeUndefinedInIndexSignature(type: ts.Type | undefined): ts.Type | undefined {
        if (!type) return type;
        return compilerOptions.noUncheckedIndexedAccess ?
            getUnionType([type, undefinedType]) :
            type;
    }

    function getTypeOfDestructuredSpreadExpression(type: ts.Type) {
        return createArrayType(checkIteratedTypeOrElementType(IterationUse.Destructuring, type, undefinedType, /*errorNode*/ undefined) || errorType);
    }

    function getAssignedTypeOfBinaryExpression(node: ts.BinaryExpression): ts.Type {
        const isDestructuringDefaultAssignment =
            node.parent.kind === ts.SyntaxKind.ArrayLiteralExpression && isDestructuringAssignmentTarget(node.parent) ||
            node.parent.kind === ts.SyntaxKind.PropertyAssignment && isDestructuringAssignmentTarget(node.parent.parent);
        return isDestructuringDefaultAssignment ?
            getTypeWithDefault(getAssignedType(node), node.right) :
            getTypeOfExpression(node.right);
    }

    function isDestructuringAssignmentTarget(parent: ts.Node) {
        return parent.parent.kind === ts.SyntaxKind.BinaryExpression && (parent.parent as ts.BinaryExpression).left === parent ||
            parent.parent.kind === ts.SyntaxKind.ForOfStatement && (parent.parent as ts.ForOfStatement).initializer === parent;
    }

    function getAssignedTypeOfArrayLiteralElement(node: ts.ArrayLiteralExpression, element: ts.Expression): ts.Type {
        return getTypeOfDestructuredArrayElement(getAssignedType(node), node.elements.indexOf(element));
    }

    function getAssignedTypeOfSpreadExpression(node: ts.SpreadElement): ts.Type {
        return getTypeOfDestructuredSpreadExpression(getAssignedType(node.parent as ts.ArrayLiteralExpression));
    }

    function getAssignedTypeOfPropertyAssignment(node: ts.PropertyAssignment | ts.ShorthandPropertyAssignment): ts.Type {
        return getTypeOfDestructuredProperty(getAssignedType(node.parent), node.name);
    }

    function getAssignedTypeOfShorthandPropertyAssignment(node: ts.ShorthandPropertyAssignment): ts.Type {
        return getTypeWithDefault(getAssignedTypeOfPropertyAssignment(node), node.objectAssignmentInitializer!);
    }

    function getAssignedType(node: ts.Expression): ts.Type {
        const { parent } = node;
        switch (parent.kind) {
            case ts.SyntaxKind.ForInStatement:
                return stringType;
            case ts.SyntaxKind.ForOfStatement:
                return checkRightHandSideOfForOf(parent as ts.ForOfStatement) || errorType;
            case ts.SyntaxKind.BinaryExpression:
                return getAssignedTypeOfBinaryExpression(parent as ts.BinaryExpression);
            case ts.SyntaxKind.DeleteExpression:
                return undefinedType;
            case ts.SyntaxKind.ArrayLiteralExpression:
                return getAssignedTypeOfArrayLiteralElement(parent as ts.ArrayLiteralExpression, node);
            case ts.SyntaxKind.SpreadElement:
                return getAssignedTypeOfSpreadExpression(parent as ts.SpreadElement);
            case ts.SyntaxKind.PropertyAssignment:
                return getAssignedTypeOfPropertyAssignment(parent as ts.PropertyAssignment);
            case ts.SyntaxKind.ShorthandPropertyAssignment:
                return getAssignedTypeOfShorthandPropertyAssignment(parent as ts.ShorthandPropertyAssignment);
        }
        return errorType;
    }

    function getInitialTypeOfBindingElement(node: ts.BindingElement): ts.Type {
        const pattern = node.parent;
        const parentType = getInitialType(pattern.parent as ts.VariableDeclaration | ts.BindingElement);
        const type = pattern.kind === ts.SyntaxKind.ObjectBindingPattern ?
            getTypeOfDestructuredProperty(parentType, node.propertyName || node.name as ts.Identifier) :
            !node.dotDotDotToken ?
                getTypeOfDestructuredArrayElement(parentType, pattern.elements.indexOf(node)) :
                getTypeOfDestructuredSpreadExpression(parentType);
        return getTypeWithDefault(type, node.initializer!);
    }

    function getTypeOfInitializer(node: ts.Expression) {
        // Return the cached type if one is available. If the type of the variable was inferred
        // from its initializer, we'll already have cached the type. Otherwise we compute it now
        // without caching such that transient types are reflected.
        const links = getNodeLinks(node);
        return links.resolvedType || getTypeOfExpression(node);
    }

    function getInitialTypeOfVariableDeclaration(node: ts.VariableDeclaration) {
        if (node.initializer) {
            return getTypeOfInitializer(node.initializer);
        }
        if (node.parent.parent.kind === ts.SyntaxKind.ForInStatement) {
            return stringType;
        }
        if (node.parent.parent.kind === ts.SyntaxKind.ForOfStatement) {
            return checkRightHandSideOfForOf(node.parent.parent) || errorType;
        }
        return errorType;
    }

    function getInitialType(node: ts.VariableDeclaration | ts.BindingElement) {
        return node.kind === ts.SyntaxKind.VariableDeclaration ?
            getInitialTypeOfVariableDeclaration(node) :
            getInitialTypeOfBindingElement(node);
    }

    function isEmptyArrayAssignment(node: ts.VariableDeclaration | ts.BindingElement | ts.Expression) {
        return node.kind === ts.SyntaxKind.VariableDeclaration && (node as ts.VariableDeclaration).initializer &&
            isEmptyArrayLiteral((node as ts.VariableDeclaration).initializer!) ||
            node.kind !== ts.SyntaxKind.BindingElement && node.parent.kind === ts.SyntaxKind.BinaryExpression &&
            isEmptyArrayLiteral((node.parent as ts.BinaryExpression).right);
    }

    function getReferenceCandidate(node: ts.Expression): ts.Expression {
        switch (node.kind) {
            case ts.SyntaxKind.ParenthesizedExpression:
                return getReferenceCandidate((node as ts.ParenthesizedExpression).expression);
            case ts.SyntaxKind.BinaryExpression:
                switch ((node as ts.BinaryExpression).operatorToken.kind) {
                    case ts.SyntaxKind.EqualsToken:
                    case ts.SyntaxKind.BarBarEqualsToken:
                    case ts.SyntaxKind.AmpersandAmpersandEqualsToken:
                    case ts.SyntaxKind.QuestionQuestionEqualsToken:
                        return getReferenceCandidate((node as ts.BinaryExpression).left);
                    case ts.SyntaxKind.CommaToken:
                        return getReferenceCandidate((node as ts.BinaryExpression).right);
                }
        }
        return node;
    }

    function getReferenceRoot(node: ts.Node): ts.Node {
        const { parent } = node;
        return parent.kind === ts.SyntaxKind.ParenthesizedExpression ||
            parent.kind === ts.SyntaxKind.BinaryExpression && (parent as ts.BinaryExpression).operatorToken.kind === ts.SyntaxKind.EqualsToken && (parent as ts.BinaryExpression).left === node ||
            parent.kind === ts.SyntaxKind.BinaryExpression && (parent as ts.BinaryExpression).operatorToken.kind === ts.SyntaxKind.CommaToken && (parent as ts.BinaryExpression).right === node ?
            getReferenceRoot(parent) : node;
    }

    function getTypeOfSwitchClause(clause: ts.CaseClause | ts.DefaultClause) {
        if (clause.kind === ts.SyntaxKind.CaseClause) {
            return getRegularTypeOfLiteralType(getTypeOfExpression(clause.expression));
        }
        return neverType;
    }

    function getSwitchClauseTypes(switchStatement: ts.SwitchStatement): ts.Type[] {
        const links = getNodeLinks(switchStatement);
        if (!links.switchTypes) {
            links.switchTypes = [];
            for (const clause of switchStatement.caseBlock.clauses) {
                links.switchTypes.push(getTypeOfSwitchClause(clause));
            }
        }
        return links.switchTypes;
    }

    // Get the type names from all cases in a switch on `typeof`. The default clause and/or duplicate type names are
    // represented as undefined. Return undefined if one or more case clause expressions are not string literals.
    function getSwitchClauseTypeOfWitnesses(switchStatement: ts.SwitchStatement): (string | undefined)[] | undefined {
        if (ts.some(switchStatement.caseBlock.clauses, clause => clause.kind === ts.SyntaxKind.CaseClause && !ts.isStringLiteralLike(clause.expression))) {
            return undefined;
        }
        const witnesses: (string | undefined)[] = [];
        for (const clause of switchStatement.caseBlock.clauses) {
            const text = clause.kind === ts.SyntaxKind.CaseClause ? (clause.expression as ts.StringLiteralLike).text : undefined;
            witnesses.push(text && !ts.contains(witnesses, text) ? text : undefined);
        }
        return witnesses;
    }

    function eachTypeContainedIn(source: ts.Type, types: ts.Type[]) {
        return source.flags & ts.TypeFlags.Union ? !ts.forEach((source as ts.UnionType).types, t => !ts.contains(types, t)) : ts.contains(types, source);
    }

    function isTypeSubsetOf(source: ts.Type, target: ts.Type) {
        return source === target || target.flags & ts.TypeFlags.Union && isTypeSubsetOfUnion(source, target as ts.UnionType);
    }

    function isTypeSubsetOfUnion(source: ts.Type, target: ts.UnionType) {
        if (source.flags & ts.TypeFlags.Union) {
            for (const t of (source as ts.UnionType).types) {
                if (!containsType(target.types, t)) {
                    return false;
                }
            }
            return true;
        }
        if (source.flags & ts.TypeFlags.EnumLiteral && getBaseTypeOfEnumLiteralType(source as ts.LiteralType) === target) {
            return true;
        }
        return containsType(target.types, source);
    }

    function forEachType<T>(type: ts.Type, f: (t: ts.Type) => T | undefined): T | undefined {
        return type.flags & ts.TypeFlags.Union ? ts.forEach((type as ts.UnionType).types, f) : f(type);
    }

    function someType(type: ts.Type, f: (t: ts.Type) => boolean): boolean {
        return type.flags & ts.TypeFlags.Union ? ts.some((type as ts.UnionType).types, f) : f(type);
    }

    function everyType(type: ts.Type, f: (t: ts.Type) => boolean): boolean {
        return type.flags & ts.TypeFlags.Union ? ts.every((type as ts.UnionType).types, f) : f(type);
    }

    function everyContainedType(type: ts.Type, f: (t: ts.Type) => boolean): boolean {
        return type.flags & ts.TypeFlags.UnionOrIntersection ? ts.every((type as ts.UnionOrIntersectionType).types, f) : f(type);
    }

    function filterType(type: ts.Type, f: (t: ts.Type) => boolean): ts.Type {
        if (type.flags & ts.TypeFlags.Union) {
            const types = (type as ts.UnionType).types;
            const filtered = ts.filter(types, f);
            if (filtered === types) {
                return type;
            }
            const origin = (type as ts.UnionType).origin;
            let newOrigin: ts.Type | undefined;
            if (origin && origin.flags & ts.TypeFlags.Union) {
                // If the origin type is a (denormalized) union type, filter its non-union constituents. If that ends
                // up removing a smaller number of types than in the normalized constituent set (meaning some of the
                // filtered types are within nested unions in the origin), then we can't construct a new origin type.
                // Otherwise, if we have exactly one type left in the origin set, return that as the filtered type.
                // Otherwise, construct a new filtered origin type.
                const originTypes = (origin as ts.UnionType).types;
                const originFiltered = ts.filter(originTypes, t => !!(t.flags & ts.TypeFlags.Union) || f(t));
                if (originTypes.length - originFiltered.length === types.length - filtered.length) {
                    if (originFiltered.length === 1) {
                        return originFiltered[0];
                    }
                    newOrigin = createOriginUnionOrIntersectionType(ts.TypeFlags.Union, originFiltered);
                }
            }
            return getUnionTypeFromSortedList(filtered, (type as ts.UnionType).objectFlags, /*aliasSymbol*/ undefined, /*aliasTypeArguments*/ undefined, newOrigin);
        }
        return type.flags & ts.TypeFlags.Never || f(type) ? type : neverType;
    }

    function removeType(type: ts.Type, targetType: ts.Type) {
        return filterType(type, t => t !== targetType);
    }

    function countTypes(type: ts.Type) {
        return type.flags & ts.TypeFlags.Union ? (type as ts.UnionType).types.length : 1;
    }

    // Apply a mapping function to a type and return the resulting type. If the source type
    // is a union type, the mapping function is applied to each constituent type and a union
    // of the resulting types is returned.
    function mapType(type: ts.Type, mapper: (t: ts.Type) => ts.Type, noReductions?: boolean): ts.Type;
    function mapType(type: ts.Type, mapper: (t: ts.Type) => ts.Type | undefined, noReductions?: boolean): ts.Type | undefined;
    function mapType(type: ts.Type, mapper: (t: ts.Type) => ts.Type | undefined, noReductions?: boolean): ts.Type | undefined {
        if (type.flags & ts.TypeFlags.Never) {
            return type;
        }
        if (!(type.flags & ts.TypeFlags.Union)) {
            return mapper(type);
        }
        const origin = (type as ts.UnionType).origin;
        const types = origin && origin.flags & ts.TypeFlags.Union ? (origin as ts.UnionType).types : (type as ts.UnionType).types;
        let mappedTypes: ts.Type[] | undefined;
        let changed = false;
        for (const t of types) {
            const mapped = t.flags & ts.TypeFlags.Union ? mapType(t, mapper, noReductions) : mapper(t);
            changed ||= t !== mapped;
            if (mapped) {
                if (!mappedTypes) {
                    mappedTypes = [mapped];
                }
                else {
                    mappedTypes.push(mapped);
                }
            }
        }
        return changed ? mappedTypes && getUnionType(mappedTypes, noReductions ? ts.UnionReduction.None : ts.UnionReduction.Literal) : type;
    }

    function mapTypeWithAlias(type: ts.Type, mapper: (t: ts.Type) => ts.Type, aliasSymbol: ts.Symbol | undefined, aliasTypeArguments: readonly ts.Type[] | undefined) {
        return type.flags & ts.TypeFlags.Union && aliasSymbol ?
            getUnionType(ts.map((type as ts.UnionType).types, mapper), ts.UnionReduction.Literal, aliasSymbol, aliasTypeArguments) :
            mapType(type, mapper);
    }

    function extractTypesOfKind(type: ts.Type, kind: ts.TypeFlags) {
        return filterType(type, t => (t.flags & kind) !== 0);
    }

    // Return a new type in which occurrences of the string, number and bigint primitives and placeholder template
    // literal types in typeWithPrimitives have been replaced with occurrences of compatible and more specific types
    // from typeWithLiterals. This is essentially a limited form of intersection between the two types. We avoid a
    // true intersection because it is more costly and, when applied to union types, generates a large number of
    // types we don't actually care about.
    function replacePrimitivesWithLiterals(typeWithPrimitives: ts.Type, typeWithLiterals: ts.Type) {
        if (maybeTypeOfKind(typeWithPrimitives, ts.TypeFlags.String | ts.TypeFlags.TemplateLiteral | ts.TypeFlags.Number | ts.TypeFlags.BigInt) &&
            maybeTypeOfKind(typeWithLiterals, ts.TypeFlags.StringLiteral | ts.TypeFlags.TemplateLiteral | ts.TypeFlags.StringMapping | ts.TypeFlags.NumberLiteral | ts.TypeFlags.BigIntLiteral)) {
            return mapType(typeWithPrimitives, t =>
                t.flags & ts.TypeFlags.String ? extractTypesOfKind(typeWithLiterals, ts.TypeFlags.String | ts.TypeFlags.StringLiteral | ts.TypeFlags.TemplateLiteral | ts.TypeFlags.StringMapping) :
                isPatternLiteralType(t) && !maybeTypeOfKind(typeWithLiterals, ts.TypeFlags.String | ts.TypeFlags.TemplateLiteral | ts.TypeFlags.StringMapping) ? extractTypesOfKind(typeWithLiterals, ts.TypeFlags.StringLiteral) :
                t.flags & ts.TypeFlags.Number ? extractTypesOfKind(typeWithLiterals, ts.TypeFlags.Number | ts.TypeFlags.NumberLiteral) :
                t.flags & ts.TypeFlags.BigInt ? extractTypesOfKind(typeWithLiterals, ts.TypeFlags.BigInt | ts.TypeFlags.BigIntLiteral) : t);
        }
        return typeWithPrimitives;
    }

    function isIncomplete(flowType: ts.FlowType) {
        return flowType.flags === 0;
    }

    function getTypeFromFlowType(flowType: ts.FlowType) {
        return flowType.flags === 0 ? (flowType as ts.IncompleteType).type : flowType as ts.Type;
    }

    function createFlowType(type: ts.Type, incomplete: boolean): ts.FlowType {
        return incomplete ? { flags: 0, type: type.flags & ts.TypeFlags.Never ? silentNeverType : type } : type;
    }

    // An evolving array type tracks the element types that have so far been seen in an
    // 'x.push(value)' or 'x[n] = value' operation along the control flow graph. Evolving
    // array types are ultimately converted into manifest array types (using getFinalArrayType)
    // and never escape the getFlowTypeOfReference function.
    function createEvolvingArrayType(elementType: ts.Type): ts.EvolvingArrayType {
        const result = createObjectType(ts.ObjectFlags.EvolvingArray) as ts.EvolvingArrayType;
        result.elementType = elementType;
        return result;
    }

    function getEvolvingArrayType(elementType: ts.Type): ts.EvolvingArrayType {
        return evolvingArrayTypes[elementType.id] || (evolvingArrayTypes[elementType.id] = createEvolvingArrayType(elementType));
    }

    // When adding evolving array element types we do not perform subtype reduction. Instead,
    // we defer subtype reduction until the evolving array type is finalized into a manifest
    // array type.
    function addEvolvingArrayElementType(evolvingArrayType: ts.EvolvingArrayType, node: ts.Expression): ts.EvolvingArrayType {
        const elementType = getRegularTypeOfObjectLiteral(getBaseTypeOfLiteralType(getContextFreeTypeOfExpression(node)));
        return isTypeSubsetOf(elementType, evolvingArrayType.elementType) ? evolvingArrayType : getEvolvingArrayType(getUnionType([evolvingArrayType.elementType, elementType]));
    }

    function createFinalArrayType(elementType: ts.Type) {
        return elementType.flags & ts.TypeFlags.Never ?
            autoArrayType :
            createArrayType(elementType.flags & ts.TypeFlags.Union ?
                getUnionType((elementType as ts.UnionType).types, ts.UnionReduction.Subtype) :
                elementType);
    }

    // We perform subtype reduction upon obtaining the final array type from an evolving array type.
    function getFinalArrayType(evolvingArrayType: ts.EvolvingArrayType): ts.Type {
        return evolvingArrayType.finalArrayType || (evolvingArrayType.finalArrayType = createFinalArrayType(evolvingArrayType.elementType));
    }

    function finalizeEvolvingArrayType(type: ts.Type): ts.Type {
        return ts.getObjectFlags(type) & ts.ObjectFlags.EvolvingArray ? getFinalArrayType(type as ts.EvolvingArrayType) : type;
    }

    function getElementTypeOfEvolvingArrayType(type: ts.Type) {
        return ts.getObjectFlags(type) & ts.ObjectFlags.EvolvingArray ? (type as ts.EvolvingArrayType).elementType : neverType;
    }

    function isEvolvingArrayTypeList(types: ts.Type[]) {
        let hasEvolvingArrayType = false;
        for (const t of types) {
            if (!(t.flags & ts.TypeFlags.Never)) {
                if (!(ts.getObjectFlags(t) & ts.ObjectFlags.EvolvingArray)) {
                    return false;
                }
                hasEvolvingArrayType = true;
            }
        }
        return hasEvolvingArrayType;
    }

    // Return true if the given node is 'x' in an 'x.length', x.push(value)', 'x.unshift(value)' or
    // 'x[n] = value' operation, where 'n' is an expression of type any, undefined, or a number-like type.
    function isEvolvingArrayOperationTarget(node: ts.Node) {
        const root = getReferenceRoot(node);
        const parent = root.parent;
        const isLengthPushOrUnshift = ts.isPropertyAccessExpression(parent) && (
            parent.name.escapedText === "length" ||
            parent.parent.kind === ts.SyntaxKind.CallExpression
            && ts.isIdentifier(parent.name)
            && ts.isPushOrUnshiftIdentifier(parent.name));
        const isElementAssignment = parent.kind === ts.SyntaxKind.ElementAccessExpression &&
            (parent as ts.ElementAccessExpression).expression === root &&
            parent.parent.kind === ts.SyntaxKind.BinaryExpression &&
            (parent.parent as ts.BinaryExpression).operatorToken.kind === ts.SyntaxKind.EqualsToken &&
            (parent.parent as ts.BinaryExpression).left === parent &&
            !ts.isAssignmentTarget(parent.parent) &&
            isTypeAssignableToKind(getTypeOfExpression((parent as ts.ElementAccessExpression).argumentExpression), ts.TypeFlags.NumberLike);
        return isLengthPushOrUnshift || isElementAssignment;
    }

    function isDeclarationWithExplicitTypeAnnotation(node: ts.Declaration) {
        return (ts.isVariableDeclaration(node) || ts.isPropertyDeclaration(node) || ts.isPropertySignature(node) || ts.isParameter(node)) &&
            !!(ts.getEffectiveTypeAnnotationNode(node) ||
                ts.isInJSFile(node) && ts.hasInitializer(node) && node.initializer && ts.isFunctionExpressionOrArrowFunction(node.initializer) && ts.getEffectiveReturnTypeNode(node.initializer));
    }

    function getExplicitTypeOfSymbol(symbol: ts.Symbol, diagnostic?: ts.Diagnostic) {
        symbol = resolveSymbol(symbol);
        if (symbol.flags & (ts.SymbolFlags.Function | ts.SymbolFlags.Method | ts.SymbolFlags.Class | ts.SymbolFlags.ValueModule)) {
            return getTypeOfSymbol(symbol);
        }
        if (symbol.flags & (ts.SymbolFlags.Variable | ts.SymbolFlags.Property)) {
            if (ts.getCheckFlags(symbol) & ts.CheckFlags.Mapped) {
                const origin = (symbol as ts.MappedSymbol).syntheticOrigin;
                if (origin && getExplicitTypeOfSymbol(origin)) {
                    return getTypeOfSymbol(symbol);
                }
            }
            const declaration = symbol.valueDeclaration;
            if (declaration) {
                if (isDeclarationWithExplicitTypeAnnotation(declaration)) {
                    return getTypeOfSymbol(symbol);
                }
                if (ts.isVariableDeclaration(declaration) && declaration.parent.parent.kind === ts.SyntaxKind.ForOfStatement) {
                    const statement = declaration.parent.parent;
                    const expressionType = getTypeOfDottedName(statement.expression, /*diagnostic*/ undefined);
                    if (expressionType) {
                        const use = statement.awaitModifier ? IterationUse.ForAwaitOf : IterationUse.ForOf;
                        return checkIteratedTypeOrElementType(use, expressionType, undefinedType, /*errorNode*/ undefined);
                    }
                }
                if (diagnostic) {
                    ts.addRelatedInfo(diagnostic, ts.createDiagnosticForNode(declaration, ts.Diagnostics._0_needs_an_explicit_type_annotation, symbolToString(symbol)));
                }
            }
        }
    }

    // We require the dotted function name in an assertion expression to be comprised of identifiers
    // that reference function, method, class or value module symbols; or variable, property or
    // parameter symbols with declarations that have explicit type annotations. Such references are
    // resolvable with no possibility of triggering circularities in control flow analysis.
    function getTypeOfDottedName(node: ts.Expression, diagnostic: ts.Diagnostic | undefined): ts.Type | undefined {
        if (!(node.flags & ts.NodeFlags.InWithStatement)) {
            switch (node.kind) {
                case ts.SyntaxKind.Identifier:
                    const symbol = getExportSymbolOfValueSymbolIfExported(getResolvedSymbol(node as ts.Identifier));
                    return getExplicitTypeOfSymbol(symbol, diagnostic);
                case ts.SyntaxKind.ThisKeyword:
                    return getExplicitThisType(node);
                case ts.SyntaxKind.SuperKeyword:
                    return checkSuperExpression(node);
                case ts.SyntaxKind.PropertyAccessExpression: {
                    const type = getTypeOfDottedName((node as ts.PropertyAccessExpression).expression, diagnostic);
                    if (type) {
                        const name = (node as ts.PropertyAccessExpression).name;
                        let prop: ts.Symbol | undefined;
                        if (ts.isPrivateIdentifier(name)) {
                            if (!type.symbol) {
                                return undefined;
                            }
                            prop = getPropertyOfType(type, ts.getSymbolNameForPrivateIdentifier(type.symbol, name.escapedText));
                        }
                        else {
                            prop = getPropertyOfType(type, name.escapedText);
                        }
                        return prop && getExplicitTypeOfSymbol(prop, diagnostic);
                    }
                    return undefined;
                }
                case ts.SyntaxKind.ParenthesizedExpression:
                    return getTypeOfDottedName((node as ts.ParenthesizedExpression).expression, diagnostic);
            }
        }
    }

    function getEffectsSignature(node: ts.CallExpression) {
        const links = getNodeLinks(node);
        let signature = links.effectsSignature;
        if (signature === undefined) {
            // A call expression parented by an expression statement is a potential assertion. Other call
            // expressions are potential type predicate function calls. In order to avoid triggering
            // circularities in control flow analysis, we use getTypeOfDottedName when resolving the call
            // target expression of an assertion.
            let funcType: ts.Type | undefined;
            if (node.parent.kind === ts.SyntaxKind.ExpressionStatement) {
                funcType = getTypeOfDottedName(node.expression, /*diagnostic*/ undefined);
            }
            else if (node.expression.kind !== ts.SyntaxKind.SuperKeyword) {
                if (ts.isOptionalChain(node)) {
                    funcType = checkNonNullType(
                        getOptionalExpressionType(checkExpression(node.expression), node.expression),
                        node.expression
                    );
                }
                else {
                    funcType = checkNonNullExpression(node.expression);
                }
            }
            const signatures = getSignaturesOfType(funcType && getApparentType(funcType) || unknownType, ts.SignatureKind.Call);
            const candidate = signatures.length === 1 && !signatures[0].typeParameters ? signatures[0] :
                ts.some(signatures, hasTypePredicateOrNeverReturnType) ? getResolvedSignature(node) :
                undefined;
            signature = links.effectsSignature = candidate && hasTypePredicateOrNeverReturnType(candidate) ? candidate : unknownSignature;
        }
        return signature === unknownSignature ? undefined : signature;
    }

    function hasTypePredicateOrNeverReturnType(signature: ts.Signature) {
        return !!(getTypePredicateOfSignature(signature) ||
            signature.declaration && (getReturnTypeFromAnnotation(signature.declaration) || unknownType).flags & ts.TypeFlags.Never);
    }

    function getTypePredicateArgument(predicate: ts.TypePredicate, callExpression: ts.CallExpression) {
        if (predicate.kind === ts.TypePredicateKind.Identifier || predicate.kind === ts.TypePredicateKind.AssertsIdentifier) {
            return callExpression.arguments[predicate.parameterIndex];
        }
        const invokedExpression = ts.skipParentheses(callExpression.expression);
        return ts.isAccessExpression(invokedExpression) ? ts.skipParentheses(invokedExpression.expression) : undefined;
    }

    function reportFlowControlError(node: ts.Node) {
        const block = ts.findAncestor(node, ts.isFunctionOrModuleBlock) as ts.Block | ts.ModuleBlock | ts.SourceFile;
        const sourceFile = ts.getSourceFileOfNode(node);
        const span = ts.getSpanOfTokenAtPosition(sourceFile, block.statements.pos);
        diagnostics.add(ts.createFileDiagnostic(sourceFile, span.start, span.length, ts.Diagnostics.The_containing_function_or_module_body_is_too_large_for_control_flow_analysis));
    }

    function isReachableFlowNode(flow: ts.FlowNode) {
        const result = isReachableFlowNodeWorker(flow, /*noCacheCheck*/ false);
        lastFlowNode = flow;
        lastFlowNodeReachable = result;
        return result;
    }

    function isFalseExpression(expr: ts.Expression): boolean {
        const node = ts.skipParentheses(expr, /*excludeJSDocTypeAssertions*/ true);
        return node.kind === ts.SyntaxKind.FalseKeyword || node.kind === ts.SyntaxKind.BinaryExpression && (
            (node as ts.BinaryExpression).operatorToken.kind === ts.SyntaxKind.AmpersandAmpersandToken && (isFalseExpression((node as ts.BinaryExpression).left) || isFalseExpression((node as ts.BinaryExpression).right)) ||
            (node as ts.BinaryExpression).operatorToken.kind === ts.SyntaxKind.BarBarToken && isFalseExpression((node as ts.BinaryExpression).left) && isFalseExpression((node as ts.BinaryExpression).right));
    }

    function isReachableFlowNodeWorker(flow: ts.FlowNode, noCacheCheck: boolean): boolean {
        while (true) {
            if (flow === lastFlowNode) {
                return lastFlowNodeReachable;
            }
            const flags = flow.flags;
            if (flags & ts.FlowFlags.Shared) {
                if (!noCacheCheck) {
                    const id = getFlowNodeId(flow);
                    const reachable = flowNodeReachable[id];
                    return reachable !== undefined ? reachable : (flowNodeReachable[id] = isReachableFlowNodeWorker(flow, /*noCacheCheck*/ true));
                }
                noCacheCheck = false;
            }
            if (flags & (ts.FlowFlags.Assignment | ts.FlowFlags.Condition | ts.FlowFlags.ArrayMutation)) {
                flow = (flow as ts.FlowAssignment | ts.FlowCondition | ts.FlowArrayMutation).antecedent;
            }
            else if (flags & ts.FlowFlags.Call) {
                const signature = getEffectsSignature((flow as ts.FlowCall).node);
                if (signature) {
                    const predicate = getTypePredicateOfSignature(signature);
                    if (predicate && predicate.kind === ts.TypePredicateKind.AssertsIdentifier && !predicate.type) {
                        const predicateArgument = (flow as ts.FlowCall).node.arguments[predicate.parameterIndex];
                        if (predicateArgument && isFalseExpression(predicateArgument)) {
                            return false;
                        }
                    }
                    if (getReturnTypeOfSignature(signature).flags & ts.TypeFlags.Never) {
                        return false;
                    }
                }
                flow = (flow as ts.FlowCall).antecedent;
            }
            else if (flags & ts.FlowFlags.BranchLabel) {
                // A branching point is reachable if any branch is reachable.
                return ts.some((flow as ts.FlowLabel).antecedents, f => isReachableFlowNodeWorker(f, /*noCacheCheck*/ false));
            }
            else if (flags & ts.FlowFlags.LoopLabel) {
                const antecedents = (flow as ts.FlowLabel).antecedents;
                if (antecedents === undefined || antecedents.length === 0) {
                    return false;
                }
                // A loop is reachable if the control flow path that leads to the top is reachable.
                flow = antecedents[0];
            }
            else if (flags & ts.FlowFlags.SwitchClause) {
                // The control flow path representing an unmatched value in a switch statement with
                // no default clause is unreachable if the switch statement is exhaustive.
                if ((flow as ts.FlowSwitchClause).clauseStart === (flow as ts.FlowSwitchClause).clauseEnd && isExhaustiveSwitchStatement((flow as ts.FlowSwitchClause).switchStatement)) {
                    return false;
                }
                flow = (flow as ts.FlowSwitchClause).antecedent;
            }
            else if (flags & ts.FlowFlags.ReduceLabel) {
                // Cache is unreliable once we start adjusting labels
                lastFlowNode = undefined;
                const target = (flow as ts.FlowReduceLabel).target;
                const saveAntecedents = target.antecedents;
                target.antecedents = (flow as ts.FlowReduceLabel).antecedents;
                const result = isReachableFlowNodeWorker((flow as ts.FlowReduceLabel).antecedent, /*noCacheCheck*/ false);
                target.antecedents = saveAntecedents;
                return result;
            }
            else {
                return !(flags & ts.FlowFlags.Unreachable);
            }
        }
    }

    // Return true if the given flow node is preceded by a 'super(...)' call in every possible code path
    // leading to the node.
    function isPostSuperFlowNode(flow: ts.FlowNode, noCacheCheck: boolean): boolean {
        while (true) {
            const flags = flow.flags;
            if (flags & ts.FlowFlags.Shared) {
                if (!noCacheCheck) {
                    const id = getFlowNodeId(flow);
                    const postSuper = flowNodePostSuper[id];
                    return postSuper !== undefined ? postSuper : (flowNodePostSuper[id] = isPostSuperFlowNode(flow, /*noCacheCheck*/ true));
                }
                noCacheCheck = false;
            }
            if (flags & (ts.FlowFlags.Assignment | ts.FlowFlags.Condition | ts.FlowFlags.ArrayMutation | ts.FlowFlags.SwitchClause)) {
                flow = (flow as ts.FlowAssignment | ts.FlowCondition | ts.FlowArrayMutation | ts.FlowSwitchClause).antecedent;
            }
            else if (flags & ts.FlowFlags.Call) {
                if ((flow as ts.FlowCall).node.expression.kind === ts.SyntaxKind.SuperKeyword) {
                    return true;
                }
                flow = (flow as ts.FlowCall).antecedent;
            }
            else if (flags & ts.FlowFlags.BranchLabel) {
                // A branching point is post-super if every branch is post-super.
                return ts.every((flow as ts.FlowLabel).antecedents, f => isPostSuperFlowNode(f, /*noCacheCheck*/ false));
            }
            else if (flags & ts.FlowFlags.LoopLabel) {
                // A loop is post-super if the control flow path that leads to the top is post-super.
                flow = (flow as ts.FlowLabel).antecedents![0];
            }
            else if (flags & ts.FlowFlags.ReduceLabel) {
                const target = (flow as ts.FlowReduceLabel).target;
                const saveAntecedents = target.antecedents;
                target.antecedents = (flow as ts.FlowReduceLabel).antecedents;
                const result = isPostSuperFlowNode((flow as ts.FlowReduceLabel).antecedent, /*noCacheCheck*/ false);
                target.antecedents = saveAntecedents;
                return result;
            }
            else {
                // Unreachable nodes are considered post-super to silence errors
                return !!(flags & ts.FlowFlags.Unreachable);
            }
        }
    }

    function isConstantReference(node: ts.Node): boolean {
        switch (node.kind) {
            case ts.SyntaxKind.Identifier: {
                const symbol = getResolvedSymbol(node as ts.Identifier);
                return isConstVariable(symbol) || ts.isParameterOrCatchClauseVariable(symbol) && !isSymbolAssigned(symbol);
            }
            case ts.SyntaxKind.PropertyAccessExpression:
            case ts.SyntaxKind.ElementAccessExpression:
                // The resolvedSymbol property is initialized by checkPropertyAccess or checkElementAccess before we get here.
                return isConstantReference((node as ts.AccessExpression).expression) && isReadonlySymbol(getNodeLinks(node).resolvedSymbol || unknownSymbol);
        }
        return false;
    }

    function getFlowTypeOfReference(reference: ts.Node, declaredType: ts.Type, initialType = declaredType, flowContainer?: ts.Node, flowNode = reference.flowNode) {
        let key: string | undefined;
        let isKeySet = false;
        let flowDepth = 0;
        if (flowAnalysisDisabled) {
            return errorType;
        }
        if (!flowNode) {
            return declaredType;
        }
        flowInvocationCount++;
        const sharedFlowStart = sharedFlowCount;
        const evolvedType = getTypeFromFlowType(getTypeAtFlowNode(flowNode));
        sharedFlowCount = sharedFlowStart;
        // When the reference is 'x' in an 'x.length', 'x.push(value)', 'x.unshift(value)' or x[n] = value' operation,
        // we give type 'any[]' to 'x' instead of using the type determined by control flow analysis such that operations
        // on empty arrays are possible without implicit any errors and new element types can be inferred without
        // type mismatch errors.
        const resultType = ts.getObjectFlags(evolvedType) & ts.ObjectFlags.EvolvingArray && isEvolvingArrayOperationTarget(reference) ? autoArrayType : finalizeEvolvingArrayType(evolvedType);
        if (resultType === unreachableNeverType || reference.parent && reference.parent.kind === ts.SyntaxKind.NonNullExpression && !(resultType.flags & ts.TypeFlags.Never) && getTypeWithFacts(resultType, TypeFacts.NEUndefinedOrNull).flags & ts.TypeFlags.Never) {
            return declaredType;
        }
        // The non-null unknown type should never escape control flow analysis.
        return resultType === nonNullUnknownType ? unknownType : resultType;

        function getOrSetCacheKey() {
            if (isKeySet) {
                return key;
            }
            isKeySet = true;
            return key = getFlowCacheKey(reference, declaredType, initialType, flowContainer);
        }

        function getTypeAtFlowNode(flow: ts.FlowNode): ts.FlowType {
            if (flowDepth === 2000) {
                // We have made 2000 recursive invocations. To avoid overflowing the call stack we report an error
                // and disable further control flow analysis in the containing function or module body.
                ts.tracing?.instant(ts.tracing.Phase.CheckTypes, "getTypeAtFlowNode_DepthLimit", { flowId: flow.id });
                flowAnalysisDisabled = true;
                reportFlowControlError(reference);
                return errorType;
            }
            flowDepth++;
            let sharedFlow: ts.FlowNode | undefined;
            while (true) {
                const flags = flow.flags;
                if (flags & ts.FlowFlags.Shared) {
                    // We cache results of flow type resolution for shared nodes that were previously visited in
                    // the same getFlowTypeOfReference invocation. A node is considered shared when it is the
                    // antecedent of more than one node.
                    for (let i = sharedFlowStart; i < sharedFlowCount; i++) {
                        if (sharedFlowNodes[i] === flow) {
                            flowDepth--;
                            return sharedFlowTypes[i];
                        }
                    }
                    sharedFlow = flow;
                }
                let type: ts.FlowType | undefined;
                if (flags & ts.FlowFlags.Assignment) {
                    type = getTypeAtFlowAssignment(flow as ts.FlowAssignment);
                    if (!type) {
                        flow = (flow as ts.FlowAssignment).antecedent;
                        continue;
                    }
                }
                else if (flags & ts.FlowFlags.Call) {
                    type = getTypeAtFlowCall(flow as ts.FlowCall);
                    if (!type) {
                        flow = (flow as ts.FlowCall).antecedent;
                        continue;
                    }
                }
                else if (flags & ts.FlowFlags.Condition) {
                    type = getTypeAtFlowCondition(flow as ts.FlowCondition);
                }
                else if (flags & ts.FlowFlags.SwitchClause) {
                    type = getTypeAtSwitchClause(flow as ts.FlowSwitchClause);
                }
                else if (flags & ts.FlowFlags.Label) {
                    if ((flow as ts.FlowLabel).antecedents!.length === 1) {
                        flow = (flow as ts.FlowLabel).antecedents![0];
                        continue;
                    }
                    type = flags & ts.FlowFlags.BranchLabel ?
                        getTypeAtFlowBranchLabel(flow as ts.FlowLabel) :
                        getTypeAtFlowLoopLabel(flow as ts.FlowLabel);
                }
                else if (flags & ts.FlowFlags.ArrayMutation) {
                    type = getTypeAtFlowArrayMutation(flow as ts.FlowArrayMutation);
                    if (!type) {
                        flow = (flow as ts.FlowArrayMutation).antecedent;
                        continue;
                    }
                }
                else if (flags & ts.FlowFlags.ReduceLabel) {
                    const target = (flow as ts.FlowReduceLabel).target;
                    const saveAntecedents = target.antecedents;
                    target.antecedents = (flow as ts.FlowReduceLabel).antecedents;
                    type = getTypeAtFlowNode((flow as ts.FlowReduceLabel).antecedent);
                    target.antecedents = saveAntecedents;
                }
                else if (flags & ts.FlowFlags.Start) {
                    // Check if we should continue with the control flow of the containing function.
                    const container = (flow as ts.FlowStart).node;
                    if (container && container !== flowContainer &&
                        reference.kind !== ts.SyntaxKind.PropertyAccessExpression &&
                        reference.kind !== ts.SyntaxKind.ElementAccessExpression &&
                        reference.kind !== ts.SyntaxKind.ThisKeyword) {
                        flow = container.flowNode!;
                        continue;
                    }
                    // At the top of the flow we have the initial type.
                    type = initialType;
                }
                else {
                    // Unreachable code errors are reported in the binding phase. Here we
                    // simply return the non-auto declared type to reduce follow-on errors.
                    type = convertAutoToAny(declaredType);
                }
                if (sharedFlow) {
                    // Record visited node and the associated type in the cache.
                    sharedFlowNodes[sharedFlowCount] = sharedFlow;
                    sharedFlowTypes[sharedFlowCount] = type;
                    sharedFlowCount++;
                }
                flowDepth--;
                return type;
            }
        }

        function getInitialOrAssignedType(flow: ts.FlowAssignment) {
            const node = flow.node;
            return getNarrowableTypeForReference(node.kind === ts.SyntaxKind.VariableDeclaration || node.kind === ts.SyntaxKind.BindingElement ?
                getInitialType(node as ts.VariableDeclaration | ts.BindingElement) :
                getAssignedType(node), reference);
        }

        function getTypeAtFlowAssignment(flow: ts.FlowAssignment) {
            const node = flow.node;
            // Assignments only narrow the computed type if the declared type is a union type. Thus, we
            // only need to evaluate the assigned type if the declared type is a union type.
            if (isMatchingReference(reference, node)) {
                if (!isReachableFlowNode(flow)) {
                    return unreachableNeverType;
                }
                if (ts.getAssignmentTargetKind(node) === ts.AssignmentKind.Compound) {
                    const flowType = getTypeAtFlowNode(flow.antecedent);
                    return createFlowType(getBaseTypeOfLiteralType(getTypeFromFlowType(flowType)), isIncomplete(flowType));
                }
                if (declaredType === autoType || declaredType === autoArrayType) {
                    if (isEmptyArrayAssignment(node)) {
                        return getEvolvingArrayType(neverType);
                    }
                    const assignedType = getWidenedLiteralType(getInitialOrAssignedType(flow));
                    return isTypeAssignableTo(assignedType, declaredType) ? assignedType : anyArrayType;
                }
                if (declaredType.flags & ts.TypeFlags.Union) {
                    return getAssignmentReducedType(declaredType as ts.UnionType, getInitialOrAssignedType(flow));
                }
                return declaredType;
            }
            // We didn't have a direct match. However, if the reference is a dotted name, this
            // may be an assignment to a left hand part of the reference. For example, for a
            // reference 'x.y.z', we may be at an assignment to 'x.y' or 'x'. In that case,
            // return the declared type.
            if (containsMatchingReference(reference, node)) {
                if (!isReachableFlowNode(flow)) {
                    return unreachableNeverType;
                }
                // A matching dotted name might also be an expando property on a function *expression*,
                // in which case we continue control flow analysis back to the function's declaration
                if (ts.isVariableDeclaration(node) && (ts.isInJSFile(node) || ts.isVarConst(node))) {
                    const init = ts.getDeclaredExpandoInitializer(node);
                    if (init && (init.kind === ts.SyntaxKind.FunctionExpression || init.kind === ts.SyntaxKind.ArrowFunction)) {
                        return getTypeAtFlowNode(flow.antecedent);
                    }
                }
                return declaredType;
            }
            // for (const _ in ref) acts as a nonnull on ref
            if (ts.isVariableDeclaration(node) && node.parent.parent.kind === ts.SyntaxKind.ForInStatement && isMatchingReference(reference, node.parent.parent.expression)) {
                return getNonNullableTypeIfNeeded(finalizeEvolvingArrayType(getTypeFromFlowType(getTypeAtFlowNode(flow.antecedent))));
            }
            // Assignment doesn't affect reference
            return undefined;
        }

        function narrowTypeByAssertion(type: ts.Type, expr: ts.Expression): ts.Type {
            const node = ts.skipParentheses(expr, /*excludeJSDocTypeAssertions*/ true);
            if (node.kind === ts.SyntaxKind.FalseKeyword) {
                return unreachableNeverType;
            }
            if (node.kind === ts.SyntaxKind.BinaryExpression) {
                if ((node as ts.BinaryExpression).operatorToken.kind === ts.SyntaxKind.AmpersandAmpersandToken) {
                    return narrowTypeByAssertion(narrowTypeByAssertion(type, (node as ts.BinaryExpression).left), (node as ts.BinaryExpression).right);
                }
                if ((node as ts.BinaryExpression).operatorToken.kind === ts.SyntaxKind.BarBarToken) {
                    return getUnionType([narrowTypeByAssertion(type, (node as ts.BinaryExpression).left), narrowTypeByAssertion(type, (node as ts.BinaryExpression).right)]);
                }
            }
            return narrowType(type, node, /*assumeTrue*/ true);
        }

        function getTypeAtFlowCall(flow: ts.FlowCall): ts.FlowType | undefined {
            const signature = getEffectsSignature(flow.node);
            if (signature) {
                const predicate = getTypePredicateOfSignature(signature);
                if (predicate && (predicate.kind === ts.TypePredicateKind.AssertsThis || predicate.kind === ts.TypePredicateKind.AssertsIdentifier)) {
                    const flowType = getTypeAtFlowNode(flow.antecedent);
                    const type = finalizeEvolvingArrayType(getTypeFromFlowType(flowType));
                    const narrowedType = predicate.type ? narrowTypeByTypePredicate(type, predicate, flow.node, /*assumeTrue*/ true) :
                        predicate.kind === ts.TypePredicateKind.AssertsIdentifier && predicate.parameterIndex >= 0 && predicate.parameterIndex < flow.node.arguments.length ? narrowTypeByAssertion(type, flow.node.arguments[predicate.parameterIndex]) :
                        type;
                    return narrowedType === type ? flowType : createFlowType(narrowedType, isIncomplete(flowType));
                }
                if (getReturnTypeOfSignature(signature).flags & ts.TypeFlags.Never) {
                    return unreachableNeverType;
                }
            }
            return undefined;
        }

        function getTypeAtFlowArrayMutation(flow: ts.FlowArrayMutation): ts.FlowType | undefined {
            if (declaredType === autoType || declaredType === autoArrayType) {
                const node = flow.node;
                const expr = node.kind === ts.SyntaxKind.CallExpression ?
                    (node.expression as ts.PropertyAccessExpression).expression :
                    (node.left as ts.ElementAccessExpression).expression;
                if (isMatchingReference(reference, getReferenceCandidate(expr))) {
                    const flowType = getTypeAtFlowNode(flow.antecedent);
                    const type = getTypeFromFlowType(flowType);
                    if (ts.getObjectFlags(type) & ts.ObjectFlags.EvolvingArray) {
                        let evolvedType = type as ts.EvolvingArrayType;
                        if (node.kind === ts.SyntaxKind.CallExpression) {
                            for (const arg of node.arguments) {
                                evolvedType = addEvolvingArrayElementType(evolvedType, arg);
                            }
                        }
                        else {
                            // We must get the context free expression type so as to not recur in an uncached fashion on the LHS (which causes exponential blowup in compile time)
                            const indexType = getContextFreeTypeOfExpression((node.left as ts.ElementAccessExpression).argumentExpression);
                            if (isTypeAssignableToKind(indexType, ts.TypeFlags.NumberLike)) {
                                evolvedType = addEvolvingArrayElementType(evolvedType, node.right);
                            }
                        }
                        return evolvedType === type ? flowType : createFlowType(evolvedType, isIncomplete(flowType));
                    }
                    return flowType;
                }
            }
            return undefined;
        }

        function getTypeAtFlowCondition(flow: ts.FlowCondition): ts.FlowType {
            const flowType = getTypeAtFlowNode(flow.antecedent);
            const type = getTypeFromFlowType(flowType);
            if (type.flags & ts.TypeFlags.Never) {
                return flowType;
            }
            // If we have an antecedent type (meaning we're reachable in some way), we first
            // attempt to narrow the antecedent type. If that produces the never type, and if
            // the antecedent type is incomplete (i.e. a transient type in a loop), then we
            // take the type guard as an indication that control *could* reach here once we
            // have the complete type. We proceed by switching to the silent never type which
            // doesn't report errors when operators are applied to it. Note that this is the
            // *only* place a silent never type is ever generated.
            const assumeTrue = (flow.flags & ts.FlowFlags.TrueCondition) !== 0;
            const nonEvolvingType = finalizeEvolvingArrayType(type);
            const narrowedType = narrowType(nonEvolvingType, flow.node, assumeTrue);
            if (narrowedType === nonEvolvingType) {
                return flowType;
            }
            return createFlowType(narrowedType, isIncomplete(flowType));
        }

        function getTypeAtSwitchClause(flow: ts.FlowSwitchClause): ts.FlowType {
            const expr = flow.switchStatement.expression;
            const flowType = getTypeAtFlowNode(flow.antecedent);
            let type = getTypeFromFlowType(flowType);
            if (isMatchingReference(reference, expr)) {
                type = narrowTypeBySwitchOnDiscriminant(type, flow.switchStatement, flow.clauseStart, flow.clauseEnd);
            }
            else if (expr.kind === ts.SyntaxKind.TypeOfExpression && isMatchingReference(reference, (expr as ts.TypeOfExpression).expression)) {
                type = narrowTypeBySwitchOnTypeOf(type, flow.switchStatement, flow.clauseStart, flow.clauseEnd);
            }
            else {
                if (strictNullChecks) {
                    if (optionalChainContainsReference(expr, reference)) {
                        type = narrowTypeBySwitchOptionalChainContainment(type, flow.switchStatement, flow.clauseStart, flow.clauseEnd,
                            t => !(t.flags & (ts.TypeFlags.Undefined | ts.TypeFlags.Never)));
                    }
                    else if (expr.kind === ts.SyntaxKind.TypeOfExpression && optionalChainContainsReference((expr as ts.TypeOfExpression).expression, reference)) {
                        type = narrowTypeBySwitchOptionalChainContainment(type, flow.switchStatement, flow.clauseStart, flow.clauseEnd,
                            t => !(t.flags & ts.TypeFlags.Never || t.flags & ts.TypeFlags.StringLiteral && (t as ts.StringLiteralType).value === "undefined"));
                    }
                }
                const access = getDiscriminantPropertyAccess(expr, type);
                if (access) {
                    type = narrowTypeBySwitchOnDiscriminantProperty(type, access, flow.switchStatement, flow.clauseStart, flow.clauseEnd);
                }
            }
            return createFlowType(type, isIncomplete(flowType));
        }

        function getTypeAtFlowBranchLabel(flow: ts.FlowLabel): ts.FlowType {
            const antecedentTypes: ts.Type[] = [];
            let subtypeReduction = false;
            let seenIncomplete = false;
            let bypassFlow: ts.FlowSwitchClause | undefined;
            for (const antecedent of flow.antecedents!) {
                if (!bypassFlow && antecedent.flags & ts.FlowFlags.SwitchClause && (antecedent as ts.FlowSwitchClause).clauseStart === (antecedent as ts.FlowSwitchClause).clauseEnd) {
                    // The antecedent is the bypass branch of a potentially exhaustive switch statement.
                    bypassFlow = antecedent as ts.FlowSwitchClause;
                    continue;
                }
                const flowType = getTypeAtFlowNode(antecedent);
                const type = getTypeFromFlowType(flowType);
                // If the type at a particular antecedent path is the declared type and the
                // reference is known to always be assigned (i.e. when declared and initial types
                // are the same), there is no reason to process more antecedents since the only
                // possible outcome is subtypes that will be removed in the final union type anyway.
                if (type === declaredType && declaredType === initialType) {
                    return type;
                }
                ts.pushIfUnique(antecedentTypes, type);
                // If an antecedent type is not a subset of the declared type, we need to perform
                // subtype reduction. This happens when a "foreign" type is injected into the control
                // flow using the instanceof operator or a user defined type predicate.
                if (!isTypeSubsetOf(type, declaredType)) {
                    subtypeReduction = true;
                }
                if (isIncomplete(flowType)) {
                    seenIncomplete = true;
                }
            }
            if (bypassFlow) {
                const flowType = getTypeAtFlowNode(bypassFlow);
                const type = getTypeFromFlowType(flowType);
                // If the bypass flow contributes a type we haven't seen yet and the switch statement
                // isn't exhaustive, process the bypass flow type. Since exhaustiveness checks increase
                // the risk of circularities, we only want to perform them when they make a difference.
                if (!ts.contains(antecedentTypes, type) && !isExhaustiveSwitchStatement(bypassFlow.switchStatement)) {
                    if (type === declaredType && declaredType === initialType) {
                        return type;
                    }
                    antecedentTypes.push(type);
                    if (!isTypeSubsetOf(type, declaredType)) {
                        subtypeReduction = true;
                    }
                    if (isIncomplete(flowType)) {
                        seenIncomplete = true;
                    }
                }
            }
            return createFlowType(getUnionOrEvolvingArrayType(antecedentTypes, subtypeReduction ? ts.UnionReduction.Subtype : ts.UnionReduction.Literal), seenIncomplete);
        }

        function getTypeAtFlowLoopLabel(flow: ts.FlowLabel): ts.FlowType {
            // If we have previously computed the control flow type for the reference at
            // this flow loop junction, return the cached type.
            const id = getFlowNodeId(flow);
            const cache = flowLoopCaches[id] || (flowLoopCaches[id] = new ts.Map<string, ts.Type>());
            const key = getOrSetCacheKey();
            if (!key) {
                // No cache key is generated when binding patterns are in unnarrowable situations
                return declaredType;
            }
            const cached = cache.get(key);
            if (cached) {
                return cached;
            }
            // If this flow loop junction and reference are already being processed, return
            // the union of the types computed for each branch so far, marked as incomplete.
            // It is possible to see an empty array in cases where loops are nested and the
            // back edge of the outer loop reaches an inner loop that is already being analyzed.
            // In such cases we restart the analysis of the inner loop, which will then see
            // a non-empty in-process array for the outer loop and eventually terminate because
            // the first antecedent of a loop junction is always the non-looping control flow
            // path that leads to the top.
            for (let i = flowLoopStart; i < flowLoopCount; i++) {
                if (flowLoopNodes[i] === flow && flowLoopKeys[i] === key && flowLoopTypes[i].length) {
                    return createFlowType(getUnionOrEvolvingArrayType(flowLoopTypes[i], ts.UnionReduction.Literal), /*incomplete*/ true);
                }
            }
            // Add the flow loop junction and reference to the in-process stack and analyze
            // each antecedent code path.
            const antecedentTypes: ts.Type[] = [];
            let subtypeReduction = false;
            let firstAntecedentType: ts.FlowType | undefined;
            for (const antecedent of flow.antecedents!) {
                let flowType;
                if (!firstAntecedentType) {
                    // The first antecedent of a loop junction is always the non-looping control
                    // flow path that leads to the top.
                    flowType = firstAntecedentType = getTypeAtFlowNode(antecedent);
                }
                else {
                    // All but the first antecedent are the looping control flow paths that lead
                    // back to the loop junction. We track these on the flow loop stack.
                    flowLoopNodes[flowLoopCount] = flow;
                    flowLoopKeys[flowLoopCount] = key;
                    flowLoopTypes[flowLoopCount] = antecedentTypes;
                    flowLoopCount++;
                    const saveFlowTypeCache = flowTypeCache;
                    flowTypeCache = undefined;
                    flowType = getTypeAtFlowNode(antecedent);
                    flowTypeCache = saveFlowTypeCache;
                    flowLoopCount--;
                    // If we see a value appear in the cache it is a sign that control flow analysis
                    // was restarted and completed by checkExpressionCached. We can simply pick up
                    // the resulting type and bail out.
                    const cached = cache.get(key);
                    if (cached) {
                        return cached;
                    }
                }
                const type = getTypeFromFlowType(flowType);
                ts.pushIfUnique(antecedentTypes, type);
                // If an antecedent type is not a subset of the declared type, we need to perform
                // subtype reduction. This happens when a "foreign" type is injected into the control
                // flow using the instanceof operator or a user defined type predicate.
                if (!isTypeSubsetOf(type, declaredType)) {
                    subtypeReduction = true;
                }
                // If the type at a particular antecedent path is the declared type there is no
                // reason to process more antecedents since the only possible outcome is subtypes
                // that will be removed in the final union type anyway.
                if (type === declaredType) {
                    break;
                }
            }
            // The result is incomplete if the first antecedent (the non-looping control flow path)
            // is incomplete.
            const result = getUnionOrEvolvingArrayType(antecedentTypes, subtypeReduction ? ts.UnionReduction.Subtype : ts.UnionReduction.Literal);
            if (isIncomplete(firstAntecedentType!)) {
                return createFlowType(result, /*incomplete*/ true);
            }
            cache.set(key, result);
            return result;
        }

        // At flow control branch or loop junctions, if the type along every antecedent code path
        // is an evolving array type, we construct a combined evolving array type. Otherwise we
        // finalize all evolving array types.
        function getUnionOrEvolvingArrayType(types: ts.Type[], subtypeReduction: ts.UnionReduction) {
            if (isEvolvingArrayTypeList(types)) {
                return getEvolvingArrayType(getUnionType(ts.map(types, getElementTypeOfEvolvingArrayType)));
            }
            const result = recombineUnknownType(getUnionType(ts.sameMap(types, finalizeEvolvingArrayType), subtypeReduction));
            if (result !== declaredType && result.flags & declaredType.flags & ts.TypeFlags.Union && ts.arraysEqual((result as ts.UnionType).types, (declaredType as ts.UnionType).types)) {
                return declaredType;
            }
            return result;
        }

        function getCandidateDiscriminantPropertyAccess(expr: ts.Expression) {
            if (ts.isBindingPattern(reference) || ts.isFunctionExpressionOrArrowFunction(reference) || ts.isObjectLiteralMethod(reference)) {
                // When the reference is a binding pattern or function or arrow expression, we are narrowing a pesudo-reference in
                // getNarrowedTypeOfSymbol. An identifier for a destructuring variable declared in the same binding pattern or
                // parameter declared in the same parameter list is a candidate.
                if (ts.isIdentifier(expr)) {
                    const symbol = getResolvedSymbol(expr);
                    const declaration = symbol.valueDeclaration;
                    if (declaration && (ts.isBindingElement(declaration) || ts.isParameter(declaration)) && reference === declaration.parent && !declaration.initializer && !declaration.dotDotDotToken) {
                        return declaration;
                    }
                }
            }
            else if (ts.isAccessExpression(expr)) {
                // An access expression is a candidate if the reference matches the left hand expression.
                if (isMatchingReference(reference, expr.expression)) {
                    return expr;
                }
            }
            else if (ts.isIdentifier(expr)) {
                const symbol = getResolvedSymbol(expr);
                if (isConstVariable(symbol)) {
                    const declaration = symbol.valueDeclaration!;
                    // Given 'const x = obj.kind', allow 'x' as an alias for 'obj.kind'
                    if (ts.isVariableDeclaration(declaration) && !declaration.type && declaration.initializer && ts.isAccessExpression(declaration.initializer) &&
                        isMatchingReference(reference, declaration.initializer.expression)) {
                        return declaration.initializer;
                    }
                    // Given 'const { kind: x } = obj', allow 'x' as an alias for 'obj.kind'
                    if (ts.isBindingElement(declaration) && !declaration.initializer) {
                        const parent = declaration.parent.parent;
                        if (ts.isVariableDeclaration(parent) && !parent.type && parent.initializer && (ts.isIdentifier(parent.initializer) || ts.isAccessExpression(parent.initializer)) &&
                            isMatchingReference(reference, parent.initializer)) {
                            return declaration;
                        }
                    }
                }
            }
            return undefined;
        }

        function getDiscriminantPropertyAccess(expr: ts.Expression, computedType: ts.Type) {
            const type = declaredType.flags & ts.TypeFlags.Union ? declaredType : computedType;
            if (type.flags & ts.TypeFlags.Union) {
                const access = getCandidateDiscriminantPropertyAccess(expr);
                if (access) {
                    const name = getAccessedPropertyName(access);
                    if (name && isDiscriminantProperty(type, name)) {
                        return access;
                    }
                }
            }
            return undefined;
        }

        function narrowTypeByDiscriminant(type: ts.Type, access: ts.AccessExpression | ts.BindingElement | ts.ParameterDeclaration, narrowType: (t: ts.Type) => ts.Type): ts.Type {
            const propName = getAccessedPropertyName(access);
            if (propName === undefined) {
                return type;
            }
            const removeNullable = strictNullChecks && ts.isOptionalChain(access) && maybeTypeOfKind(type, ts.TypeFlags.Nullable);
            let propType = getTypeOfPropertyOfType(removeNullable ? getTypeWithFacts(type, TypeFacts.NEUndefinedOrNull) : type, propName);
            if (!propType) {
                return type;
            }
            propType = removeNullable ? getOptionalType(propType) : propType;
            const narrowedPropType = narrowType(propType);
            return filterType(type, t => {
                const discriminantType = getTypeOfPropertyOrIndexSignature(t, propName);
                return !(discriminantType.flags & ts.TypeFlags.Never) && !(narrowedPropType.flags & ts.TypeFlags.Never) && areTypesComparable(narrowedPropType, discriminantType);
            });
        }

        function narrowTypeByDiscriminantProperty(type: ts.Type, access: ts.AccessExpression | ts.BindingElement | ts.ParameterDeclaration, operator: ts.SyntaxKind, value: ts.Expression, assumeTrue: boolean) {
            if ((operator === ts.SyntaxKind.EqualsEqualsEqualsToken || operator === ts.SyntaxKind.ExclamationEqualsEqualsToken) && type.flags & ts.TypeFlags.Union) {
                const keyPropertyName = getKeyPropertyName(type as ts.UnionType);
                if (keyPropertyName && keyPropertyName === getAccessedPropertyName(access)) {
                    const candidate = getConstituentTypeForKeyType(type as ts.UnionType, getTypeOfExpression(value));
                    if (candidate) {
                        return operator === (assumeTrue ? ts.SyntaxKind.EqualsEqualsEqualsToken : ts.SyntaxKind.ExclamationEqualsEqualsToken) ? candidate :
                            isUnitType(getTypeOfPropertyOfType(candidate, keyPropertyName) || unknownType) ? removeType(type, candidate) :
                            type;
                    }
                }
            }
            return narrowTypeByDiscriminant(type, access, t => narrowTypeByEquality(t, operator, value, assumeTrue));
        }

        function narrowTypeBySwitchOnDiscriminantProperty(type: ts.Type, access: ts.AccessExpression | ts.BindingElement | ts.ParameterDeclaration, switchStatement: ts.SwitchStatement, clauseStart: number, clauseEnd: number) {
            if (clauseStart < clauseEnd && type.flags & ts.TypeFlags.Union && getKeyPropertyName(type as ts.UnionType) === getAccessedPropertyName(access)) {
                const clauseTypes = getSwitchClauseTypes(switchStatement).slice(clauseStart, clauseEnd);
                const candidate = getUnionType(ts.map(clauseTypes, t => getConstituentTypeForKeyType(type as ts.UnionType, t) || unknownType));
                if (candidate !== unknownType) {
                    return candidate;
                }
            }
            return narrowTypeByDiscriminant(type, access, t => narrowTypeBySwitchOnDiscriminant(t, switchStatement, clauseStart, clauseEnd));
        }

        function narrowTypeByTruthiness(type: ts.Type, expr: ts.Expression, assumeTrue: boolean): ts.Type {
            if (isMatchingReference(reference, expr)) {
                return getAdjustedTypeWithFacts(type, assumeTrue ? TypeFacts.Truthy : TypeFacts.Falsy);
            }
            if (strictNullChecks && assumeTrue && optionalChainContainsReference(expr, reference)) {
                type = getAdjustedTypeWithFacts(type, TypeFacts.NEUndefinedOrNull);
            }
            const access = getDiscriminantPropertyAccess(expr, type);
            if (access) {
                return narrowTypeByDiscriminant(type, access, t => getTypeWithFacts(t, assumeTrue ? TypeFacts.Truthy : TypeFacts.Falsy));
            }
            return type;
        }

        function isTypePresencePossible(type: ts.Type, propName: ts.__String, assumeTrue: boolean) {
            const prop = getPropertyOfType(type, propName);
            return prop ?
                !!(prop.flags & ts.SymbolFlags.Optional) || assumeTrue :
                !!getApplicableIndexInfoForName(type, propName) || !assumeTrue;
        }

        function narrowTypeByInKeyword(type: ts.Type, nameType: ts.StringLiteralType | ts.NumberLiteralType | ts.UniqueESSymbolType, assumeTrue: boolean) {
            const name = getPropertyNameFromType(nameType);
            const isKnownProperty = someType(type, t => isTypePresencePossible(t, name, /*assumeTrue*/ true));
            if (isKnownProperty) {
                // If the check is for a known property (i.e. a property declared in some constituent of
                // the target type), we filter the target type by presence of absence of the property.
                return filterType(type, t => isTypePresencePossible(t, name, assumeTrue));
            }
            if (assumeTrue) {
                // If the check is for an unknown property, we intersect the target type with `Record<X, unknown>`,
                // where X is the name of the property.
                const recordSymbol = getGlobalRecordSymbol();
                if (recordSymbol) {
                    return getIntersectionType([type, getTypeAliasInstantiation(recordSymbol, [nameType, unknownType])]);
                }
            }
            return type;
        }

        function narrowTypeByBinaryExpression(type: ts.Type, expr: ts.BinaryExpression, assumeTrue: boolean): ts.Type {
            switch (expr.operatorToken.kind) {
                case ts.SyntaxKind.EqualsToken:
                case ts.SyntaxKind.BarBarEqualsToken:
                case ts.SyntaxKind.AmpersandAmpersandEqualsToken:
                case ts.SyntaxKind.QuestionQuestionEqualsToken:
                    return narrowTypeByTruthiness(narrowType(type, expr.right, assumeTrue), expr.left, assumeTrue);
                case ts.SyntaxKind.EqualsEqualsToken:
                case ts.SyntaxKind.ExclamationEqualsToken:
                case ts.SyntaxKind.EqualsEqualsEqualsToken:
                case ts.SyntaxKind.ExclamationEqualsEqualsToken:
                    const operator = expr.operatorToken.kind;
                    const left = getReferenceCandidate(expr.left);
                    const right = getReferenceCandidate(expr.right);
                    if (left.kind === ts.SyntaxKind.TypeOfExpression && ts.isStringLiteralLike(right)) {
                        return narrowTypeByTypeof(type, left as ts.TypeOfExpression, operator, right, assumeTrue);
                    }
                    if (right.kind === ts.SyntaxKind.TypeOfExpression && ts.isStringLiteralLike(left)) {
                        return narrowTypeByTypeof(type, right as ts.TypeOfExpression, operator, left, assumeTrue);
                    }
                    if (isMatchingReference(reference, left)) {
                        return narrowTypeByEquality(type, operator, right, assumeTrue);
                    }
                    if (isMatchingReference(reference, right)) {
                        return narrowTypeByEquality(type, operator, left, assumeTrue);
                    }
                    if (strictNullChecks) {
                        if (optionalChainContainsReference(left, reference)) {
                            type = narrowTypeByOptionalChainContainment(type, operator, right, assumeTrue);
                        }
                        else if (optionalChainContainsReference(right, reference)) {
                            type = narrowTypeByOptionalChainContainment(type, operator, left, assumeTrue);
                        }
                    }
                    const leftAccess = getDiscriminantPropertyAccess(left, type);
                    if (leftAccess) {
                        return narrowTypeByDiscriminantProperty(type, leftAccess, operator, right, assumeTrue);
                    }
                    const rightAccess = getDiscriminantPropertyAccess(right, type);
                    if (rightAccess) {
                        return narrowTypeByDiscriminantProperty(type, rightAccess, operator, left, assumeTrue);
                    }
                    if (isMatchingConstructorReference(left)) {
                        return narrowTypeByConstructor(type, operator, right, assumeTrue);
                    }
                    if (isMatchingConstructorReference(right)) {
                        return narrowTypeByConstructor(type, operator, left, assumeTrue);
                    }
                    break;
                case ts.SyntaxKind.InstanceOfKeyword:
                    return narrowTypeByInstanceof(type, expr, assumeTrue);
                case ts.SyntaxKind.InKeyword:
                    if (ts.isPrivateIdentifier(expr.left)) {
                        return narrowTypeByPrivateIdentifierInInExpression(type, expr, assumeTrue);
                    }
                    const target = getReferenceCandidate(expr.right);
                    const leftType = getTypeOfExpression(expr.left);
                    if (leftType.flags & ts.TypeFlags.StringOrNumberLiteralOrUnique) {
                        if (containsMissingType(type) && ts.isAccessExpression(reference) && isMatchingReference(reference.expression, target) &&
                            getAccessedPropertyName(reference) === getPropertyNameFromType(leftType as ts.StringLiteralType | ts.NumberLiteralType | ts.UniqueESSymbolType)) {
                            return getTypeWithFacts(type, assumeTrue ? TypeFacts.NEUndefined : TypeFacts.EQUndefined);
                        }
                        if (isMatchingReference(reference, target)) {
                            return narrowTypeByInKeyword(type, leftType as ts.StringLiteralType | ts.NumberLiteralType | ts.UniqueESSymbolType, assumeTrue);
                        }
                    }
                    break;
                case ts.SyntaxKind.CommaToken:
                    return narrowType(type, expr.right, assumeTrue);
                // Ordinarily we won't see && and || expressions in control flow analysis because the Binder breaks those
                // expressions down to individual conditional control flows. However, we may encounter them when analyzing
                // aliased conditional expressions.
                case ts.SyntaxKind.AmpersandAmpersandToken:
                    return assumeTrue ?
                        narrowType(narrowType(type, expr.left, /*assumeTrue*/ true), expr.right, /*assumeTrue*/ true) :
                        getUnionType([narrowType(type, expr.left, /*assumeTrue*/ false), narrowType(type, expr.right, /*assumeTrue*/ false)]);
                case ts.SyntaxKind.BarBarToken:
                    return assumeTrue ?
                        getUnionType([narrowType(type, expr.left, /*assumeTrue*/ true), narrowType(type, expr.right, /*assumeTrue*/ true)]) :
                        narrowType(narrowType(type, expr.left, /*assumeTrue*/ false), expr.right, /*assumeTrue*/ false);
            }
            return type;
        }

        function narrowTypeByPrivateIdentifierInInExpression(type: ts.Type, expr: ts.BinaryExpression, assumeTrue: boolean): ts.Type {
            const target = getReferenceCandidate(expr.right);
            if (!isMatchingReference(reference, target)) {
                return type;
            }

            ts.Debug.assertNode(expr.left, ts.isPrivateIdentifier);
            const symbol = getSymbolForPrivateIdentifierExpression(expr.left);
            if (symbol === undefined) {
                return type;
            }
            const classSymbol = symbol.parent!;
            const targetType = ts.hasStaticModifier(ts.Debug.checkDefined(symbol.valueDeclaration, "should always have a declaration"))
                ? getTypeOfSymbol(classSymbol) as ts.InterfaceType
                : getDeclaredTypeOfSymbol(classSymbol);
            return getNarrowedType(type, targetType, assumeTrue, /*checkDerived*/ true);
        }

        function narrowTypeByOptionalChainContainment(type: ts.Type, operator: ts.SyntaxKind, value: ts.Expression, assumeTrue: boolean): ts.Type {
            // We are in a branch of obj?.foo === value (or any one of the other equality operators). We narrow obj as follows:
            // When operator is === and type of value excludes undefined, null and undefined is removed from type of obj in true branch.
            // When operator is !== and type of value excludes undefined, null and undefined is removed from type of obj in false branch.
            // When operator is == and type of value excludes null and undefined, null and undefined is removed from type of obj in true branch.
            // When operator is != and type of value excludes null and undefined, null and undefined is removed from type of obj in false branch.
            // When operator is === and type of value is undefined, null and undefined is removed from type of obj in false branch.
            // When operator is !== and type of value is undefined, null and undefined is removed from type of obj in true branch.
            // When operator is == and type of value is null or undefined, null and undefined is removed from type of obj in false branch.
            // When operator is != and type of value is null or undefined, null and undefined is removed from type of obj in true branch.
            const equalsOperator = operator === ts.SyntaxKind.EqualsEqualsToken || operator === ts.SyntaxKind.EqualsEqualsEqualsToken;
            const nullableFlags = operator === ts.SyntaxKind.EqualsEqualsToken || operator === ts.SyntaxKind.ExclamationEqualsToken ? ts.TypeFlags.Nullable : ts.TypeFlags.Undefined;
            const valueType = getTypeOfExpression(value);
            // Note that we include any and unknown in the exclusion test because their domain includes null and undefined.
            const removeNullable = equalsOperator !== assumeTrue && everyType(valueType, t => !!(t.flags & nullableFlags)) ||
                equalsOperator === assumeTrue && everyType(valueType, t => !(t.flags & (ts.TypeFlags.AnyOrUnknown | nullableFlags)));
            return removeNullable ? getAdjustedTypeWithFacts(type, TypeFacts.NEUndefinedOrNull) : type;
        }

        function narrowTypeByEquality(type: ts.Type, operator: ts.SyntaxKind, value: ts.Expression, assumeTrue: boolean): ts.Type {
            if (type.flags & ts.TypeFlags.Any) {
                return type;
            }
            if (operator === ts.SyntaxKind.ExclamationEqualsToken || operator === ts.SyntaxKind.ExclamationEqualsEqualsToken) {
                assumeTrue = !assumeTrue;
            }
            const valueType = getTypeOfExpression(value);
            const doubleEquals = operator === ts.SyntaxKind.EqualsEqualsToken || operator === ts.SyntaxKind.ExclamationEqualsToken;
            if (valueType.flags & ts.TypeFlags.Nullable) {
                if (!strictNullChecks) {
                    return type;
                }
                const facts = doubleEquals ?
                    assumeTrue ? TypeFacts.EQUndefinedOrNull : TypeFacts.NEUndefinedOrNull :
                    valueType.flags & ts.TypeFlags.Null ?
                        assumeTrue ? TypeFacts.EQNull : TypeFacts.NENull :
                        assumeTrue ? TypeFacts.EQUndefined : TypeFacts.NEUndefined;
                return getAdjustedTypeWithFacts(type, facts);
            }
            if (assumeTrue) {
                if (!doubleEquals && (type.flags & ts.TypeFlags.Unknown || someType(type, isEmptyAnonymousObjectType))) {
                    if (valueType.flags & (ts.TypeFlags.Primitive | ts.TypeFlags.NonPrimitive) || isEmptyAnonymousObjectType(valueType)) {
                        return valueType;
                    }
                    if (valueType.flags & ts.TypeFlags.Object) {
                        return nonPrimitiveType;
                    }
                }
                const filteredType = filterType(type, t => areTypesComparable(t, valueType) || doubleEquals && isCoercibleUnderDoubleEquals(t, valueType));
                return replacePrimitivesWithLiterals(filteredType, valueType);
            }
            if (isUnitType(valueType)) {
                return filterType(type, t => !(isUnitLikeType(t) && areTypesComparable(t, valueType)));
            }
            return type;
        }

        function narrowTypeByTypeof(type: ts.Type, typeOfExpr: ts.TypeOfExpression, operator: ts.SyntaxKind, literal: ts.LiteralExpression, assumeTrue: boolean): ts.Type {
            // We have '==', '!=', '===', or !==' operator with 'typeof xxx' and string literal operands
            if (operator === ts.SyntaxKind.ExclamationEqualsToken || operator === ts.SyntaxKind.ExclamationEqualsEqualsToken) {
                assumeTrue = !assumeTrue;
            }
            const target = getReferenceCandidate(typeOfExpr.expression);
            if (!isMatchingReference(reference, target)) {
                const propertyAccess = getDiscriminantPropertyAccess(typeOfExpr.expression, type);
                if (propertyAccess) {
                    return narrowTypeByDiscriminant(type, propertyAccess, t => narrowTypeByLiteralExpression(t, literal, assumeTrue));
                }
                if (strictNullChecks && optionalChainContainsReference(target, reference) && assumeTrue === (literal.text !== "undefined")) {
                    return getAdjustedTypeWithFacts(type, TypeFacts.NEUndefinedOrNull);
                }
                return type;
            }
            return narrowTypeByLiteralExpression(type, literal, assumeTrue);
        }

        function narrowTypeByLiteralExpression(type: ts.Type, literal: ts.LiteralExpression, assumeTrue: boolean) {
            return assumeTrue ?
                narrowTypeByTypeName(type, literal.text) :
                getTypeWithFacts(type, typeofNEFacts.get(literal.text) || TypeFacts.TypeofNEHostObject);
        }

        function narrowTypeBySwitchOptionalChainContainment(type: ts.Type, switchStatement: ts.SwitchStatement, clauseStart: number, clauseEnd: number, clauseCheck: (type: ts.Type) => boolean) {
            const everyClauseChecks = clauseStart !== clauseEnd && ts.every(getSwitchClauseTypes(switchStatement).slice(clauseStart, clauseEnd), clauseCheck);
            return everyClauseChecks ? getTypeWithFacts(type, TypeFacts.NEUndefinedOrNull) : type;
        }

        function narrowTypeBySwitchOnDiscriminant(type: ts.Type, switchStatement: ts.SwitchStatement, clauseStart: number, clauseEnd: number) {
            // We only narrow if all case expressions specify
            // values with unit types, except for the case where
            // `type` is unknown. In this instance we map object
            // types to the nonPrimitive type and narrow with that.
            const switchTypes = getSwitchClauseTypes(switchStatement);
            if (!switchTypes.length) {
                return type;
            }
            const clauseTypes = switchTypes.slice(clauseStart, clauseEnd);
            const hasDefaultClause = clauseStart === clauseEnd || ts.contains(clauseTypes, neverType);
            if ((type.flags & ts.TypeFlags.Unknown) && !hasDefaultClause) {
                let groundClauseTypes: ts.Type[] | undefined;
                for (let i = 0; i < clauseTypes.length; i += 1) {
                    const t = clauseTypes[i];
                    if (t.flags & (ts.TypeFlags.Primitive | ts.TypeFlags.NonPrimitive)) {
                        if (groundClauseTypes !== undefined) {
                            groundClauseTypes.push(t);
                        }
                    }
                    else if (t.flags & ts.TypeFlags.Object) {
                        if (groundClauseTypes === undefined) {
                            groundClauseTypes = clauseTypes.slice(0, i);
                        }
                        groundClauseTypes.push(nonPrimitiveType);
                    }
                    else {
                        return type;
                    }
                }
                return getUnionType(groundClauseTypes === undefined ? clauseTypes : groundClauseTypes);
            }
            const discriminantType = getUnionType(clauseTypes);
            const caseType =
                discriminantType.flags & ts.TypeFlags.Never ? neverType :
                replacePrimitivesWithLiterals(filterType(type, t => areTypesComparable(discriminantType, t)), discriminantType);
            if (!hasDefaultClause) {
                return caseType;
            }
            const defaultType = filterType(type, t => !(isUnitLikeType(t) && ts.contains(switchTypes, getRegularTypeOfLiteralType(extractUnitType(t)))));
            return caseType.flags & ts.TypeFlags.Never ? defaultType : getUnionType([caseType, defaultType]);
        }

        function narrowTypeByTypeName(type: ts.Type, typeName: string) {
            switch (typeName) {
                case "string": return narrowTypeByTypeFacts(type, stringType, TypeFacts.TypeofEQString);
                case "number": return narrowTypeByTypeFacts(type, numberType, TypeFacts.TypeofEQNumber);
                case "bigint": return narrowTypeByTypeFacts(type, bigintType, TypeFacts.TypeofEQBigInt);
                case "boolean": return narrowTypeByTypeFacts(type, booleanType, TypeFacts.TypeofEQBoolean);
                case "symbol": return narrowTypeByTypeFacts(type, esSymbolType, TypeFacts.TypeofEQSymbol);
                case "object": return type.flags & ts.TypeFlags.Any ? type : getUnionType([narrowTypeByTypeFacts(type, nonPrimitiveType, TypeFacts.TypeofEQObject), narrowTypeByTypeFacts(type, nullType, TypeFacts.EQNull)]);
                case "function": return type.flags & ts.TypeFlags.Any ? type : narrowTypeByTypeFacts(type, globalFunctionType, TypeFacts.TypeofEQFunction);
                case "undefined": return narrowTypeByTypeFacts(type, undefinedType, TypeFacts.EQUndefined);
            }
            return narrowTypeByTypeFacts(type, nonPrimitiveType, TypeFacts.TypeofEQHostObject);
        }

        function narrowTypeByTypeFacts(type: ts.Type, impliedType: ts.Type, facts: TypeFacts) {
            return mapType(type, t =>
                // We first check if a constituent is a subtype of the implied type. If so, we either keep or eliminate
                // the constituent based on its type facts. We use the strict subtype relation because it treats `object`
                // as a subtype of `{}`, and we need the type facts check because function types are subtypes of `object`,
                // but are classified as "function" according to `typeof`.
                isTypeRelatedTo(t, impliedType, strictSubtypeRelation) ? getTypeFacts(t) & facts ? t : neverType :
                // We next check if the consituent is a supertype of the implied type. If so, we substitute the implied
                // type. This handles top types like `unknown` and `{}`, and supertypes like `{ toString(): string }`.
                isTypeSubtypeOf(impliedType, t) ? impliedType :
                // Neither the constituent nor the implied type is a subtype of the other, however their domains may still
                // overlap. For example, an unconstrained type parameter and type `string`. If the type facts indicate
                // possible overlap, we form an intersection. Otherwise, we eliminate the constituent.
                getTypeFacts(t) & facts ? getIntersectionType([t, impliedType]) :
                neverType);
        }

        function narrowTypeBySwitchOnTypeOf(type: ts.Type, switchStatement: ts.SwitchStatement, clauseStart: number, clauseEnd: number): ts.Type {
            const witnesses = getSwitchClauseTypeOfWitnesses(switchStatement);
            if (!witnesses) {
                return type;
            }
            // Equal start and end denotes implicit fallthrough; undefined marks explicit default clause.
            const defaultIndex = ts.findIndex(switchStatement.caseBlock.clauses, clause => clause.kind === ts.SyntaxKind.DefaultClause);
            const hasDefaultClause = clauseStart === clauseEnd || (defaultIndex >= clauseStart && defaultIndex < clauseEnd);
            if (hasDefaultClause) {
                // In the default clause we filter constituents down to those that are not-equal to all handled cases.
                const notEqualFacts = getNotEqualFactsFromTypeofSwitch(clauseStart, clauseEnd, witnesses);
                return filterType(type, t => (getTypeFacts(t) & notEqualFacts) === notEqualFacts);
            }
            // In the non-default cause we create a union of the type narrowed by each of the listed cases.
            const clauseWitnesses = witnesses.slice(clauseStart, clauseEnd);
            return getUnionType(ts.map(clauseWitnesses, text => text ? narrowTypeByTypeName(type, text) : neverType));
        }

        function isMatchingConstructorReference(expr: ts.Expression) {
            return (ts.isPropertyAccessExpression(expr) && ts.idText(expr.name) === "constructor" ||
                ts.isElementAccessExpression(expr) && ts.isStringLiteralLike(expr.argumentExpression) && expr.argumentExpression.text === "constructor") &&
                isMatchingReference(reference, expr.expression);
        }

        function narrowTypeByConstructor(type: ts.Type, operator: ts.SyntaxKind, identifier: ts.Expression, assumeTrue: boolean): ts.Type {
            // Do not narrow when checking inequality.
            if (assumeTrue ? (operator !== ts.SyntaxKind.EqualsEqualsToken && operator !== ts.SyntaxKind.EqualsEqualsEqualsToken) : (operator !== ts.SyntaxKind.ExclamationEqualsToken && operator !== ts.SyntaxKind.ExclamationEqualsEqualsToken)) {
                return type;
            }

            // Get the type of the constructor identifier expression, if it is not a function then do not narrow.
            const identifierType = getTypeOfExpression(identifier);
            if (!isFunctionType(identifierType) && !isConstructorType(identifierType)) {
                return type;
            }

            // Get the prototype property of the type identifier so we can find out its type.
            const prototypeProperty = getPropertyOfType(identifierType, "prototype" as ts.__String);
            if (!prototypeProperty) {
                return type;
            }

            // Get the type of the prototype, if it is undefined, or the global `Object` or `Function` types then do not narrow.
            const prototypeType = getTypeOfSymbol(prototypeProperty);
            const candidate = !isTypeAny(prototypeType) ? prototypeType : undefined;
            if (!candidate || candidate === globalObjectType || candidate === globalFunctionType) {
                return type;
            }

            // If the type that is being narrowed is `any` then just return the `candidate` type since every type is a subtype of `any`.
            if (isTypeAny(type)) {
                return candidate;
            }

            // Filter out types that are not considered to be "constructed by" the `candidate` type.
            return filterType(type, t => isConstructedBy(t, candidate));

            function isConstructedBy(source: ts.Type, target: ts.Type) {
                // If either the source or target type are a class type then we need to check that they are the same exact type.
                // This is because you may have a class `A` that defines some set of properties, and another class `B`
                // that defines the same set of properties as class `A`, in that case they are structurally the same
                // type, but when you do something like `instanceOfA.constructor === B` it will return false.
                if (source.flags & ts.TypeFlags.Object && ts.getObjectFlags(source) & ts.ObjectFlags.Class ||
                    target.flags & ts.TypeFlags.Object && ts.getObjectFlags(target) & ts.ObjectFlags.Class) {
                    return source.symbol === target.symbol;
                }

                // For all other types just check that the `source` type is a subtype of the `target` type.
                return isTypeSubtypeOf(source, target);
            }
        }

        function narrowTypeByInstanceof(type: ts.Type, expr: ts.BinaryExpression, assumeTrue: boolean): ts.Type {
            const left = getReferenceCandidate(expr.left);
            if (!isMatchingReference(reference, left)) {
                if (assumeTrue && strictNullChecks && optionalChainContainsReference(left, reference)) {
                    return getAdjustedTypeWithFacts(type, TypeFacts.NEUndefinedOrNull);
                }
                return type;
            }

            // Check that right operand is a function type with a prototype property
            const rightType = getTypeOfExpression(expr.right);
            if (!isTypeDerivedFrom(rightType, globalFunctionType)) {
                return type;
            }

            let targetType: ts.Type | undefined;
            const prototypeProperty = getPropertyOfType(rightType, "prototype" as ts.__String);
            if (prototypeProperty) {
                // Target type is type of the prototype property
                const prototypePropertyType = getTypeOfSymbol(prototypeProperty);
                if (!isTypeAny(prototypePropertyType)) {
                    targetType = prototypePropertyType;
                }
            }

            // Don't narrow from 'any' if the target type is exactly 'Object' or 'Function'
            if (isTypeAny(type) && (targetType === globalObjectType || targetType === globalFunctionType)) {
                return type;
            }

            if (!targetType) {
                const constructSignatures = getSignaturesOfType(rightType, ts.SignatureKind.Construct);
                targetType = constructSignatures.length ?
                    getUnionType(ts.map(constructSignatures, signature => getReturnTypeOfSignature(getErasedSignature(signature)))) :
                    emptyObjectType;
            }

            // We can't narrow a union based off instanceof without negated types see #31576 for more info
            if (!assumeTrue && rightType.flags & ts.TypeFlags.Union) {
                const nonConstructorTypeInUnion = ts.find((rightType as ts.UnionType).types, (t) => !isConstructorType(t));
                if (!nonConstructorTypeInUnion) return type;
            }

            return getNarrowedType(type, targetType, assumeTrue, /*checkDerived*/ true);
        }

        function getNarrowedType(type: ts.Type, candidate: ts.Type, assumeTrue: boolean, checkDerived: boolean) {
            const key = type.flags & ts.TypeFlags.Union ? `N${getTypeId(type)},${getTypeId(candidate)},${(assumeTrue ? 1 : 0) | (checkDerived ? 2 : 0)}` : undefined;
            return getCachedType(key) ?? setCachedType(key, getNarrowedTypeWorker(type, candidate, assumeTrue, checkDerived));
        }

        function getNarrowedTypeWorker(type: ts.Type, candidate: ts.Type, assumeTrue: boolean, checkDerived: boolean) {
            const isRelated = checkDerived ? isTypeDerivedFrom : isTypeSubtypeOf;
            if (!assumeTrue) {
                return filterType(type, t => !isRelated(t, candidate));
            }
            if (type.flags & ts.TypeFlags.AnyOrUnknown) {
                return candidate;
            }
            // We first attempt to filter the current type, narrowing constituents as appropriate and removing
            // constituents that are unrelated to the candidate.
            const keyPropertyName = type.flags & ts.TypeFlags.Union ? getKeyPropertyName(type as ts.UnionType) : undefined;
            const narrowedType = mapType(candidate, c => {
                // If a discriminant property is available, use that to reduce the type.
                const discriminant = keyPropertyName && getTypeOfPropertyOfType(c, keyPropertyName);
                const matching = discriminant && getConstituentTypeForKeyType(type as ts.UnionType, discriminant);
                // For each constituent t in the current type, if t and and c are directly related, pick the most
                // specific of the two. When t and c are related in both directions, we prefer c for type predicates
                // because that is the asserted type, but t for `instanceof` because generics aren't reflected in
                // prototype object types.
                const directlyRelated = mapType(matching || type, checkDerived ?
                    t => isTypeDerivedFrom(t, c) ? t : isTypeDerivedFrom(c, t) ? c : neverType :
                    t => isTypeSubtypeOf(c, t) ? c : isTypeSubtypeOf(t, c) ? t : neverType);
                // If no constituents are directly related, create intersections for any generic constituents that
                // are related by constraint.
                return directlyRelated.flags & ts.TypeFlags.Never ?
                    mapType(type, t => maybeTypeOfKind(t, ts.TypeFlags.Instantiable) && isRelated(c, getBaseConstraintOfType(t) || unknownType) ? getIntersectionType([t, c]) : neverType) :
                    directlyRelated;
            });
            // If filtering produced a non-empty type, return that. Otherwise, pick the most specific of the two
            // based on assignability, or as a last resort produce an intersection.
            return !(narrowedType.flags & ts.TypeFlags.Never) ? narrowedType :
                isTypeSubtypeOf(candidate, type) ? candidate :
                isTypeAssignableTo(type, candidate) ? type :
                isTypeAssignableTo(candidate, type) ? candidate :
                getIntersectionType([type, candidate]);
        }

        function narrowTypeByCallExpression(type: ts.Type, callExpression: ts.CallExpression, assumeTrue: boolean): ts.Type {
            if (hasMatchingArgument(callExpression, reference)) {
                const signature = assumeTrue || !ts.isCallChain(callExpression) ? getEffectsSignature(callExpression) : undefined;
                const predicate = signature && getTypePredicateOfSignature(signature);
                if (predicate && (predicate.kind === ts.TypePredicateKind.This || predicate.kind === ts.TypePredicateKind.Identifier)) {
                    return narrowTypeByTypePredicate(type, predicate, callExpression, assumeTrue);
                }
            }
            if (containsMissingType(type) && ts.isAccessExpression(reference) && ts.isPropertyAccessExpression(callExpression.expression)) {
                const callAccess = callExpression.expression;
                if (isMatchingReference(reference.expression, getReferenceCandidate(callAccess.expression)) &&
                    ts.isIdentifier(callAccess.name) && callAccess.name.escapedText === "hasOwnProperty" && callExpression.arguments.length === 1) {
                    const argument = callExpression.arguments[0];
                    if (ts.isStringLiteralLike(argument) && getAccessedPropertyName(reference) === ts.escapeLeadingUnderscores(argument.text)) {
                        return getTypeWithFacts(type, assumeTrue ? TypeFacts.NEUndefined : TypeFacts.EQUndefined);
                    }
                }
            }
            return type;
        }

        function narrowTypeByTypePredicate(type: ts.Type, predicate: ts.TypePredicate, callExpression: ts.CallExpression, assumeTrue: boolean): ts.Type {
            // Don't narrow from 'any' if the predicate type is exactly 'Object' or 'Function'
            if (predicate.type && !(isTypeAny(type) && (predicate.type === globalObjectType || predicate.type === globalFunctionType))) {
                const predicateArgument = getTypePredicateArgument(predicate, callExpression);
                if (predicateArgument) {
                    if (isMatchingReference(reference, predicateArgument)) {
                        return getNarrowedType(type, predicate.type, assumeTrue, /*checkDerived*/ false);
                    }
                    if (strictNullChecks && assumeTrue && optionalChainContainsReference(predicateArgument, reference) &&
                        !(getTypeFacts(predicate.type) & TypeFacts.EQUndefined)) {
                        type = getAdjustedTypeWithFacts(type, TypeFacts.NEUndefinedOrNull);
                    }
                    const access = getDiscriminantPropertyAccess(predicateArgument, type);
                    if (access) {
                        return narrowTypeByDiscriminant(type, access, t => getNarrowedType(t, predicate.type!, assumeTrue, /*checkDerived*/ false));
                    }
                }
            }
            return type;
        }

        // Narrow the given type based on the given expression having the assumed boolean value. The returned type
        // will be a subtype or the same type as the argument.
        function narrowType(type: ts.Type, expr: ts.Expression, assumeTrue: boolean): ts.Type {
            // for `a?.b`, we emulate a synthetic `a !== null && a !== undefined` condition for `a`
            if (ts.isExpressionOfOptionalChainRoot(expr) ||
                ts.isBinaryExpression(expr.parent) && expr.parent.operatorToken.kind === ts.SyntaxKind.QuestionQuestionToken && expr.parent.left === expr) {
                return narrowTypeByOptionality(type, expr, assumeTrue);
            }
            switch (expr.kind) {
                case ts.SyntaxKind.Identifier:
                    // When narrowing a reference to a const variable, non-assigned parameter, or readonly property, we inline
                    // up to five levels of aliased conditional expressions that are themselves declared as const variables.
                    if (!isMatchingReference(reference, expr) && inlineLevel < 5) {
                        const symbol = getResolvedSymbol(expr as ts.Identifier);
                        if (isConstVariable(symbol)) {
                            const declaration = symbol.valueDeclaration;
                            if (declaration && ts.isVariableDeclaration(declaration) && !declaration.type && declaration.initializer && isConstantReference(reference)) {
                                inlineLevel++;
                                const result = narrowType(type, declaration.initializer, assumeTrue);
                                inlineLevel--;
                                return result;
                            }
                        }
                    }
                    // falls through
                case ts.SyntaxKind.ThisKeyword:
                case ts.SyntaxKind.SuperKeyword:
                case ts.SyntaxKind.PropertyAccessExpression:
                case ts.SyntaxKind.ElementAccessExpression:
                    return narrowTypeByTruthiness(type, expr, assumeTrue);
                case ts.SyntaxKind.CallExpression:
                    return narrowTypeByCallExpression(type, expr as ts.CallExpression, assumeTrue);
                case ts.SyntaxKind.ParenthesizedExpression:
                case ts.SyntaxKind.NonNullExpression:
                    return narrowType(type, (expr as ts.ParenthesizedExpression | ts.NonNullExpression).expression, assumeTrue);
                case ts.SyntaxKind.BinaryExpression:
                    return narrowTypeByBinaryExpression(type, expr as ts.BinaryExpression, assumeTrue);
                case ts.SyntaxKind.PrefixUnaryExpression:
                    if ((expr as ts.PrefixUnaryExpression).operator === ts.SyntaxKind.ExclamationToken) {
                        return narrowType(type, (expr as ts.PrefixUnaryExpression).operand, !assumeTrue);
                    }
                    break;
            }
            return type;
        }

        function narrowTypeByOptionality(type: ts.Type, expr: ts.Expression, assumePresent: boolean): ts.Type {
            if (isMatchingReference(reference, expr)) {
                return getAdjustedTypeWithFacts(type, assumePresent ? TypeFacts.NEUndefinedOrNull : TypeFacts.EQUndefinedOrNull);
            }
            const access = getDiscriminantPropertyAccess(expr, type);
            if (access) {
                return narrowTypeByDiscriminant(type, access, t => getTypeWithFacts(t, assumePresent ? TypeFacts.NEUndefinedOrNull : TypeFacts.EQUndefinedOrNull));
            }
            return type;
        }
    }

    function getTypeOfSymbolAtLocation(symbol: ts.Symbol, location: ts.Node) {
        symbol = symbol.exportSymbol || symbol;

        // If we have an identifier or a property access at the given location, if the location is
        // an dotted name expression, and if the location is not an assignment target, obtain the type
        // of the expression (which will reflect control flow analysis). If the expression indeed
        // resolved to the given symbol, return the narrowed type.
        if (location.kind === ts.SyntaxKind.Identifier || location.kind === ts.SyntaxKind.PrivateIdentifier) {
            if (ts.isRightSideOfQualifiedNameOrPropertyAccess(location)) {
                location = location.parent;
            }
            if (ts.isExpressionNode(location) && (!ts.isAssignmentTarget(location) || ts.isWriteAccess(location))) {
                const type = getTypeOfExpression(location as ts.Expression);
                if (getExportSymbolOfValueSymbolIfExported(getNodeLinks(location).resolvedSymbol) === symbol) {
                    return type;
                }
            }
        }
        if (ts.isDeclarationName(location) && ts.isSetAccessor(location.parent) && getAnnotatedAccessorTypeNode(location.parent)) {
            return getWriteTypeOfAccessors(location.parent.symbol);
        }
        // The location isn't a reference to the given symbol, meaning we're being asked
        // a hypothetical question of what type the symbol would have if there was a reference
        // to it at the given location. Since we have no control flow information for the
        // hypothetical reference (control flow information is created and attached by the
        // binder), we simply return the declared type of the symbol.
        return getNonMissingTypeOfSymbol(symbol);
    }

    function getControlFlowContainer(node: ts.Node): ts.Node {
        return ts.findAncestor(node.parent, node =>
            ts.isFunctionLike(node) && !ts.getImmediatelyInvokedFunctionExpression(node) ||
            node.kind === ts.SyntaxKind.ModuleBlock ||
            node.kind === ts.SyntaxKind.SourceFile ||
            node.kind === ts.SyntaxKind.PropertyDeclaration)!;
    }

    // Check if a parameter or catch variable is assigned anywhere
    function isSymbolAssigned(symbol: ts.Symbol) {
        if (!symbol.valueDeclaration) {
            return false;
        }
        const parent = ts.getRootDeclaration(symbol.valueDeclaration).parent;
        const links = getNodeLinks(parent);
        if (!(links.flags & ts.NodeCheckFlags.AssignmentsMarked)) {
            links.flags |= ts.NodeCheckFlags.AssignmentsMarked;
            if (!hasParentWithAssignmentsMarked(parent)) {
                markNodeAssignments(parent);
            }
        }
        return symbol.isAssigned || false;
    }

    function hasParentWithAssignmentsMarked(node: ts.Node) {
        return !!ts.findAncestor(node.parent, node =>
            (ts.isFunctionLike(node) || ts.isCatchClause(node)) && !!(getNodeLinks(node).flags & ts.NodeCheckFlags.AssignmentsMarked));
    }

    function markNodeAssignments(node: ts.Node) {
        if (node.kind === ts.SyntaxKind.Identifier) {
            if (ts.isAssignmentTarget(node)) {
                const symbol = getResolvedSymbol(node as ts.Identifier);
                if (ts.isParameterOrCatchClauseVariable(symbol)) {
                    symbol.isAssigned = true;
                }
            }
        }
        else {
            ts.forEachChild(node, markNodeAssignments);
        }
    }

    function isConstVariable(symbol: ts.Symbol) {
        return symbol.flags & ts.SymbolFlags.Variable && (getDeclarationNodeFlagsFromSymbol(symbol) & ts.NodeFlags.Const) !== 0;
    }

    /** remove undefined from the annotated type of a parameter when there is an initializer (that doesn't include undefined) */
    function removeOptionalityFromDeclaredType(declaredType: ts.Type, declaration: ts.VariableLikeDeclaration): ts.Type {
        if (pushTypeResolution(declaration.symbol, TypeSystemPropertyName.DeclaredType)) {
            const annotationIncludesUndefined = strictNullChecks &&
                declaration.kind === ts.SyntaxKind.Parameter &&
                declaration.initializer &&
                getTypeFacts(declaredType) & TypeFacts.IsUndefined &&
                !(getTypeFacts(checkExpression(declaration.initializer)) & TypeFacts.IsUndefined);
            popTypeResolution();

            return annotationIncludesUndefined ? getTypeWithFacts(declaredType, TypeFacts.NEUndefined) : declaredType;
        }
        else {
            reportCircularityError(declaration.symbol);
            return declaredType;
        }
    }

    function isConstraintPosition(type: ts.Type, node: ts.Node) {
        const parent = node.parent;
        // In an element access obj[x], we consider obj to be in a constraint position, except when obj is of
        // a generic type without a nullable constraint and x is a generic type. This is because when both obj
        // and x are of generic types T and K, we want the resulting type to be T[K].
        return parent.kind === ts.SyntaxKind.PropertyAccessExpression ||
            parent.kind === ts.SyntaxKind.QualifiedName ||
            parent.kind === ts.SyntaxKind.CallExpression && (parent as ts.CallExpression).expression === node ||
            parent.kind === ts.SyntaxKind.ElementAccessExpression && (parent as ts.ElementAccessExpression).expression === node &&
                !(someType(type, isGenericTypeWithoutNullableConstraint) && isGenericIndexType(getTypeOfExpression((parent as ts.ElementAccessExpression).argumentExpression)));
    }

    function isGenericTypeWithUnionConstraint(type: ts.Type): boolean {
        return type.flags & ts.TypeFlags.Intersection ?
            ts.some((type as ts.IntersectionType).types, isGenericTypeWithUnionConstraint) :
            !!(type.flags & ts.TypeFlags.Instantiable && getBaseConstraintOrType(type).flags & (ts.TypeFlags.Nullable | ts.TypeFlags.Union));
    }

    function isGenericTypeWithoutNullableConstraint(type: ts.Type): boolean {
        return type.flags & ts.TypeFlags.Intersection ?
            ts.some((type as ts.IntersectionType).types, isGenericTypeWithoutNullableConstraint) :
            !!(type.flags & ts.TypeFlags.Instantiable && !maybeTypeOfKind(getBaseConstraintOrType(type), ts.TypeFlags.Nullable));
    }

    function hasContextualTypeWithNoGenericTypes(node: ts.Node, checkMode: CheckMode | undefined) {
        // Computing the contextual type for a child of a JSX element involves resolving the type of the
        // element's tag name, so we exclude that here to avoid circularities.
        // If check mode has `CheckMode.RestBindingElement`, we skip binding pattern contextual types,
        // as we want the type of a rest element to be generic when possible.
        const contextualType = (ts.isIdentifier(node) || ts.isPropertyAccessExpression(node) || ts.isElementAccessExpression(node)) &&
            !((ts.isJsxOpeningElement(node.parent) || ts.isJsxSelfClosingElement(node.parent)) && node.parent.tagName === node) &&
            (checkMode && checkMode & CheckMode.RestBindingElement ?
                getContextualType(node, ts.ContextFlags.SkipBindingPatterns)
                : getContextualType(node, /*contextFlags*/ undefined));
        return contextualType && !isGenericType(contextualType);
    }

    function getNarrowableTypeForReference(type: ts.Type, reference: ts.Node, checkMode?: CheckMode) {
        // When the type of a reference is or contains an instantiable type with a union type constraint, and
        // when the reference is in a constraint position (where it is known we'll obtain the apparent type) or
        // has a contextual type containing no top-level instantiables (meaning constraints will determine
        // assignability), we substitute constraints for all instantiables in the type of the reference to give
        // control flow analysis an opportunity to narrow it further. For example, for a reference of a type
        // parameter type 'T extends string | undefined' with a contextual type 'string', we substitute
        // 'string | undefined' to give control flow analysis the opportunity to narrow to type 'string'.
        const substituteConstraints = !(checkMode && checkMode & CheckMode.Inferential) &&
            someType(type, isGenericTypeWithUnionConstraint) &&
            (isConstraintPosition(type, reference) || hasContextualTypeWithNoGenericTypes(reference, checkMode));
        return substituteConstraints ? mapType(type, getBaseConstraintOrType) : type;
    }

    function isExportOrExportExpression(location: ts.Node) {
        return !!ts.findAncestor(location, n => {
            const parent = n.parent;
            if (parent === undefined) {
                return "quit";
            }
            if (ts.isExportAssignment(parent)) {
                return parent.expression === n && ts.isEntityNameExpression(n);
            }
            if (ts.isExportSpecifier(parent)) {
                return parent.name === n || parent.propertyName === n;
            }
            return false;
        });
    }

    function markAliasReferenced(symbol: ts.Symbol, location: ts.Node) {
        if (isNonLocalAlias(symbol, /*excludes*/ ts.SymbolFlags.Value) && !isInTypeQuery(location) && !getTypeOnlyAliasDeclaration(symbol, ts.SymbolFlags.Value)) {
            const target = resolveAlias(symbol);
            if (getAllSymbolFlags(target) & (ts.SymbolFlags.Value | ts.SymbolFlags.ExportValue)) {
                // An alias resolving to a const enum cannot be elided if (1) 'isolatedModules' is enabled
                // (because the const enum value will not be inlined), or if (2) the alias is an export
                // of a const enum declaration that will be preserved.
                if (compilerOptions.isolatedModules ||
                    ts.shouldPreserveConstEnums(compilerOptions) && isExportOrExportExpression(location) ||
                    !isConstEnumOrConstEnumOnlyModule(getExportSymbolOfValueSymbolIfExported(target))
                ) {
                    markAliasSymbolAsReferenced(symbol);
                }
                else {
                    markConstEnumAliasAsReferenced(symbol);
                }
            }
        }
    }

    function getNarrowedTypeOfSymbol(symbol: ts.Symbol, location: ts.Identifier) {
        const declaration = symbol.valueDeclaration;
        if (declaration) {
            // If we have a non-rest binding element with no initializer declared as a const variable or a const-like
            // parameter (a parameter for which there are no assignments in the function body), and if the parent type
            // for the destructuring is a union type, one or more of the binding elements may represent discriminant
            // properties, and we want the effects of conditional checks on such discriminants to affect the types of
            // other binding elements from the same destructuring. Consider:
            //
            //   type Action =
            //       | { kind: 'A', payload: number }
            //       | { kind: 'B', payload: string };
            //
            //   function f({ kind, payload }: Action) {
            //       if (kind === 'A') {
            //           payload.toFixed();
            //       }
            //       if (kind === 'B') {
            //           payload.toUpperCase();
            //       }
            //   }
            //
            // Above, we want the conditional checks on 'kind' to affect the type of 'payload'. To facilitate this, we use
            // the binding pattern AST instance for '{ kind, payload }' as a pseudo-reference and narrow this reference
            // as if it occurred in the specified location. We then recompute the narrowed binding element type by
            // destructuring from the narrowed parent type.
            if (ts.isBindingElement(declaration) && !declaration.initializer && !declaration.dotDotDotToken && declaration.parent.elements.length >= 2) {
                const parent = declaration.parent.parent;
                if (parent.kind === ts.SyntaxKind.VariableDeclaration && ts.getCombinedNodeFlags(declaration) & ts.NodeFlags.Const || parent.kind === ts.SyntaxKind.Parameter) {
                    const links = getNodeLinks(parent);
                    if (!(links.flags & ts.NodeCheckFlags.InCheckIdentifier)) {
                        links.flags |= ts.NodeCheckFlags.InCheckIdentifier;
                        const parentType = getTypeForBindingElementParent(parent, CheckMode.Normal);
                        const parentTypeConstraint = parentType && mapType(parentType, getBaseConstraintOrType);
                        links.flags &= ~ts.NodeCheckFlags.InCheckIdentifier;
                        if (parentTypeConstraint && parentTypeConstraint.flags & ts.TypeFlags.Union && !(parent.kind === ts.SyntaxKind.Parameter && isSymbolAssigned(symbol))) {
                            const pattern = declaration.parent;
                            const narrowedType = getFlowTypeOfReference(pattern, parentTypeConstraint, parentTypeConstraint, /*flowContainer*/ undefined, location.flowNode);
                            if (narrowedType.flags & ts.TypeFlags.Never) {
                                return neverType;
                            }
                            return getBindingElementTypeFromParentType(declaration, narrowedType);
                        }
                    }
                }
            }
            // If we have a const-like parameter with no type annotation or initializer, and if the parameter is contextually
            // typed by a signature with a single rest parameter of a union of tuple types, one or more of the parameters may
            // represent discriminant tuple elements, and we want the effects of conditional checks on such discriminants to
            // affect the types of other parameters in the same parameter list. Consider:
            //
            //   type Action = [kind: 'A', payload: number] | [kind: 'B', payload: string];
            //
            //   const f: (...args: Action) => void = (kind, payload) => {
            //       if (kind === 'A') {
            //           payload.toFixed();
            //       }
            //       if (kind === 'B') {
            //           payload.toUpperCase();
            //       }
            //   }
            //
            // Above, we want the conditional checks on 'kind' to affect the type of 'payload'. To facilitate this, we use
            // the arrow function AST node for '(kind, payload) => ...' as a pseudo-reference and narrow this reference as
            // if it occurred in the specified location. We then recompute the narrowed parameter type by indexing into the
            // narrowed tuple type.
            if (ts.isParameter(declaration) && !declaration.type && !declaration.initializer && !declaration.dotDotDotToken) {
                const func = declaration.parent;
                if (func.parameters.length >= 2 && isContextSensitiveFunctionOrObjectLiteralMethod(func)) {
                    const contextualSignature = getContextualSignature(func);
                    if (contextualSignature && contextualSignature.parameters.length === 1 && signatureHasRestParameter(contextualSignature)) {
                        const restType = getReducedApparentType(getTypeOfSymbol(contextualSignature.parameters[0]));
                        if (restType.flags & ts.TypeFlags.Union && everyType(restType, isTupleType) && !isSymbolAssigned(symbol)) {
                            const narrowedType = getFlowTypeOfReference(func, restType, restType, /*flowContainer*/ undefined, location.flowNode);
                            const index = func.parameters.indexOf(declaration) - (ts.getThisParameter(func) ? 1 : 0);
                            return getIndexedAccessType(narrowedType, getNumberLiteralType(index));
                        }
                    }
                }
            }
        }
        return getTypeOfSymbol(symbol);
    }

    function checkIdentifier(node: ts.Identifier, checkMode: CheckMode | undefined): ts.Type {
        if (ts.isThisInTypeQuery(node)) {
            return checkThisExpression(node);
        }

        const symbol = getResolvedSymbol(node);
        if (symbol === unknownSymbol) {
            return errorType;
        }

        // As noted in ECMAScript 6 language spec, arrow functions never have an arguments objects.
        // Although in down-level emit of arrow function, we emit it using function expression which means that
        // arguments objects will be bound to the inner object; emitting arrow function natively in ES6, arguments objects
        // will be bound to non-arrow function that contain this arrow function. This results in inconsistent behavior.
        // To avoid that we will give an error to users if they use arguments objects in arrow function so that they
        // can explicitly bound arguments objects
        if (symbol === argumentsSymbol) {
            if (isInPropertyInitializerOrClassStaticBlock(node)) {
                error(node, ts.Diagnostics.arguments_cannot_be_referenced_in_property_initializers);
                return errorType;
            }

            const container = ts.getContainingFunction(node)!;
            if (languageVersion < ts.ScriptTarget.ES2015) {
                if (container.kind === ts.SyntaxKind.ArrowFunction) {
                    error(node, ts.Diagnostics.The_arguments_object_cannot_be_referenced_in_an_arrow_function_in_ES3_and_ES5_Consider_using_a_standard_function_expression);
                }
                else if (ts.hasSyntacticModifier(container, ts.ModifierFlags.Async)) {
                    error(node, ts.Diagnostics.The_arguments_object_cannot_be_referenced_in_an_async_function_or_method_in_ES3_and_ES5_Consider_using_a_standard_function_or_method);
                }
            }

            getNodeLinks(container).flags |= ts.NodeCheckFlags.CaptureArguments;
            return getTypeOfSymbol(symbol);
        }

        if (shouldMarkIdentifierAliasReferenced(node)) {
            markAliasReferenced(symbol, node);
        }

        const localOrExportSymbol = getExportSymbolOfValueSymbolIfExported(symbol);
        const targetSymbol = checkDeprecatedAliasedSymbol(localOrExportSymbol, node);
        if (isDeprecatedSymbol(targetSymbol) && isUncalledFunctionReference(node, targetSymbol) && targetSymbol.declarations) {
            addDeprecatedSuggestion(node, targetSymbol.declarations, node.escapedText as string);
        }

        let declaration = localOrExportSymbol.valueDeclaration;
        if (declaration && localOrExportSymbol.flags & ts.SymbolFlags.Class) {
            // Due to the emit for class decorators, any reference to the class from inside of the class body
            // must instead be rewritten to point to a temporary variable to avoid issues with the double-bind
            // behavior of class names in ES6.
            if (declaration.kind === ts.SyntaxKind.ClassDeclaration
                && ts.nodeIsDecorated(declaration as ts.ClassDeclaration)) {
                let container = ts.getContainingClass(node);
                while (container !== undefined) {
                    if (container === declaration && container.name !== node) {
                        getNodeLinks(declaration).flags |= ts.NodeCheckFlags.ClassWithConstructorReference;
                        getNodeLinks(node).flags |= ts.NodeCheckFlags.ConstructorReferenceInClass;
                        break;
                    }

                    container = ts.getContainingClass(container);
                }
            }
            else if (declaration.kind === ts.SyntaxKind.ClassExpression) {
                // When we emit a class expression with static members that contain a reference
                // to the constructor in the initializer, we will need to substitute that
                // binding with an alias as the class name is not in scope.
                let container = ts.getThisContainer(node, /*includeArrowFunctions*/ false);
                while (container.kind !== ts.SyntaxKind.SourceFile) {
                    if (container.parent === declaration) {
                        if (ts.isPropertyDeclaration(container) && ts.isStatic(container) || ts.isClassStaticBlockDeclaration(container)) {
                            getNodeLinks(declaration).flags |= ts.NodeCheckFlags.ClassWithConstructorReference;
                            getNodeLinks(node).flags |= ts.NodeCheckFlags.ConstructorReferenceInClass;
                        }
                        break;
                    }

                    container = ts.getThisContainer(container, /*includeArrowFunctions*/ false);
                }
            }
        }

        checkNestedBlockScopedBinding(node, symbol);

        let type = getNarrowedTypeOfSymbol(localOrExportSymbol, node);
        const assignmentKind = ts.getAssignmentTargetKind(node);

        if (assignmentKind) {
            if (!(localOrExportSymbol.flags & ts.SymbolFlags.Variable) &&
                !(ts.isInJSFile(node) && localOrExportSymbol.flags & ts.SymbolFlags.ValueModule)) {
                const assignmentError = localOrExportSymbol.flags & ts.SymbolFlags.Enum ? ts.Diagnostics.Cannot_assign_to_0_because_it_is_an_enum
                    : localOrExportSymbol.flags & ts.SymbolFlags.Class ? ts.Diagnostics.Cannot_assign_to_0_because_it_is_a_class
                    : localOrExportSymbol.flags & ts.SymbolFlags.Module ? ts.Diagnostics.Cannot_assign_to_0_because_it_is_a_namespace
                    : localOrExportSymbol.flags & ts.SymbolFlags.Function ? ts.Diagnostics.Cannot_assign_to_0_because_it_is_a_function
                    : localOrExportSymbol.flags & ts.SymbolFlags.Alias ? ts.Diagnostics.Cannot_assign_to_0_because_it_is_an_import
                    : ts.Diagnostics.Cannot_assign_to_0_because_it_is_not_a_variable;

                error(node, assignmentError, symbolToString(symbol));
                return errorType;
            }
            if (isReadonlySymbol(localOrExportSymbol)) {
                if (localOrExportSymbol.flags & ts.SymbolFlags.Variable) {
                    error(node, ts.Diagnostics.Cannot_assign_to_0_because_it_is_a_constant, symbolToString(symbol));
                }
                else {
                    error(node, ts.Diagnostics.Cannot_assign_to_0_because_it_is_a_read_only_property, symbolToString(symbol));
                }
                return errorType;
            }
        }

        const isAlias = localOrExportSymbol.flags & ts.SymbolFlags.Alias;

        // We only narrow variables and parameters occurring in a non-assignment position. For all other
        // entities we simply return the declared type.
        if (localOrExportSymbol.flags & ts.SymbolFlags.Variable) {
            if (assignmentKind === ts.AssignmentKind.Definite) {
                return type;
            }
        }
        else if (isAlias) {
            declaration = getDeclarationOfAliasSymbol(symbol);
        }
        else {
            return type;
        }

        if (!declaration) {
            return type;
        }

        type = getNarrowableTypeForReference(type, node, checkMode);

        // The declaration container is the innermost function that encloses the declaration of the variable
        // or parameter. The flow container is the innermost function starting with which we analyze the control
        // flow graph to determine the control flow based type.
        const isParameter = ts.getRootDeclaration(declaration).kind === ts.SyntaxKind.Parameter;
        const declarationContainer = getControlFlowContainer(declaration);
        let flowContainer = getControlFlowContainer(node);
        const isOuterVariable = flowContainer !== declarationContainer;
        const isSpreadDestructuringAssignmentTarget = node.parent && node.parent.parent && ts.isSpreadAssignment(node.parent) && isDestructuringAssignmentTarget(node.parent.parent);
        const isModuleExports = symbol.flags & ts.SymbolFlags.ModuleExports;
        // When the control flow originates in a function expression or arrow function and we are referencing
        // a const variable or parameter from an outer function, we extend the origin of the control flow
        // analysis to include the immediately enclosing function.
        while (flowContainer !== declarationContainer && (flowContainer.kind === ts.SyntaxKind.FunctionExpression ||
            flowContainer.kind === ts.SyntaxKind.ArrowFunction || ts.isObjectLiteralOrClassExpressionMethodOrAccessor(flowContainer)) &&
            (isConstVariable(localOrExportSymbol) && type !== autoArrayType || isParameter && !isSymbolAssigned(localOrExportSymbol))) {
            flowContainer = getControlFlowContainer(flowContainer);
        }
        // We only look for uninitialized variables in strict null checking mode, and only when we can analyze
        // the entire control flow graph from the variable's declaration (i.e. when the flow container and
        // declaration container are the same).
        const assumeInitialized = isParameter || isAlias || isOuterVariable || isSpreadDestructuringAssignmentTarget || isModuleExports || isSameScopedBindingElement(node, declaration) ||
            type !== autoType && type !== autoArrayType && (!strictNullChecks || (type.flags & (ts.TypeFlags.AnyOrUnknown | ts.TypeFlags.Void)) !== 0 ||
            isInTypeQuery(node) || node.parent.kind === ts.SyntaxKind.ExportSpecifier) ||
            node.parent.kind === ts.SyntaxKind.NonNullExpression ||
            declaration.kind === ts.SyntaxKind.VariableDeclaration && (declaration as ts.VariableDeclaration).exclamationToken ||
            declaration.flags & ts.NodeFlags.Ambient;
        const initialType = assumeInitialized ? (isParameter ? removeOptionalityFromDeclaredType(type, declaration as ts.VariableLikeDeclaration) : type) :
            type === autoType || type === autoArrayType ? undefinedType :
            getOptionalType(type);
        const flowType = getFlowTypeOfReference(node, type, initialType, flowContainer);
        // A variable is considered uninitialized when it is possible to analyze the entire control flow graph
        // from declaration to use, and when the variable's declared type doesn't include undefined but the
        // control flow based type does include undefined.
        if (!isEvolvingArrayOperationTarget(node) && (type === autoType || type === autoArrayType)) {
            if (flowType === autoType || flowType === autoArrayType) {
                if (noImplicitAny) {
                    error(ts.getNameOfDeclaration(declaration), ts.Diagnostics.Variable_0_implicitly_has_type_1_in_some_locations_where_its_type_cannot_be_determined, symbolToString(symbol), typeToString(flowType));
                    error(node, ts.Diagnostics.Variable_0_implicitly_has_an_1_type, symbolToString(symbol), typeToString(flowType));
                }
                return convertAutoToAny(flowType);
            }
        }
        else if (!assumeInitialized && !containsUndefinedType(type) && containsUndefinedType(flowType)) {
            error(node, ts.Diagnostics.Variable_0_is_used_before_being_assigned, symbolToString(symbol));
            // Return the declared type to reduce follow-on errors
            return type;
        }
        return assignmentKind ? getBaseTypeOfLiteralType(flowType) : flowType;
    }

    function isSameScopedBindingElement(node: ts.Identifier, declaration: ts.Declaration) {
        if (ts.isBindingElement(declaration)) {
            const bindingElement = ts.findAncestor(node, ts.isBindingElement);
            return bindingElement && ts.getRootDeclaration(bindingElement) === ts.getRootDeclaration(declaration);
        }
    }

    function shouldMarkIdentifierAliasReferenced(node: ts.Identifier): boolean {
        const parent = node.parent;
        if (parent) {
            // A property access expression LHS? checkPropertyAccessExpression will handle that.
            if (ts.isPropertyAccessExpression(parent) && parent.expression === node) {
                return false;
            }
            // Next two check for an identifier inside a type only export.
            if (ts.isExportSpecifier(parent) && parent.isTypeOnly) {
                return false;
            }
            const greatGrandparent = parent.parent?.parent;
            if (greatGrandparent && ts.isExportDeclaration(greatGrandparent) && greatGrandparent.isTypeOnly) {
                return false;
            }
        }
        return true;
    }

    function isInsideFunctionOrInstancePropertyInitializer(node: ts.Node, threshold: ts.Node): boolean {
        return !!ts.findAncestor(node, n => n === threshold ? "quit" : ts.isFunctionLike(n) || (
            n.parent && ts.isPropertyDeclaration(n.parent) && !ts.hasStaticModifier(n.parent) && n.parent.initializer === n
        ));
    }

    function getPartOfForStatementContainingNode(node: ts.Node, container: ts.ForStatement) {
        return ts.findAncestor(node, n => n === container ? "quit" : n === container.initializer || n === container.condition || n === container.incrementor || n === container.statement);
    }

    function getEnclosingIterationStatement(node: ts.Node): ts.Node | undefined {
        return ts.findAncestor(node, n => (!n || ts.nodeStartsNewLexicalEnvironment(n)) ? "quit" : ts.isIterationStatement(n, /*lookInLabeledStatements*/ false));
    }

    function checkNestedBlockScopedBinding(node: ts.Identifier, symbol: ts.Symbol): void {
        if (languageVersion >= ts.ScriptTarget.ES2015 ||
            (symbol.flags & (ts.SymbolFlags.BlockScopedVariable | ts.SymbolFlags.Class)) === 0 ||
            !symbol.valueDeclaration ||
            ts.isSourceFile(symbol.valueDeclaration) ||
            symbol.valueDeclaration.parent.kind === ts.SyntaxKind.CatchClause) {
            return;
        }

        // 1. walk from the use site up to the declaration and check
        // if there is anything function like between declaration and use-site (is binding/class is captured in function).
        // 2. walk from the declaration up to the boundary of lexical environment and check
        // if there is an iteration statement in between declaration and boundary (is binding/class declared inside iteration statement)

        const container = ts.getEnclosingBlockScopeContainer(symbol.valueDeclaration);
        const isCaptured = isInsideFunctionOrInstancePropertyInitializer(node, container);

        const enclosingIterationStatement = getEnclosingIterationStatement(container);
        if (enclosingIterationStatement) {
            if (isCaptured) {
                // mark iteration statement as containing block-scoped binding captured in some function
                let capturesBlockScopeBindingInLoopBody = true;
                if (ts.isForStatement(container)) {
                    const varDeclList = ts.getAncestor(symbol.valueDeclaration, ts.SyntaxKind.VariableDeclarationList);
                    if (varDeclList && varDeclList.parent === container) {
                        const part = getPartOfForStatementContainingNode(node.parent, container);
                        if (part) {
                            const links = getNodeLinks(part);
                            links.flags |= ts.NodeCheckFlags.ContainsCapturedBlockScopeBinding;

                            const capturedBindings = links.capturedBlockScopeBindings || (links.capturedBlockScopeBindings = []);
                            ts.pushIfUnique(capturedBindings, symbol);

                            if (part === container.initializer) {
                                capturesBlockScopeBindingInLoopBody = false; // Initializer is outside of loop body
                            }
                        }
                    }
                }
                if (capturesBlockScopeBindingInLoopBody) {
                    getNodeLinks(enclosingIterationStatement).flags |= ts.NodeCheckFlags.LoopWithCapturedBlockScopedBinding;
                }
            }

            // mark variables that are declared in loop initializer and reassigned inside the body of ForStatement.
            // if body of ForStatement will be converted to function then we'll need a extra machinery to propagate reassigned values back.
            if (ts.isForStatement(container)) {
                const varDeclList = ts.getAncestor(symbol.valueDeclaration, ts.SyntaxKind.VariableDeclarationList);
                if (varDeclList && varDeclList.parent === container && isAssignedInBodyOfForStatement(node, container)) {
                    getNodeLinks(symbol.valueDeclaration).flags |= ts.NodeCheckFlags.NeedsLoopOutParameter;
                }
            }

            // set 'declared inside loop' bit on the block-scoped binding
            getNodeLinks(symbol.valueDeclaration).flags |= ts.NodeCheckFlags.BlockScopedBindingInLoop;
        }

        if (isCaptured) {
            getNodeLinks(symbol.valueDeclaration).flags |= ts.NodeCheckFlags.CapturedBlockScopedBinding;
        }
    }

    function isBindingCapturedByNode(node: ts.Node, decl: ts.VariableDeclaration | ts.BindingElement) {
        const links = getNodeLinks(node);
        return !!links && ts.contains(links.capturedBlockScopeBindings, getSymbolOfNode(decl));
    }

    function isAssignedInBodyOfForStatement(node: ts.Identifier, container: ts.ForStatement): boolean {
        // skip parenthesized nodes
        let current: ts.Node = node;
        while (current.parent.kind === ts.SyntaxKind.ParenthesizedExpression) {
            current = current.parent;
        }

        // check if node is used as LHS in some assignment expression
        let isAssigned = false;
        if (ts.isAssignmentTarget(current)) {
            isAssigned = true;
        }
        else if ((current.parent.kind === ts.SyntaxKind.PrefixUnaryExpression || current.parent.kind === ts.SyntaxKind.PostfixUnaryExpression)) {
            const expr = current.parent as ts.PrefixUnaryExpression | ts.PostfixUnaryExpression;
            isAssigned = expr.operator === ts.SyntaxKind.PlusPlusToken || expr.operator === ts.SyntaxKind.MinusMinusToken;
        }

        if (!isAssigned) {
            return false;
        }

        // at this point we know that node is the target of assignment
        // now check that modification happens inside the statement part of the ForStatement
        return !!ts.findAncestor(current, n => n === container ? "quit" : n === container.statement);
    }

    function captureLexicalThis(node: ts.Node, container: ts.Node): void {
        getNodeLinks(node).flags |= ts.NodeCheckFlags.LexicalThis;
        if (container.kind === ts.SyntaxKind.PropertyDeclaration || container.kind === ts.SyntaxKind.Constructor) {
            const classNode = container.parent;
            getNodeLinks(classNode).flags |= ts.NodeCheckFlags.CaptureThis;
        }
        else {
            getNodeLinks(container).flags |= ts.NodeCheckFlags.CaptureThis;
        }
    }

    function findFirstSuperCall(node: ts.Node): ts.SuperCall | undefined {
        return ts.isSuperCall(node) ? node :
            ts.isFunctionLike(node) ? undefined :
            ts.forEachChild(node, findFirstSuperCall);
    }

    /**
     * Check if the given class-declaration extends null then return true.
     * Otherwise, return false
     * @param classDecl a class declaration to check if it extends null
     */
    function classDeclarationExtendsNull(classDecl: ts.ClassDeclaration): boolean {
        const classSymbol = getSymbolOfNode(classDecl);
        const classInstanceType = getDeclaredTypeOfSymbol(classSymbol) as ts.InterfaceType;
        const baseConstructorType = getBaseConstructorTypeOfClass(classInstanceType);

        return baseConstructorType === nullWideningType;
    }

    function checkThisBeforeSuper(node: ts.Node, container: ts.Node, diagnosticMessage: ts.DiagnosticMessage) {
        const containingClassDecl = container.parent as ts.ClassDeclaration;
        const baseTypeNode = ts.getClassExtendsHeritageElement(containingClassDecl);

        // If a containing class does not have extends clause or the class extends null
        // skip checking whether super statement is called before "this" accessing.
        if (baseTypeNode && !classDeclarationExtendsNull(containingClassDecl)) {
            if (node.flowNode && !isPostSuperFlowNode(node.flowNode, /*noCacheCheck*/ false)) {
                error(node, diagnosticMessage);
            }
        }
    }

    function checkThisInStaticClassFieldInitializerInDecoratedClass(thisExpression: ts.Node, container: ts.Node) {
        if (ts.isPropertyDeclaration(container) && ts.hasStaticModifier(container) &&
            container.initializer && ts.textRangeContainsPositionInclusive(container.initializer, thisExpression.pos) && ts.hasDecorators(container.parent)) {
                error(thisExpression, ts.Diagnostics.Cannot_use_this_in_a_static_property_initializer_of_a_decorated_class);
        }
    }

    function checkThisExpression(node: ts.Node): ts.Type {
        const isNodeInTypeQuery = isInTypeQuery(node);
        // Stop at the first arrow function so that we can
        // tell whether 'this' needs to be captured.
        let container = ts.getThisContainer(node, /* includeArrowFunctions */ true);
        let capturedByArrowFunction = false;

        if (container.kind === ts.SyntaxKind.Constructor) {
            checkThisBeforeSuper(node, container, ts.Diagnostics.super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class);
        }

        // Now skip arrow functions to get the "real" owner of 'this'.
        if (container.kind === ts.SyntaxKind.ArrowFunction) {
            container = ts.getThisContainer(container, /* includeArrowFunctions */ false);
            capturedByArrowFunction = true;
        }

        checkThisInStaticClassFieldInitializerInDecoratedClass(node, container);
        switch (container.kind) {
            case ts.SyntaxKind.ModuleDeclaration:
                error(node, ts.Diagnostics.this_cannot_be_referenced_in_a_module_or_namespace_body);
                // do not return here so in case if lexical this is captured - it will be reflected in flags on NodeLinks
                break;
            case ts.SyntaxKind.EnumDeclaration:
                error(node, ts.Diagnostics.this_cannot_be_referenced_in_current_location);
                // do not return here so in case if lexical this is captured - it will be reflected in flags on NodeLinks
                break;
            case ts.SyntaxKind.Constructor:
                if (isInConstructorArgumentInitializer(node, container)) {
                    error(node, ts.Diagnostics.this_cannot_be_referenced_in_constructor_arguments);
                    // do not return here so in case if lexical this is captured - it will be reflected in flags on NodeLinks
                }
                break;
            case ts.SyntaxKind.ComputedPropertyName:
                error(node, ts.Diagnostics.this_cannot_be_referenced_in_a_computed_property_name);
                break;
        }

        // When targeting es6, mark that we'll need to capture `this` in its lexically bound scope.
        if (!isNodeInTypeQuery && capturedByArrowFunction && languageVersion < ts.ScriptTarget.ES2015) {
            captureLexicalThis(node, container);
        }

        const type = tryGetThisTypeAt(node, /*includeGlobalThis*/ true, container);
        if (noImplicitThis) {
            const globalThisType = getTypeOfSymbol(globalThisSymbol);
            if (type === globalThisType && capturedByArrowFunction) {
                error(node, ts.Diagnostics.The_containing_arrow_function_captures_the_global_value_of_this);
            }
            else if (!type) {
                // With noImplicitThis, functions may not reference 'this' if it has type 'any'
                const diag = error(node, ts.Diagnostics.this_implicitly_has_type_any_because_it_does_not_have_a_type_annotation);
                if (!ts.isSourceFile(container)) {
                    const outsideThis = tryGetThisTypeAt(container);
                    if (outsideThis && outsideThis !== globalThisType) {
                        ts.addRelatedInfo(diag, ts.createDiagnosticForNode(container, ts.Diagnostics.An_outer_value_of_this_is_shadowed_by_this_container));
                    }
                }
            }
        }
        return type || anyType;
    }

    function tryGetThisTypeAt(node: ts.Node, includeGlobalThis = true, container = ts.getThisContainer(node, /*includeArrowFunctions*/ false)): ts.Type | undefined {
        const isInJS = ts.isInJSFile(node);
        if (ts.isFunctionLike(container) &&
            (!isInParameterInitializerBeforeContainingFunction(node) || ts.getThisParameter(container))) {
            let thisType = getThisTypeOfDeclaration(container) || isInJS && getTypeForThisExpressionFromJSDoc(container);
            // Note: a parameter initializer should refer to class-this unless function-this is explicitly annotated.
            // If this is a function in a JS file, it might be a class method.
            if (!thisType) {
                const className = getClassNameFromPrototypeMethod(container);
                if (isInJS && className) {
                    const classSymbol = checkExpression(className).symbol;
                    if (classSymbol && classSymbol.members && (classSymbol.flags & ts.SymbolFlags.Function)) {
                        thisType = (getDeclaredTypeOfSymbol(classSymbol) as ts.InterfaceType).thisType;
                    }
                }
                else if (isJSConstructor(container)) {
                    thisType = (getDeclaredTypeOfSymbol(getMergedSymbol(container.symbol)) as ts.InterfaceType).thisType;
                }
                thisType ||= getContextualThisParameterType(container);
            }

            if (thisType) {
                return getFlowTypeOfReference(node, thisType);
            }
        }

        if (ts.isClassLike(container.parent)) {
            const symbol = getSymbolOfNode(container.parent);
            const type = ts.isStatic(container) ? getTypeOfSymbol(symbol) : (getDeclaredTypeOfSymbol(symbol) as ts.InterfaceType).thisType!;
            return getFlowTypeOfReference(node, type);
        }

        if (ts.isSourceFile(container)) {
            // look up in the source file's locals or exports
            if (container.commonJsModuleIndicator) {
                const fileSymbol = getSymbolOfNode(container);
                return fileSymbol && getTypeOfSymbol(fileSymbol);
            }
            else if (container.externalModuleIndicator) {
                // TODO: Maybe issue a better error than 'object is possibly undefined'
                return undefinedType;
            }
            else if (includeGlobalThis) {
                return getTypeOfSymbol(globalThisSymbol);
            }
        }
    }

    function getExplicitThisType(node: ts.Expression) {
        const container = ts.getThisContainer(node, /*includeArrowFunctions*/ false);
        if (ts.isFunctionLike(container)) {
            const signature = getSignatureFromDeclaration(container);
            if (signature.thisParameter) {
                return getExplicitTypeOfSymbol(signature.thisParameter);
            }
        }
        if (ts.isClassLike(container.parent)) {
            const symbol = getSymbolOfNode(container.parent);
            return ts.isStatic(container) ? getTypeOfSymbol(symbol) : (getDeclaredTypeOfSymbol(symbol) as ts.InterfaceType).thisType!;
        }
    }

    function getClassNameFromPrototypeMethod(container: ts.Node) {
        // Check if it's the RHS of a x.prototype.y = function [name]() { .... }
        if (container.kind === ts.SyntaxKind.FunctionExpression &&
            ts.isBinaryExpression(container.parent) &&
            ts.getAssignmentDeclarationKind(container.parent) === ts.AssignmentDeclarationKind.PrototypeProperty) {
            // Get the 'x' of 'x.prototype.y = container'
            return ((container.parent   // x.prototype.y = container
                .left as ts.PropertyAccessExpression)       // x.prototype.y
                .expression as ts.PropertyAccessExpression) // x.prototype
                .expression;                             // x
        }
        // x.prototype = { method() { } }
        else if (container.kind === ts.SyntaxKind.MethodDeclaration &&
            container.parent.kind === ts.SyntaxKind.ObjectLiteralExpression &&
            ts.isBinaryExpression(container.parent.parent) &&
            ts.getAssignmentDeclarationKind(container.parent.parent) === ts.AssignmentDeclarationKind.Prototype) {
            return (container.parent.parent.left as ts.PropertyAccessExpression).expression;
        }
        // x.prototype = { method: function() { } }
        else if (container.kind === ts.SyntaxKind.FunctionExpression &&
            container.parent.kind === ts.SyntaxKind.PropertyAssignment &&
            container.parent.parent.kind === ts.SyntaxKind.ObjectLiteralExpression &&
            ts.isBinaryExpression(container.parent.parent.parent) &&
            ts.getAssignmentDeclarationKind(container.parent.parent.parent) === ts.AssignmentDeclarationKind.Prototype) {
            return (container.parent.parent.parent.left as ts.PropertyAccessExpression).expression;
        }
        // Object.defineProperty(x, "method", { value: function() { } });
        // Object.defineProperty(x, "method", { set: (x: () => void) => void });
        // Object.defineProperty(x, "method", { get: () => function() { }) });
        else if (container.kind === ts.SyntaxKind.FunctionExpression &&
            ts.isPropertyAssignment(container.parent) &&
            ts.isIdentifier(container.parent.name) &&
            (container.parent.name.escapedText === "value" || container.parent.name.escapedText === "get" || container.parent.name.escapedText === "set") &&
            ts.isObjectLiteralExpression(container.parent.parent) &&
            ts.isCallExpression(container.parent.parent.parent) &&
            container.parent.parent.parent.arguments[2] === container.parent.parent &&
            ts.getAssignmentDeclarationKind(container.parent.parent.parent) === ts.AssignmentDeclarationKind.ObjectDefinePrototypeProperty) {
            return (container.parent.parent.parent.arguments[0] as ts.PropertyAccessExpression).expression;
        }
        // Object.defineProperty(x, "method", { value() { } });
        // Object.defineProperty(x, "method", { set(x: () => void) {} });
        // Object.defineProperty(x, "method", { get() { return () => {} } });
        else if (ts.isMethodDeclaration(container) &&
            ts.isIdentifier(container.name) &&
            (container.name.escapedText === "value" || container.name.escapedText === "get" || container.name.escapedText === "set") &&
            ts.isObjectLiteralExpression(container.parent) &&
            ts.isCallExpression(container.parent.parent) &&
            container.parent.parent.arguments[2] === container.parent &&
            ts.getAssignmentDeclarationKind(container.parent.parent) === ts.AssignmentDeclarationKind.ObjectDefinePrototypeProperty) {
            return (container.parent.parent.arguments[0] as ts.PropertyAccessExpression).expression;
        }
    }

    function getTypeForThisExpressionFromJSDoc(node: ts.Node) {
        const jsdocType = ts.getJSDocType(node);
        if (jsdocType && jsdocType.kind === ts.SyntaxKind.JSDocFunctionType) {
            const jsDocFunctionType = jsdocType as ts.JSDocFunctionType;
            if (jsDocFunctionType.parameters.length > 0 &&
                jsDocFunctionType.parameters[0].name &&
                (jsDocFunctionType.parameters[0].name as ts.Identifier).escapedText === ts.InternalSymbolName.This) {
                return getTypeFromTypeNode(jsDocFunctionType.parameters[0].type!);
            }
        }
        const thisTag = ts.getJSDocThisTag(node);
        if (thisTag && thisTag.typeExpression) {
            return getTypeFromTypeNode(thisTag.typeExpression);
        }
    }

    function isInConstructorArgumentInitializer(node: ts.Node, constructorDecl: ts.Node): boolean {
        return !!ts.findAncestor(node, n => ts.isFunctionLikeDeclaration(n) ? "quit" : n.kind === ts.SyntaxKind.Parameter && n.parent === constructorDecl);
    }

    function checkSuperExpression(node: ts.Node): ts.Type {
        const isCallExpression = node.parent.kind === ts.SyntaxKind.CallExpression && (node.parent as ts.CallExpression).expression === node;

        const immediateContainer = ts.getSuperContainer(node, /*stopOnFunctions*/ true);
        let container = immediateContainer;
        let needToCaptureLexicalThis = false;
        let inAsyncFunction = false;

        // adjust the container reference in case if super is used inside arrow functions with arbitrarily deep nesting
        if (!isCallExpression) {
            while (container && container.kind === ts.SyntaxKind.ArrowFunction) {
                if (ts.hasSyntacticModifier(container, ts.ModifierFlags.Async)) inAsyncFunction = true;
                container = ts.getSuperContainer(container, /*stopOnFunctions*/ true);
                needToCaptureLexicalThis = languageVersion < ts.ScriptTarget.ES2015;
            }
            if (container && ts.hasSyntacticModifier(container, ts.ModifierFlags.Async)) inAsyncFunction = true;
        }

        const canUseSuperExpression = isLegalUsageOfSuperExpression(container);
        let nodeCheckFlag: ts.NodeCheckFlags = 0;

        if (!canUseSuperExpression) {
            // issue more specific error if super is used in computed property name
            // class A { foo() { return "1" }}
            // class B {
            //     [super.foo()]() {}
            // }
            const current = ts.findAncestor(node, n => n === container ? "quit" : n.kind === ts.SyntaxKind.ComputedPropertyName);
            if (current && current.kind === ts.SyntaxKind.ComputedPropertyName) {
                error(node, ts.Diagnostics.super_cannot_be_referenced_in_a_computed_property_name);
            }
            else if (isCallExpression) {
                error(node, ts.Diagnostics.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors);
            }
            else if (!container || !container.parent || !(ts.isClassLike(container.parent) || container.parent.kind === ts.SyntaxKind.ObjectLiteralExpression)) {
                error(node, ts.Diagnostics.super_can_only_be_referenced_in_members_of_derived_classes_or_object_literal_expressions);
            }
            else {
                error(node, ts.Diagnostics.super_property_access_is_permitted_only_in_a_constructor_member_function_or_member_accessor_of_a_derived_class);
            }
            return errorType;
        }

        if (!isCallExpression && immediateContainer.kind === ts.SyntaxKind.Constructor) {
            checkThisBeforeSuper(node, container, ts.Diagnostics.super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class);
        }

        if (ts.isStatic(container) || isCallExpression) {
            nodeCheckFlag = ts.NodeCheckFlags.SuperStatic;
            if (!isCallExpression &&
                languageVersion >= ts.ScriptTarget.ES2015 && languageVersion <= ts.ScriptTarget.ES2021 &&
                (ts.isPropertyDeclaration(container) || ts.isClassStaticBlockDeclaration(container))) {
                // for `super.x` or `super[x]` in a static initializer, mark all enclosing
                // block scope containers so that we can report potential collisions with
                // `Reflect`.
                ts.forEachEnclosingBlockScopeContainer(node.parent, current => {
                    if (!ts.isSourceFile(current) || ts.isExternalOrCommonJsModule(current)) {
                        getNodeLinks(current).flags |= ts.NodeCheckFlags.ContainsSuperPropertyInStaticInitializer;
                    }
                });
            }
        }
        else {
            nodeCheckFlag = ts.NodeCheckFlags.SuperInstance;
        }

        getNodeLinks(node).flags |= nodeCheckFlag;

        // Due to how we emit async functions, we need to specialize the emit for an async method that contains a `super` reference.
        // This is due to the fact that we emit the body of an async function inside of a generator function. As generator
        // functions cannot reference `super`, we emit a helper inside of the method body, but outside of the generator. This helper
        // uses an arrow function, which is permitted to reference `super`.
        //
        // There are two primary ways we can access `super` from within an async method. The first is getting the value of a property
        // or indexed access on super, either as part of a right-hand-side expression or call expression. The second is when setting the value
        // of a property or indexed access, either as part of an assignment expression or destructuring assignment.
        //
        // The simplest case is reading a value, in which case we will emit something like the following:
        //
        //  // ts
        //  ...
        //  async asyncMethod() {
        //    let x = await super.asyncMethod();
        //    return x;
        //  }
        //  ...
        //
        //  // js
        //  ...
        //  asyncMethod() {
        //      const _super = Object.create(null, {
        //        asyncMethod: { get: () => super.asyncMethod },
        //      });
        //      return __awaiter(this, arguments, Promise, function *() {
        //          let x = yield _super.asyncMethod.call(this);
        //          return x;
        //      });
        //  }
        //  ...
        //
        // The more complex case is when we wish to assign a value, especially as part of a destructuring assignment. As both cases
        // are legal in ES6, but also likely less frequent, we only emit setters if there is an assignment:
        //
        //  // ts
        //  ...
        //  async asyncMethod(ar: Promise<any[]>) {
        //      [super.a, super.b] = await ar;
        //  }
        //  ...
        //
        //  // js
        //  ...
        //  asyncMethod(ar) {
        //      const _super = Object.create(null, {
        //        a: { get: () => super.a, set: (v) => super.a = v },
        //        b: { get: () => super.b, set: (v) => super.b = v }
        //      };
        //      return __awaiter(this, arguments, Promise, function *() {
        //          [_super.a, _super.b] = yield ar;
        //      });
        //  }
        //  ...
        //
        // Creating an object that has getter and setters instead of just an accessor function is required for destructuring assignments
        // as a call expression cannot be used as the target of a destructuring assignment while a property access can.
        //
        // For element access expressions (`super[x]`), we emit a generic helper that forwards the element access in both situations.
        if (container.kind === ts.SyntaxKind.MethodDeclaration && inAsyncFunction) {
            if (ts.isSuperProperty(node.parent) && ts.isAssignmentTarget(node.parent)) {
                getNodeLinks(container).flags |= ts.NodeCheckFlags.MethodWithSuperPropertyAssignmentInAsync;
            }
            else {
                getNodeLinks(container).flags |= ts.NodeCheckFlags.MethodWithSuperPropertyAccessInAsync;
            }
        }

        if (needToCaptureLexicalThis) {
            // call expressions are allowed only in constructors so they should always capture correct 'this'
            // super property access expressions can also appear in arrow functions -
            // in this case they should also use correct lexical this
            captureLexicalThis(node.parent, container);
        }

        if (container.parent.kind === ts.SyntaxKind.ObjectLiteralExpression) {
            if (languageVersion < ts.ScriptTarget.ES2015) {
                error(node, ts.Diagnostics.super_is_only_allowed_in_members_of_object_literal_expressions_when_option_target_is_ES2015_or_higher);
                return errorType;
            }
            else {
                // for object literal assume that type of 'super' is 'any'
                return anyType;
            }
        }

        // at this point the only legal case for parent is ClassLikeDeclaration
        const classLikeDeclaration = container.parent as ts.ClassLikeDeclaration;
        if (!ts.getClassExtendsHeritageElement(classLikeDeclaration)) {
            error(node, ts.Diagnostics.super_can_only_be_referenced_in_a_derived_class);
            return errorType;
        }

        const classType = getDeclaredTypeOfSymbol(getSymbolOfNode(classLikeDeclaration)) as ts.InterfaceType;
        const baseClassType = classType && getBaseTypes(classType)[0];
        if (!baseClassType) {
            return errorType;
        }

        if (container.kind === ts.SyntaxKind.Constructor && isInConstructorArgumentInitializer(node, container)) {
            // issue custom error message for super property access in constructor arguments (to be aligned with old compiler)
            error(node, ts.Diagnostics.super_cannot_be_referenced_in_constructor_arguments);
            return errorType;
        }

        return nodeCheckFlag === ts.NodeCheckFlags.SuperStatic
            ? getBaseConstructorTypeOfClass(classType)
            : getTypeWithThisArgument(baseClassType, classType.thisType);

        function isLegalUsageOfSuperExpression(container: ts.Node): boolean {
            if (!container) {
                return false;
            }

            if (isCallExpression) {
                // TS 1.0 SPEC (April 2014): 4.8.1
                // Super calls are only permitted in constructors of derived classes
                return container.kind === ts.SyntaxKind.Constructor;
            }
            else {
                // TS 1.0 SPEC (April 2014)
                // 'super' property access is allowed
                // - In a constructor, instance member function, instance member accessor, or instance member variable initializer where this references a derived class instance
                // - In a static member function or static member accessor

                // topmost container must be something that is directly nested in the class declaration\object literal expression
                if (ts.isClassLike(container.parent) || container.parent.kind === ts.SyntaxKind.ObjectLiteralExpression) {
                    if (ts.isStatic(container)) {
                        return container.kind === ts.SyntaxKind.MethodDeclaration ||
                            container.kind === ts.SyntaxKind.MethodSignature ||
                            container.kind === ts.SyntaxKind.GetAccessor ||
                            container.kind === ts.SyntaxKind.SetAccessor ||
                            container.kind === ts.SyntaxKind.PropertyDeclaration ||
                            container.kind === ts.SyntaxKind.ClassStaticBlockDeclaration;
                    }
                    else {
                        return container.kind === ts.SyntaxKind.MethodDeclaration ||
                            container.kind === ts.SyntaxKind.MethodSignature ||
                            container.kind === ts.SyntaxKind.GetAccessor ||
                            container.kind === ts.SyntaxKind.SetAccessor ||
                            container.kind === ts.SyntaxKind.PropertyDeclaration ||
                            container.kind === ts.SyntaxKind.PropertySignature ||
                            container.kind === ts.SyntaxKind.Constructor;
                    }
                }
            }

            return false;
        }
    }

    function getContainingObjectLiteral(func: ts.SignatureDeclaration): ts.ObjectLiteralExpression | undefined {
        return (func.kind === ts.SyntaxKind.MethodDeclaration ||
            func.kind === ts.SyntaxKind.GetAccessor ||
            func.kind === ts.SyntaxKind.SetAccessor) && func.parent.kind === ts.SyntaxKind.ObjectLiteralExpression ? func.parent :
            func.kind === ts.SyntaxKind.FunctionExpression && func.parent.kind === ts.SyntaxKind.PropertyAssignment ? func.parent.parent as ts.ObjectLiteralExpression :
            undefined;
    }

    function getThisTypeArgument(type: ts.Type): ts.Type | undefined {
        return ts.getObjectFlags(type) & ts.ObjectFlags.Reference && (type as ts.TypeReference).target === globalThisType ? getTypeArguments(type as ts.TypeReference)[0] : undefined;
    }

    function getThisTypeFromContextualType(type: ts.Type): ts.Type | undefined {
        return mapType(type, t => {
            return t.flags & ts.TypeFlags.Intersection ? ts.forEach((t as ts.IntersectionType).types, getThisTypeArgument) : getThisTypeArgument(t);
        });
    }

    function getContextualThisParameterType(func: ts.SignatureDeclaration): ts.Type | undefined {
        if (func.kind === ts.SyntaxKind.ArrowFunction) {
            return undefined;
        }
        if (isContextSensitiveFunctionOrObjectLiteralMethod(func)) {
            const contextualSignature = getContextualSignature(func);
            if (contextualSignature) {
                const thisParameter = contextualSignature.thisParameter;
                if (thisParameter) {
                    return getTypeOfSymbol(thisParameter);
                }
            }
        }
        const inJs = ts.isInJSFile(func);
        if (noImplicitThis || inJs) {
            const containingLiteral = getContainingObjectLiteral(func);
            if (containingLiteral) {
                // We have an object literal method. Check if the containing object literal has a contextual type
                // that includes a ThisType<T>. If so, T is the contextual type for 'this'. We continue looking in
                // any directly enclosing object literals.
                const contextualType = getApparentTypeOfContextualType(containingLiteral, /*contextFlags*/ undefined);
                let literal = containingLiteral;
                let type = contextualType;
                while (type) {
                    const thisType = getThisTypeFromContextualType(type);
                    if (thisType) {
                        return instantiateType(thisType, getMapperFromContext(getInferenceContext(containingLiteral)));
                    }
                    if (literal.parent.kind !== ts.SyntaxKind.PropertyAssignment) {
                        break;
                    }
                    literal = literal.parent.parent as ts.ObjectLiteralExpression;
                    type = getApparentTypeOfContextualType(literal, /*contextFlags*/ undefined);
                }
                // There was no contextual ThisType<T> for the containing object literal, so the contextual type
                // for 'this' is the non-null form of the contextual type for the containing object literal or
                // the type of the object literal itself.
                return getWidenedType(contextualType ? getNonNullableType(contextualType) : checkExpressionCached(containingLiteral));
            }
            // In an assignment of the form 'obj.xxx = function(...)' or 'obj[xxx] = function(...)', the
            // contextual type for 'this' is 'obj'.
            const parent = ts.walkUpParenthesizedExpressions(func.parent);
            if (parent.kind === ts.SyntaxKind.BinaryExpression && (parent as ts.BinaryExpression).operatorToken.kind === ts.SyntaxKind.EqualsToken) {
                const target = (parent as ts.BinaryExpression).left;
                if (ts.isAccessExpression(target)) {
                    const { expression } = target;
                    // Don't contextually type `this` as `exports` in `exports.Point = function(x, y) { this.x = x; this.y = y; }`
                    if (inJs && ts.isIdentifier(expression)) {
                        const sourceFile = ts.getSourceFileOfNode(parent);
                        if (sourceFile.commonJsModuleIndicator && getResolvedSymbol(expression) === sourceFile.symbol) {
                            return undefined;
                        }
                    }

                    return getWidenedType(checkExpressionCached(expression));
                }
            }
        }
        return undefined;
    }

    // Return contextual type of parameter or undefined if no contextual type is available
    function getContextuallyTypedParameterType(parameter: ts.ParameterDeclaration): ts.Type | undefined {
        const func = parameter.parent;
        if (!isContextSensitiveFunctionOrObjectLiteralMethod(func)) {
            return undefined;
        }
        const iife = ts.getImmediatelyInvokedFunctionExpression(func);
        if (iife && iife.arguments) {
            const args = getEffectiveCallArguments(iife);
            const indexOfParameter = func.parameters.indexOf(parameter);
            if (parameter.dotDotDotToken) {
                return getSpreadArgumentType(args, indexOfParameter, args.length, anyType, /*context*/ undefined, CheckMode.Normal);
            }
            const links = getNodeLinks(iife);
            const cached = links.resolvedSignature;
            links.resolvedSignature = anySignature;
            const type = indexOfParameter < args.length ?
                getWidenedLiteralType(checkExpression(args[indexOfParameter])) :
                parameter.initializer ? undefined : undefinedWideningType;
            links.resolvedSignature = cached;
            return type;
        }
        const contextualSignature = getContextualSignature(func);
        if (contextualSignature) {
            const index = func.parameters.indexOf(parameter) - (ts.getThisParameter(func) ? 1 : 0);
            return parameter.dotDotDotToken && ts.lastOrUndefined(func.parameters) === parameter ?
                getRestTypeAtPosition(contextualSignature, index) :
                tryGetTypeAtPosition(contextualSignature, index);
        }
    }

    function getContextualTypeForVariableLikeDeclaration(declaration: ts.VariableLikeDeclaration, contextFlags: ts.ContextFlags | undefined): ts.Type | undefined {
        const typeNode = ts.getEffectiveTypeAnnotationNode(declaration);
        if (typeNode) {
            return getTypeFromTypeNode(typeNode);
        }
        switch (declaration.kind) {
            case ts.SyntaxKind.Parameter:
                return getContextuallyTypedParameterType(declaration);
            case ts.SyntaxKind.BindingElement:
                return getContextualTypeForBindingElement(declaration, contextFlags);
            case ts.SyntaxKind.PropertyDeclaration:
                if (ts.isStatic(declaration)) {
                    return getContextualTypeForStaticPropertyDeclaration(declaration, contextFlags);
                }
            // By default, do nothing and return undefined - only the above cases have context implied by a parent
        }
    }

    function getContextualTypeForBindingElement(declaration: ts.BindingElement, contextFlags: ts.ContextFlags | undefined): ts.Type | undefined {
        const parent = declaration.parent.parent;
        const name = declaration.propertyName || declaration.name;
        const parentType = getContextualTypeForVariableLikeDeclaration(parent, contextFlags) ||
            parent.kind !== ts.SyntaxKind.BindingElement && parent.initializer && checkDeclarationInitializer(parent, declaration.dotDotDotToken ? CheckMode.RestBindingElement : CheckMode.Normal);
        if (!parentType || ts.isBindingPattern(name) || ts.isComputedNonLiteralName(name)) return undefined;
        if (parent.name.kind === ts.SyntaxKind.ArrayBindingPattern) {
            const index = ts.indexOfNode(declaration.parent.elements, declaration);
            if (index < 0) return undefined;
            return getContextualTypeForElementExpression(parentType, index);
        }
        const nameType = getLiteralTypeFromPropertyName(name);
        if (isTypeUsableAsPropertyName(nameType)) {
            const text = getPropertyNameFromType(nameType);
            return getTypeOfPropertyOfType(parentType, text);
        }
    }

    function getContextualTypeForStaticPropertyDeclaration(declaration: ts.PropertyDeclaration, contextFlags: ts.ContextFlags | undefined): ts.Type | undefined {
        const parentType = ts.isExpression(declaration.parent) && getContextualType(declaration.parent, contextFlags);
        if (!parentType) return undefined;
        return getTypeOfPropertyOfContextualType(parentType, getSymbolOfNode(declaration).escapedName);
    }

    // In a variable, parameter or property declaration with a type annotation,
    //   the contextual type of an initializer expression is the type of the variable, parameter or property.
    // Otherwise, in a parameter declaration of a contextually typed function expression,
    //   the contextual type of an initializer expression is the contextual type of the parameter.
    // Otherwise, in a variable or parameter declaration with a binding pattern name,
    //   the contextual type of an initializer expression is the type implied by the binding pattern.
    // Otherwise, in a binding pattern inside a variable or parameter declaration,
    //   the contextual type of an initializer expression is the type annotation of the containing declaration, if present.
    function getContextualTypeForInitializerExpression(node: ts.Expression, contextFlags: ts.ContextFlags | undefined): ts.Type | undefined {
        const declaration = node.parent as ts.VariableLikeDeclaration;
        if (ts.hasInitializer(declaration) && node === declaration.initializer) {
            const result = getContextualTypeForVariableLikeDeclaration(declaration, contextFlags);
            if (result) {
                return result;
            }
            if (!(contextFlags! & ts.ContextFlags.SkipBindingPatterns) && ts.isBindingPattern(declaration.name) && declaration.name.elements.length > 0) {
                return getTypeFromBindingPattern(declaration.name, /*includePatternInType*/ true, /*reportErrors*/ false);
            }
        }
        return undefined;
    }

    function getContextualTypeForReturnExpression(node: ts.Expression, contextFlags: ts.ContextFlags | undefined): ts.Type | undefined {
        const func = ts.getContainingFunction(node);
        if (func) {
            let contextualReturnType = getContextualReturnType(func, contextFlags);
            if (contextualReturnType) {
                const functionFlags = ts.getFunctionFlags(func);
                if (functionFlags & ts.FunctionFlags.Generator) { // Generator or AsyncGenerator function
                    const isAsyncGenerator = (functionFlags & ts.FunctionFlags.Async) !== 0;
                    if (contextualReturnType.flags & ts.TypeFlags.Union) {
                        contextualReturnType = filterType(contextualReturnType, type => !!getIterationTypeOfGeneratorFunctionReturnType(IterationTypeKind.Return, type, isAsyncGenerator));
                    }
                    const iterationReturnType = getIterationTypeOfGeneratorFunctionReturnType(IterationTypeKind.Return, contextualReturnType, (functionFlags & ts.FunctionFlags.Async) !== 0);
                    if (!iterationReturnType) {
                        return undefined;
                    }
                    contextualReturnType = iterationReturnType;
                    // falls through to unwrap Promise for AsyncGenerators
                }

                if (functionFlags & ts.FunctionFlags.Async) { // Async function or AsyncGenerator function
                    // Get the awaited type without the `Awaited<T>` alias
                    const contextualAwaitedType = mapType(contextualReturnType, getAwaitedTypeNoAlias);
                    return contextualAwaitedType && getUnionType([contextualAwaitedType, createPromiseLikeType(contextualAwaitedType)]);
                }

                return contextualReturnType; // Regular function or Generator function
            }
        }
        return undefined;
    }

    function getContextualTypeForAwaitOperand(node: ts.AwaitExpression, contextFlags: ts.ContextFlags | undefined): ts.Type | undefined {
        const contextualType = getContextualType(node, contextFlags);
        if (contextualType) {
            const contextualAwaitedType = getAwaitedTypeNoAlias(contextualType);
            return contextualAwaitedType && getUnionType([contextualAwaitedType, createPromiseLikeType(contextualAwaitedType)]);
        }
        return undefined;
    }

    function getContextualTypeForYieldOperand(node: ts.YieldExpression, contextFlags: ts.ContextFlags | undefined): ts.Type | undefined {
        const func = ts.getContainingFunction(node);
        if (func) {
            const functionFlags = ts.getFunctionFlags(func);
            let contextualReturnType = getContextualReturnType(func, contextFlags);
            if (contextualReturnType) {
                const isAsyncGenerator = (functionFlags & ts.FunctionFlags.Async) !== 0;
                if (!node.asteriskToken && contextualReturnType.flags & ts.TypeFlags.Union) {
                    contextualReturnType = filterType(contextualReturnType, type => !!getIterationTypeOfGeneratorFunctionReturnType(IterationTypeKind.Return, type, isAsyncGenerator));
                }
                return node.asteriskToken
                    ? contextualReturnType
                    : getIterationTypeOfGeneratorFunctionReturnType(IterationTypeKind.Yield, contextualReturnType, isAsyncGenerator);
            }
        }

        return undefined;
    }

    function isInParameterInitializerBeforeContainingFunction(node: ts.Node) {
        let inBindingInitializer = false;
        while (node.parent && !ts.isFunctionLike(node.parent)) {
            if (ts.isParameter(node.parent) && (inBindingInitializer || node.parent.initializer === node)) {
                return true;
            }
            if (ts.isBindingElement(node.parent) && node.parent.initializer === node) {
                inBindingInitializer = true;
            }

            node = node.parent;
        }

        return false;
    }

    function getContextualIterationType(kind: IterationTypeKind, functionDecl: ts.SignatureDeclaration): ts.Type | undefined {
        const isAsync = !!(ts.getFunctionFlags(functionDecl) & ts.FunctionFlags.Async);
        const contextualReturnType = getContextualReturnType(functionDecl, /*contextFlags*/ undefined);
        if (contextualReturnType) {
            return getIterationTypeOfGeneratorFunctionReturnType(kind, contextualReturnType, isAsync)
                || undefined;
        }

        return undefined;
    }

    function getContextualReturnType(functionDecl: ts.SignatureDeclaration, contextFlags: ts.ContextFlags | undefined): ts.Type | undefined {
        // If the containing function has a return type annotation, is a constructor, or is a get accessor whose
        // corresponding set accessor has a type annotation, return statements in the function are contextually typed
        const returnType = getReturnTypeFromAnnotation(functionDecl);
        if (returnType) {
            return returnType;
        }
        // Otherwise, if the containing function is contextually typed by a function type with exactly one call signature
        // and that call signature is non-generic, return statements are contextually typed by the return type of the signature
        const signature = getContextualSignatureForFunctionLikeDeclaration(functionDecl as ts.FunctionExpression);
        if (signature && !isResolvingReturnTypeOfSignature(signature)) {
            return getReturnTypeOfSignature(signature);
        }
        const iife = ts.getImmediatelyInvokedFunctionExpression(functionDecl);
        if (iife) {
            return getContextualType(iife, contextFlags);
        }
        return undefined;
    }

    // In a typed function call, an argument or substitution expression is contextually typed by the type of the corresponding parameter.
    function getContextualTypeForArgument(callTarget: ts.CallLikeExpression, arg: ts.Expression): ts.Type | undefined {
        const args = getEffectiveCallArguments(callTarget);
        const argIndex = args.indexOf(arg); // -1 for e.g. the expression of a CallExpression, or the tag of a TaggedTemplateExpression
        return argIndex === -1 ? undefined : getContextualTypeForArgumentAtIndex(callTarget, argIndex);
    }

    function getContextualTypeForArgumentAtIndex(callTarget: ts.CallLikeExpression, argIndex: number): ts.Type {
        if (ts.isImportCall(callTarget)) {
            return argIndex === 0 ? stringType :
                argIndex === 1 ? getGlobalImportCallOptionsType(/*reportErrors*/ false) :
                anyType;
        }

        // If we're already in the process of resolving the given signature, don't resolve again as
        // that could cause infinite recursion. Instead, return anySignature.
        const signature = getNodeLinks(callTarget).resolvedSignature === resolvingSignature ? resolvingSignature : getResolvedSignature(callTarget);

        if (ts.isJsxOpeningLikeElement(callTarget) && argIndex === 0) {
            return getEffectiveFirstArgumentForJsxSignature(signature, callTarget);
        }
        const restIndex = signature.parameters.length - 1;
        return signatureHasRestParameter(signature) && argIndex >= restIndex ?
            getIndexedAccessType(getTypeOfSymbol(signature.parameters[restIndex]), getNumberLiteralType(argIndex - restIndex), ts.AccessFlags.Contextual) :
            getTypeAtPosition(signature, argIndex);
    }

    function getContextualTypeForSubstitutionExpression(template: ts.TemplateExpression, substitutionExpression: ts.Expression) {
        if (template.parent.kind === ts.SyntaxKind.TaggedTemplateExpression) {
            return getContextualTypeForArgument(template.parent as ts.TaggedTemplateExpression, substitutionExpression);
        }

        return undefined;
    }

    function getContextualTypeForBinaryOperand(node: ts.Expression, contextFlags: ts.ContextFlags | undefined): ts.Type | undefined {
        const binaryExpression = node.parent as ts.BinaryExpression;
        const { left, operatorToken, right } = binaryExpression;
        switch (operatorToken.kind) {
            case ts.SyntaxKind.EqualsToken:
            case ts.SyntaxKind.AmpersandAmpersandEqualsToken:
            case ts.SyntaxKind.BarBarEqualsToken:
            case ts.SyntaxKind.QuestionQuestionEqualsToken:
                return node === right ? getContextualTypeForAssignmentDeclaration(binaryExpression) : undefined;
            case ts.SyntaxKind.BarBarToken:
            case ts.SyntaxKind.QuestionQuestionToken:
                // When an || expression has a contextual type, the operands are contextually typed by that type, except
                // when that type originates in a binding pattern, the right operand is contextually typed by the type of
                // the left operand. When an || expression has no contextual type, the right operand is contextually typed
                // by the type of the left operand, except for the special case of Javascript declarations of the form
                // `namespace.prop = namespace.prop || {}`.
                const type = getContextualType(binaryExpression, contextFlags);
                return node === right && (type && type.pattern || !type && !ts.isDefaultedExpandoInitializer(binaryExpression)) ?
                    getTypeOfExpression(left) : type;
            case ts.SyntaxKind.AmpersandAmpersandToken:
            case ts.SyntaxKind.CommaToken:
                return node === right ? getContextualType(binaryExpression, contextFlags) : undefined;
            default:
                return undefined;
        }
    }

    /**
     * Try to find a resolved symbol for an expression without also resolving its type, as
     * getSymbolAtLocation would (as that could be reentrant into contextual typing)
     */
     function getSymbolForExpression(e: ts.Expression) {
        if (e.symbol) {
            return e.symbol;
        }
        if (ts.isIdentifier(e)) {
            return getResolvedSymbol(e);
        }
        if (ts.isPropertyAccessExpression(e)) {
            const lhsType = getTypeOfExpression(e.expression);
            return ts.isPrivateIdentifier(e.name) ? tryGetPrivateIdentifierPropertyOfType(lhsType, e.name) : getPropertyOfType(lhsType, e.name.escapedText);
        }
        if (ts.isElementAccessExpression(e)) {
            const propType = checkExpressionCached(e.argumentExpression);
            if (!isTypeUsableAsPropertyName(propType)) {
                return undefined;
            }
            const lhsType = getTypeOfExpression(e.expression);
            return getPropertyOfType(lhsType, getPropertyNameFromType(propType));
        }
        return undefined;

        function tryGetPrivateIdentifierPropertyOfType(type: ts.Type, id: ts.PrivateIdentifier) {
            const lexicallyScopedSymbol = lookupSymbolForPrivateIdentifierDeclaration(id.escapedText, id);
            return lexicallyScopedSymbol && getPrivateIdentifierPropertyOfType(type, lexicallyScopedSymbol);
        }
    }

    // In an assignment expression, the right operand is contextually typed by the type of the left operand.
    // Don't do this for assignment declarations unless there is a type tag on the assignment, to avoid circularity from checking the right operand.
    function getContextualTypeForAssignmentDeclaration(binaryExpression: ts.BinaryExpression): ts.Type | undefined {
        const kind = ts.getAssignmentDeclarationKind(binaryExpression);
        switch (kind) {
            case ts.AssignmentDeclarationKind.None:
            case ts.AssignmentDeclarationKind.ThisProperty:
                const lhsSymbol = getSymbolForExpression(binaryExpression.left);
                const decl = lhsSymbol && lhsSymbol.valueDeclaration;
                // Unannotated, uninitialized property declarations have a type implied by their usage in the constructor.
                // We avoid calling back into `getTypeOfExpression` and reentering contextual typing to avoid a bogus circularity error in that case.
                if (decl && (ts.isPropertyDeclaration(decl) || ts.isPropertySignature(decl))) {
                    const overallAnnotation = ts.getEffectiveTypeAnnotationNode(decl);
                    return (overallAnnotation && instantiateType(getTypeFromTypeNode(overallAnnotation), getSymbolLinks(lhsSymbol).mapper)) ||
                        (ts.isPropertyDeclaration(decl) ? decl.initializer && getTypeOfExpression(binaryExpression.left) : undefined);
                }
                if (kind === ts.AssignmentDeclarationKind.None) {
                    return getTypeOfExpression(binaryExpression.left);
                }
                return getContextualTypeForThisPropertyAssignment(binaryExpression);
            case ts.AssignmentDeclarationKind.Property:
                if (isPossiblyAliasedThisProperty(binaryExpression, kind)) {
                    return getContextualTypeForThisPropertyAssignment(binaryExpression);
                }
                // If `binaryExpression.left` was assigned a symbol, then this is a new declaration; otherwise it is an assignment to an existing declaration.
                // See `bindStaticPropertyAssignment` in `binder.ts`.
                else if (!binaryExpression.left.symbol) {
                    return getTypeOfExpression(binaryExpression.left);
                }
                else {
                    const decl = binaryExpression.left.symbol.valueDeclaration;
                    if (!decl) {
                        return undefined;
                    }
                    const lhs = ts.cast(binaryExpression.left, ts.isAccessExpression);
                    const overallAnnotation = ts.getEffectiveTypeAnnotationNode(decl);
                    if (overallAnnotation) {
                        return getTypeFromTypeNode(overallAnnotation);
                    }
                    else if (ts.isIdentifier(lhs.expression)) {
                        const id = lhs.expression;
                        const parentSymbol = resolveName(id, id.escapedText, ts.SymbolFlags.Value, undefined, id.escapedText, /*isUse*/ true);
                        if (parentSymbol) {
                            const annotated = parentSymbol.valueDeclaration && ts.getEffectiveTypeAnnotationNode(parentSymbol.valueDeclaration);
                            if (annotated) {
                                const nameStr = ts.getElementOrPropertyAccessName(lhs);
                                if (nameStr !== undefined) {
                                    return getTypeOfPropertyOfContextualType(getTypeFromTypeNode(annotated), nameStr);
                                }
                            }
                            return undefined;
                        }
                    }
                    return ts.isInJSFile(decl) ? undefined : getTypeOfExpression(binaryExpression.left);
                }
            case ts.AssignmentDeclarationKind.ExportsProperty:
            case ts.AssignmentDeclarationKind.Prototype:
            case ts.AssignmentDeclarationKind.PrototypeProperty:
            case ts.AssignmentDeclarationKind.ModuleExports:
                let valueDeclaration: ts.Declaration | undefined;
                if (kind !== ts.AssignmentDeclarationKind.ModuleExports) {
                    valueDeclaration = binaryExpression.left.symbol?.valueDeclaration;
                }
                valueDeclaration ||= binaryExpression.symbol?.valueDeclaration;
                const annotated = valueDeclaration && ts.getEffectiveTypeAnnotationNode(valueDeclaration);
                return annotated ? getTypeFromTypeNode(annotated) : undefined;
            case ts.AssignmentDeclarationKind.ObjectDefinePropertyValue:
            case ts.AssignmentDeclarationKind.ObjectDefinePropertyExports:
            case ts.AssignmentDeclarationKind.ObjectDefinePrototypeProperty:
                return ts.Debug.fail("Does not apply");
            default:
                return ts.Debug.assertNever(kind);
        }
    }

    function isPossiblyAliasedThisProperty(declaration: ts.BinaryExpression, kind = ts.getAssignmentDeclarationKind(declaration)) {
        if (kind === ts.AssignmentDeclarationKind.ThisProperty) {
            return true;
        }
        if (!ts.isInJSFile(declaration) || kind !== ts.AssignmentDeclarationKind.Property || !ts.isIdentifier((declaration.left as ts.AccessExpression).expression)) {
            return false;
        }
        const name = ((declaration.left as ts.AccessExpression).expression as ts.Identifier).escapedText;
        const symbol = resolveName(declaration.left, name, ts.SymbolFlags.Value, undefined, undefined, /*isUse*/ true, /*excludeGlobals*/ true);
        return ts.isThisInitializedDeclaration(symbol?.valueDeclaration);
    }

    function getContextualTypeForThisPropertyAssignment(binaryExpression: ts.BinaryExpression): ts.Type | undefined {
        if (!binaryExpression.symbol) return getTypeOfExpression(binaryExpression.left);
        if (binaryExpression.symbol.valueDeclaration) {
            const annotated = ts.getEffectiveTypeAnnotationNode(binaryExpression.symbol.valueDeclaration);
            if (annotated) {
                const type = getTypeFromTypeNode(annotated);
                if (type) {
                    return type;
                }
            }
        }
        const thisAccess = ts.cast(binaryExpression.left, ts.isAccessExpression);
        if (!ts.isObjectLiteralMethod(ts.getThisContainer(thisAccess.expression, /*includeArrowFunctions*/ false))) {
            return undefined;
        }
        const thisType = checkThisExpression(thisAccess.expression);
        const nameStr = ts.getElementOrPropertyAccessName(thisAccess);
        return nameStr !== undefined && getTypeOfPropertyOfContextualType(thisType, nameStr) || undefined;

    }

    function isCircularMappedProperty(symbol: ts.Symbol) {
        return !!(ts.getCheckFlags(symbol) & ts.CheckFlags.Mapped && !(symbol as ts.MappedSymbol).type && findResolutionCycleStartIndex(symbol, TypeSystemPropertyName.Type) >= 0);
    }

    function getTypeOfPropertyOfContextualType(type: ts.Type, name: ts.__String, nameType?: ts.Type) {
        return mapType(type, t => {
            if (isGenericMappedType(t) && !t.declaration.nameType) {
                const constraint = getConstraintTypeFromMappedType(t);
                const constraintOfConstraint = getBaseConstraintOfType(constraint) || constraint;
                const propertyNameType = nameType || getStringLiteralType(ts.unescapeLeadingUnderscores(name));
                if (isTypeAssignableTo(propertyNameType, constraintOfConstraint)) {
                    return substituteIndexedMappedType(t, propertyNameType);
                }
            }
            else if (t.flags & ts.TypeFlags.StructuredType) {
                const prop = getPropertyOfType(t, name);
                if (prop) {
                    return isCircularMappedProperty(prop) ? undefined : getTypeOfSymbol(prop);
                }
                if (isTupleType(t)) {
                    const restType = getRestTypeOfTupleType(t);
                    if (restType && ts.isNumericLiteralName(name) && +name >= 0) {
                        return restType;
                    }
                }
                return findApplicableIndexInfo(getIndexInfosOfStructuredType(t), nameType || getStringLiteralType(ts.unescapeLeadingUnderscores(name)))?.type;
            }
            return undefined;
        }, /*noReductions*/ true);
    }

    // In an object literal contextually typed by a type T, the contextual type of a property assignment is the type of
    // the matching property in T, if one exists. Otherwise, it is the type of the numeric index signature in T, if one
    // exists. Otherwise, it is the type of the string index signature in T, if one exists.
    function getContextualTypeForObjectLiteralMethod(node: ts.MethodDeclaration, contextFlags: ts.ContextFlags | undefined): ts.Type | undefined {
        ts.Debug.assert(ts.isObjectLiteralMethod(node));
        if (node.flags & ts.NodeFlags.InWithStatement) {
            // We cannot answer semantic questions within a with block, do not proceed any further
            return undefined;
        }
        return getContextualTypeForObjectLiteralElement(node, contextFlags);
    }

    function getContextualTypeForObjectLiteralElement(element: ts.ObjectLiteralElementLike, contextFlags: ts.ContextFlags | undefined) {
        const objectLiteral = element.parent as ts.ObjectLiteralExpression;
        const propertyAssignmentType = ts.isPropertyAssignment(element) && getContextualTypeForVariableLikeDeclaration(element, contextFlags);
        if (propertyAssignmentType) {
            return propertyAssignmentType;
        }
        const type = getApparentTypeOfContextualType(objectLiteral, contextFlags);
        if (type) {
            if (hasBindableName(element)) {
                // For a (non-symbol) computed property, there is no reason to look up the name
                // in the type. It will just be "__computed", which does not appear in any
                // SymbolTable.
                const symbol = getSymbolOfNode(element);
                return getTypeOfPropertyOfContextualType(type, symbol.escapedName, getSymbolLinks(symbol).nameType);
            }
            if (element.name) {
                const nameType = getLiteralTypeFromPropertyName(element.name);
                // We avoid calling getApplicableIndexInfo here because it performs potentially expensive intersection reduction.
                return mapType(type, t => findApplicableIndexInfo(getIndexInfosOfStructuredType(t), nameType)?.type, /*noReductions*/ true);
            }
        }
        return undefined;
    }

    // In an array literal contextually typed by a type T, the contextual type of an element expression at index N is
    // the type of the property with the numeric name N in T, if one exists. Otherwise, if T has a numeric index signature,
    // it is the type of the numeric index signature in T. Otherwise, in ES6 and higher, the contextual type is the iterated
    // type of T.
    function getContextualTypeForElementExpression(arrayContextualType: ts.Type | undefined, index: number): ts.Type | undefined {
        return arrayContextualType && (
            getTypeOfPropertyOfContextualType(arrayContextualType, "" + index as ts.__String)
            || mapType(
                arrayContextualType,
                t => getIteratedTypeOrElementType(IterationUse.Element, t, undefinedType, /*errorNode*/ undefined, /*checkAssignability*/ false),
                /*noReductions*/ true));
    }

    // In a contextually typed conditional expression, the true/false expressions are contextually typed by the same type.
    function getContextualTypeForConditionalOperand(node: ts.Expression, contextFlags: ts.ContextFlags | undefined): ts.Type | undefined {
        const conditional = node.parent as ts.ConditionalExpression;
        return node === conditional.whenTrue || node === conditional.whenFalse ? getContextualType(conditional, contextFlags) : undefined;
    }

    function getContextualTypeForChildJsxExpression(node: ts.JsxElement, child: ts.JsxChild, contextFlags: ts.ContextFlags | undefined) {
        const attributesType = getApparentTypeOfContextualType(node.openingElement.tagName, contextFlags);
        // JSX expression is in children of JSX Element, we will look for an "children" attribute (we get the name from JSX.ElementAttributesProperty)
        const jsxChildrenPropertyName = getJsxElementChildrenPropertyName(getJsxNamespaceAt(node));
        if (!(attributesType && !isTypeAny(attributesType) && jsxChildrenPropertyName && jsxChildrenPropertyName !== "")) {
            return undefined;
        }
        const realChildren = ts.getSemanticJsxChildren(node.children);
        const childIndex = realChildren.indexOf(child);
        const childFieldType = getTypeOfPropertyOfContextualType(attributesType, jsxChildrenPropertyName);
        return childFieldType && (realChildren.length === 1 ? childFieldType : mapType(childFieldType, t => {
            if (isArrayLikeType(t)) {
                return getIndexedAccessType(t, getNumberLiteralType(childIndex));
            }
            else {
                return t;
            }
        }, /*noReductions*/ true));
    }

    function getContextualTypeForJsxExpression(node: ts.JsxExpression, contextFlags: ts.ContextFlags | undefined): ts.Type | undefined {
        const exprParent = node.parent;
        return ts.isJsxAttributeLike(exprParent)
            ? getContextualType(node, contextFlags)
            : ts.isJsxElement(exprParent)
                ? getContextualTypeForChildJsxExpression(exprParent, node, contextFlags)
                : undefined;
    }

    function getContextualTypeForJsxAttribute(attribute: ts.JsxAttribute | ts.JsxSpreadAttribute, contextFlags: ts.ContextFlags | undefined): ts.Type | undefined {
        // When we trying to resolve JsxOpeningLikeElement as a stateless function element, we will already give its attributes a contextual type
        // which is a type of the parameter of the signature we are trying out.
        // If there is no contextual type (e.g. we are trying to resolve stateful component), get attributes type from resolving element's tagName
        if (ts.isJsxAttribute(attribute)) {
            const attributesType = getApparentTypeOfContextualType(attribute.parent, contextFlags);
            if (!attributesType || isTypeAny(attributesType)) {
                return undefined;
            }
            return getTypeOfPropertyOfContextualType(attributesType, attribute.name.escapedText);
        }
        else {
            return getContextualType(attribute.parent, contextFlags);
        }
    }

    // Return true if the given expression is possibly a discriminant value. We limit the kinds of
    // expressions we check to those that don't depend on their contextual type in order not to cause
    // recursive (and possibly infinite) invocations of getContextualType.
    function isPossiblyDiscriminantValue(node: ts.Expression): boolean {
        switch (node.kind) {
            case ts.SyntaxKind.StringLiteral:
            case ts.SyntaxKind.NumericLiteral:
            case ts.SyntaxKind.BigIntLiteral:
            case ts.SyntaxKind.NoSubstitutionTemplateLiteral:
            case ts.SyntaxKind.TrueKeyword:
            case ts.SyntaxKind.FalseKeyword:
            case ts.SyntaxKind.NullKeyword:
            case ts.SyntaxKind.Identifier:
            case ts.SyntaxKind.UndefinedKeyword:
                return true;
            case ts.SyntaxKind.PropertyAccessExpression:
            case ts.SyntaxKind.ParenthesizedExpression:
                return isPossiblyDiscriminantValue((node as ts.PropertyAccessExpression | ts.ParenthesizedExpression).expression);
            case ts.SyntaxKind.JsxExpression:
                return !(node as ts.JsxExpression).expression || isPossiblyDiscriminantValue((node as ts.JsxExpression).expression!);
        }
        return false;
    }

    function discriminateContextualTypeByObjectMembers(node: ts.ObjectLiteralExpression, contextualType: ts.UnionType) {
        return getMatchingUnionConstituentForObjectLiteral(contextualType, node) || discriminateTypeByDiscriminableItems(contextualType,
            ts.concatenate(
                ts.map(
                    ts.filter(node.properties, p => !!p.symbol && p.kind === ts.SyntaxKind.PropertyAssignment && isPossiblyDiscriminantValue(p.initializer) && isDiscriminantProperty(contextualType, p.symbol.escapedName)),
                    prop => ([() => getContextFreeTypeOfExpression((prop as ts.PropertyAssignment).initializer), prop.symbol.escapedName] as [() => ts.Type, ts.__String])
                ),
                ts.map(
                    ts.filter(getPropertiesOfType(contextualType), s => !!(s.flags & ts.SymbolFlags.Optional) && !!node?.symbol?.members && !node.symbol.members.has(s.escapedName) && isDiscriminantProperty(contextualType, s.escapedName)),
                    s => [() => undefinedType, s.escapedName] as [() => ts.Type, ts.__String]
                )
            ),
            isTypeAssignableTo,
            contextualType
        );
    }

    function discriminateContextualTypeByJSXAttributes(node: ts.JsxAttributes, contextualType: ts.UnionType) {
        return discriminateTypeByDiscriminableItems(contextualType,
            ts.concatenate(
                ts.map(
                    ts.filter(node.properties, p => !!p.symbol && p.kind === ts.SyntaxKind.JsxAttribute && isDiscriminantProperty(contextualType, p.symbol.escapedName) && (!p.initializer || isPossiblyDiscriminantValue(p.initializer))),
                    prop => ([!(prop as ts.JsxAttribute).initializer ? (() => trueType) : (() => getContextFreeTypeOfExpression((prop as ts.JsxAttribute).initializer!)), prop.symbol.escapedName] as [() => ts.Type, ts.__String])
                ),
                ts.map(
                    ts.filter(getPropertiesOfType(contextualType), s => !!(s.flags & ts.SymbolFlags.Optional) && !!node?.symbol?.members && !node.symbol.members.has(s.escapedName) && isDiscriminantProperty(contextualType, s.escapedName)),
                    s => [() => undefinedType, s.escapedName] as [() => ts.Type, ts.__String]
                )
            ),
            isTypeAssignableTo,
            contextualType
        );
    }

    // Return the contextual type for a given expression node. During overload resolution, a contextual type may temporarily
    // be "pushed" onto a node using the contextualType property.
    function getApparentTypeOfContextualType(node: ts.Expression | ts.MethodDeclaration, contextFlags: ts.ContextFlags | undefined): ts.Type | undefined {
        const contextualType = ts.isObjectLiteralMethod(node) ?
            getContextualTypeForObjectLiteralMethod(node, contextFlags) :
            getContextualType(node, contextFlags);
        const instantiatedType = instantiateContextualType(contextualType, node, contextFlags);
        if (instantiatedType && !(contextFlags && contextFlags & ts.ContextFlags.NoConstraints && instantiatedType.flags & ts.TypeFlags.TypeVariable)) {
            const apparentType = mapType(instantiatedType, getApparentType, /*noReductions*/ true);
            return apparentType.flags & ts.TypeFlags.Union && ts.isObjectLiteralExpression(node) ? discriminateContextualTypeByObjectMembers(node, apparentType as ts.UnionType) :
                apparentType.flags & ts.TypeFlags.Union && ts.isJsxAttributes(node) ? discriminateContextualTypeByJSXAttributes(node, apparentType as ts.UnionType) :
                apparentType;
        }
    }

    // If the given contextual type contains instantiable types and if a mapper representing
    // return type inferences is available, instantiate those types using that mapper.
    function instantiateContextualType(contextualType: ts.Type | undefined, node: ts.Node, contextFlags: ts.ContextFlags | undefined): ts.Type | undefined {
        if (contextualType && maybeTypeOfKind(contextualType, ts.TypeFlags.Instantiable)) {
            const inferenceContext = getInferenceContext(node);
            // If no inferences have been made, and none of the type parameters for which we are inferring
            // specify default types, nothing is gained from instantiating as type parameters would just be
            // replaced with their constraints similar to the apparent type.
            if (inferenceContext && contextFlags! & ts.ContextFlags.Signature && ts.some(inferenceContext.inferences, hasInferenceCandidatesOrDefault)) {
                // For contextual signatures we incorporate all inferences made so far, e.g. from return
                // types as well as arguments to the left in a function call.
                return instantiateInstantiableTypes(contextualType, inferenceContext.nonFixingMapper);
            }
            if (inferenceContext?.returnMapper) {
                // For other purposes (e.g. determining whether to produce literal types) we only
                // incorporate inferences made from the return type in a function call. We remove
                // the 'boolean' type from the contextual type such that contextually typed boolean
                // literals actually end up widening to 'boolean' (see #48363).
                const type = instantiateInstantiableTypes(contextualType, inferenceContext.returnMapper);
                return type.flags & ts.TypeFlags.Union && containsType((type as ts.UnionType).types, regularFalseType) && containsType((type as ts.UnionType).types, regularTrueType) ?
                    filterType(type, t => t !== regularFalseType && t !== regularTrueType) :
                    type;
            }
        }
        return contextualType;
    }

    // This function is similar to instantiateType, except that (a) it only instantiates types that
    // are classified as instantiable (i.e. it doesn't instantiate object types), and (b) it performs
    // no reductions on instantiated union types.
    function instantiateInstantiableTypes(type: ts.Type, mapper: ts.TypeMapper): ts.Type {
        if (type.flags & ts.TypeFlags.Instantiable) {
            return instantiateType(type, mapper);
        }
        if (type.flags & ts.TypeFlags.Union) {
            return getUnionType(ts.map((type as ts.UnionType).types, t => instantiateInstantiableTypes(t, mapper)), ts.UnionReduction.None);
        }
        if (type.flags & ts.TypeFlags.Intersection) {
            return getIntersectionType(ts.map((type as ts.IntersectionType).types, t => instantiateInstantiableTypes(t, mapper)));
        }
        return type;
    }

    /**
     * Whoa! Do you really want to use this function?
     *
     * Unless you're trying to get the *non-apparent* type for a
     * value-literal type or you're authoring relevant portions of this algorithm,
     * you probably meant to use 'getApparentTypeOfContextualType'.
     * Otherwise this may not be very useful.
     *
     * In cases where you *are* working on this function, you should understand
     * when it is appropriate to use 'getContextualType' and 'getApparentTypeOfContextualType'.
     *
     *   - Use 'getContextualType' when you are simply going to propagate the result to the expression.
     *   - Use 'getApparentTypeOfContextualType' when you're going to need the members of the type.
     *
     * @param node the expression whose contextual type will be returned.
     * @returns the contextual type of an expression.
     */
    function getContextualType(node: ts.Expression, contextFlags: ts.ContextFlags | undefined): ts.Type | undefined {
        if (node.flags & ts.NodeFlags.InWithStatement) {
            // We cannot answer semantic questions within a with block, do not proceed any further
            return undefined;
        }
        if (node.contextualType) {
            return node.contextualType;
        }
        const { parent } = node;
        switch (parent.kind) {
            case ts.SyntaxKind.VariableDeclaration:
            case ts.SyntaxKind.Parameter:
            case ts.SyntaxKind.PropertyDeclaration:
            case ts.SyntaxKind.PropertySignature:
            case ts.SyntaxKind.BindingElement:
                return getContextualTypeForInitializerExpression(node, contextFlags);
            case ts.SyntaxKind.ArrowFunction:
            case ts.SyntaxKind.ReturnStatement:
                return getContextualTypeForReturnExpression(node, contextFlags);
            case ts.SyntaxKind.YieldExpression:
                return getContextualTypeForYieldOperand(parent as ts.YieldExpression, contextFlags);
            case ts.SyntaxKind.AwaitExpression:
                return getContextualTypeForAwaitOperand(parent as ts.AwaitExpression, contextFlags);
            case ts.SyntaxKind.CallExpression:
            case ts.SyntaxKind.NewExpression:
                return getContextualTypeForArgument(parent as ts.CallExpression | ts.NewExpression, node);
            case ts.SyntaxKind.TypeAssertionExpression:
            case ts.SyntaxKind.AsExpression:
                return ts.isConstTypeReference((parent as ts.AssertionExpression).type) ? tryFindWhenConstTypeReference(parent as ts.AssertionExpression) : getTypeFromTypeNode((parent as ts.AssertionExpression).type);
            case ts.SyntaxKind.BinaryExpression:
                return getContextualTypeForBinaryOperand(node, contextFlags);
            case ts.SyntaxKind.PropertyAssignment:
            case ts.SyntaxKind.ShorthandPropertyAssignment:
                return getContextualTypeForObjectLiteralElement(parent as ts.PropertyAssignment | ts.ShorthandPropertyAssignment, contextFlags);
            case ts.SyntaxKind.SpreadAssignment:
                return getContextualType(parent.parent as ts.ObjectLiteralExpression, contextFlags);
            case ts.SyntaxKind.ArrayLiteralExpression: {
                const arrayLiteral = parent as ts.ArrayLiteralExpression;
                const type = getApparentTypeOfContextualType(arrayLiteral, contextFlags);
                return getContextualTypeForElementExpression(type, ts.indexOfNode(arrayLiteral.elements, node));
            }
            case ts.SyntaxKind.ConditionalExpression:
                return getContextualTypeForConditionalOperand(node, contextFlags);
            case ts.SyntaxKind.TemplateSpan:
                ts.Debug.assert(parent.parent.kind === ts.SyntaxKind.TemplateExpression);
                return getContextualTypeForSubstitutionExpression(parent.parent as ts.TemplateExpression, node);
            case ts.SyntaxKind.ParenthesizedExpression: {
                // Like in `checkParenthesizedExpression`, an `/** @type {xyz} */` comment before a parenthesized expression acts as a type cast.
                const tag = ts.isInJSFile(parent) ? ts.getJSDocTypeTag(parent) : undefined;
                return !tag ? getContextualType(parent as ts.ParenthesizedExpression, contextFlags) :
                    ts.isJSDocTypeTag(tag) && ts.isConstTypeReference(tag.typeExpression.type) ? tryFindWhenConstTypeReference(parent as ts.ParenthesizedExpression) :
                    getTypeFromTypeNode(tag.typeExpression.type);
            }
            case ts.SyntaxKind.NonNullExpression:
                return getContextualType(parent as ts.NonNullExpression, contextFlags);
            case ts.SyntaxKind.SatisfiesExpression:
                return getTypeFromTypeNode((parent as ts.SatisfiesExpression).type);
            case ts.SyntaxKind.ExportAssignment:
                return tryGetTypeFromEffectiveTypeNode(parent as ts.ExportAssignment);
            case ts.SyntaxKind.JsxExpression:
                return getContextualTypeForJsxExpression(parent as ts.JsxExpression, contextFlags);
            case ts.SyntaxKind.JsxAttribute:
            case ts.SyntaxKind.JsxSpreadAttribute:
                return getContextualTypeForJsxAttribute(parent as ts.JsxAttribute | ts.JsxSpreadAttribute, contextFlags);
            case ts.SyntaxKind.JsxOpeningElement:
            case ts.SyntaxKind.JsxSelfClosingElement:
                return getContextualJsxElementAttributesType(parent as ts.JsxOpeningLikeElement, contextFlags);
        }
        return undefined;

        function tryFindWhenConstTypeReference(node: ts.Expression) {
            return getContextualType(node, contextFlags);
        }
    }

    function getInferenceContext(node: ts.Node) {
        const ancestor = ts.findAncestor(node, n => !!n.inferenceContext);
        return ancestor && ancestor.inferenceContext!;
    }

    function getContextualJsxElementAttributesType(node: ts.JsxOpeningLikeElement, contextFlags: ts.ContextFlags | undefined) {
        if (ts.isJsxOpeningElement(node) && node.parent.contextualType && contextFlags !== ts.ContextFlags.Completions) {
            // Contextually applied type is moved from attributes up to the outer jsx attributes so when walking up from the children they get hit
            // _However_ to hit them from the _attributes_ we must look for them here; otherwise we'll used the declared type
            // (as below) instead!
            return node.parent.contextualType;
        }
        return getContextualTypeForArgumentAtIndex(node, 0);
    }

    function getEffectiveFirstArgumentForJsxSignature(signature: ts.Signature, node: ts.JsxOpeningLikeElement) {
        return getJsxReferenceKind(node) !== ts.JsxReferenceKind.Component
            ? getJsxPropsTypeFromCallSignature(signature, node)
            : getJsxPropsTypeFromClassType(signature, node);
    }

    function getJsxPropsTypeFromCallSignature(sig: ts.Signature, context: ts.JsxOpeningLikeElement) {
        let propsType = getTypeOfFirstParameterOfSignatureWithFallback(sig, unknownType);
        propsType = getJsxManagedAttributesFromLocatedAttributes(context, getJsxNamespaceAt(context), propsType);
        const intrinsicAttribs = getJsxType(JsxNames.IntrinsicAttributes, context);
        if (!isErrorType(intrinsicAttribs)) {
            propsType = intersectTypes(intrinsicAttribs, propsType);
        }
        return propsType;
    }

    function getJsxPropsTypeForSignatureFromMember(sig: ts.Signature, forcedLookupLocation: ts.__String) {
        if (sig.compositeSignatures) {
            // JSX Elements using the legacy `props`-field based lookup (eg, react class components) need to treat the `props` member as an input
            // instead of an output position when resolving the signature. We need to go back to the input signatures of the composite signature,
            // get the type of `props` on each return type individually, and then _intersect them_, rather than union them (as would normally occur
            // for a union signature). It's an unfortunate quirk of looking in the output of the signature for the type we want to use for the input.
            // The default behavior of `getTypeOfFirstParameterOfSignatureWithFallback` when no `props` member name is defined is much more sane.
            const results: ts.Type[] = [];
            for (const signature of sig.compositeSignatures) {
                const instance = getReturnTypeOfSignature(signature);
                if (isTypeAny(instance)) {
                    return instance;
                }
                const propType = getTypeOfPropertyOfType(instance, forcedLookupLocation);
                if (!propType) {
                    return;
                }
                results.push(propType);
            }
            return getIntersectionType(results); // Same result for both union and intersection signatures
        }
        const instanceType = getReturnTypeOfSignature(sig);
        return isTypeAny(instanceType) ? instanceType : getTypeOfPropertyOfType(instanceType, forcedLookupLocation);
    }

    function getStaticTypeOfReferencedJsxConstructor(context: ts.JsxOpeningLikeElement) {
        if (isJsxIntrinsicIdentifier(context.tagName)) {
            const result = getIntrinsicAttributesTypeFromJsxOpeningLikeElement(context);
            const fakeSignature = createSignatureForJSXIntrinsic(context, result);
            return getOrCreateTypeFromSignature(fakeSignature);
        }
        const tagType = checkExpressionCached(context.tagName);
        if (tagType.flags & ts.TypeFlags.StringLiteral) {
            const result = getIntrinsicAttributesTypeFromStringLiteralType(tagType as ts.StringLiteralType, context);
            if (!result) {
                return errorType;
            }
            const fakeSignature = createSignatureForJSXIntrinsic(context, result);
            return getOrCreateTypeFromSignature(fakeSignature);
        }
        return tagType;
    }

    function getJsxManagedAttributesFromLocatedAttributes(context: ts.JsxOpeningLikeElement, ns: ts.Symbol, attributesType: ts.Type) {
        const managedSym = getJsxLibraryManagedAttributes(ns);
        if (managedSym) {
            const declaredManagedType = getDeclaredTypeOfSymbol(managedSym); // fetches interface type, or initializes symbol links type parmaeters
            const ctorType = getStaticTypeOfReferencedJsxConstructor(context);
            if (managedSym.flags & ts.SymbolFlags.TypeAlias) {
                const params = getSymbolLinks(managedSym).typeParameters;
                if (ts.length(params) >= 2) {
                    const args = fillMissingTypeArguments([ctorType, attributesType], params, 2, ts.isInJSFile(context));
                    return getTypeAliasInstantiation(managedSym, args);
                }
            }
            if (ts.length((declaredManagedType as ts.GenericType).typeParameters) >= 2) {
                const args = fillMissingTypeArguments([ctorType, attributesType], (declaredManagedType as ts.GenericType).typeParameters, 2, ts.isInJSFile(context));
                return createTypeReference((declaredManagedType as ts.GenericType), args);
            }
        }
        return attributesType;
    }

    function getJsxPropsTypeFromClassType(sig: ts.Signature, context: ts.JsxOpeningLikeElement) {
        const ns = getJsxNamespaceAt(context);
        const forcedLookupLocation = getJsxElementPropertiesName(ns);
        let attributesType = forcedLookupLocation === undefined
            // If there is no type ElementAttributesProperty, return the type of the first parameter of the signature, which should be the props type
            ? getTypeOfFirstParameterOfSignatureWithFallback(sig, unknownType)
            : forcedLookupLocation === ""
                // If there is no e.g. 'props' member in ElementAttributesProperty, use the element class type instead
                ? getReturnTypeOfSignature(sig)
                // Otherwise get the type of the property on the signature return type
                : getJsxPropsTypeForSignatureFromMember(sig, forcedLookupLocation);

        if (!attributesType) {
            // There is no property named 'props' on this instance type
            if (!!forcedLookupLocation && !!ts.length(context.attributes.properties)) {
                error(context, ts.Diagnostics.JSX_element_class_does_not_support_attributes_because_it_does_not_have_a_0_property, ts.unescapeLeadingUnderscores(forcedLookupLocation));
            }
            return unknownType;
        }

        attributesType = getJsxManagedAttributesFromLocatedAttributes(context, ns, attributesType);

        if (isTypeAny(attributesType)) {
            // Props is of type 'any' or unknown
            return attributesType;
        }
        else {
            // Normal case -- add in IntrinsicClassElements<T> and IntrinsicElements
            let apparentAttributesType = attributesType;
            const intrinsicClassAttribs = getJsxType(JsxNames.IntrinsicClassAttributes, context);
            if (!isErrorType(intrinsicClassAttribs)) {
                const typeParams = getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(intrinsicClassAttribs.symbol);
                const hostClassType = getReturnTypeOfSignature(sig);
                let libraryManagedAttributeType: ts.Type;
                if (typeParams) {
                    // apply JSX.IntrinsicClassElements<hostClassType, ...>
                    const inferredArgs = fillMissingTypeArguments([hostClassType], typeParams, getMinTypeArgumentCount(typeParams), ts.isInJSFile(context));
                    libraryManagedAttributeType = instantiateType(intrinsicClassAttribs, createTypeMapper(typeParams, inferredArgs));
                }
                // or JSX.IntrinsicClassElements has no generics.
                else libraryManagedAttributeType = intrinsicClassAttribs;
                apparentAttributesType = intersectTypes(libraryManagedAttributeType, apparentAttributesType);
            }

            const intrinsicAttribs = getJsxType(JsxNames.IntrinsicAttributes, context);
            if (!isErrorType(intrinsicAttribs)) {
                apparentAttributesType = intersectTypes(intrinsicAttribs, apparentAttributesType);
            }

            return apparentAttributesType;
        }
    }

    function getIntersectedSignatures(signatures: readonly ts.Signature[]) {
        return ts.getStrictOptionValue(compilerOptions, "noImplicitAny")
            ? ts.reduceLeft(
                signatures,
                (left, right) =>
                    left === right || !left ? left
                    : compareTypeParametersIdentical(left.typeParameters, right.typeParameters) ? combineSignaturesOfIntersectionMembers(left, right)
                    : undefined)
            : undefined;
    }

    function combineIntersectionThisParam(left: ts.Symbol | undefined, right: ts.Symbol | undefined, mapper: ts.TypeMapper | undefined): ts.Symbol | undefined {
        if (!left || !right) {
            return left || right;
        }
        // A signature `this` type might be a read or a write position... It's very possible that it should be invariant
        // and we should refuse to merge signatures if there are `this` types and they do not match. However, so as to be
        // pessimistic when contextual typing, for now, we'll union the `this` types.
        const thisType = getUnionType([getTypeOfSymbol(left), instantiateType(getTypeOfSymbol(right), mapper)]);
        return createSymbolWithType(left, thisType);
    }

    function combineIntersectionParameters(left: ts.Signature, right: ts.Signature, mapper: ts.TypeMapper | undefined) {
        const leftCount = getParameterCount(left);
        const rightCount = getParameterCount(right);
        const longest = leftCount >= rightCount ? left : right;
        const shorter = longest === left ? right : left;
        const longestCount = longest === left ? leftCount : rightCount;
        const eitherHasEffectiveRest = (hasEffectiveRestParameter(left) || hasEffectiveRestParameter(right));
        const needsExtraRestElement = eitherHasEffectiveRest && !hasEffectiveRestParameter(longest);
        const params = new Array<ts.Symbol>(longestCount + (needsExtraRestElement ? 1 : 0));
        for (let i = 0; i < longestCount; i++) {
            let longestParamType = tryGetTypeAtPosition(longest, i)!;
            if (longest === right) {
                longestParamType = instantiateType(longestParamType, mapper);
            }
            let shorterParamType = tryGetTypeAtPosition(shorter, i) || unknownType;
            if (shorter === right) {
                shorterParamType = instantiateType(shorterParamType, mapper);
            }
            const unionParamType = getUnionType([longestParamType, shorterParamType]);
            const isRestParam = eitherHasEffectiveRest && !needsExtraRestElement && i === (longestCount - 1);
            const isOptional = i >= getMinArgumentCount(longest) && i >= getMinArgumentCount(shorter);
            const leftName = i >= leftCount ? undefined : getParameterNameAtPosition(left, i);
            const rightName = i >= rightCount ? undefined : getParameterNameAtPosition(right, i);

            const paramName = leftName === rightName ? leftName :
                !leftName ? rightName :
                !rightName ? leftName :
                undefined;
            const paramSymbol = createSymbol(
                ts.SymbolFlags.FunctionScopedVariable | (isOptional && !isRestParam ? ts.SymbolFlags.Optional : 0),
                paramName || `arg${i}` as ts.__String
            );
            paramSymbol.type = isRestParam ? createArrayType(unionParamType) : unionParamType;
            params[i] = paramSymbol;
        }
        if (needsExtraRestElement) {
            const restParamSymbol = createSymbol(ts.SymbolFlags.FunctionScopedVariable, "args" as ts.__String);
            restParamSymbol.type = createArrayType(getTypeAtPosition(shorter, longestCount));
            if (shorter === right) {
                restParamSymbol.type = instantiateType(restParamSymbol.type, mapper);
            }
            params[longestCount] = restParamSymbol;
        }
        return params;
    }

    function combineSignaturesOfIntersectionMembers(left: ts.Signature, right: ts.Signature): ts.Signature {
        const typeParams = left.typeParameters || right.typeParameters;
        let paramMapper: ts.TypeMapper | undefined;
        if (left.typeParameters && right.typeParameters) {
            paramMapper = createTypeMapper(right.typeParameters, left.typeParameters);
            // We just use the type parameter defaults from the first signature
        }
        const declaration = left.declaration;
        const params = combineIntersectionParameters(left, right, paramMapper);
        const thisParam = combineIntersectionThisParam(left.thisParameter, right.thisParameter, paramMapper);
        const minArgCount = Math.max(left.minArgumentCount, right.minArgumentCount);
        const result = createSignature(
            declaration,
            typeParams,
            thisParam,
            params,
            /*resolvedReturnType*/ undefined,
            /*resolvedTypePredicate*/ undefined,
            minArgCount,
            (left.flags | right.flags) & ts.SignatureFlags.PropagatingFlags
        );
        result.compositeKind = ts.TypeFlags.Intersection;
        result.compositeSignatures = ts.concatenate(left.compositeKind === ts.TypeFlags.Intersection && left.compositeSignatures || [left], [right]);
        if (paramMapper) {
            result.mapper = left.compositeKind === ts.TypeFlags.Intersection && left.mapper && left.compositeSignatures ? combineTypeMappers(left.mapper, paramMapper) : paramMapper;
        }
        return result;
    }

    // If the given type is an object or union type with a single signature, and if that signature has at
    // least as many parameters as the given function, return the signature. Otherwise return undefined.
    function getContextualCallSignature(type: ts.Type, node: ts.SignatureDeclaration): ts.Signature | undefined {
        const signatures = getSignaturesOfType(type, ts.SignatureKind.Call);
        const applicableByArity = ts.filter(signatures, s => !isAritySmaller(s, node));
        return applicableByArity.length === 1 ? applicableByArity[0] : getIntersectedSignatures(applicableByArity);
    }

    /** If the contextual signature has fewer parameters than the function expression, do not use it */
    function isAritySmaller(signature: ts.Signature, target: ts.SignatureDeclaration) {
        let targetParameterCount = 0;
        for (; targetParameterCount < target.parameters.length; targetParameterCount++) {
            const param = target.parameters[targetParameterCount];
            if (param.initializer || param.questionToken || param.dotDotDotToken || isJSDocOptionalParameter(param)) {
                break;
            }
        }
        if (target.parameters.length && ts.parameterIsThisKeyword(target.parameters[0])) {
            targetParameterCount--;
        }
        return !hasEffectiveRestParameter(signature) && getParameterCount(signature) < targetParameterCount;
    }

    function getContextualSignatureForFunctionLikeDeclaration(node: ts.FunctionLikeDeclaration): ts.Signature | undefined {
        // Only function expressions, arrow functions, and object literal methods are contextually typed.
        return ts.isFunctionExpressionOrArrowFunction(node) || ts.isObjectLiteralMethod(node)
            ? getContextualSignature(node as ts.FunctionExpression)
            : undefined;
    }

    // Return the contextual signature for a given expression node. A contextual type provides a
    // contextual signature if it has a single call signature and if that call signature is non-generic.
    // If the contextual type is a union type, get the signature from each type possible and if they are
    // all identical ignoring their return type, the result is same signature but with return type as
    // union type of return types from these signatures
    function getContextualSignature(node: ts.FunctionExpression | ts.ArrowFunction | ts.MethodDeclaration): ts.Signature | undefined {
        ts.Debug.assert(node.kind !== ts.SyntaxKind.MethodDeclaration || ts.isObjectLiteralMethod(node));
        const typeTagSignature = getSignatureOfTypeTag(node);
        if (typeTagSignature) {
            return typeTagSignature;
        }
        const type = getApparentTypeOfContextualType(node, ts.ContextFlags.Signature);
        if (!type) {
            return undefined;
        }
        if (!(type.flags & ts.TypeFlags.Union)) {
            return getContextualCallSignature(type, node);
        }
        let signatureList: ts.Signature[] | undefined;
        const types = (type as ts.UnionType).types;
        for (const current of types) {
            const signature = getContextualCallSignature(current, node);
            if (signature) {
                if (!signatureList) {
                    // This signature will contribute to contextual union signature
                    signatureList = [signature];
                }
                else if (!compareSignaturesIdentical(signatureList[0], signature, /*partialMatch*/ false, /*ignoreThisTypes*/ true, /*ignoreReturnTypes*/ true, compareTypesIdentical)) {
                    // Signatures aren't identical, do not use
                    return undefined;
                }
                else {
                    // Use this signature for contextual union signature
                    signatureList.push(signature);
                }
            }
        }
        // Result is union of signatures collected (return type is union of return types of this signature set)
        if (signatureList) {
            return signatureList.length === 1 ? signatureList[0] : createUnionSignature(signatureList[0], signatureList);
        }
    }

    function checkSpreadExpression(node: ts.SpreadElement, checkMode?: CheckMode): ts.Type {
        if (languageVersion < ts.ScriptTarget.ES2015) {
            checkExternalEmitHelpers(node, compilerOptions.downlevelIteration ? ts.ExternalEmitHelpers.SpreadIncludes : ts.ExternalEmitHelpers.SpreadArray);
        }

        const arrayOrIterableType = checkExpression(node.expression, checkMode);
        return checkIteratedTypeOrElementType(IterationUse.Spread, arrayOrIterableType, undefinedType, node.expression);
    }

    function checkSyntheticExpression(node: ts.SyntheticExpression): ts.Type {
        return node.isSpread ? getIndexedAccessType(node.type, numberType) : node.type;
    }

    function hasDefaultValue(node: ts.BindingElement | ts.Expression): boolean {
        return (node.kind === ts.SyntaxKind.BindingElement && !!(node as ts.BindingElement).initializer) ||
            (node.kind === ts.SyntaxKind.BinaryExpression && (node as ts.BinaryExpression).operatorToken.kind === ts.SyntaxKind.EqualsToken);
    }

    function checkArrayLiteral(node: ts.ArrayLiteralExpression, checkMode: CheckMode | undefined, forceTuple: boolean | undefined): ts.Type {
        const elements = node.elements;
        const elementCount = elements.length;
        const elementTypes: ts.Type[] = [];
        const elementFlags: ts.ElementFlags[] = [];
        const contextualType = getApparentTypeOfContextualType(node, /*contextFlags*/ undefined);
        const inDestructuringPattern = ts.isAssignmentTarget(node);
        const inConstContext = isConstContext(node);
        let hasOmittedExpression = false;
        for (let i = 0; i < elementCount; i++) {
            const e = elements[i];
            if (e.kind === ts.SyntaxKind.SpreadElement) {
                if (languageVersion < ts.ScriptTarget.ES2015) {
                    checkExternalEmitHelpers(e, compilerOptions.downlevelIteration ? ts.ExternalEmitHelpers.SpreadIncludes : ts.ExternalEmitHelpers.SpreadArray);
                }
                const spreadType = checkExpression((e as ts.SpreadElement).expression, checkMode, forceTuple);
                if (isArrayLikeType(spreadType)) {
                    elementTypes.push(spreadType);
                    elementFlags.push(ts.ElementFlags.Variadic);
                }
                else if (inDestructuringPattern) {
                    // Given the following situation:
                    //    var c: {};
                    //    [...c] = ["", 0];
                    //
                    // c is represented in the tree as a spread element in an array literal.
                    // But c really functions as a rest element, and its purpose is to provide
                    // a contextual type for the right hand side of the assignment. Therefore,
                    // instead of calling checkExpression on "...c", which will give an error
                    // if c is not iterable/array-like, we need to act as if we are trying to
                    // get the contextual element type from it. So we do something similar to
                    // getContextualTypeForElementExpression, which will crucially not error
                    // if there is no index type / iterated type.
                    const restElementType = getIndexTypeOfType(spreadType, numberType) ||
                        getIteratedTypeOrElementType(IterationUse.Destructuring, spreadType, undefinedType, /*errorNode*/ undefined, /*checkAssignability*/ false) ||
                        unknownType;
                    elementTypes.push(restElementType);
                    elementFlags.push(ts.ElementFlags.Rest);
                }
                else {
                    elementTypes.push(checkIteratedTypeOrElementType(IterationUse.Spread, spreadType, undefinedType, (e as ts.SpreadElement).expression));
                    elementFlags.push(ts.ElementFlags.Rest);
                }
            }
            else if (exactOptionalPropertyTypes && e.kind === ts.SyntaxKind.OmittedExpression) {
                hasOmittedExpression = true;
                elementTypes.push(missingType);
                elementFlags.push(ts.ElementFlags.Optional);
            }
            else {
                const elementContextualType = getContextualTypeForElementExpression(contextualType, elementTypes.length);
                const type = checkExpressionForMutableLocation(e, checkMode, elementContextualType, forceTuple);
                elementTypes.push(addOptionality(type, /*isProperty*/ true, hasOmittedExpression));
                elementFlags.push(hasOmittedExpression ? ts.ElementFlags.Optional : ts.ElementFlags.Required);
                if (contextualType && someType(contextualType, isTupleLikeType) && checkMode && checkMode & CheckMode.Inferential && !(checkMode & CheckMode.SkipContextSensitive) && isContextSensitive(e)) {
                    const inferenceContext = getInferenceContext(node);
                    ts.Debug.assert(inferenceContext);  // In CheckMode.Inferential we should always have an inference context
                    addIntraExpressionInferenceSite(inferenceContext, e, type);
                }
            }
        }
        if (inDestructuringPattern) {
            return createTupleType(elementTypes, elementFlags);
        }
        if (forceTuple || inConstContext || contextualType && someType(contextualType, isTupleLikeType)) {
            return createArrayLiteralType(createTupleType(elementTypes, elementFlags, /*readonly*/ inConstContext));
        }
        return createArrayLiteralType(createArrayType(elementTypes.length ?
            getUnionType(ts.sameMap(elementTypes, (t, i) => elementFlags[i] & ts.ElementFlags.Variadic ? getIndexedAccessTypeOrUndefined(t, numberType) || anyType : t), ts.UnionReduction.Subtype) :
            strictNullChecks ? implicitNeverType : undefinedWideningType, inConstContext));
    }

    function createArrayLiteralType(type: ts.Type) {
        if (!(ts.getObjectFlags(type) & ts.ObjectFlags.Reference)) {
            return type;
        }
        let literalType = (type as ts.TypeReference).literalType;
        if (!literalType) {
            literalType = (type as ts.TypeReference).literalType = cloneTypeReference(type as ts.TypeReference);
            literalType.objectFlags |= ts.ObjectFlags.ArrayLiteral | ts.ObjectFlags.ContainsObjectOrArrayLiteral;
        }
        return literalType;
    }

    function isNumericName(name: ts.DeclarationName): boolean {
        switch (name.kind) {
            case ts.SyntaxKind.ComputedPropertyName:
                return isNumericComputedName(name);
            case ts.SyntaxKind.Identifier:
                return ts.isNumericLiteralName(name.escapedText);
            case ts.SyntaxKind.NumericLiteral:
            case ts.SyntaxKind.StringLiteral:
                return ts.isNumericLiteralName(name.text);
            default:
                return false;
        }
    }

    function isNumericComputedName(name: ts.ComputedPropertyName): boolean {
        // It seems odd to consider an expression of type Any to result in a numeric name,
        // but this behavior is consistent with checkIndexedAccess
        return isTypeAssignableToKind(checkComputedPropertyName(name), ts.TypeFlags.NumberLike);
    }

    function checkComputedPropertyName(node: ts.ComputedPropertyName): ts.Type {
        const links = getNodeLinks(node.expression);
        if (!links.resolvedType) {
            if ((ts.isTypeLiteralNode(node.parent.parent) || ts.isClassLike(node.parent.parent) || ts.isInterfaceDeclaration(node.parent.parent))
                && ts.isBinaryExpression(node.expression) && node.expression.operatorToken.kind === ts.SyntaxKind.InKeyword
                && node.parent.kind !== ts.SyntaxKind.GetAccessor && node.parent.kind !== ts.SyntaxKind.SetAccessor) {
                return links.resolvedType = errorType;
            }
            links.resolvedType = checkExpression(node.expression);
            // The computed property name of a non-static class field within a loop must be stored in a block-scoped binding.
            // (It needs to be bound at class evaluation time.)
            if (ts.isPropertyDeclaration(node.parent) && !ts.hasStaticModifier(node.parent) && ts.isClassExpression(node.parent.parent)) {
                const container = ts.getEnclosingBlockScopeContainer(node.parent.parent);
                const enclosingIterationStatement = getEnclosingIterationStatement(container);
                if (enclosingIterationStatement) {
                    // The computed field name will use a block scoped binding which can be unique for each iteration of the loop.
                    getNodeLinks(enclosingIterationStatement).flags |= ts.NodeCheckFlags.LoopWithCapturedBlockScopedBinding;
                    // The generated variable which stores the computed field name must be block-scoped.
                    getNodeLinks(node).flags |= ts.NodeCheckFlags.BlockScopedBindingInLoop;
                    // The generated variable which stores the class must be block-scoped.
                    getNodeLinks(node.parent.parent).flags |= ts.NodeCheckFlags.BlockScopedBindingInLoop;
                }
            }
            // This will allow types number, string, symbol or any. It will also allow enums, the unknown
            // type, and any union of these types (like string | number).
            if (links.resolvedType.flags & ts.TypeFlags.Nullable ||
                !isTypeAssignableToKind(links.resolvedType, ts.TypeFlags.StringLike | ts.TypeFlags.NumberLike | ts.TypeFlags.ESSymbolLike) &&
                !isTypeAssignableTo(links.resolvedType, stringNumberSymbolType)) {
                error(node, ts.Diagnostics.A_computed_property_name_must_be_of_type_string_number_symbol_or_any);
            }
        }

        return links.resolvedType;
    }

    function isSymbolWithNumericName(symbol: ts.Symbol) {
        const firstDecl = symbol.declarations?.[0];
        return ts.isNumericLiteralName(symbol.escapedName) || (firstDecl && ts.isNamedDeclaration(firstDecl) && isNumericName(firstDecl.name));
    }

    function isSymbolWithSymbolName(symbol: ts.Symbol) {
        const firstDecl = symbol.declarations?.[0];
        return ts.isKnownSymbol(symbol) || (firstDecl && ts.isNamedDeclaration(firstDecl) && ts.isComputedPropertyName(firstDecl.name) &&
            isTypeAssignableToKind(checkComputedPropertyName(firstDecl.name), ts.TypeFlags.ESSymbol));
    }

    function getObjectLiteralIndexInfo(node: ts.ObjectLiteralExpression, offset: number, properties: ts.Symbol[], keyType: ts.Type): ts.IndexInfo {
        const propTypes: ts.Type[] = [];
        for (let i = offset; i < properties.length; i++) {
            const prop = properties[i];
            if (keyType === stringType && !isSymbolWithSymbolName(prop) ||
                keyType === numberType && isSymbolWithNumericName(prop) ||
                keyType === esSymbolType && isSymbolWithSymbolName(prop)) {
                propTypes.push(getTypeOfSymbol(properties[i]));
            }
        }
        const unionType = propTypes.length ? getUnionType(propTypes, ts.UnionReduction.Subtype) : undefinedType;
        return createIndexInfo(keyType, unionType, isConstContext(node));
    }

    function getImmediateAliasedSymbol(symbol: ts.Symbol): ts.Symbol | undefined {
        ts.Debug.assert((symbol.flags & ts.SymbolFlags.Alias) !== 0, "Should only get Alias here.");
        const links = getSymbolLinks(symbol);
        if (!links.immediateTarget) {
            const node = getDeclarationOfAliasSymbol(symbol);
            if (!node) return ts.Debug.fail();
            links.immediateTarget = getTargetOfAliasDeclaration(node, /*dontRecursivelyResolve*/ true);
        }

        return links.immediateTarget;
    }

    function checkObjectLiteral(node: ts.ObjectLiteralExpression, checkMode?: CheckMode): ts.Type {
        const inDestructuringPattern = ts.isAssignmentTarget(node);
        // Grammar checking
        checkGrammarObjectLiteralExpression(node, inDestructuringPattern);

        const allPropertiesTable = strictNullChecks ? ts.createSymbolTable() : undefined;
        let propertiesTable = ts.createSymbolTable();
        let propertiesArray: ts.Symbol[] = [];
        let spread: ts.Type = emptyObjectType;

        const contextualType = getApparentTypeOfContextualType(node, /*contextFlags*/ undefined);
        const contextualTypeHasPattern = contextualType && contextualType.pattern &&
            (contextualType.pattern.kind === ts.SyntaxKind.ObjectBindingPattern || contextualType.pattern.kind === ts.SyntaxKind.ObjectLiteralExpression);
        const inConstContext = isConstContext(node);
        const checkFlags = inConstContext ? ts.CheckFlags.Readonly : 0;
        const isInJavascript = ts.isInJSFile(node) && !ts.isInJsonFile(node);
        const enumTag = ts.getJSDocEnumTag(node);
        const isJSObjectLiteral = !contextualType && isInJavascript && !enumTag;
        let objectFlags: ts.ObjectFlags = freshObjectLiteralFlag;
        let patternWithComputedProperties = false;
        let hasComputedStringProperty = false;
        let hasComputedNumberProperty = false;
        let hasComputedSymbolProperty = false;

        // Spreads may cause an early bail; ensure computed names are always checked (this is cached)
        // As otherwise they may not be checked until exports for the type at this position are retrieved,
        // which may never occur.
        for (const elem of node.properties) {
            if (elem.name && ts.isComputedPropertyName(elem.name)) {
                checkComputedPropertyName(elem.name);
            }
        }

        let offset = 0;
        for (const memberDecl of node.properties) {
            let member = getSymbolOfNode(memberDecl);
            const computedNameType = memberDecl.name && memberDecl.name.kind === ts.SyntaxKind.ComputedPropertyName ?
                checkComputedPropertyName(memberDecl.name) : undefined;
            if (memberDecl.kind === ts.SyntaxKind.PropertyAssignment ||
                memberDecl.kind === ts.SyntaxKind.ShorthandPropertyAssignment ||
                ts.isObjectLiteralMethod(memberDecl)) {
                let type = memberDecl.kind === ts.SyntaxKind.PropertyAssignment ? checkPropertyAssignment(memberDecl, checkMode) :
                    // avoid resolving the left side of the ShorthandPropertyAssignment outside of the destructuring
                    // for error recovery purposes. For example, if a user wrote `{ a = 100 }` instead of `{ a: 100 }`.
                    // we don't want to say "could not find 'a'".
                    memberDecl.kind === ts.SyntaxKind.ShorthandPropertyAssignment ? checkExpressionForMutableLocation(!inDestructuringPattern && memberDecl.objectAssignmentInitializer ? memberDecl.objectAssignmentInitializer : memberDecl.name, checkMode) :
                    checkObjectLiteralMethod(memberDecl, checkMode);
                if (isInJavascript) {
                    const jsDocType = getTypeForDeclarationFromJSDocComment(memberDecl);
                    if (jsDocType) {
                        checkTypeAssignableTo(type, jsDocType, memberDecl);
                        type = jsDocType;
                    }
                    else if (enumTag && enumTag.typeExpression) {
                        checkTypeAssignableTo(type, getTypeFromTypeNode(enumTag.typeExpression), memberDecl);
                    }
                }
                objectFlags |= ts.getObjectFlags(type) & ts.ObjectFlags.PropagatingFlags;
                const nameType = computedNameType && isTypeUsableAsPropertyName(computedNameType) ? computedNameType : undefined;
                const prop = nameType ?
                    createSymbol(ts.SymbolFlags.Property | member.flags, getPropertyNameFromType(nameType), checkFlags | ts.CheckFlags.Late) :
                    createSymbol(ts.SymbolFlags.Property | member.flags, member.escapedName, checkFlags);
                if (nameType) {
                    prop.nameType = nameType;
                }

                if (inDestructuringPattern) {
                    // If object literal is an assignment pattern and if the assignment pattern specifies a default value
                    // for the property, make the property optional.
                    const isOptional =
                        (memberDecl.kind === ts.SyntaxKind.PropertyAssignment && hasDefaultValue(memberDecl.initializer)) ||
                        (memberDecl.kind === ts.SyntaxKind.ShorthandPropertyAssignment && memberDecl.objectAssignmentInitializer);
                    if (isOptional) {
                        prop.flags |= ts.SymbolFlags.Optional;
                    }
                }
                else if (contextualTypeHasPattern && !(ts.getObjectFlags(contextualType) & ts.ObjectFlags.ObjectLiteralPatternWithComputedProperties)) {
                    // If object literal is contextually typed by the implied type of a binding pattern, and if the
                    // binding pattern specifies a default value for the property, make the property optional.
                    const impliedProp = getPropertyOfType(contextualType, member.escapedName);
                    if (impliedProp) {
                        prop.flags |= impliedProp.flags & ts.SymbolFlags.Optional;
                    }

                    else if (!compilerOptions.suppressExcessPropertyErrors && !getIndexInfoOfType(contextualType, stringType)) {
                        error(memberDecl.name, ts.Diagnostics.Object_literal_may_only_specify_known_properties_and_0_does_not_exist_in_type_1,
                            symbolToString(member), typeToString(contextualType));
                    }
                }

                prop.declarations = member.declarations;
                prop.parent = member.parent;
                if (member.valueDeclaration) {
                    prop.valueDeclaration = member.valueDeclaration;
                }

                prop.type = type;
                prop.target = member;
                member = prop;
                allPropertiesTable?.set(prop.escapedName, prop);

                if (contextualType && checkMode && checkMode & CheckMode.Inferential && !(checkMode & CheckMode.SkipContextSensitive) &&
                    (memberDecl.kind === ts.SyntaxKind.PropertyAssignment || memberDecl.kind === ts.SyntaxKind.MethodDeclaration) && isContextSensitive(memberDecl)) {
                    const inferenceContext = getInferenceContext(node);
                    ts.Debug.assert(inferenceContext);  // In CheckMode.Inferential we should always have an inference context
                    const inferenceNode = memberDecl.kind === ts.SyntaxKind.PropertyAssignment ? memberDecl.initializer : memberDecl;
                    addIntraExpressionInferenceSite(inferenceContext, inferenceNode, type);
                }
            }
            else if (memberDecl.kind === ts.SyntaxKind.SpreadAssignment) {
                if (languageVersion < ts.ScriptTarget.ES2015) {
                    checkExternalEmitHelpers(memberDecl, ts.ExternalEmitHelpers.Assign);
                }
                if (propertiesArray.length > 0) {
                    spread = getSpreadType(spread, createObjectLiteralType(), node.symbol, objectFlags, inConstContext);
                    propertiesArray = [];
                    propertiesTable = ts.createSymbolTable();
                    hasComputedStringProperty = false;
                    hasComputedNumberProperty = false;
                    hasComputedSymbolProperty = false;
                }
                const type = getReducedType(checkExpression(memberDecl.expression));
                if (isValidSpreadType(type)) {
                    const mergedType = tryMergeUnionOfObjectTypeAndEmptyObject(type, inConstContext);
                    if (allPropertiesTable) {
                        checkSpreadPropOverrides(mergedType, allPropertiesTable, memberDecl);
                    }
                    offset = propertiesArray.length;
                    if (isErrorType(spread)) {
                        continue;
                    }
                    spread = getSpreadType(spread, mergedType, node.symbol, objectFlags, inConstContext);
                }
                else {
                    error(memberDecl, ts.Diagnostics.Spread_types_may_only_be_created_from_object_types);
                    spread = errorType;
                }
                continue;
            }
            else {
                // TypeScript 1.0 spec (April 2014)
                // A get accessor declaration is processed in the same manner as
                // an ordinary function declaration(section 6.1) with no parameters.
                // A set accessor declaration is processed in the same manner
                // as an ordinary function declaration with a single parameter and a Void return type.
                ts.Debug.assert(memberDecl.kind === ts.SyntaxKind.GetAccessor || memberDecl.kind === ts.SyntaxKind.SetAccessor);
                checkNodeDeferred(memberDecl);
            }

            if (computedNameType && !(computedNameType.flags & ts.TypeFlags.StringOrNumberLiteralOrUnique)) {
                if (isTypeAssignableTo(computedNameType, stringNumberSymbolType)) {
                    if (isTypeAssignableTo(computedNameType, numberType)) {
                        hasComputedNumberProperty = true;
                    }
                    else if (isTypeAssignableTo(computedNameType, esSymbolType)) {
                        hasComputedSymbolProperty = true;
                    }
                    else {
                        hasComputedStringProperty = true;
                    }
                    if (inDestructuringPattern) {
                        patternWithComputedProperties = true;
                    }
                }
            }
            else {
                propertiesTable.set(member.escapedName, member);
            }
            propertiesArray.push(member);
        }

        // If object literal is contextually typed by the implied type of a binding pattern, augment the result
        // type with those properties for which the binding pattern specifies a default value.
        // If the object literal is spread into another object literal, skip this step and let the top-level object
        // literal handle it instead. Note that this might require full traversal to the root pattern's parent
        // as it's the guaranteed to be the common ancestor of the pattern node and the current object node.
        // It's not possible to check if the immediate parent node is a spread assignment
        // since the type flows in non-obvious ways through conditional expressions, IIFEs and more.
        if (contextualTypeHasPattern) {
            const rootPatternParent = ts.findAncestor(contextualType.pattern!.parent, n =>
                n.kind === ts.SyntaxKind.VariableDeclaration ||
                n.kind === ts.SyntaxKind.BinaryExpression ||
                n.kind === ts.SyntaxKind.Parameter
            );
            const spreadOrOutsideRootObject = ts.findAncestor(node, n =>
                n === rootPatternParent ||
                n.kind === ts.SyntaxKind.SpreadAssignment
            )!;

            if (spreadOrOutsideRootObject.kind !== ts.SyntaxKind.SpreadAssignment) {
                for (const prop of getPropertiesOfType(contextualType)) {
                    if (!propertiesTable.get(prop.escapedName) && !getPropertyOfType(spread, prop.escapedName)) {
                        if (!(prop.flags & ts.SymbolFlags.Optional)) {
                            error(prop.valueDeclaration || (prop as ts.TransientSymbol).bindingElement,
                                ts.Diagnostics.Initializer_provides_no_value_for_this_binding_element_and_the_binding_element_has_no_default_value);
                        }
                        propertiesTable.set(prop.escapedName, prop);
                        propertiesArray.push(prop);
                    }
                }
            }
        }

        if (isErrorType(spread)) {
            return errorType;
        }

        if (spread !== emptyObjectType) {
            if (propertiesArray.length > 0) {
                spread = getSpreadType(spread, createObjectLiteralType(), node.symbol, objectFlags, inConstContext);
                propertiesArray = [];
                propertiesTable = ts.createSymbolTable();
                hasComputedStringProperty = false;
                hasComputedNumberProperty = false;
            }
            // remap the raw emptyObjectType fed in at the top into a fresh empty object literal type, unique to this use site
            return mapType(spread, t => t === emptyObjectType ? createObjectLiteralType() : t);
        }

        return createObjectLiteralType();

        function createObjectLiteralType() {
            const indexInfos = [];
            if (hasComputedStringProperty) indexInfos.push(getObjectLiteralIndexInfo(node, offset, propertiesArray, stringType));
            if (hasComputedNumberProperty) indexInfos.push(getObjectLiteralIndexInfo(node, offset, propertiesArray, numberType));
            if (hasComputedSymbolProperty) indexInfos.push(getObjectLiteralIndexInfo(node, offset, propertiesArray, esSymbolType));
            const result = createAnonymousType(node.symbol, propertiesTable, ts.emptyArray, ts.emptyArray, indexInfos);
            result.objectFlags |= objectFlags | ts.ObjectFlags.ObjectLiteral | ts.ObjectFlags.ContainsObjectOrArrayLiteral;
            if (isJSObjectLiteral) {
                result.objectFlags |= ts.ObjectFlags.JSLiteral;
            }
            if (patternWithComputedProperties) {
                result.objectFlags |= ts.ObjectFlags.ObjectLiteralPatternWithComputedProperties;
            }
            if (inDestructuringPattern) {
                result.pattern = node;
            }
            return result;
        }
    }

    function isValidSpreadType(type: ts.Type): boolean {
        const t = removeDefinitelyFalsyTypes(mapType(type, getBaseConstraintOrType));
        return !!(t.flags & (ts.TypeFlags.Any | ts.TypeFlags.NonPrimitive | ts.TypeFlags.Object | ts.TypeFlags.InstantiableNonPrimitive) ||
            t.flags & ts.TypeFlags.UnionOrIntersection && ts.every((t as ts.UnionOrIntersectionType).types, isValidSpreadType));
    }

    function checkJsxSelfClosingElementDeferred(node: ts.JsxSelfClosingElement) {
        checkJsxOpeningLikeElementOrOpeningFragment(node);
    }

    function checkJsxSelfClosingElement(node: ts.JsxSelfClosingElement, _checkMode: CheckMode | undefined): ts.Type {
        checkNodeDeferred(node);
        return getJsxElementTypeAt(node) || anyType;
    }

    function checkJsxElementDeferred(node: ts.JsxElement) {
        // Check attributes
        checkJsxOpeningLikeElementOrOpeningFragment(node.openingElement);

        // Perform resolution on the closing tag so that rename/go to definition/etc work
        if (isJsxIntrinsicIdentifier(node.closingElement.tagName)) {
            getIntrinsicTagSymbol(node.closingElement);
        }
        else {
            checkExpression(node.closingElement.tagName);
        }

        checkJsxChildren(node);
    }

    function checkJsxElement(node: ts.JsxElement, _checkMode: CheckMode | undefined): ts.Type {
        checkNodeDeferred(node);

        return getJsxElementTypeAt(node) || anyType;
    }

    function checkJsxFragment(node: ts.JsxFragment): ts.Type {
        checkJsxOpeningLikeElementOrOpeningFragment(node.openingFragment);

        // by default, jsx:'react' will use jsxFactory = React.createElement and jsxFragmentFactory = React.Fragment
        // if jsxFactory compiler option is provided, ensure jsxFragmentFactory compiler option or @jsxFrag pragma is provided too
        const nodeSourceFile = ts.getSourceFileOfNode(node);
        if (ts.getJSXTransformEnabled(compilerOptions) && (compilerOptions.jsxFactory || nodeSourceFile.pragmas.has("jsx"))
            && !compilerOptions.jsxFragmentFactory && !nodeSourceFile.pragmas.has("jsxfrag")) {
            error(node, compilerOptions.jsxFactory
                ? ts.Diagnostics.The_jsxFragmentFactory_compiler_option_must_be_provided_to_use_JSX_fragments_with_the_jsxFactory_compiler_option
                : ts.Diagnostics.An_jsxFrag_pragma_is_required_when_using_an_jsx_pragma_with_JSX_fragments);
        }

        checkJsxChildren(node);
        return getJsxElementTypeAt(node) || anyType;
    }

    function isHyphenatedJsxName(name: string | ts.__String) {
        return ts.stringContains(name as string, "-");
    }

    /**
     * Returns true iff React would emit this tag name as a string rather than an identifier or qualified name
     */
    function isJsxIntrinsicIdentifier(tagName: ts.JsxTagNameExpression): boolean {
        return tagName.kind === ts.SyntaxKind.Identifier && ts.isIntrinsicJsxName(tagName.escapedText);
    }

    function checkJsxAttribute(node: ts.JsxAttribute, checkMode?: CheckMode) {
        return node.initializer
            ? checkExpressionForMutableLocation(node.initializer, checkMode)
            : trueType;  // <Elem attr /> is sugar for <Elem attr={true} />
    }

    /**
     * Get attributes type of the JSX opening-like element. The result is from resolving "attributes" property of the opening-like element.
     *
     * @param openingLikeElement a JSX opening-like element
     * @param filter a function to remove attributes that will not participate in checking whether attributes are assignable
     * @return an anonymous type (similar to the one returned by checkObjectLiteral) in which its properties are attributes property.
     * @remarks Because this function calls getSpreadType, it needs to use the same checks as checkObjectLiteral,
     * which also calls getSpreadType.
     */
    function createJsxAttributesTypeFromAttributesProperty(openingLikeElement: ts.JsxOpeningLikeElement, checkMode: CheckMode | undefined) {
        const attributes = openingLikeElement.attributes;
        const attributesType = getContextualType(attributes, ts.ContextFlags.None);
        const allAttributesTable = strictNullChecks ? ts.createSymbolTable() : undefined;
        let attributesTable = ts.createSymbolTable();
        let spread: ts.Type = emptyJsxObjectType;
        let hasSpreadAnyType = false;
        let typeToIntersect: ts.Type | undefined;
        let explicitlySpecifyChildrenAttribute = false;
        let objectFlags: ts.ObjectFlags = ts.ObjectFlags.JsxAttributes;
        const jsxChildrenPropertyName = getJsxElementChildrenPropertyName(getJsxNamespaceAt(openingLikeElement));

        for (const attributeDecl of attributes.properties) {
            const member = attributeDecl.symbol;
            if (ts.isJsxAttribute(attributeDecl)) {
                const exprType = checkJsxAttribute(attributeDecl, checkMode);
                objectFlags |= ts.getObjectFlags(exprType) & ts.ObjectFlags.PropagatingFlags;

                const attributeSymbol = createSymbol(ts.SymbolFlags.Property | member.flags, member.escapedName);
                attributeSymbol.declarations = member.declarations;
                attributeSymbol.parent = member.parent;
                if (member.valueDeclaration) {
                    attributeSymbol.valueDeclaration = member.valueDeclaration;
                }
                attributeSymbol.type = exprType;
                attributeSymbol.target = member;
                attributesTable.set(attributeSymbol.escapedName, attributeSymbol);
                allAttributesTable?.set(attributeSymbol.escapedName, attributeSymbol);
                if (attributeDecl.name.escapedText === jsxChildrenPropertyName) {
                    explicitlySpecifyChildrenAttribute = true;
                }
                if (attributesType) {
                    const prop = getPropertyOfType(attributesType, member.escapedName);
                    if (prop && prop.declarations && isDeprecatedSymbol(prop)) {
                        addDeprecatedSuggestion(attributeDecl.name, prop.declarations, attributeDecl.name.escapedText as string);
                    }
                }
            }
            else {
                ts.Debug.assert(attributeDecl.kind === ts.SyntaxKind.JsxSpreadAttribute);
                if (attributesTable.size > 0) {
                    spread = getSpreadType(spread, createJsxAttributesType(), attributes.symbol, objectFlags, /*readonly*/ false);
                    attributesTable = ts.createSymbolTable();
                }
                const exprType = getReducedType(checkExpressionCached(attributeDecl.expression, checkMode));
                if (isTypeAny(exprType)) {
                    hasSpreadAnyType = true;
                }
                if (isValidSpreadType(exprType)) {
                    spread = getSpreadType(spread, exprType, attributes.symbol, objectFlags, /*readonly*/ false);
                    if (allAttributesTable) {
                        checkSpreadPropOverrides(exprType, allAttributesTable, attributeDecl);
                    }
                }
                else {
                    error(attributeDecl.expression, ts.Diagnostics.Spread_types_may_only_be_created_from_object_types);
                    typeToIntersect = typeToIntersect ? getIntersectionType([typeToIntersect, exprType]) : exprType;
                }
            }
        }

        if (!hasSpreadAnyType) {
            if (attributesTable.size > 0) {
                spread = getSpreadType(spread, createJsxAttributesType(), attributes.symbol, objectFlags, /*readonly*/ false);
            }
        }

        // Handle children attribute
        const parent = openingLikeElement.parent.kind === ts.SyntaxKind.JsxElement ? openingLikeElement.parent as ts.JsxElement : undefined;
        // We have to check that openingElement of the parent is the one we are visiting as this may not be true for selfClosingElement
        if (parent && parent.openingElement === openingLikeElement && parent.children.length > 0) {
            const childrenTypes: ts.Type[] = checkJsxChildren(parent, checkMode);

            if (!hasSpreadAnyType && jsxChildrenPropertyName && jsxChildrenPropertyName !== "") {
                // Error if there is a attribute named "children" explicitly specified and children element.
                // This is because children element will overwrite the value from attributes.
                // Note: we will not warn "children" attribute overwritten if "children" attribute is specified in object spread.
                if (explicitlySpecifyChildrenAttribute) {
                    error(attributes, ts.Diagnostics._0_are_specified_twice_The_attribute_named_0_will_be_overwritten, ts.unescapeLeadingUnderscores(jsxChildrenPropertyName));
                }

                const contextualType = getApparentTypeOfContextualType(openingLikeElement.attributes, /*contextFlags*/ undefined);
                const childrenContextualType = contextualType && getTypeOfPropertyOfContextualType(contextualType, jsxChildrenPropertyName);
                // If there are children in the body of JSX element, create dummy attribute "children" with the union of children types so that it will pass the attribute checking process
                const childrenPropSymbol = createSymbol(ts.SymbolFlags.Property, jsxChildrenPropertyName);
                childrenPropSymbol.type = childrenTypes.length === 1 ? childrenTypes[0] :
                    childrenContextualType && someType(childrenContextualType, isTupleLikeType) ? createTupleType(childrenTypes) :
                    createArrayType(getUnionType(childrenTypes));
                // Fake up a property declaration for the children
                childrenPropSymbol.valueDeclaration = ts.factory.createPropertySignature(/*modifiers*/ undefined, ts.unescapeLeadingUnderscores(jsxChildrenPropertyName), /*questionToken*/ undefined, /*type*/ undefined);
                ts.setParent(childrenPropSymbol.valueDeclaration, attributes);
                childrenPropSymbol.valueDeclaration.symbol = childrenPropSymbol;
                const childPropMap = ts.createSymbolTable();
                childPropMap.set(jsxChildrenPropertyName, childrenPropSymbol);
                spread = getSpreadType(spread, createAnonymousType(attributes.symbol, childPropMap, ts.emptyArray, ts.emptyArray, ts.emptyArray),
                    attributes.symbol, objectFlags, /*readonly*/ false);

            }
        }

        if (hasSpreadAnyType) {
            return anyType;
        }
        if (typeToIntersect && spread !== emptyJsxObjectType) {
            return getIntersectionType([typeToIntersect, spread]);
        }
        return typeToIntersect || (spread === emptyJsxObjectType ? createJsxAttributesType() : spread);

        /**
         * Create anonymous type from given attributes symbol table.
         * @param symbol a symbol of JsxAttributes containing attributes corresponding to attributesTable
         * @param attributesTable a symbol table of attributes property
         */
        function createJsxAttributesType() {
            objectFlags |= freshObjectLiteralFlag;
            const result = createAnonymousType(attributes.symbol, attributesTable, ts.emptyArray, ts.emptyArray, ts.emptyArray);
            result.objectFlags |= objectFlags | ts.ObjectFlags.ObjectLiteral | ts.ObjectFlags.ContainsObjectOrArrayLiteral;
            return result;
        }
    }

    function checkJsxChildren(node: ts.JsxElement | ts.JsxFragment, checkMode?: CheckMode) {
        const childrenTypes: ts.Type[] = [];
        for (const child of node.children) {
            // In React, JSX text that contains only whitespaces will be ignored so we don't want to type-check that
            // because then type of children property will have constituent of string type.
            if (child.kind === ts.SyntaxKind.JsxText) {
                if (!child.containsOnlyTriviaWhiteSpaces) {
                    childrenTypes.push(stringType);
                }
            }
            else if (child.kind === ts.SyntaxKind.JsxExpression && !child.expression) {
                continue; // empty jsx expressions don't *really* count as present children
            }
            else {
                childrenTypes.push(checkExpressionForMutableLocation(child, checkMode));
            }
        }
        return childrenTypes;
    }

    function checkSpreadPropOverrides(type: ts.Type, props: ts.SymbolTable, spread: ts.SpreadAssignment | ts.JsxSpreadAttribute) {
        for (const right of getPropertiesOfType(type)) {
            if (!(right.flags & ts.SymbolFlags.Optional)) {
                const left = props.get(right.escapedName);
                if (left) {
                    const diagnostic = error(left.valueDeclaration, ts.Diagnostics._0_is_specified_more_than_once_so_this_usage_will_be_overwritten, ts.unescapeLeadingUnderscores(left.escapedName));
                    ts.addRelatedInfo(diagnostic, ts.createDiagnosticForNode(spread, ts.Diagnostics.This_spread_always_overwrites_this_property));
                }
            }
        }
    }

    /**
     * Check attributes property of opening-like element. This function is called during chooseOverload to get call signature of a JSX opening-like element.
     * (See "checkApplicableSignatureForJsxOpeningLikeElement" for how the function is used)
     * @param node a JSXAttributes to be resolved of its type
     */
    function checkJsxAttributes(node: ts.JsxAttributes, checkMode: CheckMode | undefined) {
        return createJsxAttributesTypeFromAttributesProperty(node.parent, checkMode);
    }

    function getJsxType(name: ts.__String, location: ts.Node | undefined) {
        const namespace = getJsxNamespaceAt(location);
        const exports = namespace && getExportsOfSymbol(namespace);
        const typeSymbol = exports && getSymbol(exports, name, ts.SymbolFlags.Type);
        return typeSymbol ? getDeclaredTypeOfSymbol(typeSymbol) : errorType;
    }

    /**
     * Looks up an intrinsic tag name and returns a symbol that either points to an intrinsic
     * property (in which case nodeLinks.jsxFlags will be IntrinsicNamedElement) or an intrinsic
     * string index signature (in which case nodeLinks.jsxFlags will be IntrinsicIndexedElement).
     * May also return unknownSymbol if both of these lookups fail.
     */
    function getIntrinsicTagSymbol(node: ts.JsxOpeningLikeElement | ts.JsxClosingElement): ts.Symbol {
        const links = getNodeLinks(node);
        if (!links.resolvedSymbol) {
            const intrinsicElementsType = getJsxType(JsxNames.IntrinsicElements, node);
            if (!isErrorType(intrinsicElementsType)) {
                // Property case
                if (!ts.isIdentifier(node.tagName)) return ts.Debug.fail();
                const intrinsicProp = getPropertyOfType(intrinsicElementsType, node.tagName.escapedText);
                if (intrinsicProp) {
                    links.jsxFlags |= ts.JsxFlags.IntrinsicNamedElement;
                    return links.resolvedSymbol = intrinsicProp;
                }

                // Intrinsic string indexer case
                const indexSignatureType = getIndexTypeOfType(intrinsicElementsType, stringType);
                if (indexSignatureType) {
                    links.jsxFlags |= ts.JsxFlags.IntrinsicIndexedElement;
                    return links.resolvedSymbol = intrinsicElementsType.symbol;
                }

                // Wasn't found
                error(node, ts.Diagnostics.Property_0_does_not_exist_on_type_1, ts.idText(node.tagName), "JSX." + JsxNames.IntrinsicElements);
                return links.resolvedSymbol = unknownSymbol;
            }
            else {
                if (noImplicitAny) {
                    error(node, ts.Diagnostics.JSX_element_implicitly_has_type_any_because_no_interface_JSX_0_exists, ts.unescapeLeadingUnderscores(JsxNames.IntrinsicElements));
                }
                return links.resolvedSymbol = unknownSymbol;
            }
        }
        return links.resolvedSymbol;
    }

    function getJsxNamespaceContainerForImplicitImport(location: ts.Node | undefined): ts.Symbol | undefined {
        const file = location && ts.getSourceFileOfNode(location);
        const links = file && getNodeLinks(file);
        if (links && links.jsxImplicitImportContainer === false) {
            return undefined;
        }
        if (links && links.jsxImplicitImportContainer) {
            return links.jsxImplicitImportContainer;
        }
        const runtimeImportSpecifier = ts.getJSXRuntimeImport(ts.getJSXImplicitImportBase(compilerOptions, file), compilerOptions);
        if (!runtimeImportSpecifier) {
            return undefined;
        }
        const isClassic = ts.getEmitModuleResolutionKind(compilerOptions) === ts.ModuleResolutionKind.Classic;
        const errorMessage = isClassic
                                ? ts.Diagnostics.Cannot_find_module_0_Did_you_mean_to_set_the_moduleResolution_option_to_node_or_to_add_aliases_to_the_paths_option
                                : ts.Diagnostics.Cannot_find_module_0_or_its_corresponding_type_declarations;
        const mod = resolveExternalModule(location!, runtimeImportSpecifier, errorMessage, location!);
        const result = mod && mod !== unknownSymbol ? getMergedSymbol(resolveSymbol(mod)) : undefined;
        if (links) {
            links.jsxImplicitImportContainer = result || false;
        }
        return result;
    }

    function getJsxNamespaceAt(location: ts.Node | undefined): ts.Symbol {
        const links = location && getNodeLinks(location);
        if (links && links.jsxNamespace) {
            return links.jsxNamespace;
        }
        if (!links || links.jsxNamespace !== false) {
            let resolvedNamespace = getJsxNamespaceContainerForImplicitImport(location);

            if (!resolvedNamespace || resolvedNamespace === unknownSymbol) {
                const namespaceName = getJsxNamespace(location);
                resolvedNamespace = resolveName(location, namespaceName, ts.SymbolFlags.Namespace, /*diagnosticMessage*/ undefined, namespaceName, /*isUse*/ false);
            }

            if (resolvedNamespace) {
                const candidate = resolveSymbol(getSymbol(getExportsOfSymbol(resolveSymbol(resolvedNamespace)), JsxNames.JSX, ts.SymbolFlags.Namespace));
                if (candidate && candidate !== unknownSymbol) {
                    if (links) {
                        links.jsxNamespace = candidate;
                    }
                    return candidate;
                }
            }
            if (links) {
                links.jsxNamespace = false;
            }
        }
        // JSX global fallback
        const s = resolveSymbol(getGlobalSymbol(JsxNames.JSX, ts.SymbolFlags.Namespace, /*diagnosticMessage*/ undefined));
        if (s === unknownSymbol) {
            return undefined!; // TODO: GH#18217
        }
        return s!; // TODO: GH#18217
    }

    /**
     * Look into JSX namespace and then look for container with matching name as nameOfAttribPropContainer.
     * Get a single property from that container if existed. Report an error if there are more than one property.
     *
     * @param nameOfAttribPropContainer a string of value JsxNames.ElementAttributesPropertyNameContainer or JsxNames.ElementChildrenAttributeNameContainer
     *          if other string is given or the container doesn't exist, return undefined.
     */
    function getNameFromJsxElementAttributesContainer(nameOfAttribPropContainer: ts.__String, jsxNamespace: ts.Symbol): ts.__String | undefined {
        // JSX.ElementAttributesProperty | JSX.ElementChildrenAttribute [symbol]
        const jsxElementAttribPropInterfaceSym = jsxNamespace && getSymbol(jsxNamespace.exports!, nameOfAttribPropContainer, ts.SymbolFlags.Type);
        // JSX.ElementAttributesProperty | JSX.ElementChildrenAttribute [type]
        const jsxElementAttribPropInterfaceType = jsxElementAttribPropInterfaceSym && getDeclaredTypeOfSymbol(jsxElementAttribPropInterfaceSym);
        // The properties of JSX.ElementAttributesProperty | JSX.ElementChildrenAttribute
        const propertiesOfJsxElementAttribPropInterface = jsxElementAttribPropInterfaceType && getPropertiesOfType(jsxElementAttribPropInterfaceType);
        if (propertiesOfJsxElementAttribPropInterface) {
            // Element Attributes has zero properties, so the element attributes type will be the class instance type
            if (propertiesOfJsxElementAttribPropInterface.length === 0) {
                return "" as ts.__String;
            }
            // Element Attributes has one property, so the element attributes type will be the type of the corresponding
            // property of the class instance type
            else if (propertiesOfJsxElementAttribPropInterface.length === 1) {
                return propertiesOfJsxElementAttribPropInterface[0].escapedName;
            }
            else if (propertiesOfJsxElementAttribPropInterface.length > 1 && jsxElementAttribPropInterfaceSym.declarations) {
                // More than one property on ElementAttributesProperty is an error
                error(jsxElementAttribPropInterfaceSym.declarations[0], ts.Diagnostics.The_global_type_JSX_0_may_not_have_more_than_one_property, ts.unescapeLeadingUnderscores(nameOfAttribPropContainer));
            }
        }
        return undefined;
    }

    function getJsxLibraryManagedAttributes(jsxNamespace: ts.Symbol) {
        // JSX.LibraryManagedAttributes [symbol]
        return jsxNamespace && getSymbol(jsxNamespace.exports!, JsxNames.LibraryManagedAttributes, ts.SymbolFlags.Type);
    }

    /// e.g. "props" for React.d.ts,
    /// or 'undefined' if ElementAttributesProperty doesn't exist (which means all
    ///     non-intrinsic elements' attributes type is 'any'),
    /// or '' if it has 0 properties (which means every
    ///     non-intrinsic elements' attributes type is the element instance type)
    function getJsxElementPropertiesName(jsxNamespace: ts.Symbol) {
        return getNameFromJsxElementAttributesContainer(JsxNames.ElementAttributesPropertyNameContainer, jsxNamespace);
    }

    function getJsxElementChildrenPropertyName(jsxNamespace: ts.Symbol): ts.__String | undefined {
        return getNameFromJsxElementAttributesContainer(JsxNames.ElementChildrenAttributeNameContainer, jsxNamespace);
    }

    function getUninstantiatedJsxSignaturesOfType(elementType: ts.Type, caller: ts.JsxOpeningLikeElement): readonly ts.Signature[] {
        if (elementType.flags & ts.TypeFlags.String) {
            return [anySignature];
        }
        else if (elementType.flags & ts.TypeFlags.StringLiteral) {
            const intrinsicType = getIntrinsicAttributesTypeFromStringLiteralType(elementType as ts.StringLiteralType, caller);
            if (!intrinsicType) {
                error(caller, ts.Diagnostics.Property_0_does_not_exist_on_type_1, (elementType as ts.StringLiteralType).value, "JSX." + JsxNames.IntrinsicElements);
                return ts.emptyArray;
            }
            else {
                const fakeSignature = createSignatureForJSXIntrinsic(caller, intrinsicType);
                return [fakeSignature];
            }
        }
        const apparentElemType = getApparentType(elementType);
        // Resolve the signatures, preferring constructor
        let signatures = getSignaturesOfType(apparentElemType, ts.SignatureKind.Construct);
        if (signatures.length === 0) {
            // No construct signatures, try call signatures
            signatures = getSignaturesOfType(apparentElemType, ts.SignatureKind.Call);
        }
        if (signatures.length === 0 && apparentElemType.flags & ts.TypeFlags.Union) {
            // If each member has some combination of new/call signatures; make a union signature list for those
            signatures = getUnionSignatures(ts.map((apparentElemType as ts.UnionType).types, t => getUninstantiatedJsxSignaturesOfType(t, caller)));
        }
        return signatures;
    }

    function getIntrinsicAttributesTypeFromStringLiteralType(type: ts.StringLiteralType, location: ts.Node): ts.Type | undefined {
        // If the elemType is a stringLiteral type, we can then provide a check to make sure that the string literal type is one of the Jsx intrinsic element type
        // For example:
        //      var CustomTag: "h1" = "h1";
        //      <CustomTag> Hello World </CustomTag>
        const intrinsicElementsType = getJsxType(JsxNames.IntrinsicElements, location);
        if (!isErrorType(intrinsicElementsType)) {
            const stringLiteralTypeName = type.value;
            const intrinsicProp = getPropertyOfType(intrinsicElementsType, ts.escapeLeadingUnderscores(stringLiteralTypeName));
            if (intrinsicProp) {
                return getTypeOfSymbol(intrinsicProp);
            }
            const indexSignatureType = getIndexTypeOfType(intrinsicElementsType, stringType);
            if (indexSignatureType) {
                return indexSignatureType;
            }
            return undefined;
        }
        // If we need to report an error, we already done so here. So just return any to prevent any more error downstream
        return anyType;
    }

    function checkJsxReturnAssignableToAppropriateBound(refKind: ts.JsxReferenceKind, elemInstanceType: ts.Type, openingLikeElement: ts.JsxOpeningLikeElement) {
        if (refKind === ts.JsxReferenceKind.Function) {
            const sfcReturnConstraint = getJsxStatelessElementTypeAt(openingLikeElement);
            if (sfcReturnConstraint) {
                checkTypeRelatedTo(elemInstanceType, sfcReturnConstraint, assignableRelation, openingLikeElement.tagName, ts.Diagnostics.Its_return_type_0_is_not_a_valid_JSX_element, generateInitialErrorChain);
            }
        }
        else if (refKind === ts.JsxReferenceKind.Component) {
            const classConstraint = getJsxElementClassTypeAt(openingLikeElement);
            if (classConstraint) {
                // Issue an error if this return type isn't assignable to JSX.ElementClass, failing that
                checkTypeRelatedTo(elemInstanceType, classConstraint, assignableRelation, openingLikeElement.tagName, ts.Diagnostics.Its_instance_type_0_is_not_a_valid_JSX_element, generateInitialErrorChain);
            }
        }
        else { // Mixed
            const sfcReturnConstraint = getJsxStatelessElementTypeAt(openingLikeElement);
            const classConstraint = getJsxElementClassTypeAt(openingLikeElement);
            if (!sfcReturnConstraint || !classConstraint) {
                return;
            }
            const combined = getUnionType([sfcReturnConstraint, classConstraint]);
            checkTypeRelatedTo(elemInstanceType, combined, assignableRelation, openingLikeElement.tagName, ts.Diagnostics.Its_element_type_0_is_not_a_valid_JSX_element, generateInitialErrorChain);
        }

        function generateInitialErrorChain(): ts.DiagnosticMessageChain {
            const componentName = ts.getTextOfNode(openingLikeElement.tagName);
            return ts.chainDiagnosticMessages(/* details */ undefined, ts.Diagnostics._0_cannot_be_used_as_a_JSX_component, componentName);
        }
    }

    /**
     * Get attributes type of the given intrinsic opening-like Jsx element by resolving the tag name.
     * The function is intended to be called from a function which has checked that the opening element is an intrinsic element.
     * @param node an intrinsic JSX opening-like element
     */
    function getIntrinsicAttributesTypeFromJsxOpeningLikeElement(node: ts.JsxOpeningLikeElement): ts.Type {
        ts.Debug.assert(isJsxIntrinsicIdentifier(node.tagName));
        const links = getNodeLinks(node);
        if (!links.resolvedJsxElementAttributesType) {
            const symbol = getIntrinsicTagSymbol(node);
            if (links.jsxFlags & ts.JsxFlags.IntrinsicNamedElement) {
                return links.resolvedJsxElementAttributesType = getTypeOfSymbol(symbol) || errorType;
            }
            else if (links.jsxFlags & ts.JsxFlags.IntrinsicIndexedElement) {
                return links.resolvedJsxElementAttributesType =
                    getIndexTypeOfType(getJsxType(JsxNames.IntrinsicElements, node), stringType) || errorType;
            }
            else {
                return links.resolvedJsxElementAttributesType = errorType;
            }
        }
        return links.resolvedJsxElementAttributesType;
    }

    function getJsxElementClassTypeAt(location: ts.Node): ts.Type | undefined {
        const type = getJsxType(JsxNames.ElementClass, location);
        if (isErrorType(type)) return undefined;
        return type;
    }

    function getJsxElementTypeAt(location: ts.Node): ts.Type {
        return getJsxType(JsxNames.Element, location);
    }

    function getJsxStatelessElementTypeAt(location: ts.Node): ts.Type | undefined {
        const jsxElementType = getJsxElementTypeAt(location);
        if (jsxElementType) {
            return getUnionType([jsxElementType, nullType]);
        }
    }

    /**
     * Returns all the properties of the Jsx.IntrinsicElements interface
     */
    function getJsxIntrinsicTagNamesAt(location: ts.Node): ts.Symbol[] {
        const intrinsics = getJsxType(JsxNames.IntrinsicElements, location);
        return intrinsics ? getPropertiesOfType(intrinsics) : ts.emptyArray;
    }

    function checkJsxPreconditions(errorNode: ts.Node) {
        // Preconditions for using JSX
        if ((compilerOptions.jsx || ts.JsxEmit.None) === ts.JsxEmit.None) {
            error(errorNode, ts.Diagnostics.Cannot_use_JSX_unless_the_jsx_flag_is_provided);
        }

        if (getJsxElementTypeAt(errorNode) === undefined) {
            if (noImplicitAny) {
                error(errorNode, ts.Diagnostics.JSX_element_implicitly_has_type_any_because_the_global_type_JSX_Element_does_not_exist);
            }
        }
    }

    function checkJsxOpeningLikeElementOrOpeningFragment(node: ts.JsxOpeningLikeElement | ts.JsxOpeningFragment) {
        const isNodeOpeningLikeElement = ts.isJsxOpeningLikeElement(node);

        if (isNodeOpeningLikeElement) {
            checkGrammarJsxElement(node);
        }

        checkJsxPreconditions(node);

        if (!getJsxNamespaceContainerForImplicitImport(node)) {
            // The reactNamespace/jsxFactory's root symbol should be marked as 'used' so we don't incorrectly elide its import.
            // And if there is no reactNamespace/jsxFactory's symbol in scope when targeting React emit, we should issue an error.
            const jsxFactoryRefErr = diagnostics && compilerOptions.jsx === ts.JsxEmit.React ? ts.Diagnostics.Cannot_find_name_0 : undefined;
            const jsxFactoryNamespace = getJsxNamespace(node);
            const jsxFactoryLocation = isNodeOpeningLikeElement ? node.tagName : node;

            // allow null as jsxFragmentFactory
            let jsxFactorySym: ts.Symbol | undefined;
            if (!(ts.isJsxOpeningFragment(node) && jsxFactoryNamespace === "null")) {
                jsxFactorySym = resolveName(jsxFactoryLocation, jsxFactoryNamespace, ts.SymbolFlags.Value, jsxFactoryRefErr, jsxFactoryNamespace, /*isUse*/ true);
            }

            if (jsxFactorySym) {
                // Mark local symbol as referenced here because it might not have been marked
                // if jsx emit was not jsxFactory as there wont be error being emitted
                jsxFactorySym.isReferenced = ts.SymbolFlags.All;

                // If react/jsxFactory symbol is alias, mark it as refereced
                if (jsxFactorySym.flags & ts.SymbolFlags.Alias && !getTypeOnlyAliasDeclaration(jsxFactorySym)) {
                    markAliasSymbolAsReferenced(jsxFactorySym);
                }
            }

            // For JsxFragment, mark jsx pragma as referenced via resolveName
            if (ts.isJsxOpeningFragment(node)) {
                const file = ts.getSourceFileOfNode(node);
                const localJsxNamespace = getLocalJsxNamespace(file);
                if (localJsxNamespace) {
                    resolveName(jsxFactoryLocation, localJsxNamespace, ts.SymbolFlags.Value, jsxFactoryRefErr, localJsxNamespace, /*isUse*/ true);
                }
            }
        }

        if (isNodeOpeningLikeElement) {
            const jsxOpeningLikeNode = node ;
            const sig = getResolvedSignature(jsxOpeningLikeNode);
            checkDeprecatedSignature(sig, node);
            checkJsxReturnAssignableToAppropriateBound(getJsxReferenceKind(jsxOpeningLikeNode), getReturnTypeOfSignature(sig), jsxOpeningLikeNode);
        }
    }

    /**
     * Check if a property with the given name is known anywhere in the given type. In an object type, a property
     * is considered known if
     * 1. the object type is empty and the check is for assignability, or
     * 2. if the object type has index signatures, or
     * 3. if the property is actually declared in the object type
     *    (this means that 'toString', for example, is not usually a known property).
     * 4. In a union or intersection type,
     *    a property is considered known if it is known in any constituent type.
     * @param targetType a type to search a given name in
     * @param name a property name to search
     * @param isComparingJsxAttributes a boolean flag indicating whether we are searching in JsxAttributesType
     */
    function isKnownProperty(targetType: ts.Type, name: ts.__String, isComparingJsxAttributes: boolean): boolean {
        if (targetType.flags & ts.TypeFlags.Object) {
            // For backwards compatibility a symbol-named property is satisfied by a string index signature. This
            // is incorrect and inconsistent with element access expressions, where it is an error, so eventually
            // we should remove this exception.
            if (getPropertyOfObjectType(targetType, name) ||
                getApplicableIndexInfoForName(targetType, name) ||
                isLateBoundName(name) && getIndexInfoOfType(targetType, stringType) ||
                isComparingJsxAttributes && isHyphenatedJsxName(name)) {
                // For JSXAttributes, if the attribute has a hyphenated name, consider that the attribute to be known.
                return true;
            }
        }
        else if (targetType.flags & ts.TypeFlags.UnionOrIntersection && isExcessPropertyCheckTarget(targetType)) {
            for (const t of (targetType as ts.UnionOrIntersectionType).types) {
                if (isKnownProperty(t, name, isComparingJsxAttributes)) {
                    return true;
                }
            }
        }
        return false;
    }

    function isExcessPropertyCheckTarget(type: ts.Type): boolean {
        return !!(type.flags & ts.TypeFlags.Object && !(ts.getObjectFlags(type) & ts.ObjectFlags.ObjectLiteralPatternWithComputedProperties) ||
            type.flags & ts.TypeFlags.NonPrimitive ||
            type.flags & ts.TypeFlags.Union && ts.some((type as ts.UnionType).types, isExcessPropertyCheckTarget) ||
            type.flags & ts.TypeFlags.Intersection && ts.every((type as ts.IntersectionType).types, isExcessPropertyCheckTarget));
    }

    function checkJsxExpression(node: ts.JsxExpression, checkMode?: CheckMode) {
        checkGrammarJsxExpression(node);
        if (node.expression) {
            const type = checkExpression(node.expression, checkMode);
            if (node.dotDotDotToken && type !== anyType && !isArrayType(type)) {
                error(node, ts.Diagnostics.JSX_spread_child_must_be_an_array_type);
            }
            return type;
        }
        else {
            return errorType;
        }
    }

    function getDeclarationNodeFlagsFromSymbol(s: ts.Symbol): ts.NodeFlags {
        return s.valueDeclaration ? ts.getCombinedNodeFlags(s.valueDeclaration) : 0;
    }

    /**
     * Return whether this symbol is a member of a prototype somewhere
     * Note that this is not tracked well within the compiler, so the answer may be incorrect.
     */
    function isPrototypeProperty(symbol: ts.Symbol) {
        if (symbol.flags & ts.SymbolFlags.Method || ts.getCheckFlags(symbol) & ts.CheckFlags.SyntheticMethod) {
            return true;
        }
        if (ts.isInJSFile(symbol.valueDeclaration)) {
            const parent = symbol.valueDeclaration!.parent;
            return parent && ts.isBinaryExpression(parent) &&
                ts.getAssignmentDeclarationKind(parent) === ts.AssignmentDeclarationKind.PrototypeProperty;
        }
    }

    /**
     * Check whether the requested property access is valid.
     * Returns true if node is a valid property access, and false otherwise.
     * @param node The node to be checked.
     * @param isSuper True if the access is from `super.`.
     * @param type The type of the object whose property is being accessed. (Not the type of the property.)
     * @param prop The symbol for the property being accessed.
     */
    function checkPropertyAccessibility(
        node: ts.PropertyAccessExpression | ts.QualifiedName | ts.PropertyAccessExpression | ts.VariableDeclaration | ts.ParameterDeclaration | ts.ImportTypeNode | ts.PropertyAssignment | ts.ShorthandPropertyAssignment | ts.BindingElement,
        isSuper: boolean, writing: boolean, type: ts.Type, prop: ts.Symbol, reportError = true): boolean {

        const errorNode = !reportError ? undefined :
            node.kind === ts.SyntaxKind.QualifiedName ? node.right :
            node.kind === ts.SyntaxKind.ImportType ? node :
            node.kind === ts.SyntaxKind.BindingElement && node.propertyName ? node.propertyName : node.name;

        return checkPropertyAccessibilityAtLocation(node, isSuper, writing, type, prop, errorNode);
    }

    /**
     * Check whether the requested property can be accessed at the requested location.
     * Returns true if node is a valid property access, and false otherwise.
     * @param location The location node where we want to check if the property is accessible.
     * @param isSuper True if the access is from `super.`.
     * @param writing True if this is a write property access, false if it is a read property access.
     * @param containingType The type of the object whose property is being accessed. (Not the type of the property.)
     * @param prop The symbol for the property being accessed.
     * @param errorNode The node where we should report an invalid property access error, or undefined if we should not report errors.
     */
    function checkPropertyAccessibilityAtLocation(location: ts.Node,
        isSuper: boolean, writing: boolean,
        containingType: ts.Type, prop: ts.Symbol, errorNode?: ts.Node): boolean {

        const flags = ts.getDeclarationModifierFlagsFromSymbol(prop, writing);

        if (isSuper) {
            // TS 1.0 spec (April 2014): 4.8.2
            // - In a constructor, instance member function, instance member accessor, or
            //   instance member variable initializer where this references a derived class instance,
            //   a super property access is permitted and must specify a public instance member function of the base class.
            // - In a static member function or static member accessor
            //   where this references the constructor function object of a derived class,
            //   a super property access is permitted and must specify a public static member function of the base class.
            if (languageVersion < ts.ScriptTarget.ES2015) {
                if (symbolHasNonMethodDeclaration(prop)) {
                    if (errorNode) {
                        error(errorNode, ts.Diagnostics.Only_public_and_protected_methods_of_the_base_class_are_accessible_via_the_super_keyword);
                    }
                    return false;
                }
            }
            if (flags & ts.ModifierFlags.Abstract) {
                // A method cannot be accessed in a super property access if the method is abstract.
                // This error could mask a private property access error. But, a member
                // cannot simultaneously be private and abstract, so this will trigger an
                // additional error elsewhere.
                if (errorNode) {
                    error(errorNode,
                        ts.Diagnostics.Abstract_method_0_in_class_1_cannot_be_accessed_via_super_expression,
                        symbolToString(prop),
                        typeToString(getDeclaringClass(prop)!));
                }
                return false;
            }
        }

        // Referencing abstract properties within their own constructors is not allowed
        if ((flags & ts.ModifierFlags.Abstract) && symbolHasNonMethodDeclaration(prop) &&
            (ts.isThisProperty(location) || ts.isThisInitializedObjectBindingExpression(location) || ts.isObjectBindingPattern(location.parent) && ts.isThisInitializedDeclaration(location.parent.parent))) {
            const declaringClassDeclaration = ts.getClassLikeDeclarationOfSymbol(getParentOfSymbol(prop)!);
            if (declaringClassDeclaration && isNodeUsedDuringClassInitialization(location)) {
                if (errorNode) {
                    error(errorNode,
                        ts.Diagnostics.Abstract_property_0_in_class_1_cannot_be_accessed_in_the_constructor,
                        symbolToString(prop),
                        ts.getTextOfIdentifierOrLiteral(declaringClassDeclaration.name!));
                }
                return false;
            }
        }

        // Public properties are otherwise accessible.
        if (!(flags & ts.ModifierFlags.NonPublicAccessibilityModifier)) {
            return true;
        }

        // Property is known to be private or protected at this point

        // Private property is accessible if the property is within the declaring class
        if (flags & ts.ModifierFlags.Private) {
            const declaringClassDeclaration = ts.getClassLikeDeclarationOfSymbol(getParentOfSymbol(prop)!)!;
            if (!isNodeWithinClass(location, declaringClassDeclaration)) {
                if (errorNode) {
                    error(errorNode,
                        ts.Diagnostics.Property_0_is_private_and_only_accessible_within_class_1,
                        symbolToString(prop),
                        typeToString(getDeclaringClass(prop)!));
                }
                return false;
            }
            return true;
        }

        // Property is known to be protected at this point

        // All protected properties of a supertype are accessible in a super access
        if (isSuper) {
            return true;
        }

        // Find the first enclosing class that has the declaring classes of the protected constituents
        // of the property as base classes
        let enclosingClass = forEachEnclosingClass(location, enclosingDeclaration => {
            const enclosingClass = getDeclaredTypeOfSymbol(getSymbolOfNode(enclosingDeclaration)!) as ts.InterfaceType;
            return isClassDerivedFromDeclaringClasses(enclosingClass, prop, writing);
        });
        // A protected property is accessible if the property is within the declaring class or classes derived from it
        if (!enclosingClass) {
            // allow PropertyAccessibility if context is in function with this parameter
            // static member access is disallowed
            enclosingClass = getEnclosingClassFromThisParameter(location);
            enclosingClass = enclosingClass && isClassDerivedFromDeclaringClasses(enclosingClass, prop, writing);
            if (flags & ts.ModifierFlags.Static || !enclosingClass) {
                if (errorNode) {
                    error(errorNode,
                        ts.Diagnostics.Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses,
                        symbolToString(prop),
                        typeToString(getDeclaringClass(prop) || containingType));
                }
                return false;
            }
        }
        // No further restrictions for static properties
        if (flags & ts.ModifierFlags.Static) {
            return true;
        }
        if (containingType.flags & ts.TypeFlags.TypeParameter) {
            // get the original type -- represented as the type constraint of the 'this' type
            containingType = (containingType as ts.TypeParameter).isThisType ? getConstraintOfTypeParameter(containingType as ts.TypeParameter)! : getBaseConstraintOfType(containingType as ts.TypeParameter)!; // TODO: GH#18217 Use a different variable that's allowed to be undefined
        }
        if (!containingType || !hasBaseType(containingType, enclosingClass)) {
            if (errorNode) {
                error(errorNode,
                    ts.Diagnostics.Property_0_is_protected_and_only_accessible_through_an_instance_of_class_1_This_is_an_instance_of_class_2,
                    symbolToString(prop), typeToString(enclosingClass), typeToString(containingType));
            }
            return false;
        }
        return true;
    }

    function getEnclosingClassFromThisParameter(node: ts.Node): ts.InterfaceType | undefined {
        const thisParameter = getThisParameterFromNodeContext(node);
        let thisType = thisParameter?.type && getTypeFromTypeNode(thisParameter.type);
        if (thisType && thisType.flags & ts.TypeFlags.TypeParameter) {
            thisType = getConstraintOfTypeParameter(thisType as ts.TypeParameter);
        }
        if (thisType && ts.getObjectFlags(thisType) & (ts.ObjectFlags.ClassOrInterface | ts.ObjectFlags.Reference)) {
            return getTargetType(thisType) as ts.InterfaceType;
        }
        return undefined;
    }

    function getThisParameterFromNodeContext(node: ts.Node) {
        const thisContainer = ts.getThisContainer(node, /* includeArrowFunctions */ false);
        return thisContainer && ts.isFunctionLike(thisContainer) ? ts.getThisParameter(thisContainer) : undefined;
    }

    function symbolHasNonMethodDeclaration(symbol: ts.Symbol) {
        return !!forEachProperty(symbol, prop => !(prop.flags & ts.SymbolFlags.Method));
    }

    function checkNonNullExpression(node: ts.Expression | ts.QualifiedName) {
        return checkNonNullType(checkExpression(node), node);
    }

    function isNullableType(type: ts.Type) {
        return !!(getTypeFacts(type) & TypeFacts.IsUndefinedOrNull);
    }

    function getNonNullableTypeIfNeeded(type: ts.Type) {
        return isNullableType(type) ? getNonNullableType(type) : type;
    }

    function reportObjectPossiblyNullOrUndefinedError(node: ts.Node, facts: TypeFacts) {
        const nodeText = ts.isEntityNameExpression(node) ? ts.entityNameToString(node) : undefined;
        if (node.kind === ts.SyntaxKind.NullKeyword) {
            error(node, ts.Diagnostics.The_value_0_cannot_be_used_here, "null");
            return;
        }
        if (nodeText !== undefined && nodeText.length < 100) {
            if (ts.isIdentifier(node) && nodeText === "undefined") {
                error(node, ts.Diagnostics.The_value_0_cannot_be_used_here, "undefined");
                return;
            }
            error(node, facts & TypeFacts.IsUndefined ? facts & TypeFacts.IsNull ?
                ts.Diagnostics._0_is_possibly_null_or_undefined :
                ts.Diagnostics._0_is_possibly_undefined :
                ts.Diagnostics._0_is_possibly_null,
                nodeText
            );
        }
        else {
            error(node, facts & TypeFacts.IsUndefined ? facts & TypeFacts.IsNull ?
                ts.Diagnostics.Object_is_possibly_null_or_undefined :
                ts.Diagnostics.Object_is_possibly_undefined :
                ts.Diagnostics.Object_is_possibly_null
            );
        }
    }

    function reportCannotInvokePossiblyNullOrUndefinedError(node: ts.Node, facts: TypeFacts) {
        error(node, facts & TypeFacts.IsUndefined ? facts & TypeFacts.IsNull ?
            ts.Diagnostics.Cannot_invoke_an_object_which_is_possibly_null_or_undefined :
            ts.Diagnostics.Cannot_invoke_an_object_which_is_possibly_undefined :
            ts.Diagnostics.Cannot_invoke_an_object_which_is_possibly_null
        );
    }

    function checkNonNullTypeWithReporter(
        type: ts.Type,
        node: ts.Node,
        reportError: (node: ts.Node, facts: TypeFacts) => void
    ): ts.Type {
        if (strictNullChecks && type.flags & ts.TypeFlags.Unknown) {
            if (ts.isEntityNameExpression(node)) {
                const nodeText = ts.entityNameToString(node);
                if (nodeText.length < 100) {
                    error(node, ts.Diagnostics._0_is_of_type_unknown, nodeText);
                    return errorType;
                }
            }
            error(node, ts.Diagnostics.Object_is_of_type_unknown);
            return errorType;
        }
        const facts = getTypeFacts(type);
        if (facts & TypeFacts.IsUndefinedOrNull) {
            reportError(node, facts);
            const t = getNonNullableType(type);
            return t.flags & (ts.TypeFlags.Nullable | ts.TypeFlags.Never) ? errorType : t;
        }
        return type;
    }

    function checkNonNullType(type: ts.Type, node: ts.Node) {
        return checkNonNullTypeWithReporter(type, node, reportObjectPossiblyNullOrUndefinedError);
    }

    function checkNonNullNonVoidType(type: ts.Type, node: ts.Node): ts.Type {
        const nonNullType = checkNonNullType(type, node);
        if (nonNullType.flags & ts.TypeFlags.Void) {
            if (ts.isEntityNameExpression(node)) {
                const nodeText = ts.entityNameToString(node);
                if (ts.isIdentifier(node) && nodeText === "undefined") {
                    error(node, ts.Diagnostics.The_value_0_cannot_be_used_here, nodeText);
                    return nonNullType;
                }
                if (nodeText.length < 100) {
                    error(node, ts.Diagnostics._0_is_possibly_undefined, nodeText);
                    return nonNullType;
                }
            }
            error(node, ts.Diagnostics.Object_is_possibly_undefined);
        }
        return nonNullType;
    }

    function checkPropertyAccessExpression(node: ts.PropertyAccessExpression, checkMode: CheckMode | undefined) {
        return node.flags & ts.NodeFlags.OptionalChain ? checkPropertyAccessChain(node as ts.PropertyAccessChain, checkMode) :
            checkPropertyAccessExpressionOrQualifiedName(node, node.expression, checkNonNullExpression(node.expression), node.name, checkMode);
    }

    function checkPropertyAccessChain(node: ts.PropertyAccessChain, checkMode: CheckMode | undefined) {
        const leftType = checkExpression(node.expression);
        const nonOptionalType = getOptionalExpressionType(leftType, node.expression);
        return propagateOptionalTypeMarker(checkPropertyAccessExpressionOrQualifiedName(node, node.expression, checkNonNullType(nonOptionalType, node.expression), node.name, checkMode), node, nonOptionalType !== leftType);
    }

    function checkQualifiedName(node: ts.QualifiedName, checkMode: CheckMode | undefined) {
        const leftType = ts.isPartOfTypeQuery(node) && ts.isThisIdentifier(node.left) ? checkNonNullType(checkThisExpression(node.left), node.left) : checkNonNullExpression(node.left);
        return checkPropertyAccessExpressionOrQualifiedName(node, node.left, leftType, node.right, checkMode);
    }

    function isMethodAccessForCall(node: ts.Node) {
        while (node.parent.kind === ts.SyntaxKind.ParenthesizedExpression) {
            node = node.parent;
        }
        return ts.isCallOrNewExpression(node.parent) && node.parent.expression === node;
    }

    // Lookup the private identifier lexically.
    function lookupSymbolForPrivateIdentifierDeclaration(propName: ts.__String, location: ts.Node): ts.Symbol | undefined {
        for (let containingClass = ts.getContainingClass(location); !!containingClass; containingClass = ts.getContainingClass(containingClass)) {
            const { symbol } = containingClass;
            const name = ts.getSymbolNameForPrivateIdentifier(symbol, propName);
            const prop = (symbol.members && symbol.members.get(name)) || (symbol.exports && symbol.exports.get(name));
            if (prop) {
                return prop;
            }
        }
    }

    function checkGrammarPrivateIdentifierExpression(privId: ts.PrivateIdentifier): boolean {
        if (!ts.getContainingClass(privId)) {
            return grammarErrorOnNode(privId, ts.Diagnostics.Private_identifiers_are_not_allowed_outside_class_bodies);
        }

        if (!ts.isForInStatement(privId.parent)) {
            if (!ts.isExpressionNode(privId)) {
                return grammarErrorOnNode(privId, ts.Diagnostics.Private_identifiers_are_only_allowed_in_class_bodies_and_may_only_be_used_as_part_of_a_class_member_declaration_property_access_or_on_the_left_hand_side_of_an_in_expression);
            }

            const isInOperation = ts.isBinaryExpression(privId.parent) && privId.parent.operatorToken.kind === ts.SyntaxKind.InKeyword;
            if (!getSymbolForPrivateIdentifierExpression(privId) && !isInOperation) {
                return grammarErrorOnNode(privId, ts.Diagnostics.Cannot_find_name_0, ts.idText(privId));
            }
        }

        return false;
    }

    function checkPrivateIdentifierExpression(privId: ts.PrivateIdentifier): ts.Type {
        checkGrammarPrivateIdentifierExpression(privId);
        const symbol = getSymbolForPrivateIdentifierExpression(privId);
        if (symbol) {
            markPropertyAsReferenced(symbol, /* nodeForCheckWriteOnly: */ undefined, /* isThisAccess: */ false);
        }
        return anyType;
    }

    function getSymbolForPrivateIdentifierExpression(privId: ts.PrivateIdentifier): ts.Symbol | undefined {
        if (!ts.isExpressionNode(privId)) {
            return undefined;
        }

        const links = getNodeLinks(privId);
        if (links.resolvedSymbol === undefined) {
            links.resolvedSymbol = lookupSymbolForPrivateIdentifierDeclaration(privId.escapedText, privId);
        }
        return links.resolvedSymbol;
    }

    function getPrivateIdentifierPropertyOfType(leftType: ts.Type, lexicallyScopedIdentifier: ts.Symbol): ts.Symbol | undefined {
        return getPropertyOfType(leftType, lexicallyScopedIdentifier.escapedName);
    }

    function checkPrivateIdentifierPropertyAccess(leftType: ts.Type, right: ts.PrivateIdentifier, lexicallyScopedIdentifier: ts.Symbol | undefined): boolean {
        // Either the identifier could not be looked up in the lexical scope OR the lexically scoped identifier did not exist on the type.
        // Find a private identifier with the same description on the type.
        let propertyOnType: ts.Symbol | undefined;
        const properties = getPropertiesOfType(leftType);
        if (properties) {
            ts.forEach(properties, (symbol: ts.Symbol) => {
                const decl = symbol.valueDeclaration;
                if (decl && ts.isNamedDeclaration(decl) && ts.isPrivateIdentifier(decl.name) && decl.name.escapedText === right.escapedText) {
                    propertyOnType = symbol;
                    return true;
                }
            });
        }
        const diagName = diagnosticName(right);
        if (propertyOnType) {
            const typeValueDecl = ts.Debug.checkDefined(propertyOnType.valueDeclaration);
            const typeClass = ts.Debug.checkDefined(ts.getContainingClass(typeValueDecl));
            // We found a private identifier property with the same description.
            // Either:
            // - There is a lexically scoped private identifier AND it shadows the one we found on the type.
            // - It is an attempt to access the private identifier outside of the class.
            if (lexicallyScopedIdentifier?.valueDeclaration) {
                const lexicalValueDecl = lexicallyScopedIdentifier.valueDeclaration;
                const lexicalClass = ts.getContainingClass(lexicalValueDecl);
                ts.Debug.assert(!!lexicalClass);
                if (ts.findAncestor(lexicalClass, n => typeClass === n)) {
                    const diagnostic = error(
                        right,
                        ts.Diagnostics.The_property_0_cannot_be_accessed_on_type_1_within_this_class_because_it_is_shadowed_by_another_private_identifier_with_the_same_spelling,
                        diagName,
                        typeToString(leftType)
                    );

                    ts.addRelatedInfo(
                        diagnostic,
                        ts.createDiagnosticForNode(
                            lexicalValueDecl,
                            ts.Diagnostics.The_shadowing_declaration_of_0_is_defined_here,
                            diagName
                        ),
                        ts.createDiagnosticForNode(
                            typeValueDecl,
                            ts.Diagnostics.The_declaration_of_0_that_you_probably_intended_to_use_is_defined_here,
                            diagName
                        )
                    );
                    return true;
                }
            }
            error(
                right,
                ts.Diagnostics.Property_0_is_not_accessible_outside_class_1_because_it_has_a_private_identifier,
                diagName,
                diagnosticName(typeClass.name || anon)
            );
            return true;
        }
        return false;
    }

    function isThisPropertyAccessInConstructor(node: ts.ElementAccessExpression | ts.PropertyAccessExpression | ts.QualifiedName, prop: ts.Symbol) {
        return (isConstructorDeclaredProperty(prop) || ts.isThisProperty(node) && isAutoTypedProperty(prop))
            && ts.getThisContainer(node, /*includeArrowFunctions*/ true) === getDeclaringConstructor(prop);
    }

    function checkPropertyAccessExpressionOrQualifiedName(node: ts.PropertyAccessExpression | ts.QualifiedName, left: ts.Expression | ts.QualifiedName, leftType: ts.Type, right: ts.Identifier | ts.PrivateIdentifier, checkMode: CheckMode | undefined) {
        const parentSymbol = getNodeLinks(left).resolvedSymbol;
        const assignmentKind = ts.getAssignmentTargetKind(node);
        const apparentType = getApparentType(assignmentKind !== ts.AssignmentKind.None || isMethodAccessForCall(node) ? getWidenedType(leftType) : leftType);
        const isAnyLike = isTypeAny(apparentType) || apparentType === silentNeverType;
        let prop: ts.Symbol | undefined;
        if (ts.isPrivateIdentifier(right)) {
            if (languageVersion < ts.ScriptTarget.ESNext) {
                if (assignmentKind !== ts.AssignmentKind.None) {
                    checkExternalEmitHelpers(node, ts.ExternalEmitHelpers.ClassPrivateFieldSet);
                }
                if (assignmentKind !== ts.AssignmentKind.Definite) {
                    checkExternalEmitHelpers(node, ts.ExternalEmitHelpers.ClassPrivateFieldGet);
                }
            }

            const lexicallyScopedSymbol = lookupSymbolForPrivateIdentifierDeclaration(right.escapedText, right);
            if (assignmentKind && lexicallyScopedSymbol && lexicallyScopedSymbol.valueDeclaration && ts.isMethodDeclaration(lexicallyScopedSymbol.valueDeclaration)) {
                grammarErrorOnNode(right, ts.Diagnostics.Cannot_assign_to_private_method_0_Private_methods_are_not_writable, ts.idText(right));
            }

            if (isAnyLike) {
                if (lexicallyScopedSymbol) {
                    return isErrorType(apparentType) ? errorType : apparentType;
                }
                if (!ts.getContainingClass(right)) {
                    grammarErrorOnNode(right, ts.Diagnostics.Private_identifiers_are_not_allowed_outside_class_bodies);
                    return anyType;
                }
            }
            prop = lexicallyScopedSymbol ? getPrivateIdentifierPropertyOfType(leftType, lexicallyScopedSymbol) : undefined;
            // Check for private-identifier-specific shadowing and lexical-scoping errors.
            if (!prop && checkPrivateIdentifierPropertyAccess(leftType, right, lexicallyScopedSymbol)) {
                return errorType;
            }
            else {
                const isSetonlyAccessor = prop && prop.flags & ts.SymbolFlags.SetAccessor && !(prop.flags & ts.SymbolFlags.GetAccessor);
                if (isSetonlyAccessor && assignmentKind !== ts.AssignmentKind.Definite) {
                    error(node, ts.Diagnostics.Private_accessor_was_defined_without_a_getter);
                }
            }
        }
        else {
            if (isAnyLike) {
                if (ts.isIdentifier(left) && parentSymbol) {
                    markAliasReferenced(parentSymbol, node);
                }
                return isErrorType(apparentType) ? errorType : apparentType;
            }
            prop = getPropertyOfType(apparentType, right.escapedText, /*skipObjectFunctionPropertyAugment*/ false, /*includeTypeOnlyMembers*/ node.kind === ts.SyntaxKind.QualifiedName);
        }
        // In `Foo.Bar.Baz`, 'Foo' is not referenced if 'Bar' is a const enum or a module containing only const enums.
        // `Foo` is also not referenced in `enum FooCopy { Bar = Foo.Bar }`, because the enum member value gets inlined
        // here even if `Foo` is not a const enum.
        //
        // The exceptions are:
        //   1. if 'isolatedModules' is enabled, because the const enum value will not be inlined, and
        //   2. if 'preserveConstEnums' is enabled and the expression is itself an export, e.g. `export = Foo.Bar.Baz`.
        if (ts.isIdentifier(left) && parentSymbol && (
            compilerOptions.isolatedModules ||
            !(prop && (isConstEnumOrConstEnumOnlyModule(prop) || prop.flags & ts.SymbolFlags.EnumMember && node.parent.kind === ts.SyntaxKind.EnumMember)) ||
            ts.shouldPreserveConstEnums(compilerOptions) && isExportOrExportExpression(node)
        )) {
            markAliasReferenced(parentSymbol, node);
        }

        let propType: ts.Type;
        if (!prop) {
            const indexInfo = !ts.isPrivateIdentifier(right) && (assignmentKind === ts.AssignmentKind.None || !isGenericObjectType(leftType) || ts.isThisTypeParameter(leftType)) ?
                getApplicableIndexInfoForName(apparentType, right.escapedText) : undefined;
            if (!(indexInfo && indexInfo.type)) {
                const isUncheckedJS = isUncheckedJSSuggestion(node, leftType.symbol, /*excludeClasses*/ true);
                if (!isUncheckedJS && isJSLiteralType(leftType)) {
                    return anyType;
                }
                if (leftType.symbol === globalThisSymbol) {
                    if (globalThisSymbol.exports!.has(right.escapedText) && (globalThisSymbol.exports!.get(right.escapedText)!.flags & ts.SymbolFlags.BlockScoped)) {
                        error(right, ts.Diagnostics.Property_0_does_not_exist_on_type_1, ts.unescapeLeadingUnderscores(right.escapedText), typeToString(leftType));
                    }
                    else if (noImplicitAny) {
                        error(right, ts.Diagnostics.Element_implicitly_has_an_any_type_because_type_0_has_no_index_signature, typeToString(leftType));
                    }
                    return anyType;
                }
                if (right.escapedText && !checkAndReportErrorForExtendingInterface(node)) {
                    reportNonexistentProperty(right, ts.isThisTypeParameter(leftType) ? apparentType : leftType, isUncheckedJS);
                }
                return errorType;
            }
            if (indexInfo.isReadonly && (ts.isAssignmentTarget(node) || ts.isDeleteTarget(node))) {
                error(node, ts.Diagnostics.Index_signature_in_type_0_only_permits_reading, typeToString(apparentType));
            }

            propType = (compilerOptions.noUncheckedIndexedAccess && !ts.isAssignmentTarget(node)) ? getUnionType([indexInfo.type, undefinedType]) : indexInfo.type;
            if (compilerOptions.noPropertyAccessFromIndexSignature && ts.isPropertyAccessExpression(node)) {
                error(right, ts.Diagnostics.Property_0_comes_from_an_index_signature_so_it_must_be_accessed_with_0, ts.unescapeLeadingUnderscores(right.escapedText));
            }
            if (indexInfo.declaration && ts.getCombinedNodeFlags(indexInfo.declaration) & ts.NodeFlags.Deprecated) {
                addDeprecatedSuggestion(right, [indexInfo.declaration], right.escapedText as string);
            }
        }
        else {
            if (isDeprecatedSymbol(prop) && isUncalledFunctionReference(node, prop) && prop.declarations) {
                addDeprecatedSuggestion(right, prop.declarations, right.escapedText as string);
            }
            checkPropertyNotUsedBeforeDeclaration(prop, node, right);
            markPropertyAsReferenced(prop, node, isSelfTypeAccess(left, parentSymbol));
            getNodeLinks(node).resolvedSymbol = prop;
            const writing = ts.isWriteAccess(node);
            checkPropertyAccessibility(node, left.kind === ts.SyntaxKind.SuperKeyword, writing, apparentType, prop);
            if (isAssignmentToReadonlyEntity(node as ts.Expression, prop, assignmentKind)) {
                error(right, ts.Diagnostics.Cannot_assign_to_0_because_it_is_a_read_only_property, ts.idText(right));
                return errorType;
            }

            propType = isThisPropertyAccessInConstructor(node, prop) ? autoType : writing ? getWriteTypeOfSymbol(prop) : getTypeOfSymbol(prop);
        }

        return getFlowTypeOfAccessExpression(node, prop, propType, right, checkMode);
    }

    /**
     * Determines whether a did-you-mean error should be a suggestion in an unchecked JS file.
     * Only applies to unchecked JS files without checkJS, // @ts-check or // @ts-nocheck
     * It does not suggest when the suggestion:
     * - Is from a global file that is different from the reference file, or
     * - (optionally) Is a class, or is a this.x property access expression
     */
    function isUncheckedJSSuggestion(node: ts.Node | undefined, suggestion: ts.Symbol | undefined, excludeClasses: boolean): boolean {
        const file = ts.getSourceFileOfNode(node);
        if (file) {
            if (compilerOptions.checkJs === undefined && file.checkJsDirective === undefined && (file.scriptKind === ts.ScriptKind.JS || file.scriptKind === ts.ScriptKind.JSX)) {
                const declarationFile = ts.forEach(suggestion?.declarations, ts.getSourceFileOfNode);
                return !(file !== declarationFile && !!declarationFile && isGlobalSourceFile(declarationFile))
                    && !(excludeClasses && suggestion && suggestion.flags & ts.SymbolFlags.Class)
                    && !(!!node && excludeClasses && ts.isPropertyAccessExpression(node) && node.expression.kind === ts.SyntaxKind.ThisKeyword);
            }
        }
        return false;
    }

    function getFlowTypeOfAccessExpression(node: ts.ElementAccessExpression | ts.PropertyAccessExpression | ts.QualifiedName, prop: ts.Symbol | undefined, propType: ts.Type, errorNode: ts.Node, checkMode: CheckMode | undefined) {
        // Only compute control flow type if this is a property access expression that isn't an
        // assignment target, and the referenced property was declared as a variable, property,
        // accessor, or optional method.
        const assignmentKind = ts.getAssignmentTargetKind(node);
        if (assignmentKind === ts.AssignmentKind.Definite) {
            return removeMissingType(propType, !!(prop && prop.flags & ts.SymbolFlags.Optional));
        }
        if (prop &&
            !(prop.flags & (ts.SymbolFlags.Variable | ts.SymbolFlags.Property | ts.SymbolFlags.Accessor))
            && !(prop.flags & ts.SymbolFlags.Method && propType.flags & ts.TypeFlags.Union)
            && !isDuplicatedCommonJSExport(prop.declarations)) {
            return propType;
        }
        if (propType === autoType) {
            return getFlowTypeOfProperty(node, prop);
        }
        propType = getNarrowableTypeForReference(propType, node, checkMode);
        // If strict null checks and strict property initialization checks are enabled, if we have
        // a this.xxx property access, if the property is an instance property without an initializer,
        // and if we are in a constructor of the same class as the property declaration, assume that
        // the property is uninitialized at the top of the control flow.
        let assumeUninitialized = false;
        if (strictNullChecks && strictPropertyInitialization && ts.isAccessExpression(node) && node.expression.kind === ts.SyntaxKind.ThisKeyword) {
            const declaration = prop && prop.valueDeclaration;
            if (declaration && isPropertyWithoutInitializer(declaration)) {
                if (!ts.isStatic(declaration)) {
                    const flowContainer = getControlFlowContainer(node);
                    if (flowContainer.kind === ts.SyntaxKind.Constructor && flowContainer.parent === declaration.parent && !(declaration.flags & ts.NodeFlags.Ambient)) {
                        assumeUninitialized = true;
                    }
                }
            }
        }
        else if (strictNullChecks && prop && prop.valueDeclaration &&
            ts.isPropertyAccessExpression(prop.valueDeclaration) &&
            ts.getAssignmentDeclarationPropertyAccessKind(prop.valueDeclaration) &&
            getControlFlowContainer(node) === getControlFlowContainer(prop.valueDeclaration)) {
            assumeUninitialized = true;
        }
        const flowType = getFlowTypeOfReference(node, propType, assumeUninitialized ? getOptionalType(propType) : propType);
        if (assumeUninitialized && !containsUndefinedType(propType) && containsUndefinedType(flowType)) {
            error(errorNode, ts.Diagnostics.Property_0_is_used_before_being_assigned, symbolToString(prop!)); // TODO: GH#18217
            // Return the declared type to reduce follow-on errors
            return propType;
        }
        return assignmentKind ? getBaseTypeOfLiteralType(flowType) : flowType;
    }

    function checkPropertyNotUsedBeforeDeclaration(prop: ts.Symbol, node: ts.PropertyAccessExpression | ts.QualifiedName, right: ts.Identifier | ts.PrivateIdentifier): void {
        const { valueDeclaration } = prop;
        if (!valueDeclaration || ts.getSourceFileOfNode(node).isDeclarationFile) {
            return;
        }

        let diagnosticMessage;
        const declarationName = ts.idText(right);
        if (isInPropertyInitializerOrClassStaticBlock(node)
            && !isOptionalPropertyDeclaration(valueDeclaration)
            && !(ts.isAccessExpression(node) && ts.isAccessExpression(node.expression))
            && !isBlockScopedNameDeclaredBeforeUse(valueDeclaration, right)
            && !(ts.isMethodDeclaration(valueDeclaration) && ts.getCombinedModifierFlags(valueDeclaration) & ts.ModifierFlags.Static)
            && (compilerOptions.useDefineForClassFields || !isPropertyDeclaredInAncestorClass(prop))) {
            diagnosticMessage = error(right, ts.Diagnostics.Property_0_is_used_before_its_initialization, declarationName);
        }
        else if (valueDeclaration.kind === ts.SyntaxKind.ClassDeclaration &&
            node.parent.kind !== ts.SyntaxKind.TypeReference &&
            !(valueDeclaration.flags & ts.NodeFlags.Ambient) &&
            !isBlockScopedNameDeclaredBeforeUse(valueDeclaration, right)) {
            diagnosticMessage = error(right, ts.Diagnostics.Class_0_used_before_its_declaration, declarationName);
        }

        if (diagnosticMessage) {
            ts.addRelatedInfo(diagnosticMessage,
                ts.createDiagnosticForNode(valueDeclaration, ts.Diagnostics._0_is_declared_here, declarationName)
            );
        }
    }

    function isInPropertyInitializerOrClassStaticBlock(node: ts.Node): boolean {
        return !!ts.findAncestor(node, node => {
            switch (node.kind) {
                case ts.SyntaxKind.PropertyDeclaration:
                    return true;
                case ts.SyntaxKind.PropertyAssignment:
                case ts.SyntaxKind.MethodDeclaration:
                case ts.SyntaxKind.GetAccessor:
                case ts.SyntaxKind.SetAccessor:
                case ts.SyntaxKind.SpreadAssignment:
                case ts.SyntaxKind.ComputedPropertyName:
                case ts.SyntaxKind.TemplateSpan:
                case ts.SyntaxKind.JsxExpression:
                case ts.SyntaxKind.JsxAttribute:
                case ts.SyntaxKind.JsxAttributes:
                case ts.SyntaxKind.JsxSpreadAttribute:
                case ts.SyntaxKind.JsxOpeningElement:
                case ts.SyntaxKind.ExpressionWithTypeArguments:
                case ts.SyntaxKind.HeritageClause:
                    return false;
                case ts.SyntaxKind.ArrowFunction:
                case ts.SyntaxKind.ExpressionStatement:
                    return ts.isBlock(node.parent) && ts.isClassStaticBlockDeclaration(node.parent.parent) ? true : "quit";
                default:
                    return ts.isExpressionNode(node) ? false : "quit";
            }
        });
    }

    /**
     * It's possible that "prop.valueDeclaration" is a local declaration, but the property was also declared in a superclass.
     * In that case we won't consider it used before its declaration, because it gets its value from the superclass' declaration.
     */
    function isPropertyDeclaredInAncestorClass(prop: ts.Symbol): boolean {
        if (!(prop.parent!.flags & ts.SymbolFlags.Class)) {
            return false;
        }
        let classType: ts.InterfaceType | undefined = getTypeOfSymbol(prop.parent!) as ts.InterfaceType;
        while (true) {
            classType = classType.symbol && getSuperClass(classType) as ts.InterfaceType | undefined;
            if (!classType) {
                return false;
            }
            const superProperty = getPropertyOfType(classType, prop.escapedName);
            if (superProperty && superProperty.valueDeclaration) {
                return true;
            }
        }
    }

    function getSuperClass(classType: ts.InterfaceType): ts.Type | undefined {
        const x = getBaseTypes(classType);
        if (x.length === 0) {
            return undefined;
        }
        return getIntersectionType(x);
    }

    function reportNonexistentProperty(propNode: ts.Identifier | ts.PrivateIdentifier, containingType: ts.Type, isUncheckedJS: boolean) {
        let errorInfo: ts.DiagnosticMessageChain | undefined;
        let relatedInfo: ts.Diagnostic | undefined;
        if (!ts.isPrivateIdentifier(propNode) && containingType.flags & ts.TypeFlags.Union && !(containingType.flags & ts.TypeFlags.Primitive)) {
            for (const subtype of (containingType as ts.UnionType).types) {
                if (!getPropertyOfType(subtype, propNode.escapedText) && !getApplicableIndexInfoForName(subtype, propNode.escapedText)) {
                    errorInfo = ts.chainDiagnosticMessages(errorInfo, ts.Diagnostics.Property_0_does_not_exist_on_type_1, ts.declarationNameToString(propNode), typeToString(subtype));
                    break;
                }
            }
        }
        if (typeHasStaticProperty(propNode.escapedText, containingType)) {
            const propName = ts.declarationNameToString(propNode);
            const typeName = typeToString(containingType);
            errorInfo = ts.chainDiagnosticMessages(errorInfo, ts.Diagnostics.Property_0_does_not_exist_on_type_1_Did_you_mean_to_access_the_static_member_2_instead, propName, typeName, typeName + "." + propName);
        }
        else {
            const promisedType = getPromisedTypeOfPromise(containingType);
            if (promisedType && getPropertyOfType(promisedType, propNode.escapedText)) {
                errorInfo = ts.chainDiagnosticMessages(errorInfo, ts.Diagnostics.Property_0_does_not_exist_on_type_1, ts.declarationNameToString(propNode), typeToString(containingType));
                relatedInfo = ts.createDiagnosticForNode(propNode, ts.Diagnostics.Did_you_forget_to_use_await);
            }
            else {
                const missingProperty = ts.declarationNameToString(propNode);
                const container = typeToString(containingType);
                const libSuggestion = getSuggestedLibForNonExistentProperty(missingProperty, containingType);
                if (libSuggestion !== undefined) {
                    errorInfo = ts.chainDiagnosticMessages(errorInfo, ts.Diagnostics.Property_0_does_not_exist_on_type_1_Do_you_need_to_change_your_target_library_Try_changing_the_lib_compiler_option_to_2_or_later, missingProperty, container, libSuggestion);
                }
                else {
                    const suggestion = getSuggestedSymbolForNonexistentProperty(propNode, containingType);
                    if (suggestion !== undefined) {
                        const suggestedName = ts.symbolName(suggestion);
                        const message = isUncheckedJS ? ts.Diagnostics.Property_0_may_not_exist_on_type_1_Did_you_mean_2 : ts.Diagnostics.Property_0_does_not_exist_on_type_1_Did_you_mean_2;
                        errorInfo = ts.chainDiagnosticMessages(errorInfo, message, missingProperty, container, suggestedName);
                        relatedInfo = suggestion.valueDeclaration && ts.createDiagnosticForNode(suggestion.valueDeclaration, ts.Diagnostics._0_is_declared_here, suggestedName);
                    }
                    else {
                        const diagnostic = containerSeemsToBeEmptyDomElement(containingType)
                            ? ts.Diagnostics.Property_0_does_not_exist_on_type_1_Try_changing_the_lib_compiler_option_to_include_dom
                            : ts.Diagnostics.Property_0_does_not_exist_on_type_1;
                        errorInfo = ts.chainDiagnosticMessages(elaborateNeverIntersection(errorInfo, containingType), diagnostic, missingProperty, container);
                    }
                }
            }
        }
        const resultDiagnostic = ts.createDiagnosticForNodeFromMessageChain(propNode, errorInfo);
        if (relatedInfo) {
            ts.addRelatedInfo(resultDiagnostic, relatedInfo);
        }
        addErrorOrSuggestion(!isUncheckedJS || errorInfo.code !== ts.Diagnostics.Property_0_may_not_exist_on_type_1_Did_you_mean_2.code, resultDiagnostic);
    }

    function containerSeemsToBeEmptyDomElement(containingType: ts.Type) {
        return (compilerOptions.lib && !compilerOptions.lib.includes("dom")) &&
            everyContainedType(containingType, type => type.symbol && /^(EventTarget|Node|((HTML[a-zA-Z]*)?Element))$/.test(ts.unescapeLeadingUnderscores(type.symbol.escapedName))) &&
            isEmptyObjectType(containingType);
    }

    function typeHasStaticProperty(propName: ts.__String, containingType: ts.Type): boolean {
        const prop = containingType.symbol && getPropertyOfType(getTypeOfSymbol(containingType.symbol), propName);
        return prop !== undefined && !!prop.valueDeclaration && ts.isStatic(prop.valueDeclaration);
    }

    function getSuggestedLibForNonExistentName(name: ts.__String | ts.Identifier) {
        const missingName = diagnosticName(name);
        const allFeatures = ts.getScriptTargetFeatures();
        const libTargets = ts.getOwnKeys(allFeatures);
        for (const libTarget of libTargets) {
            const containingTypes = ts.getOwnKeys(allFeatures[libTarget]);
            if (containingTypes !== undefined && ts.contains(containingTypes, missingName)) {
                return libTarget;
            }
        }
    }

    function getSuggestedLibForNonExistentProperty(missingProperty: string, containingType: ts.Type) {
        const container = getApparentType(containingType).symbol;
        if (!container) {
            return undefined;
        }
        const allFeatures = ts.getScriptTargetFeatures();
        const libTargets = ts.getOwnKeys(allFeatures);
        for (const libTarget of libTargets) {
            const featuresOfLib = allFeatures[libTarget];
            const featuresOfContainingType = featuresOfLib[ts.symbolName(container)];
            if (featuresOfContainingType !== undefined && ts.contains(featuresOfContainingType, missingProperty)) {
                return libTarget;
            }
        }
    }

    function getSuggestedSymbolForNonexistentClassMember(name: string, baseType: ts.Type): ts.Symbol | undefined {
        return getSpellingSuggestionForName(name, getPropertiesOfType(baseType), ts.SymbolFlags.ClassMember);
    }

    function getSuggestedSymbolForNonexistentProperty(name: ts.Identifier | ts.PrivateIdentifier | string, containingType: ts.Type): ts.Symbol | undefined {
        let props = getPropertiesOfType(containingType);
        if (typeof name !== "string") {
            const parent = name.parent;
            if (ts.isPropertyAccessExpression(parent)) {
                props = ts.filter(props, prop => isValidPropertyAccessForCompletions(parent, containingType, prop));
            }
            name = ts.idText(name);
        }
        return getSpellingSuggestionForName(name, props, ts.SymbolFlags.Value);
    }

    function getSuggestedSymbolForNonexistentJSXAttribute(name: ts.Identifier | ts.PrivateIdentifier | string, containingType: ts.Type): ts.Symbol | undefined {
        const strName = ts.isString(name) ? name : ts.idText(name);
        const properties = getPropertiesOfType(containingType);
        const jsxSpecific = strName === "for" ? ts.find(properties, x => ts.symbolName(x) === "htmlFor")
            : strName === "class" ? ts.find(properties, x => ts.symbolName(x) === "className")
            : undefined;
        return jsxSpecific ?? getSpellingSuggestionForName(strName, properties, ts.SymbolFlags.Value);
    }

    function getSuggestionForNonexistentProperty(name: ts.Identifier | ts.PrivateIdentifier | string, containingType: ts.Type): string | undefined {
        const suggestion = getSuggestedSymbolForNonexistentProperty(name, containingType);
        return suggestion && ts.symbolName(suggestion);
    }

    function getSuggestedSymbolForNonexistentSymbol(location: ts.Node | undefined, outerName: ts.__String, meaning: ts.SymbolFlags): ts.Symbol | undefined {
        ts.Debug.assert(outerName !== undefined, "outername should always be defined");
        const result = resolveNameHelper(location, outerName, meaning, /*nameNotFoundMessage*/ undefined, outerName, /*isUse*/ false, /*excludeGlobals*/ false, /*getSpellingSuggestions*/ true, (symbols, name, meaning) => {
            ts.Debug.assertEqual(outerName, name, "name should equal outerName");
            const symbol = getSymbol(symbols, name, meaning);
            // Sometimes the symbol is found when location is a return type of a function: `typeof x` and `x` is declared in the body of the function
            // So the table *contains* `x` but `x` isn't actually in scope.
            // However, resolveNameHelper will continue and call this callback again, so we'll eventually get a correct suggestion.
            if (symbol) return symbol;
            let candidates: ts.Symbol[];
            if (symbols === globals) {
                const primitives = ts.mapDefined(
                    ["string", "number", "boolean", "object", "bigint", "symbol"],
                    s => symbols.has((s.charAt(0).toUpperCase() + s.slice(1)) as ts.__String)
                        ? createSymbol(ts.SymbolFlags.TypeAlias, s as ts.__String) as ts.Symbol
                        : undefined);
                candidates = primitives.concat(ts.arrayFrom(symbols.values()));
            }
            else {
                candidates = ts.arrayFrom(symbols.values());
            }
            return getSpellingSuggestionForName(ts.unescapeLeadingUnderscores(name), candidates, meaning);
        });
        return result;
    }

    function getSuggestionForNonexistentSymbol(location: ts.Node | undefined, outerName: ts.__String, meaning: ts.SymbolFlags): string | undefined {
        const symbolResult = getSuggestedSymbolForNonexistentSymbol(location, outerName, meaning);
        return symbolResult && ts.symbolName(symbolResult);
    }

    function getSuggestedSymbolForNonexistentModule(name: ts.Identifier, targetModule: ts.Symbol): ts.Symbol | undefined {
        return targetModule.exports && getSpellingSuggestionForName(ts.idText(name), getExportsOfModuleAsArray(targetModule), ts.SymbolFlags.ModuleMember);
    }

    function getSuggestionForNonexistentExport(name: ts.Identifier, targetModule: ts.Symbol): string | undefined {
        const suggestion = getSuggestedSymbolForNonexistentModule(name, targetModule);
        return suggestion && ts.symbolName(suggestion);
    }

    function getSuggestionForNonexistentIndexSignature(objectType: ts.Type, expr: ts.ElementAccessExpression, keyedType: ts.Type): string | undefined {
        // check if object type has setter or getter
        function hasProp(name: "set" | "get") {
            const prop = getPropertyOfObjectType(objectType, name as ts.__String);
            if (prop) {
                const s = getSingleCallSignature(getTypeOfSymbol(prop));
                return !!s && getMinArgumentCount(s) >= 1 && isTypeAssignableTo(keyedType, getTypeAtPosition(s, 0));
            }
            return false;
        }

        const suggestedMethod = ts.isAssignmentTarget(expr) ? "set" : "get";
        if (!hasProp(suggestedMethod)) {
            return undefined;
        }

        let suggestion = ts.tryGetPropertyAccessOrIdentifierToString(expr.expression);
        if (suggestion === undefined) {
            suggestion = suggestedMethod;
        }
        else {
            suggestion += "." + suggestedMethod;
        }

        return suggestion;
    }

    function getSuggestedTypeForNonexistentStringLiteralType(source: ts.StringLiteralType, target: ts.UnionType): ts.StringLiteralType | undefined {
        const candidates = target.types.filter((type): type is ts.StringLiteralType => !!(type.flags & ts.TypeFlags.StringLiteral));
        return ts.getSpellingSuggestion(source.value, candidates, type => type.value);
    }

    /**
     * Given a name and a list of symbols whose names are *not* equal to the name, return a spelling suggestion if there is one that is close enough.
     * Names less than length 3 only check for case-insensitive equality, not levenshtein distance.
     *
     * If there is a candidate that's the same except for case, return that.
     * If there is a candidate that's within one edit of the name, return that.
     * Otherwise, return the candidate with the smallest Levenshtein distance,
     *    except for candidates:
     *      * With no name
     *      * Whose meaning doesn't match the `meaning` parameter.
     *      * Whose length differs from the target name by more than 0.34 of the length of the name.
     *      * Whose levenshtein distance is more than 0.4 of the length of the name
     *        (0.4 allows 1 substitution/transposition for every 5 characters,
     *         and 1 insertion/deletion at 3 characters)
     */
    function getSpellingSuggestionForName(name: string, symbols: ts.Symbol[], meaning: ts.SymbolFlags): ts.Symbol | undefined {
        return ts.getSpellingSuggestion(name, symbols, getCandidateName);

        function getCandidateName(candidate: ts.Symbol) {
            const candidateName = ts.symbolName(candidate);
            if (ts.startsWith(candidateName, "\"")) {
                return undefined;
            }

            if (candidate.flags & meaning) {
                return candidateName;
            }

            if (candidate.flags & ts.SymbolFlags.Alias) {
                const alias = tryResolveAlias(candidate);
                if (alias && alias.flags & meaning) {
                    return candidateName;
                }
            }

            return undefined;
        }
    }

    function markPropertyAsReferenced(prop: ts.Symbol, nodeForCheckWriteOnly: ts.Node | undefined, isSelfTypeAccess: boolean) {
        const valueDeclaration = prop && (prop.flags & ts.SymbolFlags.ClassMember) && prop.valueDeclaration;
        if (!valueDeclaration) {
            return;
        }
        const hasPrivateModifier = ts.hasEffectiveModifier(valueDeclaration, ts.ModifierFlags.Private);
        const hasPrivateIdentifier = prop.valueDeclaration && ts.isNamedDeclaration(prop.valueDeclaration) && ts.isPrivateIdentifier(prop.valueDeclaration.name);
        if (!hasPrivateModifier && !hasPrivateIdentifier) {
            return;
        }
        if (nodeForCheckWriteOnly && ts.isWriteOnlyAccess(nodeForCheckWriteOnly) && !(prop.flags & ts.SymbolFlags.SetAccessor)) {
            return;
        }
        if (isSelfTypeAccess) {
            // Find any FunctionLikeDeclaration because those create a new 'this' binding. But this should only matter for methods (or getters/setters).
            const containingMethod = ts.findAncestor(nodeForCheckWriteOnly, ts.isFunctionLikeDeclaration);
            if (containingMethod && containingMethod.symbol === prop) {
                return;
            }
        }

        (ts.getCheckFlags(prop) & ts.CheckFlags.Instantiated ? getSymbolLinks(prop).target : prop)!.isReferenced = ts.SymbolFlags.All;
    }

    function isSelfTypeAccess(name: ts.Expression | ts.QualifiedName, parent: ts.Symbol | undefined) {
        return name.kind === ts.SyntaxKind.ThisKeyword
            || !!parent && ts.isEntityNameExpression(name) && parent === getResolvedSymbol(ts.getFirstIdentifier(name));
    }

    function isValidPropertyAccess(node: ts.PropertyAccessExpression | ts.QualifiedName | ts.ImportTypeNode, propertyName: ts.__String): boolean {
        switch (node.kind) {
            case ts.SyntaxKind.PropertyAccessExpression:
                return isValidPropertyAccessWithType(node, node.expression.kind === ts.SyntaxKind.SuperKeyword, propertyName, getWidenedType(checkExpression(node.expression)));
            case ts.SyntaxKind.QualifiedName:
                return isValidPropertyAccessWithType(node, /*isSuper*/ false, propertyName, getWidenedType(checkExpression(node.left)));
            case ts.SyntaxKind.ImportType:
                return isValidPropertyAccessWithType(node, /*isSuper*/ false, propertyName, getTypeFromTypeNode(node));
        }
    }

    /**
     * Checks if an existing property access is valid for completions purposes.
     * @param node a property access-like node where we want to check if we can access a property.
     * This node does not need to be an access of the property we are checking.
     * e.g. in completions, this node will often be an incomplete property access node, as in `foo.`.
     * Besides providing a location (i.e. scope) used to check property accessibility, we use this node for
     * computing whether this is a `super` property access.
     * @param type the type whose property we are checking.
     * @param property the accessed property's symbol.
     */
    function isValidPropertyAccessForCompletions(node: ts.PropertyAccessExpression | ts.ImportTypeNode | ts.QualifiedName, type: ts.Type, property: ts.Symbol): boolean {
        return isPropertyAccessible(node,
            node.kind === ts.SyntaxKind.PropertyAccessExpression && node.expression.kind === ts.SyntaxKind.SuperKeyword,
            /* isWrite */ false,
            type,
            property);
        // Previously we validated the 'this' type of methods but this adversely affected performance. See #31377 for more context.
    }

    function isValidPropertyAccessWithType(
        node: ts.PropertyAccessExpression | ts.QualifiedName | ts.ImportTypeNode,
        isSuper: boolean,
        propertyName: ts.__String,
        type: ts.Type): boolean {

        // Short-circuiting for improved performance.
        if (isTypeAny(type)) {
            return true;
        }

        const prop = getPropertyOfType(type, propertyName);
        return !!prop && isPropertyAccessible(node, isSuper, /* isWrite */ false, type, prop);
    }

    /**
     * Checks if a property can be accessed in a location.
     * The location is given by the `node` parameter.
     * The node does not need to be a property access.
     * @param node location where to check property accessibility
     * @param isSuper whether to consider this a `super` property access, e.g. `super.foo`.
     * @param isWrite whether this is a write access, e.g. `++foo.x`.
     * @param containingType type where the property comes from.
     * @param property property symbol.
     */
    function isPropertyAccessible(
        node: ts.Node,
        isSuper: boolean,
        isWrite: boolean,
        containingType: ts.Type,
        property: ts.Symbol): boolean {

        // Short-circuiting for improved performance.
        if (isTypeAny(containingType)) {
            return true;
        }

        // A #private property access in an optional chain is an error dealt with by the parser.
         // The checker does not check for it, so we need to do our own check here.
         if (property.valueDeclaration && ts.isPrivateIdentifierClassElementDeclaration(property.valueDeclaration)) {
            const declClass = ts.getContainingClass(property.valueDeclaration);
            return !ts.isOptionalChain(node) && !!ts.findAncestor(node, parent => parent === declClass);
        }

        return checkPropertyAccessibilityAtLocation(node, isSuper, isWrite, containingType, property);
    }

    /**
     * Return the symbol of the for-in variable declared or referenced by the given for-in statement.
     */
    function getForInVariableSymbol(node: ts.ForInStatement): ts.Symbol | undefined {
        const initializer = node.initializer;
        if (initializer.kind === ts.SyntaxKind.VariableDeclarationList) {
            const variable = (initializer as ts.VariableDeclarationList).declarations[0];
            if (variable && !ts.isBindingPattern(variable.name)) {
                return getSymbolOfNode(variable);
            }
        }
        else if (initializer.kind === ts.SyntaxKind.Identifier) {
            return getResolvedSymbol(initializer as ts.Identifier);
        }
        return undefined;
    }

    /**
     * Return true if the given type is considered to have numeric property names.
     */
    function hasNumericPropertyNames(type: ts.Type) {
        return getIndexInfosOfType(type).length === 1 && !!getIndexInfoOfType(type, numberType);
    }

    /**
     * Return true if given node is an expression consisting of an identifier (possibly parenthesized)
     * that references a for-in variable for an object with numeric property names.
     */
    function isForInVariableForNumericPropertyNames(expr: ts.Expression) {
        const e = ts.skipParentheses(expr);
        if (e.kind === ts.SyntaxKind.Identifier) {
            const symbol = getResolvedSymbol(e as ts.Identifier);
            if (symbol.flags & ts.SymbolFlags.Variable) {
                let child: ts.Node = expr;
                let node = expr.parent;
                while (node) {
                    if (node.kind === ts.SyntaxKind.ForInStatement &&
                        child === (node as ts.ForInStatement).statement &&
                        getForInVariableSymbol(node as ts.ForInStatement) === symbol &&
                        hasNumericPropertyNames(getTypeOfExpression((node as ts.ForInStatement).expression))) {
                        return true;
                    }
                    child = node;
                    node = node.parent;
                }
            }
        }
        return false;
    }

    function checkIndexedAccess(node: ts.ElementAccessExpression, checkMode: CheckMode | undefined): ts.Type {
        return node.flags & ts.NodeFlags.OptionalChain ? checkElementAccessChain(node as ts.ElementAccessChain, checkMode) :
            checkElementAccessExpression(node, checkNonNullExpression(node.expression), checkMode);
    }

    function checkElementAccessChain(node: ts.ElementAccessChain, checkMode: CheckMode | undefined) {
        const exprType = checkExpression(node.expression);
        const nonOptionalType = getOptionalExpressionType(exprType, node.expression);
        return propagateOptionalTypeMarker(checkElementAccessExpression(node, checkNonNullType(nonOptionalType, node.expression), checkMode), node, nonOptionalType !== exprType);
    }

    function checkElementAccessExpression(node: ts.ElementAccessExpression, exprType: ts.Type, checkMode: CheckMode | undefined): ts.Type {
        const objectType = ts.getAssignmentTargetKind(node) !== ts.AssignmentKind.None || isMethodAccessForCall(node) ? getWidenedType(exprType) : exprType;
        const indexExpression = node.argumentExpression;
        const indexType = checkExpression(indexExpression);

        if (isErrorType(objectType) || objectType === silentNeverType) {
            return objectType;
        }

        if (isConstEnumObjectType(objectType) && !ts.isStringLiteralLike(indexExpression)) {
            error(indexExpression, ts.Diagnostics.A_const_enum_member_can_only_be_accessed_using_a_string_literal);
            return errorType;
        }

        const effectiveIndexType = isForInVariableForNumericPropertyNames(indexExpression) ? numberType : indexType;
        const accessFlags = ts.isAssignmentTarget(node) ?
            ts.AccessFlags.Writing | (isGenericObjectType(objectType) && !ts.isThisTypeParameter(objectType) ? ts.AccessFlags.NoIndexSignatures : 0) :
            ts.AccessFlags.ExpressionPosition;
        const indexedAccessType = getIndexedAccessTypeOrUndefined(objectType, effectiveIndexType, accessFlags, node) || errorType;
        return checkIndexedAccessIndexType(getFlowTypeOfAccessExpression(node, getNodeLinks(node).resolvedSymbol, indexedAccessType, indexExpression, checkMode), node);
    }

    function callLikeExpressionMayHaveTypeArguments(node: ts.CallLikeExpression): node is ts.CallExpression | ts.NewExpression | ts.TaggedTemplateExpression | ts.JsxOpeningElement {
        return ts.isCallOrNewExpression(node) || ts.isTaggedTemplateExpression(node) || ts.isJsxOpeningLikeElement(node);
    }

    function resolveUntypedCall(node: ts.CallLikeExpression): ts.Signature {
        if (callLikeExpressionMayHaveTypeArguments(node)) {
            // Check type arguments even though we will give an error that untyped calls may not accept type arguments.
            // This gets us diagnostics for the type arguments and marks them as referenced.
            ts.forEach(node.typeArguments, checkSourceElement);
        }

        if (node.kind === ts.SyntaxKind.TaggedTemplateExpression) {
            checkExpression(node.template);
        }
        else if (ts.isJsxOpeningLikeElement(node)) {
            checkExpression(node.attributes);
        }
        else if (node.kind !== ts.SyntaxKind.Decorator) {
            ts.forEach((node as ts.CallExpression).arguments, argument => {
                checkExpression(argument);
            });
        }
        return anySignature;
    }

    function resolveErrorCall(node: ts.CallLikeExpression): ts.Signature {
        resolveUntypedCall(node);
        return unknownSignature;
    }

    // Re-order candidate signatures into the result array. Assumes the result array to be empty.
    // The candidate list orders groups in reverse, but within a group signatures are kept in declaration order
    // A nit here is that we reorder only signatures that belong to the same symbol,
    // so order how inherited signatures are processed is still preserved.
    // interface A { (x: string): void }
    // interface B extends A { (x: 'foo'): string }
    // const b: B;
    // b('foo') // <- here overloads should be processed as [(x:'foo'): string, (x: string): void]
    function reorderCandidates(signatures: readonly ts.Signature[], result: ts.Signature[], callChainFlags: ts.SignatureFlags): void {
        let lastParent: ts.Node | undefined;
        let lastSymbol: ts.Symbol | undefined;
        let cutoffIndex = 0;
        let index: number | undefined;
        let specializedIndex = -1;
        let spliceIndex: number;
        ts.Debug.assert(!result.length);
        for (const signature of signatures) {
            const symbol = signature.declaration && getSymbolOfNode(signature.declaration);
            const parent = signature.declaration && signature.declaration.parent;
            if (!lastSymbol || symbol === lastSymbol) {
                if (lastParent && parent === lastParent) {
                    index = index! + 1;
                }
                else {
                    lastParent = parent;
                    index = cutoffIndex;
                }
            }
            else {
                // current declaration belongs to a different symbol
                // set cutoffIndex so re-orderings in the future won't change result set from 0 to cutoffIndex
                index = cutoffIndex = result.length;
                lastParent = parent;
            }
            lastSymbol = symbol;

            // specialized signatures always need to be placed before non-specialized signatures regardless
            // of the cutoff position; see GH#1133
            if (signatureHasLiteralTypes(signature)) {
                specializedIndex++;
                spliceIndex = specializedIndex;
                // The cutoff index always needs to be greater than or equal to the specialized signature index
                // in order to prevent non-specialized signatures from being added before a specialized
                // signature.
                cutoffIndex++;
            }
            else {
                spliceIndex = index;
            }

            result.splice(spliceIndex, 0, callChainFlags ? getOptionalCallSignature(signature, callChainFlags) : signature);
        }
    }

    function isSpreadArgument(arg: ts.Expression | undefined): arg is ts.Expression {
        return !!arg && (arg.kind === ts.SyntaxKind.SpreadElement || arg.kind === ts.SyntaxKind.SyntheticExpression && (arg as ts.SyntheticExpression).isSpread);
    }

    function getSpreadArgumentIndex(args: readonly ts.Expression[]): number {
        return ts.findIndex(args, isSpreadArgument);
    }

    function acceptsVoid(t: ts.Type): boolean {
        return !!(t.flags & ts.TypeFlags.Void);
    }

    function acceptsVoidUndefinedUnknownOrAny(t: ts.Type): boolean {
        return !!(t.flags & (ts.TypeFlags.Void | ts.TypeFlags.Undefined | ts.TypeFlags.Unknown | ts.TypeFlags.Any));
    }

    function hasCorrectArity(node: ts.CallLikeExpression, args: readonly ts.Expression[], signature: ts.Signature, signatureHelpTrailingComma = false) {
        let argCount: number;
        let callIsIncomplete = false; // In incomplete call we want to be lenient when we have too few arguments
        let effectiveParameterCount = getParameterCount(signature);
        let effectiveMinimumArguments = getMinArgumentCount(signature);

        if (node.kind === ts.SyntaxKind.TaggedTemplateExpression) {
            argCount = args.length;
            if (node.template.kind === ts.SyntaxKind.TemplateExpression) {
                // If a tagged template expression lacks a tail literal, the call is incomplete.
                // Specifically, a template only can end in a TemplateTail or a Missing literal.
                const lastSpan = ts.last(node.template.templateSpans); // we should always have at least one span.
                callIsIncomplete = ts.nodeIsMissing(lastSpan.literal) || !!lastSpan.literal.isUnterminated;
            }
            else {
                // If the template didn't end in a backtick, or its beginning occurred right prior to EOF,
                // then this might actually turn out to be a TemplateHead in the future;
                // so we consider the call to be incomplete.
                const templateLiteral = node.template as ts.LiteralExpression;
                ts.Debug.assert(templateLiteral.kind === ts.SyntaxKind.NoSubstitutionTemplateLiteral);
                callIsIncomplete = !!templateLiteral.isUnterminated;
            }
        }
        else if (node.kind === ts.SyntaxKind.Decorator) {
            argCount = getDecoratorArgumentCount(node, signature);
        }
        else if (ts.isJsxOpeningLikeElement(node)) {
            callIsIncomplete = node.attributes.end === node.end;
            if (callIsIncomplete) {
                return true;
            }
            argCount = effectiveMinimumArguments === 0 ? args.length : 1;
            effectiveParameterCount = args.length === 0 ? effectiveParameterCount : 1; // class may have argumentless ctor functions - still resolve ctor and compare vs props member type
            effectiveMinimumArguments = Math.min(effectiveMinimumArguments, 1); // sfc may specify context argument - handled by framework and not typechecked
        }
        else if (!node.arguments) {
            // This only happens when we have something of the form: 'new C'
            ts.Debug.assert(node.kind === ts.SyntaxKind.NewExpression);
            return getMinArgumentCount(signature) === 0;
        }
        else {
            argCount = signatureHelpTrailingComma ? args.length + 1 : args.length;

            // If we are missing the close parenthesis, the call is incomplete.
            callIsIncomplete = node.arguments.end === node.end;

            // If a spread argument is present, check that it corresponds to a rest parameter or at least that it's in the valid range.
            const spreadArgIndex = getSpreadArgumentIndex(args);
            if (spreadArgIndex >= 0) {
                return spreadArgIndex >= getMinArgumentCount(signature) && (hasEffectiveRestParameter(signature) || spreadArgIndex < getParameterCount(signature));
            }
        }

        // Too many arguments implies incorrect arity.
        if (!hasEffectiveRestParameter(signature) && argCount > effectiveParameterCount) {
            return false;
        }

        // If the call is incomplete, we should skip the lower bound check.
        // JSX signatures can have extra parameters provided by the library which we don't check
        if (callIsIncomplete || argCount >= effectiveMinimumArguments) {
            return true;
        }
        for (let i = argCount; i < effectiveMinimumArguments; i++) {
            const type = getTypeAtPosition(signature, i);
            if (filterType(type, ts.isInJSFile(node) && !strictNullChecks ? acceptsVoidUndefinedUnknownOrAny : acceptsVoid).flags & ts.TypeFlags.Never) {
                return false;
            }
        }
        return true;
    }

    function hasCorrectTypeArgumentArity(signature: ts.Signature, typeArguments: ts.NodeArray<ts.TypeNode> | undefined) {
        // If the user supplied type arguments, but the number of type arguments does not match
        // the declared number of type parameters, the call has an incorrect arity.
        const numTypeParameters = ts.length(signature.typeParameters);
        const minTypeArgumentCount = getMinTypeArgumentCount(signature.typeParameters);
        return !ts.some(typeArguments) ||
            (typeArguments.length >= minTypeArgumentCount && typeArguments.length <= numTypeParameters);
    }

    // If type has a single call signature and no other members, return that signature. Otherwise, return undefined.
    function getSingleCallSignature(type: ts.Type): ts.Signature | undefined {
        return getSingleSignature(type, ts.SignatureKind.Call, /*allowMembers*/ false);
    }

    function getSingleCallOrConstructSignature(type: ts.Type): ts.Signature | undefined {
        return getSingleSignature(type, ts.SignatureKind.Call, /*allowMembers*/ false) ||
            getSingleSignature(type, ts.SignatureKind.Construct, /*allowMembers*/ false);
    }

    function getSingleSignature(type: ts.Type, kind: ts.SignatureKind, allowMembers: boolean): ts.Signature | undefined {
        if (type.flags & ts.TypeFlags.Object) {
            const resolved = resolveStructuredTypeMembers(type as ts.ObjectType);
            if (allowMembers || resolved.properties.length === 0 && resolved.indexInfos.length === 0) {
                if (kind === ts.SignatureKind.Call && resolved.callSignatures.length === 1 && resolved.constructSignatures.length === 0) {
                    return resolved.callSignatures[0];
                }
                if (kind === ts.SignatureKind.Construct && resolved.constructSignatures.length === 1 && resolved.callSignatures.length === 0) {
                    return resolved.constructSignatures[0];
                }
            }
        }
        return undefined;
    }

    // Instantiate a generic signature in the context of a non-generic signature (section 3.8.5 in TypeScript spec)
    function instantiateSignatureInContextOf(signature: ts.Signature, contextualSignature: ts.Signature, inferenceContext?: ts.InferenceContext, compareTypes?: ts.TypeComparer): ts.Signature {
        const context = createInferenceContext(signature.typeParameters!, signature, ts.InferenceFlags.None, compareTypes);
        // We clone the inferenceContext to avoid fixing. For example, when the source signature is <T>(x: T) => T[] and
        // the contextual signature is (...args: A) => B, we want to infer the element type of A's constraint (say 'any')
        // for T but leave it possible to later infer '[any]' back to A.
        const restType = getEffectiveRestType(contextualSignature);
        const mapper = inferenceContext && (restType && restType.flags & ts.TypeFlags.TypeParameter ? inferenceContext.nonFixingMapper : inferenceContext.mapper);
        const sourceSignature = mapper ? instantiateSignature(contextualSignature, mapper) : contextualSignature;
        applyToParameterTypes(sourceSignature, signature, (source, target) => {
            // Type parameters from outer context referenced by source type are fixed by instantiation of the source type
            inferTypes(context.inferences, source, target);
        });
        if (!inferenceContext) {
            applyToReturnTypes(contextualSignature, signature, (source, target) => {
                inferTypes(context.inferences, source, target, ts.InferencePriority.ReturnType);
            });
        }
        return getSignatureInstantiation(signature, getInferredTypes(context), ts.isInJSFile(contextualSignature.declaration));
    }

    function inferJsxTypeArguments(node: ts.JsxOpeningLikeElement, signature: ts.Signature, checkMode: CheckMode, context: ts.InferenceContext): ts.Type[] {
        const paramType = getEffectiveFirstArgumentForJsxSignature(signature, node);
        const checkAttrType = checkExpressionWithContextualType(node.attributes, paramType, context, checkMode);
        inferTypes(context.inferences, checkAttrType, paramType);
        return getInferredTypes(context);
    }

    function getThisArgumentType(thisArgumentNode: ts.LeftHandSideExpression | undefined) {
        if (!thisArgumentNode) {
            return voidType;
        }
        const thisArgumentType = checkExpression(thisArgumentNode);
        return ts.isOptionalChainRoot(thisArgumentNode.parent) ? getNonNullableType(thisArgumentType) :
            ts.isOptionalChain(thisArgumentNode.parent) ? removeOptionalTypeMarker(thisArgumentType) :
            thisArgumentType;
    }

    function inferTypeArguments(node: ts.CallLikeExpression, signature: ts.Signature, args: readonly ts.Expression[], checkMode: CheckMode, context: ts.InferenceContext): ts.Type[] {
        if (ts.isJsxOpeningLikeElement(node)) {
            return inferJsxTypeArguments(node, signature, checkMode, context);
        }

        // If a contextual type is available, infer from that type to the return type of the call expression. For
        // example, given a 'function wrap<T, U>(cb: (x: T) => U): (x: T) => U' and a call expression
        // 'let f: (x: string) => number = wrap(s => s.length)', we infer from the declared type of 'f' to the
        // return type of 'wrap'.
        if (node.kind !== ts.SyntaxKind.Decorator) {
            const skipBindingPatterns = ts.every(signature.typeParameters, p => !!getDefaultFromTypeParameter(p));
            const contextualType = getContextualType(node, skipBindingPatterns ? ts.ContextFlags.SkipBindingPatterns : ts.ContextFlags.None);
            if (contextualType) {
                const inferenceTargetType = getReturnTypeOfSignature(signature);
                if (couldContainTypeVariables(inferenceTargetType)) {
                    const outerContext = getInferenceContext(node);
                    const isFromBindingPattern = !skipBindingPatterns && getContextualType(node, ts.ContextFlags.SkipBindingPatterns) !== contextualType;
                    // A return type inference from a binding pattern can be used in instantiating the contextual
                    // type of an argument later in inference, but cannot stand on its own as the final return type.
                    // It is incorporated into `context.returnMapper` which is used in `instantiateContextualType`,
                    // but doesn't need to go into `context.inferences`. This allows a an array binding pattern to
                    // produce a tuple for `T` in
                    //   declare function f<T>(cb: () => T): T;
                    //   const [e1, e2, e3] = f(() => [1, "hi", true]);
                    // but does not produce any inference for `T` in
                    //   declare function f<T>(): T;
                    //   const [e1, e2, e3] = f();
                    if (!isFromBindingPattern) {
                        // We clone the inference context to avoid disturbing a resolution in progress for an
                        // outer call expression. Effectively we just want a snapshot of whatever has been
                        // inferred for any outer call expression so far.
                        const outerMapper = getMapperFromContext(cloneInferenceContext(outerContext, ts.InferenceFlags.NoDefault));
                        const instantiatedType = instantiateType(contextualType, outerMapper);
                        // If the contextual type is a generic function type with a single call signature, we
                        // instantiate the type with its own type parameters and type arguments. This ensures that
                        // the type parameters are not erased to type any during type inference such that they can
                        // be inferred as actual types from the contextual type. For example:
                        //   declare function arrayMap<T, U>(f: (x: T) => U): (a: T[]) => U[];
                        //   const boxElements: <A>(a: A[]) => { value: A }[] = arrayMap(value => ({ value }));
                        // Above, the type of the 'value' parameter is inferred to be 'A'.
                        const contextualSignature = getSingleCallSignature(instantiatedType);
                        const inferenceSourceType = contextualSignature && contextualSignature.typeParameters ?
                            getOrCreateTypeFromSignature(getSignatureInstantiationWithoutFillingInTypeArguments(contextualSignature, contextualSignature.typeParameters)) :
                            instantiatedType;
                        // Inferences made from return types have lower priority than all other inferences.
                        inferTypes(context.inferences, inferenceSourceType, inferenceTargetType, ts.InferencePriority.ReturnType);
                    }
                    // Create a type mapper for instantiating generic contextual types using the inferences made
                    // from the return type. We need a separate inference pass here because (a) instantiation of
                    // the source type uses the outer context's return mapper (which excludes inferences made from
                    // outer arguments), and (b) we don't want any further inferences going into this context.
                    const returnContext = createInferenceContext(signature.typeParameters!, signature, context.flags);
                    const returnSourceType = instantiateType(contextualType, outerContext && outerContext.returnMapper);
                    inferTypes(returnContext.inferences, returnSourceType, inferenceTargetType);
                    context.returnMapper = ts.some(returnContext.inferences, hasInferenceCandidates) ? getMapperFromContext(cloneInferredPartOfContext(returnContext)) : undefined;
                }
            }
        }

        const restType = getNonArrayRestType(signature);
        const argCount = restType ? Math.min(getParameterCount(signature) - 1, args.length) : args.length;
        if (restType && restType.flags & ts.TypeFlags.TypeParameter) {
            const info = ts.find(context.inferences, info => info.typeParameter === restType);
            if (info) {
                info.impliedArity = ts.findIndex(args, isSpreadArgument, argCount) < 0 ? args.length - argCount : undefined;
            }
        }

        const thisType = getThisTypeOfSignature(signature);
        if (thisType && couldContainTypeVariables(thisType)) {
            const thisArgumentNode = getThisArgumentOfCall(node);
            inferTypes(context.inferences, getThisArgumentType(thisArgumentNode), thisType);
        }

        for (let i = 0; i < argCount; i++) {
            const arg = args[i];
            if (arg.kind !== ts.SyntaxKind.OmittedExpression && !(checkMode & CheckMode.IsForStringLiteralArgumentCompletions && hasSkipDirectInferenceFlag(arg))) {
                const paramType = getTypeAtPosition(signature, i);
                if (couldContainTypeVariables(paramType)) {
                    const argType = checkExpressionWithContextualType(arg, paramType, context, checkMode);
                    inferTypes(context.inferences, argType, paramType);
                }
            }
        }

        if (restType && couldContainTypeVariables(restType)) {
            const spreadType = getSpreadArgumentType(args, argCount, args.length, restType, context, checkMode);
            inferTypes(context.inferences, spreadType, restType);
        }

        return getInferredTypes(context);
    }

    function getMutableArrayOrTupleType(type: ts.Type) {
        return type.flags & ts.TypeFlags.Union ? mapType(type, getMutableArrayOrTupleType) :
            type.flags & ts.TypeFlags.Any || isMutableArrayOrTuple(getBaseConstraintOfType(type) || type) ? type :
            isTupleType(type) ? createTupleType(getTypeArguments(type), type.target.elementFlags, /*readonly*/ false, type.target.labeledElementDeclarations) :
            createTupleType([type], [ts.ElementFlags.Variadic]);
    }

    function getSpreadArgumentType(args: readonly ts.Expression[], index: number, argCount: number, restType: ts.Type, context: ts.InferenceContext | undefined, checkMode: CheckMode) {
        if (index >= argCount - 1) {
            const arg = args[argCount - 1];
            if (isSpreadArgument(arg)) {
                // We are inferring from a spread expression in the last argument position, i.e. both the parameter
                // and the argument are ...x forms.
                return getMutableArrayOrTupleType(arg.kind === ts.SyntaxKind.SyntheticExpression ? (arg as ts.SyntheticExpression).type :
                    checkExpressionWithContextualType((arg as ts.SpreadElement).expression, restType, context, checkMode));
            }
        }
        const types = [];
        const flags = [];
        const names = [];
        for (let i = index; i < argCount; i++) {
            const arg = args[i];
            if (isSpreadArgument(arg)) {
                const spreadType = arg.kind === ts.SyntaxKind.SyntheticExpression ? (arg as ts.SyntheticExpression).type : checkExpression((arg as ts.SpreadElement).expression);
                if (isArrayLikeType(spreadType)) {
                    types.push(spreadType);
                    flags.push(ts.ElementFlags.Variadic);
                }
                else {
                    types.push(checkIteratedTypeOrElementType(IterationUse.Spread, spreadType, undefinedType, arg.kind === ts.SyntaxKind.SpreadElement ? (arg as ts.SpreadElement).expression : arg));
                    flags.push(ts.ElementFlags.Rest);
                }
            }
            else {
                const contextualType = getIndexedAccessType(restType, getNumberLiteralType(i - index), ts.AccessFlags.Contextual);
                const argType = checkExpressionWithContextualType(arg, contextualType, context, checkMode);
                const hasPrimitiveContextualType = maybeTypeOfKind(contextualType, ts.TypeFlags.Primitive | ts.TypeFlags.Index | ts.TypeFlags.TemplateLiteral | ts.TypeFlags.StringMapping);
                types.push(hasPrimitiveContextualType ? getRegularTypeOfLiteralType(argType) : getWidenedLiteralType(argType));
                flags.push(ts.ElementFlags.Required);
            }
            if (arg.kind === ts.SyntaxKind.SyntheticExpression && (arg as ts.SyntheticExpression).tupleNameSource) {
                names.push((arg as ts.SyntheticExpression).tupleNameSource!);
            }
        }
        return createTupleType(types, flags, /*readonly*/ false, ts.length(names) === ts.length(types) ? names : undefined);
    }

    function checkTypeArguments(signature: ts.Signature, typeArgumentNodes: readonly ts.TypeNode[], reportErrors: boolean, headMessage?: ts.DiagnosticMessage): ts.Type[] | undefined {
        const isJavascript = ts.isInJSFile(signature.declaration);
        const typeParameters = signature.typeParameters!;
        const typeArgumentTypes = fillMissingTypeArguments(ts.map(typeArgumentNodes, getTypeFromTypeNode), typeParameters, getMinTypeArgumentCount(typeParameters), isJavascript);
        let mapper: ts.TypeMapper | undefined;
        for (let i = 0; i < typeArgumentNodes.length; i++) {
            ts.Debug.assert(typeParameters[i] !== undefined, "Should not call checkTypeArguments with too many type arguments");
            const constraint = getConstraintOfTypeParameter(typeParameters[i]);
            if (constraint) {
                const errorInfo = reportErrors && headMessage ? (() => ts.chainDiagnosticMessages(/*details*/ undefined, ts.Diagnostics.Type_0_does_not_satisfy_the_constraint_1)) : undefined;
                const typeArgumentHeadMessage = headMessage || ts.Diagnostics.Type_0_does_not_satisfy_the_constraint_1;
                if (!mapper) {
                    mapper = createTypeMapper(typeParameters, typeArgumentTypes);
                }
                const typeArgument = typeArgumentTypes[i];
                if (!checkTypeAssignableTo(
                    typeArgument,
                    getTypeWithThisArgument(instantiateType(constraint, mapper), typeArgument),
                    reportErrors ? typeArgumentNodes[i] : undefined,
                    typeArgumentHeadMessage,
                    errorInfo)) {
                    return undefined;
                }
            }
        }
        return typeArgumentTypes;
    }

    function getJsxReferenceKind(node: ts.JsxOpeningLikeElement): ts.JsxReferenceKind {
        if (isJsxIntrinsicIdentifier(node.tagName)) {
            return ts.JsxReferenceKind.Mixed;
        }
        const tagType = getApparentType(checkExpression(node.tagName));
        if (ts.length(getSignaturesOfType(tagType, ts.SignatureKind.Construct))) {
            return ts.JsxReferenceKind.Component;
        }
        if (ts.length(getSignaturesOfType(tagType, ts.SignatureKind.Call))) {
            return ts.JsxReferenceKind.Function;
        }
        return ts.JsxReferenceKind.Mixed;
    }

    /**
     * Check if the given signature can possibly be a signature called by the JSX opening-like element.
     * @param node a JSX opening-like element we are trying to figure its call signature
     * @param signature a candidate signature we are trying whether it is a call signature
     * @param relation a relationship to check parameter and argument type
     */
    function checkApplicableSignatureForJsxOpeningLikeElement(
        node: ts.JsxOpeningLikeElement,
        signature: ts.Signature,
        relation: ts.ESMap<string, ts.RelationComparisonResult>,
        checkMode: CheckMode,
        reportErrors: boolean,
        containingMessageChain: (() => ts.DiagnosticMessageChain | undefined) | undefined,
        errorOutputContainer: { errors?: ts.Diagnostic[], skipLogging?: boolean }
    ) {
        // Stateless function components can have maximum of three arguments: "props", "context", and "updater".
        // However "context" and "updater" are implicit and can't be specify by users. Only the first parameter, props,
        // can be specified by users through attributes property.
        const paramType = getEffectiveFirstArgumentForJsxSignature(signature, node);
        const attributesType = checkExpressionWithContextualType(node.attributes, paramType, /*inferenceContext*/ undefined, checkMode);
        return checkTagNameDoesNotExpectTooManyArguments() && checkTypeRelatedToAndOptionallyElaborate(
            attributesType,
            paramType,
            relation,
            reportErrors ? node.tagName : undefined,
            node.attributes,
            /*headMessage*/ undefined,
            containingMessageChain,
            errorOutputContainer);

        function checkTagNameDoesNotExpectTooManyArguments(): boolean {
            if (getJsxNamespaceContainerForImplicitImport(node)) {
                return true; // factory is implicitly jsx/jsxdev - assume it fits the bill, since we don't strongly look for the jsx/jsxs/jsxDEV factory APIs anywhere else (at least not yet)
            }
            const tagType = ts.isJsxOpeningElement(node) || ts.isJsxSelfClosingElement(node) && !isJsxIntrinsicIdentifier(node.tagName) ? checkExpression(node.tagName) : undefined;
            if (!tagType) {
                return true;
            }
            const tagCallSignatures = getSignaturesOfType(tagType, ts.SignatureKind.Call);
            if (!ts.length(tagCallSignatures)) {
                return true;
            }
            const factory = getJsxFactoryEntity(node);
            if (!factory) {
                return true;
            }
            const factorySymbol = resolveEntityName(factory, ts.SymbolFlags.Value, /*ignoreErrors*/ true, /*dontResolveAlias*/ false, node);
            if (!factorySymbol) {
                return true;
            }

            const factoryType = getTypeOfSymbol(factorySymbol);
            const callSignatures = getSignaturesOfType(factoryType, ts.SignatureKind.Call);
            if (!ts.length(callSignatures)) {
                return true;
            }

            let hasFirstParamSignatures = false;
            let maxParamCount = 0;
            // Check that _some_ first parameter expects a FC-like thing, and that some overload of the SFC expects an acceptable number of arguments
            for (const sig of callSignatures) {
                const firstparam = getTypeAtPosition(sig, 0);
                const signaturesOfParam = getSignaturesOfType(firstparam, ts.SignatureKind.Call);
                if (!ts.length(signaturesOfParam)) continue;
                for (const paramSig of signaturesOfParam) {
                    hasFirstParamSignatures = true;
                    if (hasEffectiveRestParameter(paramSig)) {
                        return true; // some signature has a rest param, so function components can have an arbitrary number of arguments
                    }
                    const paramCount = getParameterCount(paramSig);
                    if (paramCount > maxParamCount) {
                        maxParamCount = paramCount;
                    }
                }
            }
            if (!hasFirstParamSignatures) {
                // Not a single signature had a first parameter which expected a signature - for back compat, and
                // to guard against generic factories which won't have signatures directly, do not error
                return true;
            }
            let absoluteMinArgCount = Infinity;
            for (const tagSig of tagCallSignatures) {
                const tagRequiredArgCount = getMinArgumentCount(tagSig);
                if (tagRequiredArgCount < absoluteMinArgCount) {
                    absoluteMinArgCount = tagRequiredArgCount;
                }
            }
            if (absoluteMinArgCount <= maxParamCount) {
                return true; // some signature accepts the number of arguments the function component provides
            }

            if (reportErrors) {
                const diag = ts.createDiagnosticForNode(node.tagName, ts.Diagnostics.Tag_0_expects_at_least_1_arguments_but_the_JSX_factory_2_provides_at_most_3, ts.entityNameToString(node.tagName), absoluteMinArgCount, ts.entityNameToString(factory), maxParamCount);
                const tagNameDeclaration = getSymbolAtLocation(node.tagName)?.valueDeclaration;
                if (tagNameDeclaration) {
                    ts.addRelatedInfo(diag, ts.createDiagnosticForNode(tagNameDeclaration, ts.Diagnostics._0_is_declared_here, ts.entityNameToString(node.tagName)));
                }
                if (errorOutputContainer && errorOutputContainer.skipLogging) {
                    (errorOutputContainer.errors || (errorOutputContainer.errors = [])).push(diag);
                }
                if (!errorOutputContainer.skipLogging) {
                    diagnostics.add(diag);
                }
            }
            return false;
        }
    }

    function getSignatureApplicabilityError(
        node: ts.CallLikeExpression,
        args: readonly ts.Expression[],
        signature: ts.Signature,
        relation: ts.ESMap<string, ts.RelationComparisonResult>,
        checkMode: CheckMode,
        reportErrors: boolean,
        containingMessageChain: (() => ts.DiagnosticMessageChain | undefined) | undefined,
    ): readonly ts.Diagnostic[] | undefined {

        const errorOutputContainer: { errors?: ts.Diagnostic[], skipLogging?: boolean } = { errors: undefined, skipLogging: true };
        if (ts.isJsxOpeningLikeElement(node)) {
            if (!checkApplicableSignatureForJsxOpeningLikeElement(node, signature, relation, checkMode, reportErrors, containingMessageChain, errorOutputContainer)) {
                ts.Debug.assert(!reportErrors || !!errorOutputContainer.errors, "jsx should have errors when reporting errors");
                return errorOutputContainer.errors || ts.emptyArray;
            }
            return undefined;
        }
        const thisType = getThisTypeOfSignature(signature);
        if (thisType && thisType !== voidType && node.kind !== ts.SyntaxKind.NewExpression) {
            // If the called expression is not of the form `x.f` or `x["f"]`, then sourceType = voidType
            // If the signature's 'this' type is voidType, then the check is skipped -- anything is compatible.
            // If the expression is a new expression, then the check is skipped.
            const thisArgumentNode = getThisArgumentOfCall(node);
            const thisArgumentType = getThisArgumentType(thisArgumentNode);
            const errorNode = reportErrors ? (thisArgumentNode || node) : undefined;
            const headMessage = ts.Diagnostics.The_this_context_of_type_0_is_not_assignable_to_method_s_this_of_type_1;
            if (!checkTypeRelatedTo(thisArgumentType, thisType, relation, errorNode, headMessage, containingMessageChain, errorOutputContainer)) {
                ts.Debug.assert(!reportErrors || !!errorOutputContainer.errors, "this parameter should have errors when reporting errors");
                return errorOutputContainer.errors || ts.emptyArray;
            }
        }
        const headMessage = ts.Diagnostics.Argument_of_type_0_is_not_assignable_to_parameter_of_type_1;
        const restType = getNonArrayRestType(signature);
        const argCount = restType ? Math.min(getParameterCount(signature) - 1, args.length) : args.length;
        for (let i = 0; i < argCount; i++) {
            const arg = args[i];
            if (arg.kind !== ts.SyntaxKind.OmittedExpression) {
                const paramType = getTypeAtPosition(signature, i);
                const argType = checkExpressionWithContextualType(arg, paramType, /*inferenceContext*/ undefined, checkMode);
                // If one or more arguments are still excluded (as indicated by CheckMode.SkipContextSensitive),
                // we obtain the regular type of any object literal arguments because we may not have inferred complete
                // parameter types yet and therefore excess property checks may yield false positives (see #17041).
                const checkArgType = checkMode & CheckMode.SkipContextSensitive ? getRegularTypeOfObjectLiteral(argType) : argType;
                if (!checkTypeRelatedToAndOptionallyElaborate(checkArgType, paramType, relation, reportErrors ? arg : undefined, arg, headMessage, containingMessageChain, errorOutputContainer)) {
                    ts.Debug.assert(!reportErrors || !!errorOutputContainer.errors, "parameter should have errors when reporting errors");
                    maybeAddMissingAwaitInfo(arg, checkArgType, paramType);
                    return errorOutputContainer.errors || ts.emptyArray;
                }
            }
        }
        if (restType) {
            const spreadType = getSpreadArgumentType(args, argCount, args.length, restType, /*context*/ undefined, checkMode);
            const restArgCount = args.length - argCount;
            const errorNode = !reportErrors ? undefined :
                restArgCount === 0 ? node :
                restArgCount === 1 ? args[argCount] :
                ts.setTextRangePosEnd(createSyntheticExpression(node, spreadType), args[argCount].pos, args[args.length - 1].end);
            if (!checkTypeRelatedTo(spreadType, restType, relation, errorNode, headMessage, /*containingMessageChain*/ undefined, errorOutputContainer)) {
                ts.Debug.assert(!reportErrors || !!errorOutputContainer.errors, "rest parameter should have errors when reporting errors");
                maybeAddMissingAwaitInfo(errorNode, spreadType, restType);
                return errorOutputContainer.errors || ts.emptyArray;
            }
        }
        return undefined;

        function maybeAddMissingAwaitInfo(errorNode: ts.Node | undefined, source: ts.Type, target: ts.Type) {
            if (errorNode && reportErrors && errorOutputContainer.errors && errorOutputContainer.errors.length) {
                // Bail if target is Promise-like---something else is wrong
                if (getAwaitedTypeOfPromise(target)) {
                    return;
                }
                const awaitedTypeOfSource = getAwaitedTypeOfPromise(source);
                if (awaitedTypeOfSource && isTypeRelatedTo(awaitedTypeOfSource, target, relation)) {
                    ts.addRelatedInfo(errorOutputContainer.errors[0], ts.createDiagnosticForNode(errorNode, ts.Diagnostics.Did_you_forget_to_use_await));
                }
            }
        }
    }

    /**
     * Returns the this argument in calls like x.f(...) and x[f](...). Undefined otherwise.
     */
    function getThisArgumentOfCall(node: ts.CallLikeExpression): ts.LeftHandSideExpression | undefined {
        const expression = node.kind === ts.SyntaxKind.CallExpression ? node.expression :
            node.kind === ts.SyntaxKind.TaggedTemplateExpression ? node.tag : undefined;
        if (expression) {
            const callee = ts.skipOuterExpressions(expression);
            if (ts.isAccessExpression(callee)) {
                return callee.expression;
            }
        }
    }

    function createSyntheticExpression(parent: ts.Node, type: ts.Type, isSpread?: boolean, tupleNameSource?: ts.ParameterDeclaration | ts.NamedTupleMember) {
        const result = ts.parseNodeFactory.createSyntheticExpression(type, isSpread, tupleNameSource);
        ts.setTextRange(result, parent);
        ts.setParent(result, parent);
        return result;
    }

    /**
     * Returns the effective arguments for an expression that works like a function invocation.
     */
    function getEffectiveCallArguments(node: ts.CallLikeExpression): readonly ts.Expression[] {
        if (node.kind === ts.SyntaxKind.TaggedTemplateExpression) {
            const template = node.template;
            const args: ts.Expression[] = [createSyntheticExpression(template, getGlobalTemplateStringsArrayType())];
            if (template.kind === ts.SyntaxKind.TemplateExpression) {
                ts.forEach(template.templateSpans, span => {
                    args.push(span.expression);
                });
            }
            return args;
        }
        if (node.kind === ts.SyntaxKind.Decorator) {
            return getEffectiveDecoratorArguments(node);
        }
        if (ts.isJsxOpeningLikeElement(node)) {
            return node.attributes.properties.length > 0 || (ts.isJsxOpeningElement(node) && node.parent.children.length > 0) ? [node.attributes] : ts.emptyArray;
        }
        const args = node.arguments || ts.emptyArray;
        const spreadIndex = getSpreadArgumentIndex(args);
        if (spreadIndex >= 0) {
            // Create synthetic arguments from spreads of tuple types.
            const effectiveArgs = args.slice(0, spreadIndex);
            for (let i = spreadIndex; i < args.length; i++) {
                const arg = args[i];
                // We can call checkExpressionCached because spread expressions never have a contextual type.
                const spreadType = arg.kind === ts.SyntaxKind.SpreadElement && (flowLoopCount ? checkExpression((arg as ts.SpreadElement).expression) : checkExpressionCached((arg as ts.SpreadElement).expression));
                if (spreadType && isTupleType(spreadType)) {
                    ts.forEach(getTypeArguments(spreadType), (t, i) => {
                        const flags = spreadType.target.elementFlags[i];
                        const syntheticArg = createSyntheticExpression(arg, flags & ts.ElementFlags.Rest ? createArrayType(t) : t,
                            !!(flags & ts.ElementFlags.Variable), spreadType.target.labeledElementDeclarations?.[i]);
                        effectiveArgs.push(syntheticArg);
                    });
                }
                else {
                    effectiveArgs.push(arg);
                }
            }
            return effectiveArgs;
        }
        return args;
    }

    /**
     * Returns the synthetic argument list for a decorator invocation.
     */
    function getEffectiveDecoratorArguments(node: ts.Decorator): readonly ts.Expression[] {
        const parent = node.parent;
        const expr = node.expression;
        switch (parent.kind) {
            case ts.SyntaxKind.ClassDeclaration:
            case ts.SyntaxKind.ClassExpression:
                // For a class decorator, the `target` is the type of the class (e.g. the
                // "static" or "constructor" side of the class).
                return [
                    createSyntheticExpression(expr, getTypeOfSymbol(getSymbolOfNode(parent)))
                ];
            case ts.SyntaxKind.Parameter:
                // A parameter declaration decorator will have three arguments (see
                // `ParameterDecorator` in core.d.ts).
                const func = parent.parent as ts.FunctionLikeDeclaration;
                return [
                    createSyntheticExpression(expr, parent.parent.kind === ts.SyntaxKind.Constructor ? getTypeOfSymbol(getSymbolOfNode(func)) : errorType),
                    createSyntheticExpression(expr, anyType),
                    createSyntheticExpression(expr, numberType)
                ];
            case ts.SyntaxKind.PropertyDeclaration:
            case ts.SyntaxKind.MethodDeclaration:
            case ts.SyntaxKind.GetAccessor:
            case ts.SyntaxKind.SetAccessor:
                // A method or accessor declaration decorator will have two or three arguments (see
                // `PropertyDecorator` and `MethodDecorator` in core.d.ts). If we are emitting decorators
                // for ES3, we will only pass two arguments.
                const hasPropDesc = languageVersion !== ts.ScriptTarget.ES3 && (!ts.isPropertyDeclaration(parent) || ts.hasAccessorModifier(parent));
                return [
                    createSyntheticExpression(expr, getParentTypeOfClassElement(parent as ts.ClassElement)),
                    createSyntheticExpression(expr, getClassElementPropertyKeyType(parent as ts.ClassElement)),
                    createSyntheticExpression(expr, hasPropDesc ? createTypedPropertyDescriptorType(getTypeOfNode(parent)) : anyType)
                ];
        }
        return ts.Debug.fail();
    }

    /**
     * Returns the argument count for a decorator node that works like a function invocation.
     */
    function getDecoratorArgumentCount(node: ts.Decorator, signature: ts.Signature) {
        switch (node.parent.kind) {
            case ts.SyntaxKind.ClassDeclaration:
            case ts.SyntaxKind.ClassExpression:
                return 1;
            case ts.SyntaxKind.PropertyDeclaration:
                return ts.hasAccessorModifier(node.parent) ? 3 : 2;
            case ts.SyntaxKind.MethodDeclaration:
            case ts.SyntaxKind.GetAccessor:
            case ts.SyntaxKind.SetAccessor:
                // For ES3 or decorators with only two parameters we supply only two arguments
                return languageVersion === ts.ScriptTarget.ES3 || signature.parameters.length <= 2 ? 2 : 3;
            case ts.SyntaxKind.Parameter:
                return 3;
            default:
                return ts.Debug.fail();
        }
    }
    function getDiagnosticSpanForCallNode(node: ts.CallExpression, doNotIncludeArguments?: boolean) {
        let start: number;
        let length: number;
        const sourceFile = ts.getSourceFileOfNode(node);

        if (ts.isPropertyAccessExpression(node.expression)) {
            const nameSpan = ts.getErrorSpanForNode(sourceFile, node.expression.name);
            start = nameSpan.start;
            length = doNotIncludeArguments ? nameSpan.length : node.end - start;
        }
        else {
            const expressionSpan = ts.getErrorSpanForNode(sourceFile, node.expression);
            start = expressionSpan.start;
            length = doNotIncludeArguments ? expressionSpan.length : node.end - start;
        }
        return { start, length, sourceFile };
    }
    function getDiagnosticForCallNode(node: ts.CallLikeExpression, message: ts.DiagnosticMessage, arg0?: string | number, arg1?: string | number, arg2?: string | number, arg3?: string | number): ts.DiagnosticWithLocation {
        if (ts.isCallExpression(node)) {
            const { sourceFile, start, length } = getDiagnosticSpanForCallNode(node);
            return ts.createFileDiagnostic(sourceFile, start, length, message, arg0, arg1, arg2, arg3);
        }
        else {
            return ts.createDiagnosticForNode(node, message, arg0, arg1, arg2, arg3);
        }
    }

    function isPromiseResolveArityError(node: ts.CallLikeExpression) {
        if (!ts.isCallExpression(node) || !ts.isIdentifier(node.expression)) return false;

        const symbol = resolveName(node.expression, node.expression.escapedText, ts.SymbolFlags.Value, undefined, undefined, false);
        const decl = symbol?.valueDeclaration;
        if (!decl || !ts.isParameter(decl) || !ts.isFunctionExpressionOrArrowFunction(decl.parent) || !ts.isNewExpression(decl.parent.parent) || !ts.isIdentifier(decl.parent.parent.expression)) {
            return false;
        }

        const globalPromiseSymbol = getGlobalPromiseConstructorSymbol(/*reportErrors*/ false);
        if (!globalPromiseSymbol) return false;

        const constructorSymbol = getSymbolAtLocation(decl.parent.parent.expression, /*ignoreErrors*/ true);
        return constructorSymbol === globalPromiseSymbol;
    }

    function getArgumentArityError(node: ts.CallLikeExpression, signatures: readonly ts.Signature[], args: readonly ts.Expression[]) {
        const spreadIndex = getSpreadArgumentIndex(args);
        if (spreadIndex > -1) {
            return ts.createDiagnosticForNode(args[spreadIndex], ts.Diagnostics.A_spread_argument_must_either_have_a_tuple_type_or_be_passed_to_a_rest_parameter);
        }
        let min = Number.POSITIVE_INFINITY; // smallest parameter count
        let max = Number.NEGATIVE_INFINITY; // largest parameter count
        let maxBelow = Number.NEGATIVE_INFINITY; // largest parameter count that is smaller than the number of arguments
        let minAbove = Number.POSITIVE_INFINITY; // smallest parameter count that is larger than the number of arguments

        let closestSignature: ts.Signature | undefined;
        for (const sig of signatures) {
            const minParameter = getMinArgumentCount(sig);
            const maxParameter = getParameterCount(sig);
            // smallest/largest parameter counts
            if (minParameter < min) {
                min = minParameter;
                closestSignature = sig;
            }
            max = Math.max(max, maxParameter);
            // shortest parameter count *longer than the call*/longest parameter count *shorter than the call*
            if (minParameter < args.length && minParameter > maxBelow) maxBelow = minParameter;
            if (args.length < maxParameter && maxParameter < minAbove) minAbove = maxParameter;
        }
        const hasRestParameter = ts.some(signatures, hasEffectiveRestParameter);
        const parameterRange = hasRestParameter ? min
            : min < max ? min + "-" + max
            : min;
        const isVoidPromiseError = !hasRestParameter && parameterRange === 1 && args.length === 0 && isPromiseResolveArityError(node);
        if (isVoidPromiseError && ts.isInJSFile(node)) {
            return getDiagnosticForCallNode(node, ts.Diagnostics.Expected_1_argument_but_got_0_new_Promise_needs_a_JSDoc_hint_to_produce_a_resolve_that_can_be_called_without_arguments);
        }
        const error = hasRestParameter
            ? ts.Diagnostics.Expected_at_least_0_arguments_but_got_1
            : isVoidPromiseError
                ? ts.Diagnostics.Expected_0_arguments_but_got_1_Did_you_forget_to_include_void_in_your_type_argument_to_Promise
                : ts.Diagnostics.Expected_0_arguments_but_got_1;
        if (min < args.length && args.length < max) {
            // between min and max, but with no matching overload
            return getDiagnosticForCallNode(node, ts.Diagnostics.No_overload_expects_0_arguments_but_overloads_do_exist_that_expect_either_1_or_2_arguments, args.length, maxBelow, minAbove);
        }
        else if (args.length < min) {
            // too short: put the error span on the call expression, not any of the args
            const diagnostic = getDiagnosticForCallNode(node, error, parameterRange, args.length);
            const parameter = closestSignature?.declaration?.parameters[closestSignature.thisParameter ? args.length + 1 : args.length];
            if (parameter) {
                const parameterError = ts.createDiagnosticForNode(
                    parameter,
                    ts.isBindingPattern(parameter.name) ? ts.Diagnostics.An_argument_matching_this_binding_pattern_was_not_provided
                        : ts.isRestParameter(parameter) ? ts.Diagnostics.Arguments_for_the_rest_parameter_0_were_not_provided
                        : ts.Diagnostics.An_argument_for_0_was_not_provided,
                    !parameter.name ? args.length : !ts.isBindingPattern(parameter.name) ? ts.idText(ts.getFirstIdentifier(parameter.name)) : undefined
                );
                return ts.addRelatedInfo(diagnostic, parameterError);
            }
            return diagnostic;
        }
        else {
            // too long; error goes on the excess parameters
            const errorSpan = ts.factory.createNodeArray(args.slice(max));
            const pos = ts.first(errorSpan).pos;
            let end = ts.last(errorSpan).end;
            if (end === pos) {
                end++;
            }
            ts.setTextRangePosEnd(errorSpan, pos, end);
            return ts.createDiagnosticForNodeArray(ts.getSourceFileOfNode(node), errorSpan, error, parameterRange, args.length);
        }
    }

    function getTypeArgumentArityError(node: ts.Node, signatures: readonly ts.Signature[], typeArguments: ts.NodeArray<ts.TypeNode>) {
        const argCount = typeArguments.length;
        // No overloads exist
        if (signatures.length === 1) {
            const sig = signatures[0];
            const min = getMinTypeArgumentCount(sig.typeParameters);
            const max = ts.length(sig.typeParameters);
            return ts.createDiagnosticForNodeArray(ts.getSourceFileOfNode(node), typeArguments, ts.Diagnostics.Expected_0_type_arguments_but_got_1, min < max ? min + "-" + max : min , argCount);
        }
        // Overloads exist
        let belowArgCount = -Infinity;
        let aboveArgCount = Infinity;
        for (const sig of signatures) {
            const min = getMinTypeArgumentCount(sig.typeParameters);
            const max = ts.length(sig.typeParameters);
            if (min > argCount) {
                aboveArgCount = Math.min(aboveArgCount, min);
            }
            else if (max < argCount) {
                belowArgCount = Math.max(belowArgCount, max);
            }
        }
        if (belowArgCount !== -Infinity && aboveArgCount !== Infinity) {
            return ts.createDiagnosticForNodeArray(ts.getSourceFileOfNode(node), typeArguments, ts.Diagnostics.No_overload_expects_0_type_arguments_but_overloads_do_exist_that_expect_either_1_or_2_type_arguments, argCount, belowArgCount, aboveArgCount);
        }
        return ts.createDiagnosticForNodeArray(ts.getSourceFileOfNode(node), typeArguments, ts.Diagnostics.Expected_0_type_arguments_but_got_1, belowArgCount === -Infinity ? aboveArgCount : belowArgCount, argCount);
    }

    function resolveCall(node: ts.CallLikeExpression, signatures: readonly ts.Signature[], candidatesOutArray: ts.Signature[] | undefined, checkMode: CheckMode, callChainFlags: ts.SignatureFlags, fallbackError?: ts.DiagnosticMessage): ts.Signature {
        const isTaggedTemplate = node.kind === ts.SyntaxKind.TaggedTemplateExpression;
        const isDecorator = node.kind === ts.SyntaxKind.Decorator;
        const isJsxOpeningOrSelfClosingElement = ts.isJsxOpeningLikeElement(node);
        const reportErrors = !candidatesOutArray;

        let typeArguments: ts.NodeArray<ts.TypeNode> | undefined;

        if (!isDecorator && !ts.isSuperCall(node)) {
            typeArguments = (node as ts.CallExpression).typeArguments;

            // We already perform checking on the type arguments on the class declaration itself.
            if (isTaggedTemplate || isJsxOpeningOrSelfClosingElement || (node as ts.CallExpression).expression.kind !== ts.SyntaxKind.SuperKeyword) {
                ts.forEach(typeArguments, checkSourceElement);
            }
        }

        const candidates = candidatesOutArray || [];
        // reorderCandidates fills up the candidates array directly
        reorderCandidates(signatures, candidates, callChainFlags);
        if (!candidates.length) {
            if (reportErrors) {
                diagnostics.add(getDiagnosticForCallNode(node, ts.Diagnostics.Call_target_does_not_contain_any_signatures));
            }
            return resolveErrorCall(node);
        }

        const args = getEffectiveCallArguments(node);

        // The excludeArgument array contains true for each context sensitive argument (an argument
        // is context sensitive it is susceptible to a one-time permanent contextual typing).
        //
        // The idea is that we will perform type argument inference & assignability checking once
        // without using the susceptible parameters that are functions, and once more for those
        // parameters, contextually typing each as we go along.
        //
        // For a tagged template, then the first argument be 'undefined' if necessary because it
        // represents a TemplateStringsArray.
        //
        // For a decorator, no arguments are susceptible to contextual typing due to the fact
        // decorators are applied to a declaration by the emitter, and not to an expression.
        const isSingleNonGenericCandidate = candidates.length === 1 && !candidates[0].typeParameters;
        let argCheckMode = !isDecorator && !isSingleNonGenericCandidate && ts.some(args, isContextSensitive) ? CheckMode.SkipContextSensitive : CheckMode.Normal;
        argCheckMode |= checkMode & CheckMode.IsForStringLiteralArgumentCompletions;

        // The following variables are captured and modified by calls to chooseOverload.
        // If overload resolution or type argument inference fails, we want to report the
        // best error possible. The best error is one which says that an argument was not
        // assignable to a parameter. This implies that everything else about the overload
        // was fine. So if there is any overload that is only incorrect because of an
        // argument, we will report an error on that one.
        //
        //     function foo(s: string): void;
        //     function foo(n: number): void; // Report argument error on this overload
        //     function foo(): void;
        //     foo(true);
        //
        // If none of the overloads even made it that far, there are two possibilities.
        // There was a problem with type arguments for some overload, in which case
        // report an error on that. Or none of the overloads even had correct arity,
        // in which case give an arity error.
        //
        //     function foo<T extends string>(x: T): void; // Report type argument error
        //     function foo(): void;
        //     foo<number>(0);
        //
        let candidatesForArgumentError: ts.Signature[] | undefined;
        let candidateForArgumentArityError: ts.Signature | undefined;
        let candidateForTypeArgumentError: ts.Signature | undefined;
        let result: ts.Signature | undefined;

        // If we are in signature help, a trailing comma indicates that we intend to provide another argument,
        // so we will only accept overloads with arity at least 1 higher than the current number of provided arguments.
        const signatureHelpTrailingComma =
            !!(checkMode & CheckMode.IsForSignatureHelp) && node.kind === ts.SyntaxKind.CallExpression && node.arguments.hasTrailingComma;

        // Section 4.12.1:
        // if the candidate list contains one or more signatures for which the type of each argument
        // expression is a subtype of each corresponding parameter type, the return type of the first
        // of those signatures becomes the return type of the function call.
        // Otherwise, the return type of the first signature in the candidate list becomes the return
        // type of the function call.
        //
        // Whether the call is an error is determined by assignability of the arguments. The subtype pass
        // is just important for choosing the best signature. So in the case where there is only one
        // signature, the subtype pass is useless. So skipping it is an optimization.
        if (candidates.length > 1) {
            result = chooseOverload(candidates, subtypeRelation, isSingleNonGenericCandidate, signatureHelpTrailingComma);
        }
        if (!result) {
            result = chooseOverload(candidates, assignableRelation, isSingleNonGenericCandidate, signatureHelpTrailingComma);
        }
        if (result) {
            return result;
        }

        result = getCandidateForOverloadFailure(node, candidates, args, !!candidatesOutArray, checkMode);
        // Preemptively cache the result; getResolvedSignature will do this after we return, but
        // we need to ensure that the result is present for the error checks below so that if
        // this signature is encountered again, we handle the circularity (rather than producing a
        // different result which may produce no errors and assert). Callers of getResolvedSignature
        // don't hit this issue because they only observe this result after it's had a chance to
        // be cached, but the error reporting code below executes before getResolvedSignature sets
        // resolvedSignature.
        getNodeLinks(node).resolvedSignature = result;

        // No signatures were applicable. Now report errors based on the last applicable signature with
        // no arguments excluded from assignability checks.
        // If candidate is undefined, it means that no candidates had a suitable arity. In that case,
        // skip the checkApplicableSignature check.
        if (reportErrors) {
            if (candidatesForArgumentError) {
                if (candidatesForArgumentError.length === 1 || candidatesForArgumentError.length > 3) {
                    const last = candidatesForArgumentError[candidatesForArgumentError.length - 1];
                    let chain: ts.DiagnosticMessageChain | undefined;
                    if (candidatesForArgumentError.length > 3) {
                        chain = ts.chainDiagnosticMessages(chain, ts.Diagnostics.The_last_overload_gave_the_following_error);
                        chain = ts.chainDiagnosticMessages(chain, ts.Diagnostics.No_overload_matches_this_call);
                    }
                    const diags = getSignatureApplicabilityError(node, args, last, assignableRelation, CheckMode.Normal, /*reportErrors*/ true, () => chain);
                    if (diags) {
                        for (const d of diags) {
                            if (last.declaration && candidatesForArgumentError.length > 3) {
                                ts.addRelatedInfo(d, ts.createDiagnosticForNode(last.declaration, ts.Diagnostics.The_last_overload_is_declared_here));
                            }
                            addImplementationSuccessElaboration(last, d);
                            diagnostics.add(d);
                        }
                    }
                    else {
                        ts.Debug.fail("No error for last overload signature");
                    }
                }
                else {
                    const allDiagnostics: (readonly ts.DiagnosticRelatedInformation[])[] = [];
                    let max = 0;
                    let min = Number.MAX_VALUE;
                    let minIndex = 0;
                    let i = 0;
                    for (const c of candidatesForArgumentError) {
                        const chain = () => ts.chainDiagnosticMessages(/*details*/ undefined, ts.Diagnostics.Overload_0_of_1_2_gave_the_following_error, i + 1, candidates.length, signatureToString(c));
                        const diags = getSignatureApplicabilityError(node, args, c, assignableRelation, CheckMode.Normal, /*reportErrors*/ true, chain);
                        if (diags) {
                            if (diags.length <= min) {
                                min = diags.length;
                                minIndex = i;
                            }
                            max = Math.max(max, diags.length);
                            allDiagnostics.push(diags);
                        }
                        else {
                            ts.Debug.fail("No error for 3 or fewer overload signatures");
                        }
                        i++;
                    }

                    const diags = max > 1 ? allDiagnostics[minIndex] : ts.flatten(allDiagnostics);
                    ts.Debug.assert(diags.length > 0, "No errors reported for 3 or fewer overload signatures");
                    const chain = ts.chainDiagnosticMessages(
                        ts.map(diags, ts.createDiagnosticMessageChainFromDiagnostic),
                        ts.Diagnostics.No_overload_matches_this_call);
                    // The below is a spread to guarantee we get a new (mutable) array - our `flatMap` helper tries to do "smart" optimizations where it reuses input
                    // arrays and the emptyArray singleton where possible, which is decidedly not what we want while we're still constructing this diagnostic
                    const related = [...ts.flatMap(diags, d => (d as ts.Diagnostic).relatedInformation) as ts.DiagnosticRelatedInformation[]];
                    let diag: ts.Diagnostic;
                    if (ts.every(diags, d => d.start === diags[0].start && d.length === diags[0].length && d.file === diags[0].file)) {
                        const { file, start, length } = diags[0];
                        diag = { file, start, length, code: chain.code, category: chain.category, messageText: chain, relatedInformation: related };
                    }
                    else {
                        diag = ts.createDiagnosticForNodeFromMessageChain(node, chain, related);
                    }
                    addImplementationSuccessElaboration(candidatesForArgumentError[0], diag);
                    diagnostics.add(diag);
                }
            }
            else if (candidateForArgumentArityError) {
                diagnostics.add(getArgumentArityError(node, [candidateForArgumentArityError], args));
            }
            else if (candidateForTypeArgumentError) {
                checkTypeArguments(candidateForTypeArgumentError, (node as ts.CallExpression | ts.TaggedTemplateExpression | ts.JsxOpeningLikeElement).typeArguments!, /*reportErrors*/ true, fallbackError);
            }
            else {
                const signaturesWithCorrectTypeArgumentArity = ts.filter(signatures, s => hasCorrectTypeArgumentArity(s, typeArguments));
                if (signaturesWithCorrectTypeArgumentArity.length === 0) {
                    diagnostics.add(getTypeArgumentArityError(node, signatures, typeArguments!));
                }
                else if (!isDecorator) {
                    diagnostics.add(getArgumentArityError(node, signaturesWithCorrectTypeArgumentArity, args));
                }
                else if (fallbackError) {
                    diagnostics.add(getDiagnosticForCallNode(node, fallbackError));
                }
            }
        }

        return result;

        function addImplementationSuccessElaboration(failed: ts.Signature, diagnostic: ts.Diagnostic) {
            const oldCandidatesForArgumentError = candidatesForArgumentError;
            const oldCandidateForArgumentArityError = candidateForArgumentArityError;
            const oldCandidateForTypeArgumentError = candidateForTypeArgumentError;

            const failedSignatureDeclarations = failed.declaration?.symbol?.declarations || ts.emptyArray;
            const isOverload = failedSignatureDeclarations.length > 1;
            const implDecl = isOverload ? ts.find(failedSignatureDeclarations, d => ts.isFunctionLikeDeclaration(d) && ts.nodeIsPresent(d.body)) : undefined;
            if (implDecl) {
                const candidate = getSignatureFromDeclaration(implDecl as ts.FunctionLikeDeclaration);
                const isSingleNonGenericCandidate = !candidate.typeParameters;
                if (chooseOverload([candidate], assignableRelation, isSingleNonGenericCandidate)) {
                    ts.addRelatedInfo(diagnostic, ts.createDiagnosticForNode(implDecl, ts.Diagnostics.The_call_would_have_succeeded_against_this_implementation_but_implementation_signatures_of_overloads_are_not_externally_visible));
                }
            }

            candidatesForArgumentError = oldCandidatesForArgumentError;
            candidateForArgumentArityError = oldCandidateForArgumentArityError;
            candidateForTypeArgumentError = oldCandidateForTypeArgumentError;
        }

        function chooseOverload(candidates: ts.Signature[], relation: ts.ESMap<string, ts.RelationComparisonResult>, isSingleNonGenericCandidate: boolean, signatureHelpTrailingComma = false) {
            candidatesForArgumentError = undefined;
            candidateForArgumentArityError = undefined;
            candidateForTypeArgumentError = undefined;

            if (isSingleNonGenericCandidate) {
                const candidate = candidates[0];
                if (ts.some(typeArguments) || !hasCorrectArity(node, args, candidate, signatureHelpTrailingComma)) {
                    return undefined;
                }
                if (getSignatureApplicabilityError(node, args, candidate, relation, CheckMode.Normal, /*reportErrors*/ false, /*containingMessageChain*/ undefined)) {
                    candidatesForArgumentError = [candidate];
                    return undefined;
                }
                return candidate;
            }

            for (let candidateIndex = 0; candidateIndex < candidates.length; candidateIndex++) {
                const candidate = candidates[candidateIndex];
                if (!hasCorrectTypeArgumentArity(candidate, typeArguments) || !hasCorrectArity(node, args, candidate, signatureHelpTrailingComma)) {
                    continue;
                }

                let checkCandidate: ts.Signature;
                let inferenceContext: ts.InferenceContext | undefined;

                if (candidate.typeParameters) {
                    let typeArgumentTypes: ts.Type[] | undefined;
                    if (ts.some(typeArguments)) {
                        typeArgumentTypes = checkTypeArguments(candidate, typeArguments, /*reportErrors*/ false);
                        if (!typeArgumentTypes) {
                            candidateForTypeArgumentError = candidate;
                            continue;
                        }
                    }
                    else {
                        inferenceContext = createInferenceContext(candidate.typeParameters, candidate, /*flags*/ ts.isInJSFile(node) ? ts.InferenceFlags.AnyDefault : ts.InferenceFlags.None);
                        typeArgumentTypes = inferTypeArguments(node, candidate, args, argCheckMode | CheckMode.SkipGenericFunctions, inferenceContext);
                        argCheckMode |= inferenceContext.flags & ts.InferenceFlags.SkippedGenericFunction ? CheckMode.SkipGenericFunctions : CheckMode.Normal;
                    }
                    checkCandidate = getSignatureInstantiation(candidate, typeArgumentTypes, ts.isInJSFile(candidate.declaration), inferenceContext && inferenceContext.inferredTypeParameters);
                    // If the original signature has a generic rest type, instantiation may produce a
                    // signature with different arity and we need to perform another arity check.
                    if (getNonArrayRestType(candidate) && !hasCorrectArity(node, args, checkCandidate, signatureHelpTrailingComma)) {
                        candidateForArgumentArityError = checkCandidate;
                        continue;
                    }
                }
                else {
                    checkCandidate = candidate;
                }
                if (getSignatureApplicabilityError(node, args, checkCandidate, relation, argCheckMode, /*reportErrors*/ false, /*containingMessageChain*/ undefined)) {
                    // Give preference to error candidates that have no rest parameters (as they are more specific)
                    (candidatesForArgumentError || (candidatesForArgumentError = [])).push(checkCandidate);
                    continue;
                }
                if (argCheckMode) {
                    // If one or more context sensitive arguments were excluded, we start including
                    // them now (and keeping do so for any subsequent candidates) and perform a second
                    // round of type inference and applicability checking for this particular candidate.
                    argCheckMode = checkMode & CheckMode.IsForStringLiteralArgumentCompletions;
                    if (inferenceContext) {
                        const typeArgumentTypes = inferTypeArguments(node, candidate, args, argCheckMode, inferenceContext);
                        checkCandidate = getSignatureInstantiation(candidate, typeArgumentTypes, ts.isInJSFile(candidate.declaration), inferenceContext.inferredTypeParameters);
                        // If the original signature has a generic rest type, instantiation may produce a
                        // signature with different arity and we need to perform another arity check.
                        if (getNonArrayRestType(candidate) && !hasCorrectArity(node, args, checkCandidate, signatureHelpTrailingComma)) {
                            candidateForArgumentArityError = checkCandidate;
                            continue;
                        }
                    }
                    if (getSignatureApplicabilityError(node, args, checkCandidate, relation, argCheckMode, /*reportErrors*/ false, /*containingMessageChain*/ undefined)) {
                        // Give preference to error candidates that have no rest parameters (as they are more specific)
                        (candidatesForArgumentError || (candidatesForArgumentError = [])).push(checkCandidate);
                        continue;
                    }
                }
                candidates[candidateIndex] = checkCandidate;
                return checkCandidate;
            }

            return undefined;
        }
    }

    // No signature was applicable. We have already reported the errors for the invalid signature.
    function getCandidateForOverloadFailure(
        node: ts.CallLikeExpression,
        candidates: ts.Signature[],
        args: readonly ts.Expression[],
        hasCandidatesOutArray: boolean,
        checkMode: CheckMode,
    ): ts.Signature {
        ts.Debug.assert(candidates.length > 0); // Else should not have called this.
        checkNodeDeferred(node);
        // Normally we will combine overloads. Skip this if they have type parameters since that's hard to combine.
        // Don't do this if there is a `candidatesOutArray`,
        // because then we want the chosen best candidate to be one of the overloads, not a combination.
        return hasCandidatesOutArray || candidates.length === 1 || candidates.some(c => !!c.typeParameters)
            ? pickLongestCandidateSignature(node, candidates, args, checkMode)
            : createUnionOfSignaturesForOverloadFailure(candidates);
    }

    function createUnionOfSignaturesForOverloadFailure(candidates: readonly ts.Signature[]): ts.Signature {
        const thisParameters = ts.mapDefined(candidates, c => c.thisParameter);
        let thisParameter: ts.Symbol | undefined;
        if (thisParameters.length) {
            thisParameter = createCombinedSymbolFromTypes(thisParameters, thisParameters.map(getTypeOfParameter));
        }
        const { min: minArgumentCount, max: maxNonRestParam } = ts.minAndMax(candidates, getNumNonRestParameters);
        const parameters: ts.Symbol[] = [];
        for (let i = 0; i < maxNonRestParam; i++) {
            const symbols = ts.mapDefined(candidates, s => signatureHasRestParameter(s) ?
                i < s.parameters.length - 1 ? s.parameters[i] : ts.last(s.parameters) :
                i < s.parameters.length ? s.parameters[i] : undefined);
            ts.Debug.assert(symbols.length !== 0);
            parameters.push(createCombinedSymbolFromTypes(symbols, ts.mapDefined(candidates, candidate => tryGetTypeAtPosition(candidate, i))));
        }
        const restParameterSymbols = ts.mapDefined(candidates, c => signatureHasRestParameter(c) ? ts.last(c.parameters) : undefined);
        let flags = ts.SignatureFlags.None;
        if (restParameterSymbols.length !== 0) {
            const type = createArrayType(getUnionType(ts.mapDefined(candidates, tryGetRestTypeOfSignature), ts.UnionReduction.Subtype));
            parameters.push(createCombinedSymbolForOverloadFailure(restParameterSymbols, type));
            flags |= ts.SignatureFlags.HasRestParameter;
        }
        if (candidates.some(signatureHasLiteralTypes)) {
            flags |= ts.SignatureFlags.HasLiteralTypes;
        }
        return createSignature(
            candidates[0].declaration,
            /*typeParameters*/ undefined, // Before calling this we tested for `!candidates.some(c => !!c.typeParameters)`.
            thisParameter,
            parameters,
            /*resolvedReturnType*/ getIntersectionType(candidates.map(getReturnTypeOfSignature)),
            /*typePredicate*/ undefined,
            minArgumentCount,
            flags);
    }

    function getNumNonRestParameters(signature: ts.Signature): number {
        const numParams = signature.parameters.length;
        return signatureHasRestParameter(signature) ? numParams - 1 : numParams;
    }

    function createCombinedSymbolFromTypes(sources: readonly ts.Symbol[], types: ts.Type[]): ts.Symbol {
        return createCombinedSymbolForOverloadFailure(sources, getUnionType(types, ts.UnionReduction.Subtype));
    }

    function createCombinedSymbolForOverloadFailure(sources: readonly ts.Symbol[], type: ts.Type): ts.Symbol {
        // This function is currently only used for erroneous overloads, so it's good enough to just use the first source.
        return createSymbolWithType(ts.first(sources), type);
    }

    function pickLongestCandidateSignature(node: ts.CallLikeExpression, candidates: ts.Signature[], args: readonly ts.Expression[], checkMode: CheckMode): ts.Signature {
        // Pick the longest signature. This way we can get a contextual type for cases like:
        //     declare function f(a: { xa: number; xb: number; }, b: number);
        //     f({ |
        // Also, use explicitly-supplied type arguments if they are provided, so we can get a contextual signature in cases like:
        //     declare function f<T>(k: keyof T);
        //     f<Foo>("
        const bestIndex = getLongestCandidateIndex(candidates, apparentArgumentCount === undefined ? args.length : apparentArgumentCount);
        const candidate = candidates[bestIndex];
        const { typeParameters } = candidate;
        if (!typeParameters) {
            return candidate;
        }

        const typeArgumentNodes: readonly ts.TypeNode[] | undefined = callLikeExpressionMayHaveTypeArguments(node) ? node.typeArguments : undefined;
        const instantiated = typeArgumentNodes
            ? createSignatureInstantiation(candidate, getTypeArgumentsFromNodes(typeArgumentNodes, typeParameters, ts.isInJSFile(node)))
            : inferSignatureInstantiationForOverloadFailure(node, typeParameters, candidate, args, checkMode);
        candidates[bestIndex] = instantiated;
        return instantiated;
    }

    function getTypeArgumentsFromNodes(typeArgumentNodes: readonly ts.TypeNode[], typeParameters: readonly ts.TypeParameter[], isJs: boolean): readonly ts.Type[] {
        const typeArguments = typeArgumentNodes.map(getTypeOfNode);
        while (typeArguments.length > typeParameters.length) {
            typeArguments.pop();
        }
        while (typeArguments.length < typeParameters.length) {
            typeArguments.push(getDefaultFromTypeParameter(typeParameters[typeArguments.length]) || getConstraintOfTypeParameter(typeParameters[typeArguments.length]) || getDefaultTypeArgumentType(isJs));
        }
        return typeArguments;
    }

    function inferSignatureInstantiationForOverloadFailure(node: ts.CallLikeExpression, typeParameters: readonly ts.TypeParameter[], candidate: ts.Signature, args: readonly ts.Expression[], checkMode: CheckMode): ts.Signature {
        const inferenceContext = createInferenceContext(typeParameters, candidate, /*flags*/ ts.isInJSFile(node) ? ts.InferenceFlags.AnyDefault : ts.InferenceFlags.None);
        const typeArgumentTypes = inferTypeArguments(node, candidate, args, checkMode | CheckMode.SkipContextSensitive | CheckMode.SkipGenericFunctions, inferenceContext);
        return createSignatureInstantiation(candidate, typeArgumentTypes);
    }

    function getLongestCandidateIndex(candidates: ts.Signature[], argsCount: number): number {
        let maxParamsIndex = -1;
        let maxParams = -1;

        for (let i = 0; i < candidates.length; i++) {
            const candidate = candidates[i];
            const paramCount = getParameterCount(candidate);
            if (hasEffectiveRestParameter(candidate) || paramCount >= argsCount) {
                return i;
            }
            if (paramCount > maxParams) {
                maxParams = paramCount;
                maxParamsIndex = i;
            }
        }

        return maxParamsIndex;
    }

    function resolveCallExpression(node: ts.CallExpression, candidatesOutArray: ts.Signature[] | undefined, checkMode: CheckMode): ts.Signature {
        if (node.expression.kind === ts.SyntaxKind.SuperKeyword) {
            const superType = checkSuperExpression(node.expression);
            if (isTypeAny(superType)) {
                for (const arg of node.arguments) {
                    checkExpression(arg); // Still visit arguments so they get marked for visibility, etc
                }
                return anySignature;
            }
            if (!isErrorType(superType)) {
                // In super call, the candidate signatures are the matching arity signatures of the base constructor function instantiated
                // with the type arguments specified in the extends clause.
                const baseTypeNode = ts.getEffectiveBaseTypeNode(ts.getContainingClass(node)!);
                if (baseTypeNode) {
                    const baseConstructors = getInstantiatedConstructorsForTypeArguments(superType, baseTypeNode.typeArguments, baseTypeNode);
                    return resolveCall(node, baseConstructors, candidatesOutArray, checkMode, ts.SignatureFlags.None);
                }
            }
            return resolveUntypedCall(node);
        }

        let callChainFlags: ts.SignatureFlags;
        let funcType = checkExpression(node.expression);
        if (ts.isCallChain(node)) {
            const nonOptionalType = getOptionalExpressionType(funcType, node.expression);
            callChainFlags = nonOptionalType === funcType ? ts.SignatureFlags.None :
                ts.isOutermostOptionalChain(node) ? ts.SignatureFlags.IsOuterCallChain :
                ts.SignatureFlags.IsInnerCallChain;
            funcType = nonOptionalType;
        }
        else {
            callChainFlags = ts.SignatureFlags.None;
        }

        funcType = checkNonNullTypeWithReporter(
            funcType,
            node.expression,
            reportCannotInvokePossiblyNullOrUndefinedError
        );

        if (funcType === silentNeverType) {
            return silentNeverSignature;
        }

        const apparentType = getApparentType(funcType);
        if (isErrorType(apparentType)) {
            // Another error has already been reported
            return resolveErrorCall(node);
        }

        // Technically, this signatures list may be incomplete. We are taking the apparent type,
        // but we are not including call signatures that may have been added to the Object or
        // Function interface, since they have none by default. This is a bit of a leap of faith
        // that the user will not add any.
        const callSignatures = getSignaturesOfType(apparentType, ts.SignatureKind.Call);
        const numConstructSignatures = getSignaturesOfType(apparentType, ts.SignatureKind.Construct).length;

        // TS 1.0 Spec: 4.12
        // In an untyped function call no TypeArgs are permitted, Args can be any argument list, no contextual
        // types are provided for the argument expressions, and the result is always of type Any.
        if (isUntypedFunctionCall(funcType, apparentType, callSignatures.length, numConstructSignatures)) {
            // The unknownType indicates that an error already occurred (and was reported).  No
            // need to report another error in this case.
            if (!isErrorType(funcType) && node.typeArguments) {
                error(node, ts.Diagnostics.Untyped_function_calls_may_not_accept_type_arguments);
            }
            return resolveUntypedCall(node);
        }
        // If FuncExpr's apparent type(section 3.8.1) is a function type, the call is a typed function call.
        // TypeScript employs overload resolution in typed function calls in order to support functions
        // with multiple call signatures.
        if (!callSignatures.length) {
            if (numConstructSignatures) {
                error(node, ts.Diagnostics.Value_of_type_0_is_not_callable_Did_you_mean_to_include_new, typeToString(funcType));
            }
            else {
                let relatedInformation: ts.DiagnosticRelatedInformation | undefined;
                if (node.arguments.length === 1) {
                    const text = ts.getSourceFileOfNode(node).text;
                    if (ts.isLineBreak(text.charCodeAt(ts.skipTrivia(text, node.expression.end, /* stopAfterLineBreak */ true) - 1))) {
                        relatedInformation = ts.createDiagnosticForNode(node.expression, ts.Diagnostics.Are_you_missing_a_semicolon);
                    }
                }
                invocationError(node.expression, apparentType, ts.SignatureKind.Call, relatedInformation);
            }
            return resolveErrorCall(node);
        }
        // When a call to a generic function is an argument to an outer call to a generic function for which
        // inference is in process, we have a choice to make. If the inner call relies on inferences made from
        // its contextual type to its return type, deferring the inner call processing allows the best possible
        // contextual type to accumulate. But if the outer call relies on inferences made from the return type of
        // the inner call, the inner call should be processed early. There's no sure way to know which choice is
        // right (only a full unification algorithm can determine that), so we resort to the following heuristic:
        // If no type arguments are specified in the inner call and at least one call signature is generic and
        // returns a function type, we choose to defer processing. This narrowly permits function composition
        // operators to flow inferences through return types, but otherwise processes calls right away. We
        // use the resolvingSignature singleton to indicate that we deferred processing. This result will be
        // propagated out and eventually turned into silentNeverType (a type that is assignable to anything and
        // from which we never make inferences).
        if (checkMode & CheckMode.SkipGenericFunctions && !node.typeArguments && callSignatures.some(isGenericFunctionReturningFunction)) {
            skippedGenericFunction(node, checkMode);
            return resolvingSignature;
        }
        // If the function is explicitly marked with `@class`, then it must be constructed.
        if (callSignatures.some(sig => ts.isInJSFile(sig.declaration) && !!ts.getJSDocClassTag(sig.declaration!))) {
            error(node, ts.Diagnostics.Value_of_type_0_is_not_callable_Did_you_mean_to_include_new, typeToString(funcType));
            return resolveErrorCall(node);
        }

        return resolveCall(node, callSignatures, candidatesOutArray, checkMode, callChainFlags);
    }

    function isGenericFunctionReturningFunction(signature: ts.Signature) {
        return !!(signature.typeParameters && isFunctionType(getReturnTypeOfSignature(signature)));
    }

    /**
     * TS 1.0 spec: 4.12
     * If FuncExpr is of type Any, or of an object type that has no call or construct signatures
     * but is a subtype of the Function interface, the call is an untyped function call.
     */
    function isUntypedFunctionCall(funcType: ts.Type, apparentFuncType: ts.Type, numCallSignatures: number, numConstructSignatures: number): boolean {
        // We exclude union types because we may have a union of function types that happen to have no common signatures.
        return isTypeAny(funcType) || isTypeAny(apparentFuncType) && !!(funcType.flags & ts.TypeFlags.TypeParameter) ||
            !numCallSignatures && !numConstructSignatures && !(apparentFuncType.flags & ts.TypeFlags.Union) && !(getReducedType(apparentFuncType).flags & ts.TypeFlags.Never) && isTypeAssignableTo(funcType, globalFunctionType);
    }

    function resolveNewExpression(node: ts.NewExpression, candidatesOutArray: ts.Signature[] | undefined, checkMode: CheckMode): ts.Signature {
        if (node.arguments && languageVersion < ts.ScriptTarget.ES5) {
            const spreadIndex = getSpreadArgumentIndex(node.arguments);
            if (spreadIndex >= 0) {
                error(node.arguments[spreadIndex], ts.Diagnostics.Spread_operator_in_new_expressions_is_only_available_when_targeting_ECMAScript_5_and_higher);
            }
        }

        let expressionType = checkNonNullExpression(node.expression);
        if (expressionType === silentNeverType) {
            return silentNeverSignature;
        }

        // If expressionType's apparent type(section 3.8.1) is an object type with one or
        // more construct signatures, the expression is processed in the same manner as a
        // function call, but using the construct signatures as the initial set of candidate
        // signatures for overload resolution. The result type of the function call becomes
        // the result type of the operation.
        expressionType = getApparentType(expressionType);
        if (isErrorType(expressionType)) {
            // Another error has already been reported
            return resolveErrorCall(node);
        }

        // TS 1.0 spec: 4.11
        // If expressionType is of type Any, Args can be any argument
        // list and the result of the operation is of type Any.
        if (isTypeAny(expressionType)) {
            if (node.typeArguments) {
                error(node, ts.Diagnostics.Untyped_function_calls_may_not_accept_type_arguments);
            }
            return resolveUntypedCall(node);
        }

        // Technically, this signatures list may be incomplete. We are taking the apparent type,
        // but we are not including construct signatures that may have been added to the Object or
        // Function interface, since they have none by default. This is a bit of a leap of faith
        // that the user will not add any.
        const constructSignatures = getSignaturesOfType(expressionType, ts.SignatureKind.Construct);
        if (constructSignatures.length) {
            if (!isConstructorAccessible(node, constructSignatures[0])) {
                return resolveErrorCall(node);
            }
            // If the expression is a class of abstract type, or an abstract construct signature,
            // then it cannot be instantiated.
            // In the case of a merged class-module or class-interface declaration,
            // only the class declaration node will have the Abstract flag set.
            if (someSignature(constructSignatures, signature => !!(signature.flags & ts.SignatureFlags.Abstract))) {
                error(node, ts.Diagnostics.Cannot_create_an_instance_of_an_abstract_class);
                return resolveErrorCall(node);
            }
            const valueDecl = expressionType.symbol && ts.getClassLikeDeclarationOfSymbol(expressionType.symbol);
            if (valueDecl && ts.hasSyntacticModifier(valueDecl, ts.ModifierFlags.Abstract)) {
                error(node, ts.Diagnostics.Cannot_create_an_instance_of_an_abstract_class);
                return resolveErrorCall(node);
            }

            return resolveCall(node, constructSignatures, candidatesOutArray, checkMode, ts.SignatureFlags.None);
        }

        // If expressionType's apparent type is an object type with no construct signatures but
        // one or more call signatures, the expression is processed as a function call. A compile-time
        // error occurs if the result of the function call is not Void. The type of the result of the
        // operation is Any. It is an error to have a Void this type.
        const callSignatures = getSignaturesOfType(expressionType, ts.SignatureKind.Call);
        if (callSignatures.length) {
            const signature = resolveCall(node, callSignatures, candidatesOutArray, checkMode, ts.SignatureFlags.None);
            if (!noImplicitAny) {
                if (signature.declaration && !isJSConstructor(signature.declaration) && getReturnTypeOfSignature(signature) !== voidType) {
                    error(node, ts.Diagnostics.Only_a_void_function_can_be_called_with_the_new_keyword);
                }
                if (getThisTypeOfSignature(signature) === voidType) {
                    error(node, ts.Diagnostics.A_function_that_is_called_with_the_new_keyword_cannot_have_a_this_type_that_is_void);
                }
            }
            return signature;
        }

        invocationError(node.expression, expressionType, ts.SignatureKind.Construct);
        return resolveErrorCall(node);
    }

    function someSignature(signatures: ts.Signature | readonly ts.Signature[], f: (s: ts.Signature) => boolean): boolean {
        if (ts.isArray(signatures)) {
            return ts.some(signatures, signature => someSignature(signature, f));
        }
        return signatures.compositeKind === ts.TypeFlags.Union ? ts.some(signatures.compositeSignatures, f) : f(signatures);
    }

    function typeHasProtectedAccessibleBase(target: ts.Symbol, type: ts.InterfaceType): boolean {
        const baseTypes = getBaseTypes(type);
        if (!ts.length(baseTypes)) {
            return false;
        }
        const firstBase = baseTypes[0];
        if (firstBase.flags & ts.TypeFlags.Intersection) {
            const types = (firstBase as ts.IntersectionType).types;
            const mixinFlags = findMixins(types);
            let i = 0;
            for (const intersectionMember of (firstBase as ts.IntersectionType).types) {
                // We want to ignore mixin ctors
                if (!mixinFlags[i]) {
                    if (ts.getObjectFlags(intersectionMember) & (ts.ObjectFlags.Class | ts.ObjectFlags.Interface)) {
                        if (intersectionMember.symbol === target) {
                            return true;
                        }
                        if (typeHasProtectedAccessibleBase(target, intersectionMember as ts.InterfaceType)) {
                            return true;
                        }
                    }
                }
                i++;
            }
            return false;
        }
        if (firstBase.symbol === target) {
            return true;
        }
        return typeHasProtectedAccessibleBase(target, firstBase as ts.InterfaceType);
    }

    function isConstructorAccessible(node: ts.NewExpression, signature: ts.Signature) {
        if (!signature || !signature.declaration) {
            return true;
        }

        const declaration = signature.declaration;
        const modifiers = ts.getSelectedEffectiveModifierFlags(declaration, ts.ModifierFlags.NonPublicAccessibilityModifier);

        // (1) Public constructors and (2) constructor functions are always accessible.
        if (!modifiers || declaration.kind !== ts.SyntaxKind.Constructor) {
            return true;
        }

        const declaringClassDeclaration = ts.getClassLikeDeclarationOfSymbol(declaration.parent.symbol)!;
        const declaringClass = getDeclaredTypeOfSymbol(declaration.parent.symbol) as ts.InterfaceType;

        // A private or protected constructor can only be instantiated within its own class (or a subclass, for protected)
        if (!isNodeWithinClass(node, declaringClassDeclaration)) {
            const containingClass = ts.getContainingClass(node);
            if (containingClass && modifiers & ts.ModifierFlags.Protected) {
                const containingType = getTypeOfNode(containingClass);
                if (typeHasProtectedAccessibleBase(declaration.parent.symbol, containingType as ts.InterfaceType)) {
                    return true;
                }
            }
            if (modifiers & ts.ModifierFlags.Private) {
                error(node, ts.Diagnostics.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration, typeToString(declaringClass));
            }
            if (modifiers & ts.ModifierFlags.Protected) {
                error(node, ts.Diagnostics.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration, typeToString(declaringClass));
            }
            return false;
        }

        return true;
    }

    function invocationErrorDetails(errorTarget: ts.Node, apparentType: ts.Type, kind: ts.SignatureKind): { messageChain: ts.DiagnosticMessageChain, relatedMessage: ts.DiagnosticMessage | undefined } {
        let errorInfo: ts.DiagnosticMessageChain | undefined;
        const isCall = kind === ts.SignatureKind.Call;
        const awaitedType = getAwaitedType(apparentType);
        const maybeMissingAwait = awaitedType && getSignaturesOfType(awaitedType, kind).length > 0;
        if (apparentType.flags & ts.TypeFlags.Union) {
            const types = (apparentType as ts.UnionType).types;
            let hasSignatures = false;
            for (const constituent of types) {
                const signatures = getSignaturesOfType(constituent, kind);
                if (signatures.length !== 0) {
                    hasSignatures = true;
                    if (errorInfo) {
                        // Bail early if we already have an error, no chance of "No constituent of type is callable"
                        break;
                    }
                }
                else {
                    // Error on the first non callable constituent only
                    if (!errorInfo) {
                        errorInfo = ts.chainDiagnosticMessages(
                            errorInfo,
                            isCall ?
                                ts.Diagnostics.Type_0_has_no_call_signatures :
                                ts.Diagnostics.Type_0_has_no_construct_signatures,
                            typeToString(constituent)
                        );
                        errorInfo = ts.chainDiagnosticMessages(
                            errorInfo,
                            isCall ?
                                ts.Diagnostics.Not_all_constituents_of_type_0_are_callable :
                                ts.Diagnostics.Not_all_constituents_of_type_0_are_constructable,
                            typeToString(apparentType)
                        );
                    }
                    if (hasSignatures) {
                        // Bail early if we already found a siganture, no chance of "No constituent of type is callable"
                        break;
                    }
                }
            }
            if (!hasSignatures) {
                errorInfo = ts.chainDiagnosticMessages(
                    /* detials */ undefined,
                    isCall ?
                        ts.Diagnostics.No_constituent_of_type_0_is_callable :
                        ts.Diagnostics.No_constituent_of_type_0_is_constructable,
                    typeToString(apparentType)
                );
            }
            if (!errorInfo) {
                errorInfo = ts.chainDiagnosticMessages(
                    errorInfo,
                    isCall ?
                        ts.Diagnostics.Each_member_of_the_union_type_0_has_signatures_but_none_of_those_signatures_are_compatible_with_each_other :
                        ts.Diagnostics.Each_member_of_the_union_type_0_has_construct_signatures_but_none_of_those_signatures_are_compatible_with_each_other,
                    typeToString(apparentType)
                );
            }
        }
        else {
            errorInfo = ts.chainDiagnosticMessages(
                errorInfo,
                isCall ?
                    ts.Diagnostics.Type_0_has_no_call_signatures :
                    ts.Diagnostics.Type_0_has_no_construct_signatures,
                typeToString(apparentType)
            );
        }

        let headMessage = isCall ? ts.Diagnostics.This_expression_is_not_callable : ts.Diagnostics.This_expression_is_not_constructable;

        // Diagnose get accessors incorrectly called as functions
        if (ts.isCallExpression(errorTarget.parent) && errorTarget.parent.arguments.length === 0) {
            const { resolvedSymbol } = getNodeLinks(errorTarget);
            if (resolvedSymbol && resolvedSymbol.flags & ts.SymbolFlags.GetAccessor) {
                headMessage = ts.Diagnostics.This_expression_is_not_callable_because_it_is_a_get_accessor_Did_you_mean_to_use_it_without;
            }
        }

        return {
            messageChain: ts.chainDiagnosticMessages(errorInfo, headMessage),
            relatedMessage: maybeMissingAwait ? ts.Diagnostics.Did_you_forget_to_use_await : undefined,
        };
    }
    function invocationError(errorTarget: ts.Node, apparentType: ts.Type, kind: ts.SignatureKind, relatedInformation?: ts.DiagnosticRelatedInformation) {
        const { messageChain, relatedMessage: relatedInfo } = invocationErrorDetails(errorTarget, apparentType, kind);
        const diagnostic = ts.createDiagnosticForNodeFromMessageChain(errorTarget, messageChain);
        if (relatedInfo) {
            ts.addRelatedInfo(diagnostic, ts.createDiagnosticForNode(errorTarget, relatedInfo));
        }
        if (ts.isCallExpression(errorTarget.parent)) {
            const { start, length } = getDiagnosticSpanForCallNode(errorTarget.parent, /* doNotIncludeArguments */ true);
            diagnostic.start = start;
            diagnostic.length = length;
        }
        diagnostics.add(diagnostic);
        invocationErrorRecovery(apparentType, kind, relatedInformation ? ts.addRelatedInfo(diagnostic, relatedInformation) : diagnostic);
    }

    function invocationErrorRecovery(apparentType: ts.Type, kind: ts.SignatureKind, diagnostic: ts.Diagnostic) {
        if (!apparentType.symbol) {
            return;
        }
        const importNode = getSymbolLinks(apparentType.symbol).originatingImport;
        // Create a diagnostic on the originating import if possible onto which we can attach a quickfix
        //  An import call expression cannot be rewritten into another form to correct the error - the only solution is to use `.default` at the use-site
        if (importNode && !ts.isImportCall(importNode)) {
            const sigs = getSignaturesOfType(getTypeOfSymbol(getSymbolLinks(apparentType.symbol).target!), kind);
            if (!sigs || !sigs.length) return;

            ts.addRelatedInfo(diagnostic,
                ts.createDiagnosticForNode(importNode, ts.Diagnostics.Type_originates_at_this_import_A_namespace_style_import_cannot_be_called_or_constructed_and_will_cause_a_failure_at_runtime_Consider_using_a_default_import_or_import_require_here_instead)
            );
        }
    }

    function resolveTaggedTemplateExpression(node: ts.TaggedTemplateExpression, candidatesOutArray: ts.Signature[] | undefined, checkMode: CheckMode): ts.Signature {
        const tagType = checkExpression(node.tag);
        const apparentType = getApparentType(tagType);

        if (isErrorType(apparentType)) {
            // Another error has already been reported
            return resolveErrorCall(node);
        }

        const callSignatures = getSignaturesOfType(apparentType, ts.SignatureKind.Call);
        const numConstructSignatures = getSignaturesOfType(apparentType, ts.SignatureKind.Construct).length;

        if (isUntypedFunctionCall(tagType, apparentType, callSignatures.length, numConstructSignatures)) {
            return resolveUntypedCall(node);
        }

        if (!callSignatures.length) {
            if (ts.isArrayLiteralExpression(node.parent)) {
                const diagnostic = ts.createDiagnosticForNode(node.tag, ts.Diagnostics.It_is_likely_that_you_are_missing_a_comma_to_separate_these_two_template_expressions_They_form_a_tagged_template_expression_which_cannot_be_invoked);
                diagnostics.add(diagnostic);
                return resolveErrorCall(node);
            }

            invocationError(node.tag, apparentType, ts.SignatureKind.Call);
            return resolveErrorCall(node);
        }

        return resolveCall(node, callSignatures, candidatesOutArray, checkMode, ts.SignatureFlags.None);
    }

    /**
     * Gets the localized diagnostic head message to use for errors when resolving a decorator as a call expression.
     */
    function getDiagnosticHeadMessageForDecoratorResolution(node: ts.Decorator) {
        switch (node.parent.kind) {
            case ts.SyntaxKind.ClassDeclaration:
            case ts.SyntaxKind.ClassExpression:
                return ts.Diagnostics.Unable_to_resolve_signature_of_class_decorator_when_called_as_an_expression;

            case ts.SyntaxKind.Parameter:
                return ts.Diagnostics.Unable_to_resolve_signature_of_parameter_decorator_when_called_as_an_expression;

            case ts.SyntaxKind.PropertyDeclaration:
                return ts.Diagnostics.Unable_to_resolve_signature_of_property_decorator_when_called_as_an_expression;

            case ts.SyntaxKind.MethodDeclaration:
            case ts.SyntaxKind.GetAccessor:
            case ts.SyntaxKind.SetAccessor:
                return ts.Diagnostics.Unable_to_resolve_signature_of_method_decorator_when_called_as_an_expression;

            default:
                return ts.Debug.fail();
        }
    }

    /**
     * Resolves a decorator as if it were a call expression.
     */
    function resolveDecorator(node: ts.Decorator, candidatesOutArray: ts.Signature[] | undefined, checkMode: CheckMode): ts.Signature {
        const funcType = checkExpression(node.expression);
        const apparentType = getApparentType(funcType);
        if (isErrorType(apparentType)) {
            return resolveErrorCall(node);
        }

        const callSignatures = getSignaturesOfType(apparentType, ts.SignatureKind.Call);
        const numConstructSignatures = getSignaturesOfType(apparentType, ts.SignatureKind.Construct).length;
        if (isUntypedFunctionCall(funcType, apparentType, callSignatures.length, numConstructSignatures)) {
            return resolveUntypedCall(node);
        }

        if (isPotentiallyUncalledDecorator(node, callSignatures)) {
            const nodeStr = ts.getTextOfNode(node.expression, /*includeTrivia*/ false);
            error(node, ts.Diagnostics._0_accepts_too_few_arguments_to_be_used_as_a_decorator_here_Did_you_mean_to_call_it_first_and_write_0, nodeStr);
            return resolveErrorCall(node);
        }

        const headMessage = getDiagnosticHeadMessageForDecoratorResolution(node);
        if (!callSignatures.length) {
            const errorDetails = invocationErrorDetails(node.expression, apparentType, ts.SignatureKind.Call);
            const messageChain = ts.chainDiagnosticMessages(errorDetails.messageChain, headMessage);
            const diag = ts.createDiagnosticForNodeFromMessageChain(node.expression, messageChain);
            if (errorDetails.relatedMessage) {
                ts.addRelatedInfo(diag, ts.createDiagnosticForNode(node.expression, errorDetails.relatedMessage));
            }
            diagnostics.add(diag);
            invocationErrorRecovery(apparentType, ts.SignatureKind.Call, diag);
            return resolveErrorCall(node);
        }

        return resolveCall(node, callSignatures, candidatesOutArray, checkMode, ts.SignatureFlags.None, headMessage);
    }

    function createSignatureForJSXIntrinsic(node: ts.JsxOpeningLikeElement, result: ts.Type): ts.Signature {
        const namespace = getJsxNamespaceAt(node);
        const exports = namespace && getExportsOfSymbol(namespace);
        // We fake up a SFC signature for each intrinsic, however a more specific per-element signature drawn from the JSX declaration
        // file would probably be preferable.
        const typeSymbol = exports && getSymbol(exports, JsxNames.Element, ts.SymbolFlags.Type);
        const returnNode = typeSymbol && nodeBuilder.symbolToEntityName(typeSymbol, ts.SymbolFlags.Type, node);
        const declaration = ts.factory.createFunctionTypeNode(/*typeParameters*/ undefined,
            [ts.factory.createParameterDeclaration(/*modifiers*/ undefined, /*dotdotdot*/ undefined, "props", /*questionMark*/ undefined, nodeBuilder.typeToTypeNode(result, node))],
            returnNode ? ts.factory.createTypeReferenceNode(returnNode, /*typeArguments*/ undefined) : ts.factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword)
        );
        const parameterSymbol = createSymbol(ts.SymbolFlags.FunctionScopedVariable, "props" as ts.__String);
        parameterSymbol.type = result;
        return createSignature(
            declaration,
            /*typeParameters*/ undefined,
            /*thisParameter*/ undefined,
            [parameterSymbol],
            typeSymbol ? getDeclaredTypeOfSymbol(typeSymbol) : errorType,
            /*returnTypePredicate*/ undefined,
            1,
            ts.SignatureFlags.None
        );
    }

    function resolveJsxOpeningLikeElement(node: ts.JsxOpeningLikeElement, candidatesOutArray: ts.Signature[] | undefined, checkMode: CheckMode): ts.Signature {
        if (isJsxIntrinsicIdentifier(node.tagName)) {
            const result = getIntrinsicAttributesTypeFromJsxOpeningLikeElement(node);
            const fakeSignature = createSignatureForJSXIntrinsic(node, result);
            checkTypeAssignableToAndOptionallyElaborate(checkExpressionWithContextualType(node.attributes, getEffectiveFirstArgumentForJsxSignature(fakeSignature, node), /*mapper*/ undefined, CheckMode.Normal), result, node.tagName, node.attributes);
            if (ts.length(node.typeArguments)) {
                ts.forEach(node.typeArguments, checkSourceElement);
                diagnostics.add(ts.createDiagnosticForNodeArray(ts.getSourceFileOfNode(node), node.typeArguments!, ts.Diagnostics.Expected_0_type_arguments_but_got_1, 0, ts.length(node.typeArguments)));
            }
            return fakeSignature;
        }
        const exprTypes = checkExpression(node.tagName);
        const apparentType = getApparentType(exprTypes);
        if (isErrorType(apparentType)) {
            return resolveErrorCall(node);
        }

        const signatures = getUninstantiatedJsxSignaturesOfType(exprTypes, node);
        if (isUntypedFunctionCall(exprTypes, apparentType, signatures.length, /*constructSignatures*/ 0)) {
            return resolveUntypedCall(node);
        }

        if (signatures.length === 0) {
            // We found no signatures at all, which is an error
            error(node.tagName, ts.Diagnostics.JSX_element_type_0_does_not_have_any_construct_or_call_signatures, ts.getTextOfNode(node.tagName));
            return resolveErrorCall(node);
        }

        return resolveCall(node, signatures, candidatesOutArray, checkMode, ts.SignatureFlags.None);
    }

    /**
     * Sometimes, we have a decorator that could accept zero arguments,
     * but is receiving too many arguments as part of the decorator invocation.
     * In those cases, a user may have meant to *call* the expression before using it as a decorator.
     */
    function isPotentiallyUncalledDecorator(decorator: ts.Decorator, signatures: readonly ts.Signature[]) {
        return signatures.length && ts.every(signatures, signature =>
            signature.minArgumentCount === 0 &&
            !signatureHasRestParameter(signature) &&
            signature.parameters.length < getDecoratorArgumentCount(decorator, signature));
    }

    function resolveSignature(node: ts.CallLikeExpression, candidatesOutArray: ts.Signature[] | undefined, checkMode: CheckMode): ts.Signature {
        switch (node.kind) {
            case ts.SyntaxKind.CallExpression:
                return resolveCallExpression(node, candidatesOutArray, checkMode);
            case ts.SyntaxKind.NewExpression:
                return resolveNewExpression(node, candidatesOutArray, checkMode);
            case ts.SyntaxKind.TaggedTemplateExpression:
                return resolveTaggedTemplateExpression(node, candidatesOutArray, checkMode);
            case ts.SyntaxKind.Decorator:
                return resolveDecorator(node, candidatesOutArray, checkMode);
            case ts.SyntaxKind.JsxOpeningElement:
            case ts.SyntaxKind.JsxSelfClosingElement:
                return resolveJsxOpeningLikeElement(node, candidatesOutArray, checkMode);
        }
        throw ts.Debug.assertNever(node, "Branch in 'resolveSignature' should be unreachable.");
    }

    /**
     * Resolve a signature of a given call-like expression.
     * @param node a call-like expression to try resolve a signature for
     * @param candidatesOutArray an array of signature to be filled in by the function. It is passed by signature help in the language service;
     *                           the function will fill it up with appropriate candidate signatures
     * @return a signature of the call-like expression or undefined if one can't be found
     */
    function getResolvedSignature(node: ts.CallLikeExpression, candidatesOutArray?: ts.Signature[] | undefined, checkMode?: CheckMode): ts.Signature {
        const links = getNodeLinks(node);
        // If getResolvedSignature has already been called, we will have cached the resolvedSignature.
        // However, it is possible that either candidatesOutArray was not passed in the first time,
        // or that a different candidatesOutArray was passed in. Therefore, we need to redo the work
        // to correctly fill the candidatesOutArray.
        const cached = links.resolvedSignature;
        if (cached && cached !== resolvingSignature && !candidatesOutArray) {
            return cached;
        }
        links.resolvedSignature = resolvingSignature;
        const result = resolveSignature(node, candidatesOutArray, checkMode || CheckMode.Normal);
        // When CheckMode.SkipGenericFunctions is set we use resolvingSignature to indicate that call
        // resolution should be deferred.
        if (result !== resolvingSignature) {
            // If signature resolution originated in control flow type analysis (for example to compute the
            // assigned type in a flow assignment) we don't cache the result as it may be based on temporary
            // types from the control flow analysis.
            links.resolvedSignature = flowLoopStart === flowLoopCount ? result : cached;
        }
        return result;
    }

    /**
     * Indicates whether a declaration can be treated as a constructor in a JavaScript
     * file.
     */
    function isJSConstructor(node: ts.Node | undefined): node is ts.FunctionDeclaration | ts.FunctionExpression {
        if (!node || !ts.isInJSFile(node)) {
            return false;
        }
        const func = ts.isFunctionDeclaration(node) || ts.isFunctionExpression(node) ? node :
            (ts.isVariableDeclaration(node) || ts.isPropertyAssignment(node)) && node.initializer && ts.isFunctionExpression(node.initializer) ? node.initializer :
            undefined;
        if (func) {
            // If the node has a @class or @constructor tag, treat it like a constructor.
            if (ts.getJSDocClassTag(node)) return true;

            // If the node is a property of an object literal.
            if (ts.isPropertyAssignment(ts.walkUpParenthesizedExpressions(func.parent))) return false;

            // If the symbol of the node has members, treat it like a constructor.
            const symbol = getSymbolOfNode(func);
            return !!symbol?.members?.size;
        }
        return false;
    }

    function mergeJSSymbols(target: ts.Symbol, source: ts.Symbol | undefined) {
        if (source) {
            const links = getSymbolLinks(source);
            if (!links.inferredClassSymbol || !links.inferredClassSymbol.has(getSymbolId(target))) {
                const inferred = ts.isTransientSymbol(target) ? target : cloneSymbol(target) as ts.TransientSymbol;
                inferred.exports = inferred.exports || ts.createSymbolTable();
                inferred.members = inferred.members || ts.createSymbolTable();
                inferred.flags |= source.flags & ts.SymbolFlags.Class;
                if (source.exports?.size) {
                    mergeSymbolTable(inferred.exports, source.exports);
                }
                if (source.members?.size) {
                    mergeSymbolTable(inferred.members, source.members);
                }
                (links.inferredClassSymbol || (links.inferredClassSymbol = new ts.Map())).set(getSymbolId(inferred), inferred);
                return inferred;
            }
            return links.inferredClassSymbol.get(getSymbolId(target));
        }
    }

    function getAssignedClassSymbol(decl: ts.Declaration): ts.Symbol | undefined {
        const assignmentSymbol = decl && getSymbolOfExpando(decl, /*allowDeclaration*/ true);
        const prototype = assignmentSymbol?.exports?.get("prototype" as ts.__String);
        const init = prototype?.valueDeclaration && getAssignedJSPrototype(prototype.valueDeclaration);
        return init ? getSymbolOfNode(init) : undefined;
    }

    function getSymbolOfExpando(node: ts.Node, allowDeclaration: boolean): ts.Symbol | undefined {
        if (!node.parent) {
            return undefined;
        }
        let name: ts.Expression | ts.BindingName | undefined;
        let decl: ts.Node | undefined;
        if (ts.isVariableDeclaration(node.parent) && node.parent.initializer === node) {
            if (!ts.isInJSFile(node) && !(ts.isVarConst(node.parent) && ts.isFunctionLikeDeclaration(node))) {
                return undefined;
            }
            name = node.parent.name;
            decl = node.parent;
        }
        else if (ts.isBinaryExpression(node.parent)) {
            const parentNode = node.parent;
            const parentNodeOperator = node.parent.operatorToken.kind;
            if (parentNodeOperator === ts.SyntaxKind.EqualsToken && (allowDeclaration || parentNode.right === node)) {
                name = parentNode.left;
                decl = name;
            }
            else if (parentNodeOperator === ts.SyntaxKind.BarBarToken || parentNodeOperator === ts.SyntaxKind.QuestionQuestionToken) {
                if (ts.isVariableDeclaration(parentNode.parent) && parentNode.parent.initializer === parentNode) {
                    name = parentNode.parent.name;
                    decl = parentNode.parent;
                }
                else if (ts.isBinaryExpression(parentNode.parent) && parentNode.parent.operatorToken.kind === ts.SyntaxKind.EqualsToken && (allowDeclaration || parentNode.parent.right === parentNode)) {
                    name = parentNode.parent.left;
                    decl = name;
                }

                if (!name || !ts.isBindableStaticNameExpression(name) || !ts.isSameEntityName(name, parentNode.left)) {
                    return undefined;
                }
            }
        }
        else if (allowDeclaration && ts.isFunctionDeclaration(node)) {
            name = node.name;
            decl = node;
        }

        if (!decl || !name || (!allowDeclaration && !ts.getExpandoInitializer(node, ts.isPrototypeAccess(name)))) {
            return undefined;
        }
        return getSymbolOfNode(decl);
    }


    function getAssignedJSPrototype(node: ts.Node) {
        if (!node.parent) {
            return false;
        }
        let parent: ts.Node = node.parent;
        while (parent && parent.kind === ts.SyntaxKind.PropertyAccessExpression) {
            parent = parent.parent;
        }
        if (parent && ts.isBinaryExpression(parent) && ts.isPrototypeAccess(parent.left) && parent.operatorToken.kind === ts.SyntaxKind.EqualsToken) {
            const right = ts.getInitializerOfBinaryExpression(parent);
            return ts.isObjectLiteralExpression(right) && right;
        }
    }

    /**
     * Syntactically and semantically checks a call or new expression.
     * @param node The call/new expression to be checked.
     * @returns On success, the expression's signature's return type. On failure, anyType.
     */
    function checkCallExpression(node: ts.CallExpression | ts.NewExpression, checkMode?: CheckMode): ts.Type {
        checkGrammarTypeArguments(node, node.typeArguments);

        const signature = getResolvedSignature(node, /*candidatesOutArray*/ undefined, checkMode);
        if (signature === resolvingSignature) {
            // CheckMode.SkipGenericFunctions is enabled and this is a call to a generic function that
            // returns a function type. We defer checking and return silentNeverType.
            return silentNeverType;
        }

        checkDeprecatedSignature(signature, node);

        if (node.expression.kind === ts.SyntaxKind.SuperKeyword) {
            return voidType;
        }

        if (node.kind === ts.SyntaxKind.NewExpression) {
            const declaration = signature.declaration;

            if (declaration &&
                declaration.kind !== ts.SyntaxKind.Constructor &&
                declaration.kind !== ts.SyntaxKind.ConstructSignature &&
                declaration.kind !== ts.SyntaxKind.ConstructorType &&
                !ts.isJSDocConstructSignature(declaration) &&
                !isJSConstructor(declaration)) {

                // When resolved signature is a call signature (and not a construct signature) the result type is any
                if (noImplicitAny) {
                    error(node, ts.Diagnostics.new_expression_whose_target_lacks_a_construct_signature_implicitly_has_an_any_type);
                }
                return anyType;
            }
        }

        // In JavaScript files, calls to any identifier 'require' are treated as external module imports
        if (ts.isInJSFile(node) && isCommonJsRequire(node)) {
            return resolveExternalModuleTypeByLiteral(node.arguments![0] as ts.StringLiteral);
        }

        const returnType = getReturnTypeOfSignature(signature);
        // Treat any call to the global 'Symbol' function that is part of a const variable or readonly property
        // as a fresh unique symbol literal type.
        if (returnType.flags & ts.TypeFlags.ESSymbolLike && isSymbolOrSymbolForCall(node)) {
            return getESSymbolLikeTypeForNode(ts.walkUpParenthesizedExpressions(node.parent));
        }
        if (node.kind === ts.SyntaxKind.CallExpression && !node.questionDotToken && node.parent.kind === ts.SyntaxKind.ExpressionStatement &&
            returnType.flags & ts.TypeFlags.Void && getTypePredicateOfSignature(signature)) {
            if (!ts.isDottedName(node.expression)) {
                error(node.expression, ts.Diagnostics.Assertions_require_the_call_target_to_be_an_identifier_or_qualified_name);
            }
            else if (!getEffectsSignature(node)) {
                const diagnostic = error(node.expression, ts.Diagnostics.Assertions_require_every_name_in_the_call_target_to_be_declared_with_an_explicit_type_annotation);
                getTypeOfDottedName(node.expression, diagnostic);
            }
        }

        if (ts.isInJSFile(node)) {
            const jsSymbol = getSymbolOfExpando(node, /*allowDeclaration*/ false);
            if (jsSymbol?.exports?.size) {
                const jsAssignmentType = createAnonymousType(jsSymbol, jsSymbol.exports, ts.emptyArray, ts.emptyArray, ts.emptyArray);
                jsAssignmentType.objectFlags |= ts.ObjectFlags.JSLiteral;
                return getIntersectionType([returnType, jsAssignmentType]);
            }
        }

        return returnType;
    }

    function checkDeprecatedSignature(signature: ts.Signature, node: ts.CallLikeExpression) {
        if (signature.declaration && signature.declaration.flags & ts.NodeFlags.Deprecated) {
            const suggestionNode = getDeprecatedSuggestionNode(node);
            const name = ts.tryGetPropertyAccessOrIdentifierToString(ts.getInvokedExpression(node));
            addDeprecatedSuggestionWithSignature(suggestionNode, signature.declaration, name, signatureToString(signature));
        }
    }

    function getDeprecatedSuggestionNode(node: ts.Node): ts.Node {
        node = ts.skipParentheses(node);
        switch (node.kind) {
            case ts.SyntaxKind.CallExpression:
            case ts.SyntaxKind.Decorator:
            case ts.SyntaxKind.NewExpression:
                return getDeprecatedSuggestionNode((node as ts.Decorator | ts.CallExpression | ts.NewExpression).expression);
            case ts.SyntaxKind.TaggedTemplateExpression:
                return getDeprecatedSuggestionNode((node as ts.TaggedTemplateExpression).tag);
            case ts.SyntaxKind.JsxOpeningElement:
            case ts.SyntaxKind.JsxSelfClosingElement:
                return getDeprecatedSuggestionNode((node as ts.JsxOpeningLikeElement).tagName);
            case ts.SyntaxKind.ElementAccessExpression:
                return (node as ts.ElementAccessExpression).argumentExpression;
            case ts.SyntaxKind.PropertyAccessExpression:
                return (node as ts.PropertyAccessExpression).name;
            case ts.SyntaxKind.TypeReference:
                const typeReference = node as ts.TypeReferenceNode;
                return ts.isQualifiedName(typeReference.typeName) ? typeReference.typeName.right : typeReference;
            default:
                return node;
        }
    }

    function isSymbolOrSymbolForCall(node: ts.Node) {
        if (!ts.isCallExpression(node)) return false;
        let left = node.expression;
        if (ts.isPropertyAccessExpression(left) && left.name.escapedText === "for") {
            left = left.expression;
        }
        if (!ts.isIdentifier(left) || left.escapedText !== "Symbol") {
            return false;
        }

        // make sure `Symbol` is the global symbol
        const globalESSymbol = getGlobalESSymbolConstructorSymbol(/*reportErrors*/ false);
        if (!globalESSymbol) {
            return false;
        }

        return globalESSymbol === resolveName(left, "Symbol" as ts.__String, ts.SymbolFlags.Value, /*nameNotFoundMessage*/ undefined, /*nameArg*/ undefined, /*isUse*/ false);
    }

    function checkImportCallExpression(node: ts.ImportCall): ts.Type {
        // Check grammar of dynamic import
        checkGrammarImportCallExpression(node);

        if (node.arguments.length === 0) {
            return createPromiseReturnType(node, anyType);
        }

        const specifier = node.arguments[0];
        const specifierType = checkExpressionCached(specifier);
        const optionsType = node.arguments.length > 1 ? checkExpressionCached(node.arguments[1]) : undefined;
        // Even though multiple arguments is grammatically incorrect, type-check extra arguments for completion
        for (let i = 2; i < node.arguments.length; ++i) {
            checkExpressionCached(node.arguments[i]);
        }

        if (specifierType.flags & ts.TypeFlags.Undefined || specifierType.flags & ts.TypeFlags.Null || !isTypeAssignableTo(specifierType, stringType)) {
            error(specifier, ts.Diagnostics.Dynamic_import_s_specifier_must_be_of_type_string_but_here_has_type_0, typeToString(specifierType));
        }

        if (optionsType) {
            const importCallOptionsType = getGlobalImportCallOptionsType(/*reportErrors*/ true);
            if (importCallOptionsType !== emptyObjectType) {
                checkTypeAssignableTo(optionsType, getNullableType(importCallOptionsType, ts.TypeFlags.Undefined), node.arguments[1]);
            }
        }

        // resolveExternalModuleName will return undefined if the moduleReferenceExpression is not a string literal
        const moduleSymbol = resolveExternalModuleName(node, specifier);
        if (moduleSymbol) {
            const esModuleSymbol = resolveESModuleSymbol(moduleSymbol, specifier, /*dontRecursivelyResolve*/ true, /*suppressUsageError*/ false);
            if (esModuleSymbol) {
                return createPromiseReturnType(node,
                    getTypeWithSyntheticDefaultOnly(getTypeOfSymbol(esModuleSymbol), esModuleSymbol, moduleSymbol, specifier) ||
                        getTypeWithSyntheticDefaultImportType(getTypeOfSymbol(esModuleSymbol), esModuleSymbol, moduleSymbol, specifier)
                );
            }
        }
        return createPromiseReturnType(node, anyType);
    }

    function createDefaultPropertyWrapperForModule(symbol: ts.Symbol, originalSymbol: ts.Symbol, anonymousSymbol?: ts.Symbol | undefined) {
        const memberTable = ts.createSymbolTable();
        const newSymbol = createSymbol(ts.SymbolFlags.Alias, ts.InternalSymbolName.Default);
        newSymbol.parent = originalSymbol;
        newSymbol.nameType = getStringLiteralType("default");
        newSymbol.aliasTarget = resolveSymbol(symbol);
        memberTable.set(ts.InternalSymbolName.Default, newSymbol);
        return createAnonymousType(anonymousSymbol, memberTable, ts.emptyArray, ts.emptyArray, ts.emptyArray);
    }

    function getTypeWithSyntheticDefaultOnly(type: ts.Type, symbol: ts.Symbol, originalSymbol: ts.Symbol, moduleSpecifier: ts.Expression) {
        const hasDefaultOnly = isOnlyImportedAsDefault(moduleSpecifier);
        if (hasDefaultOnly && type && !isErrorType(type)) {
            const synthType = type as ts.SyntheticDefaultModuleType;
            if (!synthType.defaultOnlyType) {
                const type = createDefaultPropertyWrapperForModule(symbol, originalSymbol);
                synthType.defaultOnlyType = type;
            }
            return synthType.defaultOnlyType;
        }
        return undefined;
    }

    function getTypeWithSyntheticDefaultImportType(type: ts.Type, symbol: ts.Symbol, originalSymbol: ts.Symbol, moduleSpecifier: ts.Expression): ts.Type {
        if (allowSyntheticDefaultImports && type && !isErrorType(type)) {
            const synthType = type as ts.SyntheticDefaultModuleType;
            if (!synthType.syntheticType) {
                const file = originalSymbol.declarations?.find(ts.isSourceFile);
                const hasSyntheticDefault = canHaveSyntheticDefault(file, originalSymbol, /*dontResolveAlias*/ false, moduleSpecifier);
                if (hasSyntheticDefault) {
                    const anonymousSymbol = createSymbol(ts.SymbolFlags.TypeLiteral, ts.InternalSymbolName.Type);
                    const defaultContainingObject = createDefaultPropertyWrapperForModule(symbol, originalSymbol, anonymousSymbol);
                    anonymousSymbol.type = defaultContainingObject;
                    synthType.syntheticType = isValidSpreadType(type) ? getSpreadType(type, defaultContainingObject, anonymousSymbol, /*objectFlags*/ 0, /*readonly*/ false) : defaultContainingObject;
                }
                else {
                    synthType.syntheticType = type;
                }
            }
            return synthType.syntheticType;
        }
        return type;
    }

    function isCommonJsRequire(node: ts.Node): boolean {
        if (!ts.isRequireCall(node, /*checkArgumentIsStringLiteralLike*/ true)) {
            return false;
        }

        // Make sure require is not a local function
        if (!ts.isIdentifier(node.expression)) return ts.Debug.fail();
        const resolvedRequire = resolveName(node.expression, node.expression.escapedText, ts.SymbolFlags.Value, /*nameNotFoundMessage*/ undefined, /*nameArg*/ undefined, /*isUse*/ true)!; // TODO: GH#18217
        if (resolvedRequire === requireSymbol) {
            return true;
        }
        // project includes symbol named 'require' - make sure that it is ambient and local non-alias
        if (resolvedRequire.flags & ts.SymbolFlags.Alias) {
            return false;
        }

        const targetDeclarationKind = resolvedRequire.flags & ts.SymbolFlags.Function
            ? ts.SyntaxKind.FunctionDeclaration
            : resolvedRequire.flags & ts.SymbolFlags.Variable
                ? ts.SyntaxKind.VariableDeclaration
                : ts.SyntaxKind.Unknown;
        if (targetDeclarationKind !== ts.SyntaxKind.Unknown) {
            const decl = ts.getDeclarationOfKind(resolvedRequire, targetDeclarationKind)!;
            // function/variable declaration should be ambient
            return !!decl && !!(decl.flags & ts.NodeFlags.Ambient);
        }
        return false;
    }

    function checkTaggedTemplateExpression(node: ts.TaggedTemplateExpression): ts.Type {
        if (!checkGrammarTaggedTemplateChain(node)) checkGrammarTypeArguments(node, node.typeArguments);
        if (languageVersion < ts.ScriptTarget.ES2015) {
            checkExternalEmitHelpers(node, ts.ExternalEmitHelpers.MakeTemplateObject);
        }
        const signature = getResolvedSignature(node);
        checkDeprecatedSignature(signature, node);
        return getReturnTypeOfSignature(signature);
    }

    function checkAssertion(node: ts.AssertionExpression) {
        if (node.kind === ts.SyntaxKind.TypeAssertionExpression) {
            const file = ts.getSourceFileOfNode(node);
            if (file && ts.fileExtensionIsOneOf(file.fileName, [ts.Extension.Cts, ts.Extension.Mts])) {
                grammarErrorOnNode(node, ts.Diagnostics.This_syntax_is_reserved_in_files_with_the_mts_or_cts_extension_Use_an_as_expression_instead);
            }
        }
        return checkAssertionWorker(node, node.type, node.expression);
    }

    function isValidConstAssertionArgument(node: ts.Node): boolean {
        switch (node.kind) {
            case ts.SyntaxKind.StringLiteral:
            case ts.SyntaxKind.NoSubstitutionTemplateLiteral:
            case ts.SyntaxKind.NumericLiteral:
            case ts.SyntaxKind.BigIntLiteral:
            case ts.SyntaxKind.TrueKeyword:
            case ts.SyntaxKind.FalseKeyword:
            case ts.SyntaxKind.ArrayLiteralExpression:
            case ts.SyntaxKind.ObjectLiteralExpression:
            case ts.SyntaxKind.TemplateExpression:
                return true;
            case ts.SyntaxKind.ParenthesizedExpression:
                return isValidConstAssertionArgument((node as ts.ParenthesizedExpression).expression);
            case ts.SyntaxKind.PrefixUnaryExpression:
                const op = (node as ts.PrefixUnaryExpression).operator;
                const arg = (node as ts.PrefixUnaryExpression).operand;
                return op === ts.SyntaxKind.MinusToken && (arg.kind === ts.SyntaxKind.NumericLiteral || arg.kind === ts.SyntaxKind.BigIntLiteral) ||
                    op === ts.SyntaxKind.PlusToken && arg.kind === ts.SyntaxKind.NumericLiteral;
            case ts.SyntaxKind.PropertyAccessExpression:
            case ts.SyntaxKind.ElementAccessExpression:
                const expr = (node as ts.PropertyAccessExpression | ts.ElementAccessExpression).expression;
                let symbol = getTypeOfNode(expr).symbol;
                if (symbol && symbol.flags & ts.SymbolFlags.Alias) {
                    symbol = resolveAlias(symbol);
                }
                return !!(symbol && getAllSymbolFlags(symbol) & ts.SymbolFlags.Enum);
        }
        return false;
    }

    function checkAssertionWorker(errNode: ts.Node, type: ts.TypeNode, expression: ts.UnaryExpression | ts.Expression, checkMode?: CheckMode) {
        let exprType = checkExpression(expression, checkMode);
        if (ts.isConstTypeReference(type)) {
            if (!isValidConstAssertionArgument(expression)) {
                error(expression, ts.Diagnostics.A_const_assertions_can_only_be_applied_to_references_to_enum_members_or_string_number_boolean_array_or_object_literals);
            }
            return getRegularTypeOfLiteralType(exprType);
        }
        checkSourceElement(type);
        exprType = getRegularTypeOfObjectLiteral(getBaseTypeOfLiteralType(exprType));
        const targetType = getTypeFromTypeNode(type);
        if (!isErrorType(targetType)) {
            addLazyDiagnostic(() => {
                const widenedType = getWidenedType(exprType);
                if (!isTypeComparableTo(targetType, widenedType)) {
                    checkTypeComparableTo(exprType, targetType, errNode,
                        ts.Diagnostics.Conversion_of_type_0_to_type_1_may_be_a_mistake_because_neither_type_sufficiently_overlaps_with_the_other_If_this_was_intentional_convert_the_expression_to_unknown_first);
                }
            });
        }
        return targetType;
    }

    function checkNonNullChain(node: ts.NonNullChain) {
        const leftType = checkExpression(node.expression);
        const nonOptionalType = getOptionalExpressionType(leftType, node.expression);
        return propagateOptionalTypeMarker(getNonNullableType(nonOptionalType), node, nonOptionalType !== leftType);
    }

    function checkNonNullAssertion(node: ts.NonNullExpression) {
        return node.flags & ts.NodeFlags.OptionalChain ? checkNonNullChain(node as ts.NonNullChain) :
            getNonNullableType(checkExpression(node.expression));
    }

    function checkExpressionWithTypeArguments(node: ts.ExpressionWithTypeArguments | ts.TypeQueryNode) {
        checkGrammarExpressionWithTypeArguments(node);
        const exprType = node.kind === ts.SyntaxKind.ExpressionWithTypeArguments ? checkExpression(node.expression) :
            ts.isThisIdentifier(node.exprName) ? checkThisExpression(node.exprName) :
            checkExpression(node.exprName);
        const typeArguments = node.typeArguments;
        if (exprType === silentNeverType || isErrorType(exprType) || !ts.some(typeArguments)) {
            return exprType;
        }
        let hasSomeApplicableSignature = false;
        let nonApplicableType: ts.Type | undefined;
        const result = getInstantiatedType(exprType);
        const errorType = hasSomeApplicableSignature ? nonApplicableType : exprType;
        if (errorType) {
            diagnostics.add(ts.createDiagnosticForNodeArray(ts.getSourceFileOfNode(node), typeArguments, ts.Diagnostics.Type_0_has_no_signatures_for_which_the_type_argument_list_is_applicable, typeToString(errorType)));
        }
        return result;

        function getInstantiatedType(type: ts.Type): ts.Type {
            let hasSignatures = false;
            let hasApplicableSignature = false;
            const result = getInstantiatedTypePart(type);
            hasSomeApplicableSignature ||= hasApplicableSignature;
            if (hasSignatures && !hasApplicableSignature) {
                nonApplicableType ??= type;
            }
            return result;

            function getInstantiatedTypePart(type: ts.Type): ts.Type {
                if (type.flags & ts.TypeFlags.Object) {
                    const resolved = resolveStructuredTypeMembers(type as ts.ObjectType);
                    const callSignatures = getInstantiatedSignatures(resolved.callSignatures);
                    const constructSignatures = getInstantiatedSignatures(resolved.constructSignatures);
                    hasSignatures ||= resolved.callSignatures.length !== 0 || resolved.constructSignatures.length !== 0;
                    hasApplicableSignature ||= callSignatures.length !== 0 || constructSignatures.length !== 0;
                    if (callSignatures !== resolved.callSignatures || constructSignatures !== resolved.constructSignatures) {
                        const result = createAnonymousType(undefined, resolved.members, callSignatures, constructSignatures, resolved.indexInfos) as ts.ResolvedType & ts.InstantiationExpressionType;
                        result.objectFlags |= ts.ObjectFlags.InstantiationExpressionType;
                        result.node = node;
                        return result;
                    }
                }
                else if (type.flags & ts.TypeFlags.InstantiableNonPrimitive) {
                    const constraint = getBaseConstraintOfType(type);
                    if (constraint) {
                        const instantiated = getInstantiatedTypePart(constraint);
                        if (instantiated !== constraint) {
                            return instantiated;
                        }
                    }
                }
                else if (type.flags & ts.TypeFlags.Union) {
                    return mapType(type, getInstantiatedType);
                }
                else if (type.flags & ts.TypeFlags.Intersection) {
                    return getIntersectionType(ts.sameMap((type as ts.IntersectionType).types, getInstantiatedTypePart));
                }
                return type;
            }
        }

        function getInstantiatedSignatures(signatures: readonly ts.Signature[]) {
            const applicableSignatures = ts.filter(signatures, sig => !!sig.typeParameters && hasCorrectTypeArgumentArity(sig, typeArguments));
            return ts.sameMap(applicableSignatures, sig => {
                const typeArgumentTypes = checkTypeArguments(sig, typeArguments!, /*reportErrors*/ true);
                return typeArgumentTypes ? getSignatureInstantiation(sig, typeArgumentTypes, ts.isInJSFile(sig.declaration)) : sig;
            });
        }
    }

    function checkSatisfiesExpression(node: ts.SatisfiesExpression) {
        checkSourceElement(node.type);

        const targetType = getTypeFromTypeNode(node.type);
        if (isErrorType(targetType)) {
            return targetType;
        }

        const exprType = checkExpression(node.expression);
        checkTypeAssignableToAndOptionallyElaborate(exprType, targetType, node.type, node.expression, ts.Diagnostics.Type_0_does_not_satisfy_the_expected_type_1);

        return exprType;
    }

    function checkMetaProperty(node: ts.MetaProperty): ts.Type {
        checkGrammarMetaProperty(node);

        if (node.keywordToken === ts.SyntaxKind.NewKeyword) {
            return checkNewTargetMetaProperty(node);
        }

        if (node.keywordToken === ts.SyntaxKind.ImportKeyword) {
            return checkImportMetaProperty(node);
        }

        return ts.Debug.assertNever(node.keywordToken);
    }

    function checkMetaPropertyKeyword(node: ts.MetaProperty): ts.Type {
        switch (node.keywordToken) {
            case ts.SyntaxKind.ImportKeyword:
                return getGlobalImportMetaExpressionType();
            case ts.SyntaxKind.NewKeyword:
                const type = checkNewTargetMetaProperty(node);
                return isErrorType(type) ? errorType : createNewTargetExpressionType(type);
            default:
                ts.Debug.assertNever(node.keywordToken);
        }
    }

    function checkNewTargetMetaProperty(node: ts.MetaProperty) {
        const container = ts.getNewTargetContainer(node);
        if (!container) {
            error(node, ts.Diagnostics.Meta_property_0_is_only_allowed_in_the_body_of_a_function_declaration_function_expression_or_constructor, "new.target");
            return errorType;
        }
        else if (container.kind === ts.SyntaxKind.Constructor) {
            const symbol = getSymbolOfNode(container.parent as ts.ClassLikeDeclaration);
            return getTypeOfSymbol(symbol);
        }
        else {
            const symbol = getSymbolOfNode(container)!;
            return getTypeOfSymbol(symbol);
        }
    }

    function checkImportMetaProperty(node: ts.MetaProperty) {
        if (moduleKind === ts.ModuleKind.Node16 || moduleKind === ts.ModuleKind.NodeNext) {
            if (ts.getSourceFileOfNode(node).impliedNodeFormat !== ts.ModuleKind.ESNext) {
                error(node, ts.Diagnostics.The_import_meta_meta_property_is_not_allowed_in_files_which_will_build_into_CommonJS_output);
            }
        }
        else if (moduleKind < ts.ModuleKind.ES2020 && moduleKind !== ts.ModuleKind.System) {
            error(node, ts.Diagnostics.The_import_meta_meta_property_is_only_allowed_when_the_module_option_is_es2020_es2022_esnext_system_node16_or_nodenext);
        }
        const file = ts.getSourceFileOfNode(node);
        ts.Debug.assert(!!(file.flags & ts.NodeFlags.PossiblyContainsImportMeta), "Containing file is missing import meta node flag.");
        return node.name.escapedText === "meta" ? getGlobalImportMetaType() : errorType;
    }

    function getTypeOfParameter(symbol: ts.Symbol) {
        const type = getTypeOfSymbol(symbol);
        if (strictNullChecks) {
            const declaration = symbol.valueDeclaration;
            if (declaration && ts.hasInitializer(declaration)) {
                return getOptionalType(type);
            }
        }
        return type;
    }

    function getTupleElementLabel(d: ts.ParameterDeclaration | ts.NamedTupleMember) {
        ts.Debug.assert(ts.isIdentifier(d.name)); // Parameter declarations could be binding patterns, but we only allow identifier names
        return d.name.escapedText;
    }

    function getParameterNameAtPosition(signature: ts.Signature, pos: number, overrideRestType?: ts.Type) {
        const paramCount = signature.parameters.length - (signatureHasRestParameter(signature) ? 1 : 0);
        if (pos < paramCount) {
            return signature.parameters[pos].escapedName;
        }
        const restParameter = signature.parameters[paramCount] || unknownSymbol;
        const restType = overrideRestType || getTypeOfSymbol(restParameter);
        if (isTupleType(restType)) {
            const associatedNames = ((restType as ts.TypeReference).target as ts.TupleType).labeledElementDeclarations;
            const index = pos - paramCount;
            return associatedNames && getTupleElementLabel(associatedNames[index]) || restParameter.escapedName + "_" + index as ts.__String;
        }
        return restParameter.escapedName;
    }

    function getParameterIdentifierNameAtPosition(signature: ts.Signature, pos: number): [parameterName: ts.__String, isRestParameter: boolean] | undefined {
        if (signature.declaration?.kind === ts.SyntaxKind.JSDocFunctionType) {
            return undefined;
        }
        const paramCount = signature.parameters.length - (signatureHasRestParameter(signature) ? 1 : 0);
        if (pos < paramCount) {
            const param = signature.parameters[pos];
            return isParameterDeclarationWithIdentifierName(param) ? [param.escapedName, false] : undefined;
        }

        const restParameter = signature.parameters[paramCount] || unknownSymbol;
        if (!isParameterDeclarationWithIdentifierName(restParameter)) {
            return undefined;
        }

        const restType = getTypeOfSymbol(restParameter);
        if (isTupleType(restType)) {
            const associatedNames = ((restType as ts.TypeReference).target as ts.TupleType).labeledElementDeclarations;
            const index = pos - paramCount;
            const associatedName = associatedNames?.[index];
            const isRestTupleElement = !!associatedName?.dotDotDotToken;
            return associatedName ? [
                getTupleElementLabel(associatedName),
                isRestTupleElement
            ] : undefined;
        }

        if (pos === paramCount) {
            return [restParameter.escapedName, true];
        }
        return undefined;
    }

    function isParameterDeclarationWithIdentifierName(symbol: ts.Symbol) {
        return symbol.valueDeclaration && ts.isParameter(symbol.valueDeclaration) && ts.isIdentifier(symbol.valueDeclaration.name);
    }
    function isValidDeclarationForTupleLabel(d: ts.Declaration): d is ts.NamedTupleMember | (ts.ParameterDeclaration & { name: ts.Identifier }) {
        return d.kind === ts.SyntaxKind.NamedTupleMember || (ts.isParameter(d) && d.name && ts.isIdentifier(d.name));
    }

    function getNameableDeclarationAtPosition(signature: ts.Signature, pos: number) {
        const paramCount = signature.parameters.length - (signatureHasRestParameter(signature) ? 1 : 0);
        if (pos < paramCount) {
            const decl = signature.parameters[pos].valueDeclaration;
            return decl && isValidDeclarationForTupleLabel(decl) ? decl : undefined;
        }
        const restParameter = signature.parameters[paramCount] || unknownSymbol;
        const restType = getTypeOfSymbol(restParameter);
        if (isTupleType(restType)) {
            const associatedNames = ((restType as ts.TypeReference).target as ts.TupleType).labeledElementDeclarations;
            const index = pos - paramCount;
            return associatedNames && associatedNames[index];
        }
        return restParameter.valueDeclaration && isValidDeclarationForTupleLabel(restParameter.valueDeclaration) ? restParameter.valueDeclaration : undefined;
    }

    function getTypeAtPosition(signature: ts.Signature, pos: number): ts.Type {
        return tryGetTypeAtPosition(signature, pos) || anyType;
    }

    function tryGetTypeAtPosition(signature: ts.Signature, pos: number): ts.Type | undefined {
        const paramCount = signature.parameters.length - (signatureHasRestParameter(signature) ? 1 : 0);
        if (pos < paramCount) {
            return getTypeOfParameter(signature.parameters[pos]);
        }
        if (signatureHasRestParameter(signature)) {
            // We want to return the value undefined for an out of bounds parameter position,
            // so we need to check bounds here before calling getIndexedAccessType (which
            // otherwise would return the type 'undefined').
            const restType = getTypeOfSymbol(signature.parameters[paramCount]);
            const index = pos - paramCount;
            if (!isTupleType(restType) || restType.target.hasRestElement || index < restType.target.fixedLength) {
                return getIndexedAccessType(restType, getNumberLiteralType(index));
            }
        }
        return undefined;
    }

    function getRestTypeAtPosition(source: ts.Signature, pos: number): ts.Type {
        const parameterCount = getParameterCount(source);
        const minArgumentCount = getMinArgumentCount(source);
        const restType = getEffectiveRestType(source);
        if (restType && pos >= parameterCount - 1) {
            return pos === parameterCount - 1 ? restType : createArrayType(getIndexedAccessType(restType, numberType));
        }
        const types = [];
        const flags = [];
        const names = [];
        for (let i = pos; i < parameterCount; i++) {
            if (!restType || i < parameterCount - 1) {
                types.push(getTypeAtPosition(source, i));
                flags.push(i < minArgumentCount ? ts.ElementFlags.Required : ts.ElementFlags.Optional);
            }
            else {
                types.push(restType);
                flags.push(ts.ElementFlags.Variadic);
            }
            const name = getNameableDeclarationAtPosition(source, i);
            if (name) {
                names.push(name);
            }
        }
        return createTupleType(types, flags, /*readonly*/ false, ts.length(names) === ts.length(types) ? names : undefined);
    }

    // Return the number of parameters in a signature. The rest parameter, if present, counts as one
    // parameter. For example, the parameter count of (x: number, y: number, ...z: string[]) is 3 and
    // the parameter count of (x: number, ...args: [number, ...string[], boolean])) is also 3. In the
    // latter example, the effective rest type is [...string[], boolean].
    function getParameterCount(signature: ts.Signature) {
        const length = signature.parameters.length;
        if (signatureHasRestParameter(signature)) {
            const restType = getTypeOfSymbol(signature.parameters[length - 1]);
            if (isTupleType(restType)) {
                return length + restType.target.fixedLength - (restType.target.hasRestElement ? 0 : 1);
            }
        }
        return length;
    }

    function getMinArgumentCount(signature: ts.Signature, flags?: MinArgumentCountFlags) {
        const strongArityForUntypedJS = flags! & MinArgumentCountFlags.StrongArityForUntypedJS;
        const voidIsNonOptional = flags! & MinArgumentCountFlags.VoidIsNonOptional;
        if (voidIsNonOptional || signature.resolvedMinArgumentCount === undefined) {
            let minArgumentCount: number | undefined;
            if (signatureHasRestParameter(signature)) {
                const restType = getTypeOfSymbol(signature.parameters[signature.parameters.length - 1]);
                if (isTupleType(restType)) {
                    const firstOptionalIndex = ts.findIndex(restType.target.elementFlags, f => !(f & ts.ElementFlags.Required));
                    const requiredCount = firstOptionalIndex < 0 ? restType.target.fixedLength : firstOptionalIndex;
                    if (requiredCount > 0) {
                        minArgumentCount = signature.parameters.length - 1 + requiredCount;
                    }
                }
            }
            if (minArgumentCount === undefined) {
                if (!strongArityForUntypedJS && signature.flags & ts.SignatureFlags.IsUntypedSignatureInJSFile) {
                    return 0;
                }
                minArgumentCount = signature.minArgumentCount;
            }
            if (voidIsNonOptional) {
                return minArgumentCount;
            }
            for (let i = minArgumentCount - 1; i >= 0; i--) {
                const type = getTypeAtPosition(signature, i);
                if (filterType(type, acceptsVoid).flags & ts.TypeFlags.Never) {
                    break;
                }
                minArgumentCount = i;
            }
            signature.resolvedMinArgumentCount = minArgumentCount;
        }
        return signature.resolvedMinArgumentCount;
    }

    function hasEffectiveRestParameter(signature: ts.Signature) {
        if (signatureHasRestParameter(signature)) {
            const restType = getTypeOfSymbol(signature.parameters[signature.parameters.length - 1]);
            return !isTupleType(restType) || restType.target.hasRestElement;
        }
        return false;
    }

    function getEffectiveRestType(signature: ts.Signature) {
        if (signatureHasRestParameter(signature)) {
            const restType = getTypeOfSymbol(signature.parameters[signature.parameters.length - 1]);
            if (!isTupleType(restType)) {
                return restType;
            }
            if (restType.target.hasRestElement) {
                return sliceTupleType(restType, restType.target.fixedLength);
            }
        }
        return undefined;
    }

    function getNonArrayRestType(signature: ts.Signature) {
        const restType = getEffectiveRestType(signature);
        return restType && !isArrayType(restType) && !isTypeAny(restType) && (getReducedType(restType).flags & ts.TypeFlags.Never) === 0 ? restType : undefined;
    }

    function getTypeOfFirstParameterOfSignature(signature: ts.Signature) {
        return getTypeOfFirstParameterOfSignatureWithFallback(signature, neverType);
    }

    function getTypeOfFirstParameterOfSignatureWithFallback(signature: ts.Signature, fallbackType: ts.Type) {
        return signature.parameters.length > 0 ? getTypeAtPosition(signature, 0) : fallbackType;
    }

    function inferFromAnnotatedParameters(signature: ts.Signature, context: ts.Signature, inferenceContext: ts.InferenceContext) {
        const len = signature.parameters.length - (signatureHasRestParameter(signature) ? 1 : 0);
        for (let i = 0; i < len; i++) {
            const declaration = signature.parameters[i].valueDeclaration as ts.ParameterDeclaration;
            if (declaration.type) {
                const typeNode = ts.getEffectiveTypeAnnotationNode(declaration);
                if (typeNode) {
                    inferTypes(inferenceContext.inferences, getTypeFromTypeNode(typeNode), getTypeAtPosition(context, i));
                }
            }
        }
    }

    function assignContextualParameterTypes(signature: ts.Signature, context: ts.Signature) {
        if (context.typeParameters) {
            if (!signature.typeParameters) {
                signature.typeParameters = context.typeParameters;
            }
            else {
                return; // This signature has already has a contextual inference performed and cached on it!
            }
        }
        if (context.thisParameter) {
            const parameter = signature.thisParameter;
            if (!parameter || parameter.valueDeclaration && !(parameter.valueDeclaration as ts.ParameterDeclaration).type) {
                if (!parameter) {
                    signature.thisParameter = createSymbolWithType(context.thisParameter, /*type*/ undefined);
                }
                assignParameterType(signature.thisParameter!, getTypeOfSymbol(context.thisParameter));
            }
        }
        const len = signature.parameters.length - (signatureHasRestParameter(signature) ? 1 : 0);
        for (let i = 0; i < len; i++) {
            const parameter = signature.parameters[i];
            if (!ts.getEffectiveTypeAnnotationNode(parameter.valueDeclaration as ts.ParameterDeclaration)) {
                const contextualParameterType = tryGetTypeAtPosition(context, i);
                assignParameterType(parameter, contextualParameterType);
            }
        }
        if (signatureHasRestParameter(signature)) {
            // parameter might be a transient symbol generated by use of `arguments` in the function body.
            const parameter = ts.last(signature.parameters);
            if (parameter.valueDeclaration
                ? !ts.getEffectiveTypeAnnotationNode(parameter.valueDeclaration as ts.ParameterDeclaration)
                // a declarationless parameter may still have a `.type` already set by its construction logic
                // (which may pull a type from a jsdoc) - only allow fixing on `DeferredType` parameters with a fallback type
                : !!(ts.getCheckFlags(parameter) & ts.CheckFlags.DeferredType)
            ) {
                const contextualParameterType = getRestTypeAtPosition(context, len);
                assignParameterType(parameter, contextualParameterType);
            }
        }
    }

    function assignNonContextualParameterTypes(signature: ts.Signature) {
        if (signature.thisParameter) {
            assignParameterType(signature.thisParameter);
        }
        for (const parameter of signature.parameters) {
            assignParameterType(parameter);
        }
    }

    function assignParameterType(parameter: ts.Symbol, type?: ts.Type) {
        const links = getSymbolLinks(parameter);
        if (!links.type) {
            const declaration = parameter.valueDeclaration as ts.ParameterDeclaration | undefined;
            links.type = type || (declaration ? getWidenedTypeForVariableLikeDeclaration(declaration, /*reportErrors*/ true) : getTypeOfSymbol(parameter));
            if (declaration && declaration.name.kind !== ts.SyntaxKind.Identifier) {
                // if inference didn't come up with anything but unknown, fall back to the binding pattern if present.
                if (links.type === unknownType) {
                    links.type = getTypeFromBindingPattern(declaration.name);
                }
                assignBindingElementTypes(declaration.name, links.type);
            }
        }
        else if (type) {
            ts.Debug.assertEqual(links.type, type, "Parameter symbol already has a cached type which differs from newly assigned type");
        }
    }

    // When contextual typing assigns a type to a parameter that contains a binding pattern, we also need to push
    // the destructured type into the contained binding elements.
    function assignBindingElementTypes(pattern: ts.BindingPattern, parentType: ts.Type) {
        for (const element of pattern.elements) {
            if (!ts.isOmittedExpression(element)) {
                const type = getBindingElementTypeFromParentType(element, parentType);
                if (element.name.kind === ts.SyntaxKind.Identifier) {
                    getSymbolLinks(getSymbolOfNode(element)).type = type;
                }
                else {
                    assignBindingElementTypes(element.name, type);
                }
            }
        }
    }

    function createPromiseType(promisedType: ts.Type): ts.Type {
        // creates a `Promise<T>` type where `T` is the promisedType argument
        const globalPromiseType = getGlobalPromiseType(/*reportErrors*/ true);
        if (globalPromiseType !== emptyGenericType) {
            // if the promised type is itself a promise, get the underlying type; otherwise, fallback to the promised type
            // Unwrap an `Awaited<T>` to `T` to improve inference.
            promisedType = getAwaitedTypeNoAlias(unwrapAwaitedType(promisedType)) || unknownType;
            return createTypeReference(globalPromiseType, [promisedType]);
        }

        return unknownType;
    }

    function createPromiseLikeType(promisedType: ts.Type): ts.Type {
        // creates a `PromiseLike<T>` type where `T` is the promisedType argument
        const globalPromiseLikeType = getGlobalPromiseLikeType(/*reportErrors*/ true);
        if (globalPromiseLikeType !== emptyGenericType) {
            // if the promised type is itself a promise, get the underlying type; otherwise, fallback to the promised type
            // Unwrap an `Awaited<T>` to `T` to improve inference.
            promisedType = getAwaitedTypeNoAlias(unwrapAwaitedType(promisedType)) || unknownType;
            return createTypeReference(globalPromiseLikeType, [promisedType]);
        }

        return unknownType;
    }

    function createPromiseReturnType(func: ts.FunctionLikeDeclaration | ts.ImportCall, promisedType: ts.Type) {
        const promiseType = createPromiseType(promisedType);
        if (promiseType === unknownType) {
            error(func, ts.isImportCall(func) ?
                ts.Diagnostics.A_dynamic_import_call_returns_a_Promise_Make_sure_you_have_a_declaration_for_Promise_or_include_ES2015_in_your_lib_option :
                ts.Diagnostics.An_async_function_or_method_must_return_a_Promise_Make_sure_you_have_a_declaration_for_Promise_or_include_ES2015_in_your_lib_option);
            return errorType;
        }
        else if (!getGlobalPromiseConstructorSymbol(/*reportErrors*/ true)) {
            error(func, ts.isImportCall(func) ?
                ts.Diagnostics.A_dynamic_import_call_in_ES5_SlashES3_requires_the_Promise_constructor_Make_sure_you_have_a_declaration_for_the_Promise_constructor_or_include_ES2015_in_your_lib_option :
                ts.Diagnostics.An_async_function_or_method_in_ES5_SlashES3_requires_the_Promise_constructor_Make_sure_you_have_a_declaration_for_the_Promise_constructor_or_include_ES2015_in_your_lib_option);
        }

        return promiseType;
    }

    function createNewTargetExpressionType(targetType: ts.Type): ts.Type {
        // Create a synthetic type `NewTargetExpression { target: TargetType; }`
        const symbol = createSymbol(ts.SymbolFlags.None, "NewTargetExpression" as ts.__String);

        const targetPropertySymbol = createSymbol(ts.SymbolFlags.Property, "target" as ts.__String, ts.CheckFlags.Readonly);
        targetPropertySymbol.parent = symbol;
        targetPropertySymbol.type = targetType;

        const members = ts.createSymbolTable([targetPropertySymbol]);
        symbol.members = members;
        return createAnonymousType(symbol, members, ts.emptyArray, ts.emptyArray, ts.emptyArray);
    }

    function getReturnTypeFromBody(func: ts.FunctionLikeDeclaration, checkMode?: CheckMode): ts.Type {
        if (!func.body) {
            return errorType;
        }

        const functionFlags = ts.getFunctionFlags(func);
        const isAsync = (functionFlags & ts.FunctionFlags.Async) !== 0;
        const isGenerator = (functionFlags & ts.FunctionFlags.Generator) !== 0;

        let returnType: ts.Type | undefined;
        let yieldType: ts.Type | undefined;
        let nextType: ts.Type | undefined;
        let fallbackReturnType: ts.Type = voidType;
        if (func.body.kind !== ts.SyntaxKind.Block) { // Async or normal arrow function
            returnType = checkExpressionCached(func.body, checkMode && checkMode & ~CheckMode.SkipGenericFunctions);
            if (isAsync) {
                // From within an async function you can return either a non-promise value or a promise. Any
                // Promise/A+ compatible implementation will always assimilate any foreign promise, so the
                // return type of the body should be unwrapped to its awaited type, which we will wrap in
                // the native Promise<T> type later in this function.
                returnType = unwrapAwaitedType(checkAwaitedType(returnType, /*withAlias*/ false, /*errorNode*/ func, ts.Diagnostics.The_return_type_of_an_async_function_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member));
            }
        }
        else if (isGenerator) { // Generator or AsyncGenerator function
            const returnTypes = checkAndAggregateReturnExpressionTypes(func, checkMode);
            if (!returnTypes) {
                fallbackReturnType = neverType;
            }
            else if (returnTypes.length > 0) {
                returnType = getUnionType(returnTypes, ts.UnionReduction.Subtype);
            }
            const { yieldTypes, nextTypes } = checkAndAggregateYieldOperandTypes(func, checkMode);
            yieldType = ts.some(yieldTypes) ? getUnionType(yieldTypes, ts.UnionReduction.Subtype) : undefined;
            nextType = ts.some(nextTypes) ? getIntersectionType(nextTypes) : undefined;
        }
        else { // Async or normal function
            const types = checkAndAggregateReturnExpressionTypes(func, checkMode);
            if (!types) {
                // For an async function, the return type will not be never, but rather a Promise for never.
                return functionFlags & ts.FunctionFlags.Async
                    ? createPromiseReturnType(func, neverType) // Async function
                    : neverType; // Normal function
            }
            if (types.length === 0) {
                // For an async function, the return type will not be void, but rather a Promise for void.
                return functionFlags & ts.FunctionFlags.Async
                    ? createPromiseReturnType(func, voidType) // Async function
                    : voidType; // Normal function
            }

            // Return a union of the return expression types.
            returnType = getUnionType(types, ts.UnionReduction.Subtype);
        }

        if (returnType || yieldType || nextType) {
            if (yieldType) reportErrorsFromWidening(func, yieldType, WideningKind.GeneratorYield);
            if (returnType) reportErrorsFromWidening(func, returnType, WideningKind.FunctionReturn);
            if (nextType) reportErrorsFromWidening(func, nextType, WideningKind.GeneratorNext);
            if (returnType && isUnitType(returnType) ||
                yieldType && isUnitType(yieldType) ||
                nextType && isUnitType(nextType)) {
                const contextualSignature = getContextualSignatureForFunctionLikeDeclaration(func);
                const contextualType = !contextualSignature ? undefined :
                    contextualSignature === getSignatureFromDeclaration(func) ? isGenerator ? undefined : returnType :
                    instantiateContextualType(getReturnTypeOfSignature(contextualSignature), func, /*contextFlags*/ undefined);
                if (isGenerator) {
                    yieldType = getWidenedLiteralLikeTypeForContextualIterationTypeIfNeeded(yieldType, contextualType, IterationTypeKind.Yield, isAsync);
                    returnType = getWidenedLiteralLikeTypeForContextualIterationTypeIfNeeded(returnType, contextualType, IterationTypeKind.Return, isAsync);
                    nextType = getWidenedLiteralLikeTypeForContextualIterationTypeIfNeeded(nextType, contextualType, IterationTypeKind.Next, isAsync);
                }
                else {
                    returnType = getWidenedLiteralLikeTypeForContextualReturnTypeIfNeeded(returnType, contextualType, isAsync);
                }
            }

            if (yieldType) yieldType = getWidenedType(yieldType);
            if (returnType) returnType = getWidenedType(returnType);
            if (nextType) nextType = getWidenedType(nextType);
        }

        if (isGenerator) {
            return createGeneratorReturnType(
                yieldType || neverType,
                returnType || fallbackReturnType,
                nextType || getContextualIterationType(IterationTypeKind.Next, func) || unknownType,
                isAsync);
        }
        else {
            // From within an async function you can return either a non-promise value or a promise. Any
            // Promise/A+ compatible implementation will always assimilate any foreign promise, so the
            // return type of the body is awaited type of the body, wrapped in a native Promise<T> type.
            return isAsync
                ? createPromiseType(returnType || fallbackReturnType)
                : returnType || fallbackReturnType;
        }
    }

    function createGeneratorReturnType(yieldType: ts.Type, returnType: ts.Type, nextType: ts.Type, isAsyncGenerator: boolean) {
        const resolver = isAsyncGenerator ? asyncIterationTypesResolver : syncIterationTypesResolver;
        const globalGeneratorType = resolver.getGlobalGeneratorType(/*reportErrors*/ false);
        yieldType = resolver.resolveIterationType(yieldType, /*errorNode*/ undefined) || unknownType;
        returnType = resolver.resolveIterationType(returnType, /*errorNode*/ undefined) || unknownType;
        nextType = resolver.resolveIterationType(nextType, /*errorNode*/ undefined) || unknownType;
        if (globalGeneratorType === emptyGenericType) {
            // Fall back to the global IterableIterator if returnType is assignable to the expected return iteration
            // type of IterableIterator, and the expected next iteration type of IterableIterator is assignable to
            // nextType.
            const globalType = resolver.getGlobalIterableIteratorType(/*reportErrors*/ false);
            const iterationTypes = globalType !== emptyGenericType ? getIterationTypesOfGlobalIterableType(globalType, resolver) : undefined;
            const iterableIteratorReturnType = iterationTypes ? iterationTypes.returnType : anyType;
            const iterableIteratorNextType = iterationTypes ? iterationTypes.nextType : undefinedType;
            if (isTypeAssignableTo(returnType, iterableIteratorReturnType) &&
                isTypeAssignableTo(iterableIteratorNextType, nextType)) {
                if (globalType !== emptyGenericType) {
                    return createTypeFromGenericGlobalType(globalType, [yieldType]);
                }

                // The global IterableIterator type doesn't exist, so report an error
                resolver.getGlobalIterableIteratorType(/*reportErrors*/ true);
                return emptyObjectType;
            }

            // The global Generator type doesn't exist, so report an error
            resolver.getGlobalGeneratorType(/*reportErrors*/ true);
            return emptyObjectType;
        }

        return createTypeFromGenericGlobalType(globalGeneratorType, [yieldType, returnType, nextType]);
    }

    function checkAndAggregateYieldOperandTypes(func: ts.FunctionLikeDeclaration, checkMode: CheckMode | undefined) {
        const yieldTypes: ts.Type[] = [];
        const nextTypes: ts.Type[] = [];
        const isAsync = (ts.getFunctionFlags(func) & ts.FunctionFlags.Async) !== 0;
        ts.forEachYieldExpression(func.body as ts.Block, yieldExpression => {
            const yieldExpressionType = yieldExpression.expression ? checkExpression(yieldExpression.expression, checkMode) : undefinedWideningType;
            ts.pushIfUnique(yieldTypes, getYieldedTypeOfYieldExpression(yieldExpression, yieldExpressionType, anyType, isAsync));
            let nextType: ts.Type | undefined;
            if (yieldExpression.asteriskToken) {
                const iterationTypes = getIterationTypesOfIterable(
                    yieldExpressionType,
                    isAsync ? IterationUse.AsyncYieldStar : IterationUse.YieldStar,
                    yieldExpression.expression);
                nextType = iterationTypes && iterationTypes.nextType;
            }
            else {
                nextType = getContextualType(yieldExpression, /*contextFlags*/ undefined);
            }
            if (nextType) ts.pushIfUnique(nextTypes, nextType);
        });
        return { yieldTypes, nextTypes };
    }

    function getYieldedTypeOfYieldExpression(node: ts.YieldExpression, expressionType: ts.Type, sentType: ts.Type, isAsync: boolean): ts.Type | undefined {
        const errorNode = node.expression || node;
        // A `yield*` expression effectively yields everything that its operand yields
        const yieldedType = node.asteriskToken ? checkIteratedTypeOrElementType(isAsync ? IterationUse.AsyncYieldStar : IterationUse.YieldStar, expressionType, sentType, errorNode) : expressionType;
        return !isAsync ? yieldedType : getAwaitedType(yieldedType, errorNode, node.asteriskToken
            ? ts.Diagnostics.Type_of_iterated_elements_of_a_yield_Asterisk_operand_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member
            : ts.Diagnostics.Type_of_yield_operand_in_an_async_generator_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member);
    }

    // Return the combined not-equal type facts for all cases except those between the start and end indices.
    function getNotEqualFactsFromTypeofSwitch(start: number, end: number, witnesses: (string | undefined)[]): TypeFacts {
        let facts: TypeFacts = TypeFacts.None;
        for (let i = 0; i < witnesses.length; i++) {
            const witness = i < start || i >= end ? witnesses[i] : undefined;
            facts |= witness !== undefined ? typeofNEFacts.get(witness) || TypeFacts.TypeofNEHostObject : 0;
        }
        return facts;
    }

    function isExhaustiveSwitchStatement(node: ts.SwitchStatement): boolean {
        const links = getNodeLinks(node);
        if (links.isExhaustive === undefined) {
            links.isExhaustive = 0;  // Indicate resolution is in process
            const exhaustive = computeExhaustiveSwitchStatement(node);
            if (links.isExhaustive === 0) {
                links.isExhaustive = exhaustive;
            }
        }
        else if (links.isExhaustive === 0) {
            links.isExhaustive = false;  // Resolve circularity to false
        }
        return links.isExhaustive;
    }

    function computeExhaustiveSwitchStatement(node: ts.SwitchStatement): boolean {
        if (node.expression.kind === ts.SyntaxKind.TypeOfExpression) {
            const witnesses = getSwitchClauseTypeOfWitnesses(node);
            if (!witnesses) {
                return false;
            }
            const operandConstraint = getBaseConstraintOrType(checkExpressionCached((node.expression as ts.TypeOfExpression).expression));
            // Get the not-equal flags for all handled cases.
            const notEqualFacts = getNotEqualFactsFromTypeofSwitch(0, 0, witnesses);
            if (operandConstraint.flags & ts.TypeFlags.AnyOrUnknown) {
                // We special case the top types to be exhaustive when all cases are handled.
                return (TypeFacts.AllTypeofNE & notEqualFacts) === TypeFacts.AllTypeofNE;
            }
            // A missing not-equal flag indicates that the type wasn't handled by some case.
            return !someType(operandConstraint, t => (getTypeFacts(t) & notEqualFacts) === notEqualFacts);
        }
        const type = checkExpressionCached(node.expression);
        if (!isLiteralType(type)) {
            return false;
        }
        const switchTypes = getSwitchClauseTypes(node);
        if (!switchTypes.length || ts.some(switchTypes, isNeitherUnitTypeNorNever)) {
            return false;
        }
        return eachTypeContainedIn(mapType(type, getRegularTypeOfLiteralType), switchTypes);
    }

    function functionHasImplicitReturn(func: ts.FunctionLikeDeclaration) {
        return func.endFlowNode && isReachableFlowNode(func.endFlowNode);
    }

    /** NOTE: Return value of `[]` means a different thing than `undefined`. `[]` means func returns `void`, `undefined` means it returns `never`. */
    function checkAndAggregateReturnExpressionTypes(func: ts.FunctionLikeDeclaration, checkMode: CheckMode | undefined): ts.Type[] | undefined {
        const functionFlags = ts.getFunctionFlags(func);
        const aggregatedTypes: ts.Type[] = [];
        let hasReturnWithNoExpression = functionHasImplicitReturn(func);
        let hasReturnOfTypeNever = false;
        ts.forEachReturnStatement(func.body as ts.Block, returnStatement => {
            const expr = returnStatement.expression;
            if (expr) {
                let type = checkExpressionCached(expr, checkMode && checkMode & ~CheckMode.SkipGenericFunctions);
                if (functionFlags & ts.FunctionFlags.Async) {
                    // From within an async function you can return either a non-promise value or a promise. Any
                    // Promise/A+ compatible implementation will always assimilate any foreign promise, so the
                    // return type of the body should be unwrapped to its awaited type, which should be wrapped in
                    // the native Promise<T> type by the caller.
                    type = unwrapAwaitedType(checkAwaitedType(type, /*withAlias*/ false, func, ts.Diagnostics.The_return_type_of_an_async_function_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member));
                }
                if (type.flags & ts.TypeFlags.Never) {
                    hasReturnOfTypeNever = true;
                }
                ts.pushIfUnique(aggregatedTypes, type);
            }
            else {
                hasReturnWithNoExpression = true;
            }
        });
        if (aggregatedTypes.length === 0 && !hasReturnWithNoExpression && (hasReturnOfTypeNever || mayReturnNever(func))) {
            return undefined;
        }
        if (strictNullChecks && aggregatedTypes.length && hasReturnWithNoExpression &&
            !(isJSConstructor(func) && aggregatedTypes.some(t => t.symbol === func.symbol))) {
            // Javascript "callable constructors", containing eg `if (!(this instanceof A)) return new A()` should not add undefined
            ts.pushIfUnique(aggregatedTypes, undefinedType);
        }
        return aggregatedTypes;
    }
    function mayReturnNever(func: ts.FunctionLikeDeclaration): boolean {
        switch (func.kind) {
            case ts.SyntaxKind.FunctionExpression:
            case ts.SyntaxKind.ArrowFunction:
                return true;
            case ts.SyntaxKind.MethodDeclaration:
                return func.parent.kind === ts.SyntaxKind.ObjectLiteralExpression;
            default:
                return false;
        }
    }

    /**
     * TypeScript Specification 1.0 (6.3) - July 2014
     *   An explicitly typed function whose return type isn't the Void type,
     *   the Any type, or a union type containing the Void or Any type as a constituent
     *   must have at least one return statement somewhere in its body.
     *   An exception to this rule is if the function implementation consists of a single 'throw' statement.
     *
     * @param returnType - return type of the function, can be undefined if return type is not explicitly specified
     */
    function checkAllCodePathsInNonVoidFunctionReturnOrThrow(func: ts.FunctionLikeDeclaration | ts.MethodSignature, returnType: ts.Type | undefined) {
        addLazyDiagnostic(checkAllCodePathsInNonVoidFunctionReturnOrThrowDiagnostics);
        return;

        function checkAllCodePathsInNonVoidFunctionReturnOrThrowDiagnostics(): void {
            const functionFlags = ts.getFunctionFlags(func);
            const type = returnType && unwrapReturnType(returnType, functionFlags);

            // Functions with with an explicitly specified 'void' or 'any' return type don't need any return expressions.
            if (type && maybeTypeOfKind(type, ts.TypeFlags.Any | ts.TypeFlags.Void)) {
                return;
            }

            // If all we have is a function signature, or an arrow function with an expression body, then there is nothing to check.
            // also if HasImplicitReturn flag is not set this means that all codepaths in function body end with return or throw
            if (func.kind === ts.SyntaxKind.MethodSignature || ts.nodeIsMissing(func.body) || func.body!.kind !== ts.SyntaxKind.Block || !functionHasImplicitReturn(func)) {
                return;
            }

            const hasExplicitReturn = func.flags & ts.NodeFlags.HasExplicitReturn;
            const errorNode = ts.getEffectiveReturnTypeNode(func) || func;

            if (type && type.flags & ts.TypeFlags.Never) {
                error(errorNode, ts.Diagnostics.A_function_returning_never_cannot_have_a_reachable_end_point);
            }
            else if (type && !hasExplicitReturn) {
                // minimal check: function has syntactic return type annotation and no explicit return statements in the body
                // this function does not conform to the specification.
                error(errorNode, ts.Diagnostics.A_function_whose_declared_type_is_neither_void_nor_any_must_return_a_value);
            }
            else if (type && strictNullChecks && !isTypeAssignableTo(undefinedType, type)) {
                error(errorNode, ts.Diagnostics.Function_lacks_ending_return_statement_and_return_type_does_not_include_undefined);
            }
            else if (compilerOptions.noImplicitReturns) {
                if (!type) {
                    // If return type annotation is omitted check if function has any explicit return statements.
                    // If it does not have any - its inferred return type is void - don't do any checks.
                    // Otherwise get inferred return type from function body and report error only if it is not void / anytype
                    if (!hasExplicitReturn) {
                        return;
                    }
                    const inferredReturnType = getReturnTypeOfSignature(getSignatureFromDeclaration(func));
                    if (isUnwrappedReturnTypeVoidOrAny(func, inferredReturnType)) {
                        return;
                    }
                }
                error(errorNode, ts.Diagnostics.Not_all_code_paths_return_a_value);
            }
        }
    }

    function checkFunctionExpressionOrObjectLiteralMethod(node: ts.FunctionExpression | ts.ArrowFunction | ts.MethodDeclaration, checkMode?: CheckMode): ts.Type {
        ts.Debug.assert(node.kind !== ts.SyntaxKind.MethodDeclaration || ts.isObjectLiteralMethod(node));
        checkNodeDeferred(node);

        if (ts.isFunctionExpression(node)) {
            checkCollisionsForDeclarationName(node, node.name);
        }

        // The identityMapper object is used to indicate that function expressions are wildcards
        if (checkMode && checkMode & CheckMode.SkipContextSensitive && isContextSensitive(node)) {
            // Skip parameters, return signature with return type that retains noncontextual parts so inferences can still be drawn in an early stage
            if (!ts.getEffectiveReturnTypeNode(node) && !ts.hasContextSensitiveParameters(node)) {
                // Return plain anyFunctionType if there is no possibility we'll make inferences from the return type
                const contextualSignature = getContextualSignature(node);
                if (contextualSignature && couldContainTypeVariables(getReturnTypeOfSignature(contextualSignature))) {
                    const links = getNodeLinks(node);
                    if (links.contextFreeType) {
                        return links.contextFreeType;
                    }
                    const returnType = getReturnTypeFromBody(node, checkMode);
                    const returnOnlySignature = createSignature(undefined, undefined, undefined, ts.emptyArray, returnType, /*resolvedTypePredicate*/ undefined, 0, ts.SignatureFlags.None);
                    const returnOnlyType = createAnonymousType(node.symbol, emptySymbols, [returnOnlySignature], ts.emptyArray, ts.emptyArray);
                    returnOnlyType.objectFlags |= ts.ObjectFlags.NonInferrableType;
                    return links.contextFreeType = returnOnlyType;
                }
            }
            return anyFunctionType;
        }

        // Grammar checking
        const hasGrammarError = checkGrammarFunctionLikeDeclaration(node);
        if (!hasGrammarError && node.kind === ts.SyntaxKind.FunctionExpression) {
            checkGrammarForGenerator(node);
        }

        contextuallyCheckFunctionExpressionOrObjectLiteralMethod(node, checkMode);

        return getTypeOfSymbol(getSymbolOfNode(node));
    }

    function contextuallyCheckFunctionExpressionOrObjectLiteralMethod(node: ts.FunctionExpression | ts.ArrowFunction | ts.MethodDeclaration, checkMode?: CheckMode) {
        const links = getNodeLinks(node);
        // Check if function expression is contextually typed and assign parameter types if so.
        if (!(links.flags & ts.NodeCheckFlags.ContextChecked)) {
            const contextualSignature = getContextualSignature(node);
            // If a type check is started at a function expression that is an argument of a function call, obtaining the
            // contextual type may recursively get back to here during overload resolution of the call. If so, we will have
            // already assigned contextual types.
            if (!(links.flags & ts.NodeCheckFlags.ContextChecked)) {
                links.flags |= ts.NodeCheckFlags.ContextChecked;
                const signature = ts.firstOrUndefined(getSignaturesOfType(getTypeOfSymbol(getSymbolOfNode(node)), ts.SignatureKind.Call));
                if (!signature) {
                    return;
                }
                if (isContextSensitive(node)) {
                    if (contextualSignature) {
                        const inferenceContext = getInferenceContext(node);
                        let instantiatedContextualSignature: ts.Signature | undefined;
                        if (checkMode && checkMode & CheckMode.Inferential) {
                            inferFromAnnotatedParameters(signature, contextualSignature, inferenceContext!);
                            const restType = getEffectiveRestType(contextualSignature);
                            if (restType && restType.flags & ts.TypeFlags.TypeParameter) {
                                instantiatedContextualSignature = instantiateSignature(contextualSignature, inferenceContext!.nonFixingMapper);
                            }
                        }
                        instantiatedContextualSignature ||= inferenceContext ?
                            instantiateSignature(contextualSignature, inferenceContext.mapper) : contextualSignature;
                        assignContextualParameterTypes(signature, instantiatedContextualSignature);
                    }
                    else {
                        // Force resolution of all parameter types such that the absence of a contextual type is consistently reflected.
                        assignNonContextualParameterTypes(signature);
                    }
                }
                if (contextualSignature && !getReturnTypeFromAnnotation(node) && !signature.resolvedReturnType) {
                    const returnType = getReturnTypeFromBody(node, checkMode);
                    if (!signature.resolvedReturnType) {
                        signature.resolvedReturnType = returnType;
                    }
                }
                checkSignatureDeclaration(node);
            }
        }
    }

    function checkFunctionExpressionOrObjectLiteralMethodDeferred(node: ts.ArrowFunction | ts.FunctionExpression | ts.MethodDeclaration) {
        ts.Debug.assert(node.kind !== ts.SyntaxKind.MethodDeclaration || ts.isObjectLiteralMethod(node));

        const functionFlags = ts.getFunctionFlags(node);
        const returnType = getReturnTypeFromAnnotation(node);
        checkAllCodePathsInNonVoidFunctionReturnOrThrow(node, returnType);

        if (node.body) {
            if (!ts.getEffectiveReturnTypeNode(node)) {
                // There are some checks that are only performed in getReturnTypeFromBody, that may produce errors
                // we need. An example is the noImplicitAny errors resulting from widening the return expression
                // of a function. Because checking of function expression bodies is deferred, there was never an
                // appropriate time to do this during the main walk of the file (see the comment at the top of
                // checkFunctionExpressionBodies). So it must be done now.
                getReturnTypeOfSignature(getSignatureFromDeclaration(node));
            }

            if (node.body.kind === ts.SyntaxKind.Block) {
                checkSourceElement(node.body);
            }
            else {
                // From within an async function you can return either a non-promise value or a promise. Any
                // Promise/A+ compatible implementation will always assimilate any foreign promise, so we
                // should not be checking assignability of a promise to the return type. Instead, we need to
                // check assignability of the awaited type of the expression body against the promised type of
                // its return type annotation.
                const exprType = checkExpression(node.body);
                const returnOrPromisedType = returnType && unwrapReturnType(returnType, functionFlags);
                if (returnOrPromisedType) {
                    if ((functionFlags & ts.FunctionFlags.AsyncGenerator) === ts.FunctionFlags.Async) { // Async function
                        const awaitedType = checkAwaitedType(exprType, /*withAlias*/ false, node.body, ts.Diagnostics.The_return_type_of_an_async_function_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member);
                        checkTypeAssignableToAndOptionallyElaborate(awaitedType, returnOrPromisedType, node.body, node.body);
                    }
                    else { // Normal function
                        checkTypeAssignableToAndOptionallyElaborate(exprType, returnOrPromisedType, node.body, node.body);
                    }
                }
            }
        }
    }

    function checkArithmeticOperandType(operand: ts.Node, type: ts.Type, diagnostic: ts.DiagnosticMessage, isAwaitValid = false): boolean {
        if (!isTypeAssignableTo(type, numberOrBigIntType)) {
            const awaitedType = isAwaitValid && getAwaitedTypeOfPromise(type);
            errorAndMaybeSuggestAwait(
                operand,
                !!awaitedType && isTypeAssignableTo(awaitedType, numberOrBigIntType),
                diagnostic);
            return false;
        }
        return true;
    }

    function isReadonlyAssignmentDeclaration(d: ts.Declaration) {
        if (!ts.isCallExpression(d)) {
            return false;
        }
        if (!ts.isBindableObjectDefinePropertyCall(d)) {
            return false;
        }
        const objectLitType = checkExpressionCached(d.arguments[2]);
        const valueType = getTypeOfPropertyOfType(objectLitType, "value" as ts.__String);
        if (valueType) {
            const writableProp = getPropertyOfType(objectLitType, "writable" as ts.__String);
            const writableType = writableProp && getTypeOfSymbol(writableProp);
            if (!writableType || writableType === falseType || writableType === regularFalseType) {
                return true;
            }
            // We include this definition whereupon we walk back and check the type at the declaration because
            // The usual definition of `Object.defineProperty` will _not_ cause literal types to be preserved in the
            // argument types, should the type be contextualized by the call itself.
            if (writableProp && writableProp.valueDeclaration && ts.isPropertyAssignment(writableProp.valueDeclaration)) {
                const initializer = writableProp.valueDeclaration.initializer;
                const rawOriginalType = checkExpression(initializer);
                if (rawOriginalType === falseType || rawOriginalType === regularFalseType) {
                    return true;
                }
            }
            return false;
        }
        const setProp = getPropertyOfType(objectLitType, "set" as ts.__String);
        return !setProp;
    }

    function isReadonlySymbol(symbol: ts.Symbol): boolean {
        // The following symbols are considered read-only:
        // Properties with a 'readonly' modifier
        // Variables declared with 'const'
        // Get accessors without matching set accessors
        // Enum members
        // Object.defineProperty assignments with writable false or no setter
        // Unions and intersections of the above (unions and intersections eagerly set isReadonly on creation)
        return !!(ts.getCheckFlags(symbol) & ts.CheckFlags.Readonly ||
            symbol.flags & ts.SymbolFlags.Property && ts.getDeclarationModifierFlagsFromSymbol(symbol) & ts.ModifierFlags.Readonly ||
            symbol.flags & ts.SymbolFlags.Variable && getDeclarationNodeFlagsFromSymbol(symbol) & ts.NodeFlags.Const ||
            symbol.flags & ts.SymbolFlags.Accessor && !(symbol.flags & ts.SymbolFlags.SetAccessor) ||
            symbol.flags & ts.SymbolFlags.EnumMember ||
            ts.some(symbol.declarations, isReadonlyAssignmentDeclaration)
        );
    }

    function isAssignmentToReadonlyEntity(expr: ts.Expression, symbol: ts.Symbol, assignmentKind: ts.AssignmentKind) {
        if (assignmentKind === ts.AssignmentKind.None) {
            // no assigment means it doesn't matter whether the entity is readonly
            return false;
        }
        if (isReadonlySymbol(symbol)) {
            // Allow assignments to readonly properties within constructors of the same class declaration.
            if (symbol.flags & ts.SymbolFlags.Property &&
                ts.isAccessExpression(expr) &&
                expr.expression.kind === ts.SyntaxKind.ThisKeyword) {
                // Look for if this is the constructor for the class that `symbol` is a property of.
                const ctor = ts.getContainingFunction(expr);
                if (!(ctor && (ctor.kind === ts.SyntaxKind.Constructor || isJSConstructor(ctor)))) {
                    return true;
                }
                if (symbol.valueDeclaration) {
                    const isAssignmentDeclaration = ts.isBinaryExpression(symbol.valueDeclaration);
                    const isLocalPropertyDeclaration = ctor.parent === symbol.valueDeclaration.parent;
                    const isLocalParameterProperty = ctor === symbol.valueDeclaration.parent;
                    const isLocalThisPropertyAssignment = isAssignmentDeclaration && symbol.parent?.valueDeclaration === ctor.parent;
                    const isLocalThisPropertyAssignmentConstructorFunction = isAssignmentDeclaration && symbol.parent?.valueDeclaration === ctor;
                    const isWriteableSymbol =
                        isLocalPropertyDeclaration
                        || isLocalParameterProperty
                        || isLocalThisPropertyAssignment
                        || isLocalThisPropertyAssignmentConstructorFunction;
                    return !isWriteableSymbol;
                }
            }
            return true;
        }
        if (ts.isAccessExpression(expr)) {
            // references through namespace import should be readonly
            const node = ts.skipParentheses(expr.expression);
            if (node.kind === ts.SyntaxKind.Identifier) {
                const symbol = getNodeLinks(node).resolvedSymbol!;
                if (symbol.flags & ts.SymbolFlags.Alias) {
                    const declaration = getDeclarationOfAliasSymbol(symbol);
                    return !!declaration && declaration.kind === ts.SyntaxKind.NamespaceImport;
                }
            }
        }
        return false;
    }

    function checkReferenceExpression(expr: ts.Expression, invalidReferenceMessage: ts.DiagnosticMessage, invalidOptionalChainMessage: ts.DiagnosticMessage): boolean {
        // References are combinations of identifiers, parentheses, and property accesses.
        const node = ts.skipOuterExpressions(expr, ts.OuterExpressionKinds.Assertions | ts.OuterExpressionKinds.Parentheses);
        if (node.kind !== ts.SyntaxKind.Identifier && !ts.isAccessExpression(node)) {
            error(expr, invalidReferenceMessage);
            return false;
        }
        if (node.flags & ts.NodeFlags.OptionalChain) {
            error(expr, invalidOptionalChainMessage);
            return false;
        }
        return true;
    }

    function checkDeleteExpression(node: ts.DeleteExpression): ts.Type {
        checkExpression(node.expression);
        const expr = ts.skipParentheses(node.expression);
        if (!ts.isAccessExpression(expr)) {
            error(expr, ts.Diagnostics.The_operand_of_a_delete_operator_must_be_a_property_reference);
            return booleanType;
        }
        if (ts.isPropertyAccessExpression(expr) && ts.isPrivateIdentifier(expr.name)) {
            error(expr, ts.Diagnostics.The_operand_of_a_delete_operator_cannot_be_a_private_identifier);
        }
        const links = getNodeLinks(expr);
        const symbol = getExportSymbolOfValueSymbolIfExported(links.resolvedSymbol);
        if (symbol) {
            if (isReadonlySymbol(symbol)) {
                error(expr, ts.Diagnostics.The_operand_of_a_delete_operator_cannot_be_a_read_only_property);
            }
            checkDeleteExpressionMustBeOptional(expr, symbol);
        }
        return booleanType;
    }

    function checkDeleteExpressionMustBeOptional(expr: ts.AccessExpression, symbol: ts.Symbol) {
        const type = getTypeOfSymbol(symbol);
        if (strictNullChecks &&
            !(type.flags & (ts.TypeFlags.AnyOrUnknown | ts.TypeFlags.Never)) &&
            !(exactOptionalPropertyTypes ? symbol.flags & ts.SymbolFlags.Optional : getTypeFacts(type) & TypeFacts.IsUndefined)) {
            error(expr, ts.Diagnostics.The_operand_of_a_delete_operator_must_be_optional);
        }
    }

    function checkTypeOfExpression(node: ts.TypeOfExpression): ts.Type {
        checkExpression(node.expression);
        return typeofType;
    }

    function checkVoidExpression(node: ts.VoidExpression): ts.Type {
        checkExpression(node.expression);
        return undefinedWideningType;
    }

    function checkAwaitExpressionGrammar(node: ts.AwaitExpression): void {
        // Grammar checking
        const container = ts.getContainingFunctionOrClassStaticBlock(node);
        if (container && ts.isClassStaticBlockDeclaration(container)) {
            error(node, ts.Diagnostics.Await_expression_cannot_be_used_inside_a_class_static_block);
        }
        else if (!(node.flags & ts.NodeFlags.AwaitContext)) {
            if (ts.isInTopLevelContext(node)) {
                const sourceFile = ts.getSourceFileOfNode(node);
                if (!hasParseDiagnostics(sourceFile)) {
                    let span: ts.TextSpan | undefined;
                    if (!ts.isEffectiveExternalModule(sourceFile, compilerOptions)) {
                        span ??= ts.getSpanOfTokenAtPosition(sourceFile, node.pos);
                        const diagnostic = ts.createFileDiagnostic(sourceFile, span.start, span.length,
                            ts.Diagnostics.await_expressions_are_only_allowed_at_the_top_level_of_a_file_when_that_file_is_a_module_but_this_file_has_no_imports_or_exports_Consider_adding_an_empty_export_to_make_this_file_a_module);
                        diagnostics.add(diagnostic);
                    }
                    switch (moduleKind) {
                        case ts.ModuleKind.Node16:
                        case ts.ModuleKind.NodeNext:
                            if (sourceFile.impliedNodeFormat === ts.ModuleKind.CommonJS) {
                                span ??= ts.getSpanOfTokenAtPosition(sourceFile, node.pos);
                                diagnostics.add(
                                    ts.createFileDiagnostic(sourceFile, span.start, span.length, ts.Diagnostics.The_current_file_is_a_CommonJS_module_and_cannot_use_await_at_the_top_level)
                                );
                                break;
                            }
                            // fallthrough
                        case ts.ModuleKind.ES2022:
                        case ts.ModuleKind.ESNext:
                        case ts.ModuleKind.System:
                            if (languageVersion >= ts.ScriptTarget.ES2017) {
                                break;
                            }
                            // fallthrough
                        default:
                            span ??= ts.getSpanOfTokenAtPosition(sourceFile, node.pos);
                            diagnostics.add(
                                ts.createFileDiagnostic(sourceFile, span.start, span.length,
                                    ts.Diagnostics.Top_level_await_expressions_are_only_allowed_when_the_module_option_is_set_to_es2022_esnext_system_node16_or_nodenext_and_the_target_option_is_set_to_es2017_or_higher
                                )
                            );
                            break;
                    }
                }
            }
            else {
                // use of 'await' in non-async function
                const sourceFile = ts.getSourceFileOfNode(node);
                if (!hasParseDiagnostics(sourceFile)) {
                    const span = ts.getSpanOfTokenAtPosition(sourceFile, node.pos);
                    const diagnostic = ts.createFileDiagnostic(sourceFile, span.start, span.length, ts.Diagnostics.await_expressions_are_only_allowed_within_async_functions_and_at_the_top_levels_of_modules);
                    if (container && container.kind !== ts.SyntaxKind.Constructor && (ts.getFunctionFlags(container) & ts.FunctionFlags.Async) === 0) {
                        const relatedInfo = ts.createDiagnosticForNode(container, ts.Diagnostics.Did_you_mean_to_mark_this_function_as_async);
                        ts.addRelatedInfo(diagnostic, relatedInfo);
                    }
                    diagnostics.add(diagnostic);
                }
            }
        }

        if (isInParameterInitializerBeforeContainingFunction(node)) {
            error(node, ts.Diagnostics.await_expressions_cannot_be_used_in_a_parameter_initializer);
        }
    }

    function checkAwaitExpression(node: ts.AwaitExpression): ts.Type {
        addLazyDiagnostic(() => checkAwaitExpressionGrammar(node));

        const operandType = checkExpression(node.expression);
        const awaitedType = checkAwaitedType(operandType, /*withAlias*/ true, node, ts.Diagnostics.Type_of_await_operand_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member);
        if (awaitedType === operandType && !isErrorType(awaitedType) && !(operandType.flags & ts.TypeFlags.AnyOrUnknown)) {
            addErrorOrSuggestion(/*isError*/ false, ts.createDiagnosticForNode(node, ts.Diagnostics.await_has_no_effect_on_the_type_of_this_expression));
        }
        return awaitedType;
    }

    function checkPrefixUnaryExpression(node: ts.PrefixUnaryExpression): ts.Type {
        const operandType = checkExpression(node.operand);
        if (operandType === silentNeverType) {
            return silentNeverType;
        }
        switch (node.operand.kind) {
            case ts.SyntaxKind.NumericLiteral:
                switch (node.operator) {
                    case ts.SyntaxKind.MinusToken:
                        return getFreshTypeOfLiteralType(getNumberLiteralType(-(node.operand as ts.NumericLiteral).text));
                    case ts.SyntaxKind.PlusToken:
                        return getFreshTypeOfLiteralType(getNumberLiteralType(+(node.operand as ts.NumericLiteral).text));
                }
                break;
            case ts.SyntaxKind.BigIntLiteral:
                if (node.operator === ts.SyntaxKind.MinusToken) {
                    return getFreshTypeOfLiteralType(getBigIntLiteralType({
                        negative: true,
                        base10Value: ts.parsePseudoBigInt((node.operand as ts.BigIntLiteral).text)
                    }));
                }
        }
        switch (node.operator) {
            case ts.SyntaxKind.PlusToken:
            case ts.SyntaxKind.MinusToken:
            case ts.SyntaxKind.TildeToken:
                checkNonNullType(operandType, node.operand);
                if (maybeTypeOfKindConsideringBaseConstraint(operandType, ts.TypeFlags.ESSymbolLike)) {
                    error(node.operand, ts.Diagnostics.The_0_operator_cannot_be_applied_to_type_symbol, ts.tokenToString(node.operator));
                }
                if (node.operator === ts.SyntaxKind.PlusToken) {
                    if (maybeTypeOfKindConsideringBaseConstraint(operandType, ts.TypeFlags.BigIntLike)) {
                        error(node.operand, ts.Diagnostics.Operator_0_cannot_be_applied_to_type_1, ts.tokenToString(node.operator), typeToString(getBaseTypeOfLiteralType(operandType)));
                    }
                    return numberType;
                }
                return getUnaryResultType(operandType);
            case ts.SyntaxKind.ExclamationToken:
                checkTruthinessExpression(node.operand);
                const facts = getTypeFacts(operandType) & (TypeFacts.Truthy | TypeFacts.Falsy);
                return facts === TypeFacts.Truthy ? falseType :
                    facts === TypeFacts.Falsy ? trueType :
                    booleanType;
            case ts.SyntaxKind.PlusPlusToken:
            case ts.SyntaxKind.MinusMinusToken:
                const ok = checkArithmeticOperandType(node.operand, checkNonNullType(operandType, node.operand),
                    ts.Diagnostics.An_arithmetic_operand_must_be_of_type_any_number_bigint_or_an_enum_type);
                if (ok) {
                    // run check only if former checks succeeded to avoid reporting cascading errors
                    checkReferenceExpression(
                        node.operand,
                        ts.Diagnostics.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,
                        ts.Diagnostics.The_operand_of_an_increment_or_decrement_operator_may_not_be_an_optional_property_access);
                }
                return getUnaryResultType(operandType);
        }
        return errorType;
    }

    function checkPostfixUnaryExpression(node: ts.PostfixUnaryExpression): ts.Type {
        const operandType = checkExpression(node.operand);
        if (operandType === silentNeverType) {
            return silentNeverType;
        }
        const ok = checkArithmeticOperandType(
            node.operand,
            checkNonNullType(operandType, node.operand),
            ts.Diagnostics.An_arithmetic_operand_must_be_of_type_any_number_bigint_or_an_enum_type);
        if (ok) {
            // run check only if former checks succeeded to avoid reporting cascading errors
            checkReferenceExpression(
                node.operand,
                ts.Diagnostics.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,
                ts.Diagnostics.The_operand_of_an_increment_or_decrement_operator_may_not_be_an_optional_property_access);
        }
        return getUnaryResultType(operandType);
    }

    function getUnaryResultType(operandType: ts.Type): ts.Type {
        if (maybeTypeOfKind(operandType, ts.TypeFlags.BigIntLike)) {
            return isTypeAssignableToKind(operandType, ts.TypeFlags.AnyOrUnknown) || maybeTypeOfKind(operandType, ts.TypeFlags.NumberLike)
                ? numberOrBigIntType
                : bigintType;
        }
        // If it's not a bigint type, implicit coercion will result in a number
        return numberType;
    }

    function maybeTypeOfKindConsideringBaseConstraint(type: ts.Type, kind: ts.TypeFlags): boolean {
        if (maybeTypeOfKind(type, kind)) {
            return true;
        }

        const baseConstraint = getBaseConstraintOrType(type);
        return !!baseConstraint && maybeTypeOfKind(baseConstraint, kind);
    }

    // Return true if type might be of the given kind. A union or intersection type might be of a given
    // kind if at least one constituent type is of the given kind.
    function maybeTypeOfKind(type: ts.Type, kind: ts.TypeFlags): boolean {
        if (type.flags & kind) {
            return true;
        }
        if (type.flags & ts.TypeFlags.UnionOrIntersection) {
            const types = (type as ts.UnionOrIntersectionType).types;
            for (const t of types) {
                if (maybeTypeOfKind(t, kind)) {
                    return true;
                }
            }
        }
        return false;
    }

    function isTypeAssignableToKind(source: ts.Type, kind: ts.TypeFlags, strict?: boolean): boolean {
        if (source.flags & kind) {
            return true;
        }
        if (strict && source.flags & (ts.TypeFlags.AnyOrUnknown | ts.TypeFlags.Void | ts.TypeFlags.Undefined | ts.TypeFlags.Null)) {
            return false;
        }
        return !!(kind & ts.TypeFlags.NumberLike) && isTypeAssignableTo(source, numberType) ||
            !!(kind & ts.TypeFlags.BigIntLike) && isTypeAssignableTo(source, bigintType) ||
            !!(kind & ts.TypeFlags.StringLike) && isTypeAssignableTo(source, stringType) ||
            !!(kind & ts.TypeFlags.BooleanLike) && isTypeAssignableTo(source, booleanType) ||
            !!(kind & ts.TypeFlags.Void) && isTypeAssignableTo(source, voidType) ||
            !!(kind & ts.TypeFlags.Never) && isTypeAssignableTo(source, neverType) ||
            !!(kind & ts.TypeFlags.Null) && isTypeAssignableTo(source, nullType) ||
            !!(kind & ts.TypeFlags.Undefined) && isTypeAssignableTo(source, undefinedType) ||
            !!(kind & ts.TypeFlags.ESSymbol) && isTypeAssignableTo(source, esSymbolType) ||
            !!(kind & ts.TypeFlags.NonPrimitive) && isTypeAssignableTo(source, nonPrimitiveType);
    }

    function allTypesAssignableToKind(source: ts.Type, kind: ts.TypeFlags, strict?: boolean): boolean {
        return source.flags & ts.TypeFlags.Union ?
            ts.every((source as ts.UnionType).types, subType => allTypesAssignableToKind(subType, kind, strict)) :
            isTypeAssignableToKind(source, kind, strict);
    }

    function isConstEnumObjectType(type: ts.Type): boolean {
        return !!(ts.getObjectFlags(type) & ts.ObjectFlags.Anonymous) && !!type.symbol && isConstEnumSymbol(type.symbol);
    }

    function isConstEnumSymbol(symbol: ts.Symbol): boolean {
        return (symbol.flags & ts.SymbolFlags.ConstEnum) !== 0;
    }

    function checkInstanceOfExpression(left: ts.Expression, right: ts.Expression, leftType: ts.Type, rightType: ts.Type): ts.Type {
        if (leftType === silentNeverType || rightType === silentNeverType) {
            return silentNeverType;
        }
        // TypeScript 1.0 spec (April 2014): 4.15.4
        // The instanceof operator requires the left operand to be of type Any, an object type, or a type parameter type,
        // and the right operand to be of type Any, a subtype of the 'Function' interface type, or have a call or construct signature.
        // The result is always of the Boolean primitive type.
        // NOTE: do not raise error if leftType is unknown as related error was already reported
        if (!isTypeAny(leftType) &&
            allTypesAssignableToKind(leftType, ts.TypeFlags.Primitive)) {
            error(left, ts.Diagnostics.The_left_hand_side_of_an_instanceof_expression_must_be_of_type_any_an_object_type_or_a_type_parameter);
        }
        // NOTE: do not raise error if right is unknown as related error was already reported
        if (!(isTypeAny(rightType) || typeHasCallOrConstructSignatures(rightType) || isTypeSubtypeOf(rightType, globalFunctionType))) {
            error(right, ts.Diagnostics.The_right_hand_side_of_an_instanceof_expression_must_be_of_type_any_or_of_a_type_assignable_to_the_Function_interface_type);
        }
        return booleanType;
    }

    function hasEmptyObjectIntersection(type: ts.Type): boolean {
        return someType(type, t => t === unknownEmptyObjectType || !!(t.flags & ts.TypeFlags.Intersection) && ts.some((t as ts.IntersectionType).types, isEmptyAnonymousObjectType));
    }

    function checkInExpression(left: ts.Expression, right: ts.Expression, leftType: ts.Type, rightType: ts.Type): ts.Type {
        if (leftType === silentNeverType || rightType === silentNeverType) {
            return silentNeverType;
        }
        if (ts.isPrivateIdentifier(left)) {
            if (languageVersion < ts.ScriptTarget.ESNext) {
                checkExternalEmitHelpers(left, ts.ExternalEmitHelpers.ClassPrivateFieldIn);
            }
            // Unlike in 'checkPrivateIdentifierExpression' we now have access to the RHS type
            // which provides us with the opportunity to emit more detailed errors
            if (!getNodeLinks(left).resolvedSymbol && ts.getContainingClass(left)) {
                const isUncheckedJS = isUncheckedJSSuggestion(left, rightType.symbol, /*excludeClasses*/ true);
                reportNonexistentProperty(left, rightType, isUncheckedJS);
            }
        }
        else {
            // The type of the lef operand must be assignable to string, number, or symbol.
            checkTypeAssignableTo(checkNonNullType(leftType, left), stringNumberSymbolType, left);
        }
        // The type of the right operand must be assignable to 'object'.
        if (checkTypeAssignableTo(checkNonNullType(rightType, right), nonPrimitiveType, right)) {
            // The {} type is assignable to the object type, yet {} might represent a primitive type. Here we
            // detect and error on {} that results from narrowing the unknown type, as well as intersections
            // that include {} (we know that the other types in such intersections are assignable to object
            // since we already checked for that).
            if (hasEmptyObjectIntersection(rightType)) {
                error(right, ts.Diagnostics.Type_0_may_represent_a_primitive_value_which_is_not_permitted_as_the_right_operand_of_the_in_operator, typeToString(rightType));
            }
        }
        // The result is always of the Boolean primitive type.
        return booleanType;
    }

    function checkObjectLiteralAssignment(node: ts.ObjectLiteralExpression, sourceType: ts.Type, rightIsThis?: boolean): ts.Type {
        const properties = node.properties;
        if (strictNullChecks && properties.length === 0) {
            return checkNonNullType(sourceType, node);
        }
        for (let i = 0; i < properties.length; i++) {
            checkObjectLiteralDestructuringPropertyAssignment(node, sourceType, i, properties, rightIsThis);
        }
        return sourceType;
    }

    /** Note: If property cannot be a SpreadAssignment, then allProperties does not need to be provided */
    function checkObjectLiteralDestructuringPropertyAssignment(node: ts.ObjectLiteralExpression, objectLiteralType: ts.Type, propertyIndex: number, allProperties?: ts.NodeArray<ts.ObjectLiteralElementLike>, rightIsThis = false) {
        const properties = node.properties;
        const property = properties[propertyIndex];
        if (property.kind === ts.SyntaxKind.PropertyAssignment || property.kind === ts.SyntaxKind.ShorthandPropertyAssignment) {
            const name = property.name;
            const exprType = getLiteralTypeFromPropertyName(name);
            if (isTypeUsableAsPropertyName(exprType)) {
                const text = getPropertyNameFromType(exprType);
                const prop = getPropertyOfType(objectLiteralType, text);
                if (prop) {
                    markPropertyAsReferenced(prop, property, rightIsThis);
                    checkPropertyAccessibility(property, /*isSuper*/ false, /*writing*/ true, objectLiteralType, prop);
                }
            }
            const elementType = getIndexedAccessType(objectLiteralType, exprType, ts.AccessFlags.ExpressionPosition, name);
            const type = getFlowTypeOfDestructuring(property, elementType);
            return checkDestructuringAssignment(property.kind === ts.SyntaxKind.ShorthandPropertyAssignment ? property : property.initializer, type);
        }
        else if (property.kind === ts.SyntaxKind.SpreadAssignment) {
            if (propertyIndex < properties.length - 1) {
                error(property, ts.Diagnostics.A_rest_element_must_be_last_in_a_destructuring_pattern);
            }
            else {
                if (languageVersion < ts.ScriptTarget.ESNext) {
                    checkExternalEmitHelpers(property, ts.ExternalEmitHelpers.Rest);
                }
                const nonRestNames: ts.PropertyName[] = [];
                if (allProperties) {
                    for (const otherProperty of allProperties) {
                        if (!ts.isSpreadAssignment(otherProperty)) {
                            nonRestNames.push(otherProperty.name);
                        }
                    }
                }
                const type = getRestType(objectLiteralType, nonRestNames, objectLiteralType.symbol);
                checkGrammarForDisallowedTrailingComma(allProperties, ts.Diagnostics.A_rest_parameter_or_binding_pattern_may_not_have_a_trailing_comma);
                return checkDestructuringAssignment(property.expression, type);
            }
        }
        else {
            error(property, ts.Diagnostics.Property_assignment_expected);
        }
    }

    function checkArrayLiteralAssignment(node: ts.ArrayLiteralExpression, sourceType: ts.Type, checkMode?: CheckMode): ts.Type {
        const elements = node.elements;
        if (languageVersion < ts.ScriptTarget.ES2015 && compilerOptions.downlevelIteration) {
            checkExternalEmitHelpers(node, ts.ExternalEmitHelpers.Read);
        }
        // This elementType will be used if the specific property corresponding to this index is not
        // present (aka the tuple element property). This call also checks that the parentType is in
        // fact an iterable or array (depending on target language).
        const possiblyOutOfBoundsType = checkIteratedTypeOrElementType(IterationUse.Destructuring | IterationUse.PossiblyOutOfBounds, sourceType, undefinedType, node) || errorType;
        let inBoundsType: ts.Type | undefined = compilerOptions.noUncheckedIndexedAccess ? undefined: possiblyOutOfBoundsType;
        for (let i = 0; i < elements.length; i++) {
            let type = possiblyOutOfBoundsType;
            if (node.elements[i].kind === ts.SyntaxKind.SpreadElement) {
                type = inBoundsType = inBoundsType ?? (checkIteratedTypeOrElementType(IterationUse.Destructuring, sourceType, undefinedType, node) || errorType);
            }
            checkArrayLiteralDestructuringElementAssignment(node, sourceType, i, type, checkMode);
        }
        return sourceType;
    }

    function checkArrayLiteralDestructuringElementAssignment(node: ts.ArrayLiteralExpression, sourceType: ts.Type,
        elementIndex: number, elementType: ts.Type, checkMode?: CheckMode) {
        const elements = node.elements;
        const element = elements[elementIndex];
        if (element.kind !== ts.SyntaxKind.OmittedExpression) {
            if (element.kind !== ts.SyntaxKind.SpreadElement) {
                const indexType = getNumberLiteralType(elementIndex);
                if (isArrayLikeType(sourceType)) {
                    // We create a synthetic expression so that getIndexedAccessType doesn't get confused
                    // when the element is a SyntaxKind.ElementAccessExpression.
                    const accessFlags = ts.AccessFlags.ExpressionPosition | (hasDefaultValue(element) ? ts.AccessFlags.NoTupleBoundsCheck : 0);
                    const elementType = getIndexedAccessTypeOrUndefined(sourceType, indexType, accessFlags, createSyntheticExpression(element, indexType)) || errorType;
                    const assignedType = hasDefaultValue(element) ? getTypeWithFacts(elementType, TypeFacts.NEUndefined) : elementType;
                    const type = getFlowTypeOfDestructuring(element, assignedType);
                    return checkDestructuringAssignment(element, type, checkMode);
                }
                return checkDestructuringAssignment(element, elementType, checkMode);
            }
            if (elementIndex < elements.length - 1) {
                error(element, ts.Diagnostics.A_rest_element_must_be_last_in_a_destructuring_pattern);
            }
            else {
                const restExpression = (element as ts.SpreadElement).expression;
                if (restExpression.kind === ts.SyntaxKind.BinaryExpression && (restExpression as ts.BinaryExpression).operatorToken.kind === ts.SyntaxKind.EqualsToken) {
                    error((restExpression as ts.BinaryExpression).operatorToken, ts.Diagnostics.A_rest_element_cannot_have_an_initializer);
                }
                else {
                    checkGrammarForDisallowedTrailingComma(node.elements, ts.Diagnostics.A_rest_parameter_or_binding_pattern_may_not_have_a_trailing_comma);
                    const type = everyType(sourceType, isTupleType) ?
                        mapType(sourceType, t => sliceTupleType(t as ts.TupleTypeReference, elementIndex)) :
                        createArrayType(elementType);
                    return checkDestructuringAssignment(restExpression, type, checkMode);
                }
            }
        }
        return undefined;
    }

    function checkDestructuringAssignment(exprOrAssignment: ts.Expression | ts.ShorthandPropertyAssignment, sourceType: ts.Type, checkMode?: CheckMode, rightIsThis?: boolean): ts.Type {
        let target: ts.Expression;
        if (exprOrAssignment.kind === ts.SyntaxKind.ShorthandPropertyAssignment) {
            const prop = exprOrAssignment as ts.ShorthandPropertyAssignment;
            if (prop.objectAssignmentInitializer) {
                // In strict null checking mode, if a default value of a non-undefined type is specified, remove
                // undefined from the final type.
                if (strictNullChecks &&
                    !(getTypeFacts(checkExpression(prop.objectAssignmentInitializer)) & TypeFacts.IsUndefined)) {
                    sourceType = getTypeWithFacts(sourceType, TypeFacts.NEUndefined);
                }
                checkBinaryLikeExpression(prop.name, prop.equalsToken!, prop.objectAssignmentInitializer, checkMode);
            }
            target = (exprOrAssignment as ts.ShorthandPropertyAssignment).name;
        }
        else {
            target = exprOrAssignment;
        }

        if (target.kind === ts.SyntaxKind.BinaryExpression && (target as ts.BinaryExpression).operatorToken.kind === ts.SyntaxKind.EqualsToken) {
            checkBinaryExpression(target as ts.BinaryExpression, checkMode);
            target = (target as ts.BinaryExpression).left;
            // A default value is specified, so remove undefined from the final type.
            if (strictNullChecks) {
                sourceType = getTypeWithFacts(sourceType, TypeFacts.NEUndefined);
            }
        }
        if (target.kind === ts.SyntaxKind.ObjectLiteralExpression) {
            return checkObjectLiteralAssignment(target as ts.ObjectLiteralExpression, sourceType, rightIsThis);
        }
        if (target.kind === ts.SyntaxKind.ArrayLiteralExpression) {
            return checkArrayLiteralAssignment(target as ts.ArrayLiteralExpression, sourceType, checkMode);
        }
        return checkReferenceAssignment(target, sourceType, checkMode);
    }

    function checkReferenceAssignment(target: ts.Expression, sourceType: ts.Type, checkMode?: CheckMode): ts.Type {
        const targetType = checkExpression(target, checkMode);
        const error = target.parent.kind === ts.SyntaxKind.SpreadAssignment ?
            ts.Diagnostics.The_target_of_an_object_rest_assignment_must_be_a_variable_or_a_property_access :
            ts.Diagnostics.The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access;
        const optionalError = target.parent.kind === ts.SyntaxKind.SpreadAssignment ?
            ts.Diagnostics.The_target_of_an_object_rest_assignment_may_not_be_an_optional_property_access :
            ts.Diagnostics.The_left_hand_side_of_an_assignment_expression_may_not_be_an_optional_property_access;
        if (checkReferenceExpression(target, error, optionalError)) {
            checkTypeAssignableToAndOptionallyElaborate(sourceType, targetType, target, target);
        }
        if (ts.isPrivateIdentifierPropertyAccessExpression(target)) {
            checkExternalEmitHelpers(target.parent, ts.ExternalEmitHelpers.ClassPrivateFieldSet);
        }
        return sourceType;
    }

    /**
     * This is a *shallow* check: An expression is side-effect-free if the
     * evaluation of the expression *itself* cannot produce side effects.
     * For example, x++ / 3 is side-effect free because the / operator
     * does not have side effects.
     * The intent is to "smell test" an expression for correctness in positions where
     * its value is discarded (e.g. the left side of the comma operator).
     */
    function isSideEffectFree(node: ts.Node): boolean {
        node = ts.skipParentheses(node);
        switch (node.kind) {
            case ts.SyntaxKind.Identifier:
            case ts.SyntaxKind.StringLiteral:
            case ts.SyntaxKind.RegularExpressionLiteral:
            case ts.SyntaxKind.TaggedTemplateExpression:
            case ts.SyntaxKind.TemplateExpression:
            case ts.SyntaxKind.NoSubstitutionTemplateLiteral:
            case ts.SyntaxKind.NumericLiteral:
            case ts.SyntaxKind.BigIntLiteral:
            case ts.SyntaxKind.TrueKeyword:
            case ts.SyntaxKind.FalseKeyword:
            case ts.SyntaxKind.NullKeyword:
            case ts.SyntaxKind.UndefinedKeyword:
            case ts.SyntaxKind.FunctionExpression:
            case ts.SyntaxKind.ClassExpression:
            case ts.SyntaxKind.ArrowFunction:
            case ts.SyntaxKind.ArrayLiteralExpression:
            case ts.SyntaxKind.ObjectLiteralExpression:
            case ts.SyntaxKind.TypeOfExpression:
            case ts.SyntaxKind.NonNullExpression:
            case ts.SyntaxKind.JsxSelfClosingElement:
            case ts.SyntaxKind.JsxElement:
                return true;

            case ts.SyntaxKind.ConditionalExpression:
                return isSideEffectFree((node as ts.ConditionalExpression).whenTrue) &&
                    isSideEffectFree((node as ts.ConditionalExpression).whenFalse);

            case ts.SyntaxKind.BinaryExpression:
                if (ts.isAssignmentOperator((node as ts.BinaryExpression).operatorToken.kind)) {
                    return false;
                }
                return isSideEffectFree((node as ts.BinaryExpression).left) &&
                        isSideEffectFree((node as ts.BinaryExpression).right);

            case ts.SyntaxKind.PrefixUnaryExpression:
            case ts.SyntaxKind.PostfixUnaryExpression:
                // Unary operators ~, !, +, and - have no side effects.
                // The rest do.
                switch ((node as ts.PrefixUnaryExpression).operator) {
                    case ts.SyntaxKind.ExclamationToken:
                    case ts.SyntaxKind.PlusToken:
                    case ts.SyntaxKind.MinusToken:
                    case ts.SyntaxKind.TildeToken:
                        return true;
                }
                return false;

            // Some forms listed here for clarity
            case ts.SyntaxKind.VoidExpression: // Explicit opt-out
            case ts.SyntaxKind.TypeAssertionExpression: // Not SEF, but can produce useful type warnings
            case ts.SyntaxKind.AsExpression: // Not SEF, but can produce useful type warnings
            default:
                return false;
        }
    }

    function isTypeEqualityComparableTo(source: ts.Type, target: ts.Type) {
        return (target.flags & ts.TypeFlags.Nullable) !== 0 || isTypeComparableTo(source, target);
    }

    function createCheckBinaryExpression() {
        interface WorkArea {
            readonly checkMode: CheckMode | undefined;
            skip: boolean;
            stackIndex: number;
            /**
             * Holds the types from the left-side of an expression from [0..stackIndex].
             * Holds the type of the result at stackIndex+1. This allows us to reuse existing stack entries
             * and avoid storing an extra property on the object (i.e., `lastResult`).
             */
            typeStack: (ts.Type | undefined)[];
        }

        const trampoline = ts.createBinaryExpressionTrampoline(onEnter, onLeft, onOperator, onRight, onExit, foldState);

        return (node: ts.BinaryExpression, checkMode: CheckMode | undefined) => {
            const result = trampoline(node, checkMode);
            ts.Debug.assertIsDefined(result);
            return result;
        };

        function onEnter(node: ts.BinaryExpression, state: WorkArea | undefined, checkMode: CheckMode | undefined) {
            if (state) {
                state.stackIndex++;
                state.skip = false;
                setLeftType(state, /*type*/ undefined);
                setLastResult(state, /*type*/ undefined);
            }
            else {
                state = {
                    checkMode,
                    skip: false,
                    stackIndex: 0,
                    typeStack: [undefined, undefined],
                };
            }

            if (ts.isInJSFile(node) && ts.getAssignedExpandoInitializer(node)) {
                state.skip = true;
                setLastResult(state, checkExpression(node.right, checkMode));
                return state;
            }

            checkGrammarNullishCoalesceWithLogicalExpression(node);

            const operator = node.operatorToken.kind;
            if (operator === ts.SyntaxKind.EqualsToken && (node.left.kind === ts.SyntaxKind.ObjectLiteralExpression || node.left.kind === ts.SyntaxKind.ArrayLiteralExpression)) {
                state.skip = true;
                setLastResult(state, checkDestructuringAssignment(node.left, checkExpression(node.right, checkMode), checkMode, node.right.kind === ts.SyntaxKind.ThisKeyword));
                return state;
            }

            return state;
        }

        function onLeft(left: ts.Expression, state: WorkArea, _node: ts.BinaryExpression) {
            if (!state.skip) {
                return maybeCheckExpression(state, left);
            }
        }

        function onOperator(operatorToken: ts.BinaryOperatorToken, state: WorkArea, node: ts.BinaryExpression) {
            if (!state.skip) {
                const leftType = getLastResult(state);
                ts.Debug.assertIsDefined(leftType);
                setLeftType(state, leftType);
                setLastResult(state, /*type*/ undefined);
                const operator = operatorToken.kind;
                if (operator === ts.SyntaxKind.AmpersandAmpersandToken || operator === ts.SyntaxKind.BarBarToken || operator === ts.SyntaxKind.QuestionQuestionToken) {
                    if (operator === ts.SyntaxKind.AmpersandAmpersandToken) {
                        let parent = node.parent;
                        while (parent.kind === ts.SyntaxKind.ParenthesizedExpression
                            || ts.isBinaryExpression(parent) && (parent.operatorToken.kind === ts.SyntaxKind.AmpersandAmpersandToken || parent.operatorToken.kind === ts.SyntaxKind.BarBarToken)) {
                            parent = parent.parent;
                        }
                        checkTestingKnownTruthyCallableOrAwaitableType(node.left, leftType, ts.isIfStatement(parent) ? parent.thenStatement : undefined);
                    }
                    checkTruthinessOfType(leftType, node.left);
                }
            }
        }

        function onRight(right: ts.Expression, state: WorkArea, _node: ts.BinaryExpression) {
            if (!state.skip) {
                return maybeCheckExpression(state, right);
            }
        }

        function onExit(node: ts.BinaryExpression, state: WorkArea): ts.Type | undefined {
            let result: ts.Type | undefined;
            if (state.skip) {
                result = getLastResult(state);
            }
            else {
                const leftType = getLeftType(state);
                ts.Debug.assertIsDefined(leftType);

                const rightType = getLastResult(state);
                ts.Debug.assertIsDefined(rightType);

                result = checkBinaryLikeExpressionWorker(node.left, node.operatorToken, node.right, leftType, rightType, node);
            }

            state.skip = false;
            setLeftType(state, /*type*/ undefined);
            setLastResult(state, /*type*/ undefined);
            state.stackIndex--;
            return result;
        }

        function foldState(state: WorkArea, result: ts.Type | undefined, _side: "left" | "right") {
            setLastResult(state, result);
            return state;
        }

        function maybeCheckExpression(state: WorkArea, node: ts.Expression): ts.BinaryExpression | undefined {
            if (ts.isBinaryExpression(node)) {
                return node;
            }
            setLastResult(state, checkExpression(node, state.checkMode));
        }

        function getLeftType(state: WorkArea) {
            return state.typeStack[state.stackIndex];
        }

        function setLeftType(state: WorkArea, type: ts.Type | undefined) {
            state.typeStack[state.stackIndex] = type;
        }

        function getLastResult(state: WorkArea) {
            return state.typeStack[state.stackIndex + 1];
        }

        function setLastResult(state: WorkArea, type: ts.Type | undefined) {
            // To reduce overhead, reuse the next stack entry to store the
            // last result. This avoids the overhead of an additional property
            // on `WorkArea` and reuses empty stack entries as we walk back up
            // the stack.
            state.typeStack[state.stackIndex + 1] = type;
        }
    }

    function checkGrammarNullishCoalesceWithLogicalExpression(node: ts.BinaryExpression) {
        const { left, operatorToken, right } = node;
        if (operatorToken.kind === ts.SyntaxKind.QuestionQuestionToken) {
            if (ts.isBinaryExpression(left) && (left.operatorToken.kind === ts.SyntaxKind.BarBarToken || left.operatorToken.kind === ts.SyntaxKind.AmpersandAmpersandToken)) {
                grammarErrorOnNode(left, ts.Diagnostics._0_and_1_operations_cannot_be_mixed_without_parentheses, ts.tokenToString(left.operatorToken.kind), ts.tokenToString(operatorToken.kind));
            }
            if (ts.isBinaryExpression(right) && (right.operatorToken.kind === ts.SyntaxKind.BarBarToken || right.operatorToken.kind === ts.SyntaxKind.AmpersandAmpersandToken)) {
                grammarErrorOnNode(right, ts.Diagnostics._0_and_1_operations_cannot_be_mixed_without_parentheses, ts.tokenToString(right.operatorToken.kind), ts.tokenToString(operatorToken.kind));
            }
        }
    }

    // Note that this and `checkBinaryExpression` above should behave mostly the same, except this elides some
    // expression-wide checks and does not use a work stack to fold nested binary expressions into the same callstack frame
    function checkBinaryLikeExpression(left: ts.Expression, operatorToken: ts.Node, right: ts.Expression, checkMode?: CheckMode, errorNode?: ts.Node): ts.Type {
        const operator = operatorToken.kind;
        if (operator === ts.SyntaxKind.EqualsToken && (left.kind === ts.SyntaxKind.ObjectLiteralExpression || left.kind === ts.SyntaxKind.ArrayLiteralExpression)) {
            return checkDestructuringAssignment(left, checkExpression(right, checkMode), checkMode, right.kind === ts.SyntaxKind.ThisKeyword);
        }
        let leftType: ts.Type;
        if (operator === ts.SyntaxKind.AmpersandAmpersandToken || operator === ts.SyntaxKind.BarBarToken || operator === ts.SyntaxKind.QuestionQuestionToken) {
            leftType = checkTruthinessExpression(left, checkMode);
        }
        else {
            leftType = checkExpression(left, checkMode);
        }

        const rightType = checkExpression(right, checkMode);
        return checkBinaryLikeExpressionWorker(left, operatorToken, right, leftType, rightType, errorNode);
    }

    function checkBinaryLikeExpressionWorker(
        left: ts.Expression,
        operatorToken: ts.Node,
        right: ts.Expression,
        leftType: ts.Type,
        rightType: ts.Type,
        errorNode?: ts.Node
    ): ts.Type {
        const operator = operatorToken.kind;
        switch (operator) {
            case ts.SyntaxKind.AsteriskToken:
            case ts.SyntaxKind.AsteriskAsteriskToken:
            case ts.SyntaxKind.AsteriskEqualsToken:
            case ts.SyntaxKind.AsteriskAsteriskEqualsToken:
            case ts.SyntaxKind.SlashToken:
            case ts.SyntaxKind.SlashEqualsToken:
            case ts.SyntaxKind.PercentToken:
            case ts.SyntaxKind.PercentEqualsToken:
            case ts.SyntaxKind.MinusToken:
            case ts.SyntaxKind.MinusEqualsToken:
            case ts.SyntaxKind.LessThanLessThanToken:
            case ts.SyntaxKind.LessThanLessThanEqualsToken:
            case ts.SyntaxKind.GreaterThanGreaterThanToken:
            case ts.SyntaxKind.GreaterThanGreaterThanEqualsToken:
            case ts.SyntaxKind.GreaterThanGreaterThanGreaterThanToken:
            case ts.SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken:
            case ts.SyntaxKind.BarToken:
            case ts.SyntaxKind.BarEqualsToken:
            case ts.SyntaxKind.CaretToken:
            case ts.SyntaxKind.CaretEqualsToken:
            case ts.SyntaxKind.AmpersandToken:
            case ts.SyntaxKind.AmpersandEqualsToken:
                if (leftType === silentNeverType || rightType === silentNeverType) {
                    return silentNeverType;
                }

                leftType = checkNonNullType(leftType, left);
                rightType = checkNonNullType(rightType, right);

                let suggestedOperator: ts.SyntaxKind | undefined;
                // if a user tries to apply a bitwise operator to 2 boolean operands
                // try and return them a helpful suggestion
                if ((leftType.flags & ts.TypeFlags.BooleanLike) &&
                    (rightType.flags & ts.TypeFlags.BooleanLike) &&
                    (suggestedOperator = getSuggestedBooleanOperator(operatorToken.kind)) !== undefined) {
                    error(errorNode || operatorToken, ts.Diagnostics.The_0_operator_is_not_allowed_for_boolean_types_Consider_using_1_instead, ts.tokenToString(operatorToken.kind), ts.tokenToString(suggestedOperator));
                    return numberType;
                }
                else {
                    // otherwise just check each operand separately and report errors as normal
                    const leftOk = checkArithmeticOperandType(left, leftType, ts.Diagnostics.The_left_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_bigint_or_an_enum_type, /*isAwaitValid*/ true);
                    const rightOk = checkArithmeticOperandType(right, rightType, ts.Diagnostics.The_right_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_bigint_or_an_enum_type, /*isAwaitValid*/ true);
                    let resultType: ts.Type;
                    // If both are any or unknown, allow operation; assume it will resolve to number
                    if ((isTypeAssignableToKind(leftType, ts.TypeFlags.AnyOrUnknown) && isTypeAssignableToKind(rightType, ts.TypeFlags.AnyOrUnknown)) ||
                        // Or, if neither could be bigint, implicit coercion results in a number result
                        !(maybeTypeOfKind(leftType, ts.TypeFlags.BigIntLike) || maybeTypeOfKind(rightType, ts.TypeFlags.BigIntLike))
                    ) {
                        resultType = numberType;
                    }
                    // At least one is assignable to bigint, so check that both are
                    else if (bothAreBigIntLike(leftType, rightType)) {
                        switch (operator) {
                            case ts.SyntaxKind.GreaterThanGreaterThanGreaterThanToken:
                            case ts.SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken:
                                reportOperatorError();
                                break;
                            case ts.SyntaxKind.AsteriskAsteriskToken:
                            case ts.SyntaxKind.AsteriskAsteriskEqualsToken:
                                if (languageVersion < ts.ScriptTarget.ES2016) {
                                    error(errorNode, ts.Diagnostics.Exponentiation_cannot_be_performed_on_bigint_values_unless_the_target_option_is_set_to_es2016_or_later);
                                }
                        }
                        resultType = bigintType;
                    }
                    // Exactly one of leftType/rightType is assignable to bigint
                    else {
                        reportOperatorError(bothAreBigIntLike);
                        resultType = errorType;
                    }
                    if (leftOk && rightOk) {
                        checkAssignmentOperator(resultType);
                    }
                    return resultType;
                }
            case ts.SyntaxKind.PlusToken:
            case ts.SyntaxKind.PlusEqualsToken:
                if (leftType === silentNeverType || rightType === silentNeverType) {
                    return silentNeverType;
                }

                if (!isTypeAssignableToKind(leftType, ts.TypeFlags.StringLike) && !isTypeAssignableToKind(rightType, ts.TypeFlags.StringLike)) {
                    leftType = checkNonNullType(leftType, left);
                    rightType = checkNonNullType(rightType, right);
                }

                let resultType: ts.Type | undefined;
                if (isTypeAssignableToKind(leftType, ts.TypeFlags.NumberLike, /*strict*/ true) && isTypeAssignableToKind(rightType, ts.TypeFlags.NumberLike, /*strict*/ true)) {
                    // Operands of an enum type are treated as having the primitive type Number.
                    // If both operands are of the Number primitive type, the result is of the Number primitive type.
                    resultType = numberType;
                }
                else if (isTypeAssignableToKind(leftType, ts.TypeFlags.BigIntLike, /*strict*/ true) && isTypeAssignableToKind(rightType, ts.TypeFlags.BigIntLike, /*strict*/ true)) {
                    // If both operands are of the BigInt primitive type, the result is of the BigInt primitive type.
                    resultType = bigintType;
                }
                else if (isTypeAssignableToKind(leftType, ts.TypeFlags.StringLike, /*strict*/ true) || isTypeAssignableToKind(rightType, ts.TypeFlags.StringLike, /*strict*/ true)) {
                    // If one or both operands are of the String primitive type, the result is of the String primitive type.
                    resultType = stringType;
                }
                else if (isTypeAny(leftType) || isTypeAny(rightType)) {
                    // Otherwise, the result is of type Any.
                    // NOTE: unknown type here denotes error type. Old compiler treated this case as any type so do we.
                    resultType = isErrorType(leftType) || isErrorType(rightType) ? errorType : anyType;
                }

                // Symbols are not allowed at all in arithmetic expressions
                if (resultType && !checkForDisallowedESSymbolOperand(operator)) {
                    return resultType;
                }

                if (!resultType) {
                    // Types that have a reasonably good chance of being a valid operand type.
                    // If both types have an awaited type of one of these, we'll assume the user
                    // might be missing an await without doing an exhaustive check that inserting
                    // await(s) will actually be a completely valid binary expression.
                    const closeEnoughKind = ts.TypeFlags.NumberLike | ts.TypeFlags.BigIntLike | ts.TypeFlags.StringLike | ts.TypeFlags.AnyOrUnknown;
                    reportOperatorError((left, right) =>
                        isTypeAssignableToKind(left, closeEnoughKind) &&
                        isTypeAssignableToKind(right, closeEnoughKind));
                    return anyType;
                }

                if (operator === ts.SyntaxKind.PlusEqualsToken) {
                    checkAssignmentOperator(resultType);
                }
                return resultType;
            case ts.SyntaxKind.LessThanToken:
            case ts.SyntaxKind.GreaterThanToken:
            case ts.SyntaxKind.LessThanEqualsToken:
            case ts.SyntaxKind.GreaterThanEqualsToken:
                if (checkForDisallowedESSymbolOperand(operator)) {
                    leftType = getBaseTypeOfLiteralType(checkNonNullType(leftType, left));
                    rightType = getBaseTypeOfLiteralType(checkNonNullType(rightType, right));
                    reportOperatorErrorUnless((left, right) =>
                        isTypeComparableTo(left, right) || isTypeComparableTo(right, left) || (
                            isTypeAssignableTo(left, numberOrBigIntType) && isTypeAssignableTo(right, numberOrBigIntType)));
                }
                return booleanType;
            case ts.SyntaxKind.EqualsEqualsToken:
            case ts.SyntaxKind.ExclamationEqualsToken:
            case ts.SyntaxKind.EqualsEqualsEqualsToken:
            case ts.SyntaxKind.ExclamationEqualsEqualsToken:
                if (ts.isLiteralExpressionOfObject(left) || ts.isLiteralExpressionOfObject(right)) {
                    const eqType = operator === ts.SyntaxKind.EqualsEqualsToken || operator === ts.SyntaxKind.EqualsEqualsEqualsToken;
                    error(errorNode, ts.Diagnostics.This_condition_will_always_return_0_since_JavaScript_compares_objects_by_reference_not_value, eqType ? "false" : "true");
                }
                checkNaNEquality(errorNode, operator, left, right);
                reportOperatorErrorUnless((left, right) => isTypeEqualityComparableTo(left, right) || isTypeEqualityComparableTo(right, left));
                return booleanType;

            case ts.SyntaxKind.InstanceOfKeyword:
                return checkInstanceOfExpression(left, right, leftType, rightType);
            case ts.SyntaxKind.InKeyword:
                return checkInExpression(left, right, leftType, rightType);
            case ts.SyntaxKind.AmpersandAmpersandToken:
            case ts.SyntaxKind.AmpersandAmpersandEqualsToken: {
                const resultType = getTypeFacts(leftType) & TypeFacts.Truthy ?
                    getUnionType([extractDefinitelyFalsyTypes(strictNullChecks ? leftType : getBaseTypeOfLiteralType(rightType)), rightType]) :
                    leftType;
                if (operator === ts.SyntaxKind.AmpersandAmpersandEqualsToken) {
                    checkAssignmentOperator(rightType);
                }
                return resultType;
            }
            case ts.SyntaxKind.BarBarToken:
            case ts.SyntaxKind.BarBarEqualsToken: {
                const resultType = getTypeFacts(leftType) & TypeFacts.Falsy ?
                    getUnionType([getNonNullableType(removeDefinitelyFalsyTypes(leftType)), rightType], ts.UnionReduction.Subtype) :
                    leftType;
                if (operator === ts.SyntaxKind.BarBarEqualsToken) {
                    checkAssignmentOperator(rightType);
                }
                return resultType;
            }
            case ts.SyntaxKind.QuestionQuestionToken:
            case ts.SyntaxKind.QuestionQuestionEqualsToken: {
                const resultType = getTypeFacts(leftType) & TypeFacts.EQUndefinedOrNull ?
                    getUnionType([getNonNullableType(leftType), rightType], ts.UnionReduction.Subtype) :
                    leftType;
                if (operator === ts.SyntaxKind.QuestionQuestionEqualsToken) {
                    checkAssignmentOperator(rightType);
                }
                return resultType;
            }
            case ts.SyntaxKind.EqualsToken:
                const declKind = ts.isBinaryExpression(left.parent) ? ts.getAssignmentDeclarationKind(left.parent) : ts.AssignmentDeclarationKind.None;
                checkAssignmentDeclaration(declKind, rightType);
                if (isAssignmentDeclaration(declKind)) {
                    if (!(rightType.flags & ts.TypeFlags.Object) ||
                        declKind !== ts.AssignmentDeclarationKind.ModuleExports &&
                        declKind !== ts.AssignmentDeclarationKind.Prototype &&
                        !isEmptyObjectType(rightType) &&
                        !isFunctionObjectType(rightType as ts.ObjectType) &&
                        !(ts.getObjectFlags(rightType) & ts.ObjectFlags.Class)) {
                        // don't check assignability of module.exports=, C.prototype=, or expando types because they will necessarily be incomplete
                        checkAssignmentOperator(rightType);
                    }
                    return leftType;
                }
                else {
                    checkAssignmentOperator(rightType);
                    return getRegularTypeOfObjectLiteral(rightType);
                }
            case ts.SyntaxKind.CommaToken:
                if (!compilerOptions.allowUnreachableCode && isSideEffectFree(left) && !isEvalNode(right)) {
                    const sf = ts.getSourceFileOfNode(left);
                    const sourceText = sf.text;
                    const start = ts.skipTrivia(sourceText, left.pos);
                    const isInDiag2657 = sf.parseDiagnostics.some(diag => {
                        if (diag.code !== ts.Diagnostics.JSX_expressions_must_have_one_parent_element.code) return false;
                        return ts.textSpanContainsPosition(diag, start);
                    });
                    if (!isInDiag2657) error(left, ts.Diagnostics.Left_side_of_comma_operator_is_unused_and_has_no_side_effects);
                }
                return rightType;

            default:
                return ts.Debug.fail();
        }

        function bothAreBigIntLike(left: ts.Type, right: ts.Type): boolean {
            return isTypeAssignableToKind(left, ts.TypeFlags.BigIntLike) && isTypeAssignableToKind(right, ts.TypeFlags.BigIntLike);
        }

        function checkAssignmentDeclaration(kind: ts.AssignmentDeclarationKind, rightType: ts.Type) {
            if (kind === ts.AssignmentDeclarationKind.ModuleExports) {
                for (const prop of getPropertiesOfObjectType(rightType)) {
                    const propType = getTypeOfSymbol(prop);
                    if (propType.symbol && propType.symbol.flags & ts.SymbolFlags.Class) {
                        const name = prop.escapedName;
                        const symbol = resolveName(prop.valueDeclaration, name, ts.SymbolFlags.Type, undefined, name, /*isUse*/ false);
                        if (symbol?.declarations && symbol.declarations.some(ts.isJSDocTypedefTag)) {
                            addDuplicateDeclarationErrorsForSymbols(symbol, ts.Diagnostics.Duplicate_identifier_0, ts.unescapeLeadingUnderscores(name), prop);
                            addDuplicateDeclarationErrorsForSymbols(prop, ts.Diagnostics.Duplicate_identifier_0, ts.unescapeLeadingUnderscores(name), symbol);
                        }
                    }
                }
            }
        }

        function isEvalNode(node: ts.Expression) {
            return node.kind === ts.SyntaxKind.Identifier && (node as ts.Identifier).escapedText === "eval";
        }

        // Return true if there was no error, false if there was an error.
        function checkForDisallowedESSymbolOperand(operator: ts.SyntaxKind): boolean {
            const offendingSymbolOperand =
                maybeTypeOfKindConsideringBaseConstraint(leftType, ts.TypeFlags.ESSymbolLike) ? left :
                maybeTypeOfKindConsideringBaseConstraint(rightType, ts.TypeFlags.ESSymbolLike) ? right :
                undefined;

            if (offendingSymbolOperand) {
                error(offendingSymbolOperand, ts.Diagnostics.The_0_operator_cannot_be_applied_to_type_symbol, ts.tokenToString(operator));
                return false;
            }

            return true;
        }

        function getSuggestedBooleanOperator(operator: ts.SyntaxKind): ts.SyntaxKind | undefined {
            switch (operator) {
                case ts.SyntaxKind.BarToken:
                case ts.SyntaxKind.BarEqualsToken:
                    return ts.SyntaxKind.BarBarToken;
                case ts.SyntaxKind.CaretToken:
                case ts.SyntaxKind.CaretEqualsToken:
                    return ts.SyntaxKind.ExclamationEqualsEqualsToken;
                case ts.SyntaxKind.AmpersandToken:
                case ts.SyntaxKind.AmpersandEqualsToken:
                    return ts.SyntaxKind.AmpersandAmpersandToken;
                default:
                    return undefined;
            }
        }

        function checkAssignmentOperator(valueType: ts.Type): void {
            if (ts.isAssignmentOperator(operator)) {
                addLazyDiagnostic(checkAssignmentOperatorWorker);
            }

            function checkAssignmentOperatorWorker() {
                // TypeScript 1.0 spec (April 2014): 4.17
                // An assignment of the form
                //    VarExpr = ValueExpr
                // requires VarExpr to be classified as a reference
                // A compound assignment furthermore requires VarExpr to be classified as a reference (section 4.1)
                // and the type of the non-compound operation to be assignable to the type of VarExpr.

                if (checkReferenceExpression(left,
                    ts.Diagnostics.The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access,
                    ts.Diagnostics.The_left_hand_side_of_an_assignment_expression_may_not_be_an_optional_property_access)
                    && (!ts.isIdentifier(left) || ts.unescapeLeadingUnderscores(left.escapedText) !== "exports")) {

                    let headMessage: ts.DiagnosticMessage | undefined;
                    if (exactOptionalPropertyTypes && ts.isPropertyAccessExpression(left) && maybeTypeOfKind(valueType, ts.TypeFlags.Undefined)) {
                        const target = getTypeOfPropertyOfType(getTypeOfExpression(left.expression), left.name.escapedText);
                        if (isExactOptionalPropertyMismatch(valueType, target)) {
                            headMessage = ts.Diagnostics.Type_0_is_not_assignable_to_type_1_with_exactOptionalPropertyTypes_Colon_true_Consider_adding_undefined_to_the_type_of_the_target;
                        }
                    }
                    // to avoid cascading errors check assignability only if 'isReference' check succeeded and no errors were reported
                    checkTypeAssignableToAndOptionallyElaborate(valueType, leftType, left, right, headMessage);
                }
            }
        }

        function isAssignmentDeclaration(kind: ts.AssignmentDeclarationKind) {
            switch (kind) {
                case ts.AssignmentDeclarationKind.ModuleExports:
                    return true;
                case ts.AssignmentDeclarationKind.ExportsProperty:
                case ts.AssignmentDeclarationKind.Property:
                case ts.AssignmentDeclarationKind.Prototype:
                case ts.AssignmentDeclarationKind.PrototypeProperty:
                case ts.AssignmentDeclarationKind.ThisProperty:
                    const symbol = getSymbolOfNode(left);
                    const init = ts.getAssignedExpandoInitializer(right);
                    return !!init && ts.isObjectLiteralExpression(init) &&
                        !!symbol?.exports?.size;
                default:
                    return false;
            }
        }

        /**
         * Returns true if an error is reported
         */
        function reportOperatorErrorUnless(typesAreCompatible: (left: ts.Type, right: ts.Type) => boolean): boolean {
            if (!typesAreCompatible(leftType, rightType)) {
                reportOperatorError(typesAreCompatible);
                return true;
            }
            return false;
        }

        function reportOperatorError(isRelated?: (left: ts.Type, right: ts.Type) => boolean) {
            let wouldWorkWithAwait = false;
            const errNode = errorNode || operatorToken;
            if (isRelated) {
                const awaitedLeftType = getAwaitedTypeNoAlias(leftType);
                const awaitedRightType = getAwaitedTypeNoAlias(rightType);
                wouldWorkWithAwait = !(awaitedLeftType === leftType && awaitedRightType === rightType)
                    && !!(awaitedLeftType && awaitedRightType)
                    && isRelated(awaitedLeftType, awaitedRightType);
            }

            let effectiveLeft = leftType;
            let effectiveRight = rightType;
            if (!wouldWorkWithAwait && isRelated) {
                [effectiveLeft, effectiveRight] = getBaseTypesIfUnrelated(leftType, rightType, isRelated);
            }
            const [leftStr, rightStr] = getTypeNamesForErrorDisplay(effectiveLeft, effectiveRight);
            if (!tryGiveBetterPrimaryError(errNode, wouldWorkWithAwait, leftStr, rightStr)) {
                errorAndMaybeSuggestAwait(
                    errNode,
                    wouldWorkWithAwait,
                    ts.Diagnostics.Operator_0_cannot_be_applied_to_types_1_and_2,
                    ts.tokenToString(operatorToken.kind),
                    leftStr,
                    rightStr,
                );
            }
        }

        function tryGiveBetterPrimaryError(errNode: ts.Node, maybeMissingAwait: boolean, leftStr: string, rightStr: string) {
            switch (operatorToken.kind) {
                case ts.SyntaxKind.EqualsEqualsEqualsToken:
                case ts.SyntaxKind.EqualsEqualsToken:
                case ts.SyntaxKind.ExclamationEqualsEqualsToken:
                case ts.SyntaxKind.ExclamationEqualsToken:
                    return errorAndMaybeSuggestAwait(
                        errNode,
                        maybeMissingAwait,
                        ts.Diagnostics.This_comparison_appears_to_be_unintentional_because_the_types_0_and_1_have_no_overlap,
                        leftStr, rightStr);
                default:
                    return undefined;
            }
        }

        function checkNaNEquality(errorNode: ts.Node | undefined, operator: ts.SyntaxKind, left: ts.Expression, right: ts.Expression) {
            const isLeftNaN = isGlobalNaN(ts.skipParentheses(left));
            const isRightNaN = isGlobalNaN(ts.skipParentheses(right));
            if (isLeftNaN || isRightNaN) {
                const err = error(errorNode, ts.Diagnostics.This_condition_will_always_return_0,
                    ts.tokenToString(operator === ts.SyntaxKind.EqualsEqualsEqualsToken || operator === ts.SyntaxKind.EqualsEqualsToken ? ts.SyntaxKind.FalseKeyword : ts.SyntaxKind.TrueKeyword));
                if (isLeftNaN && isRightNaN) return;
                const operatorString = operator === ts.SyntaxKind.ExclamationEqualsEqualsToken || operator === ts.SyntaxKind.ExclamationEqualsToken ? ts.tokenToString(ts.SyntaxKind.ExclamationToken) : "";
                const location = isLeftNaN ? right : left;
                const expression = ts.skipParentheses(location);
                ts.addRelatedInfo(err, ts.createDiagnosticForNode(location, ts.Diagnostics.Did_you_mean_0,
                    `${operatorString}Number.isNaN(${ts.isEntityNameExpression(expression) ? ts.entityNameToString(expression) : "..."})`));
            }
        }

        function isGlobalNaN(expr: ts.Expression): boolean {
            if (ts.isIdentifier(expr) && expr.escapedText === "NaN") {
                const globalNaNSymbol = getGlobalNaNSymbol();
                return !!globalNaNSymbol && globalNaNSymbol === getResolvedSymbol(expr);
            }
            return false;
        }
    }

    function getBaseTypesIfUnrelated(leftType: ts.Type, rightType: ts.Type, isRelated: (left: ts.Type, right: ts.Type) => boolean): [ts.Type, ts.Type] {
        let effectiveLeft = leftType;
        let effectiveRight = rightType;
        const leftBase = getBaseTypeOfLiteralType(leftType);
        const rightBase = getBaseTypeOfLiteralType(rightType);
        if (!isRelated(leftBase, rightBase)) {
            effectiveLeft = leftBase;
            effectiveRight = rightBase;
        }
        return [ effectiveLeft, effectiveRight ];
    }

    function checkYieldExpression(node: ts.YieldExpression): ts.Type {
        addLazyDiagnostic(checkYieldExpressionGrammar);

        const func = ts.getContainingFunction(node);
        if (!func) return anyType;
        const functionFlags = ts.getFunctionFlags(func);

        if (!(functionFlags & ts.FunctionFlags.Generator)) {
            // If the user's code is syntactically correct, the func should always have a star. After all, we are in a yield context.
            return anyType;
        }

        const isAsync = (functionFlags & ts.FunctionFlags.Async) !== 0;
        if (node.asteriskToken) {
            // Async generator functions prior to ESNext require the __await, __asyncDelegator,
            // and __asyncValues helpers
            if (isAsync && languageVersion < ts.ScriptTarget.ESNext) {
                checkExternalEmitHelpers(node, ts.ExternalEmitHelpers.AsyncDelegatorIncludes);
            }

            // Generator functions prior to ES2015 require the __values helper
            if (!isAsync && languageVersion < ts.ScriptTarget.ES2015 && compilerOptions.downlevelIteration) {
                checkExternalEmitHelpers(node, ts.ExternalEmitHelpers.Values);
            }
        }

        // There is no point in doing an assignability check if the function
        // has no explicit return type because the return type is directly computed
        // from the yield expressions.
        const returnType = getReturnTypeFromAnnotation(func);
        const iterationTypes = returnType && getIterationTypesOfGeneratorFunctionReturnType(returnType, isAsync);
        const signatureYieldType = iterationTypes && iterationTypes.yieldType || anyType;
        const signatureNextType = iterationTypes && iterationTypes.nextType || anyType;
        const resolvedSignatureNextType = isAsync ? getAwaitedType(signatureNextType) || anyType : signatureNextType;
        const yieldExpressionType = node.expression ? checkExpression(node.expression) : undefinedWideningType;
        const yieldedType = getYieldedTypeOfYieldExpression(node, yieldExpressionType, resolvedSignatureNextType, isAsync);
        if (returnType && yieldedType) {
            checkTypeAssignableToAndOptionallyElaborate(yieldedType, signatureYieldType, node.expression || node, node.expression);
        }

        if (node.asteriskToken) {
            const use = isAsync ? IterationUse.AsyncYieldStar : IterationUse.YieldStar;
            return getIterationTypeOfIterable(use, IterationTypeKind.Return, yieldExpressionType, node.expression)
                || anyType;
        }
        else if (returnType) {
            return getIterationTypeOfGeneratorFunctionReturnType(IterationTypeKind.Next, returnType, isAsync)
                || anyType;
        }
        let type = getContextualIterationType(IterationTypeKind.Next, func);
        if (!type) {
            type = anyType;
            addLazyDiagnostic(() => {
                if (noImplicitAny && !ts.expressionResultIsUnused(node)) {
                    const contextualType = getContextualType(node, /*contextFlags*/ undefined);
                    if (!contextualType || isTypeAny(contextualType)) {
                        error(node, ts.Diagnostics.yield_expression_implicitly_results_in_an_any_type_because_its_containing_generator_lacks_a_return_type_annotation);
                    }
                }
            });
        }
        return type;

        function checkYieldExpressionGrammar() {
            if (!(node.flags & ts.NodeFlags.YieldContext)) {
                grammarErrorOnFirstToken(node, ts.Diagnostics.A_yield_expression_is_only_allowed_in_a_generator_body);
            }

            if (isInParameterInitializerBeforeContainingFunction(node)) {
                error(node, ts.Diagnostics.yield_expressions_cannot_be_used_in_a_parameter_initializer);
            }
        }
    }

    function checkConditionalExpression(node: ts.ConditionalExpression, checkMode?: CheckMode): ts.Type {
        const type = checkTruthinessExpression(node.condition);
        checkTestingKnownTruthyCallableOrAwaitableType(node.condition, type, node.whenTrue);
        const type1 = checkExpression(node.whenTrue, checkMode);
        const type2 = checkExpression(node.whenFalse, checkMode);
        return getUnionType([type1, type2], ts.UnionReduction.Subtype);
    }

    function isTemplateLiteralContext(node: ts.Node): boolean {
        const parent = node.parent;
        return ts.isParenthesizedExpression(parent) && isTemplateLiteralContext(parent) ||
            ts.isElementAccessExpression(parent) && parent.argumentExpression === node;
    }

    function checkTemplateExpression(node: ts.TemplateExpression): ts.Type {
        const texts = [node.head.text];
        const types = [];
        for (const span of node.templateSpans) {
            const type = checkExpression(span.expression);
            if (maybeTypeOfKindConsideringBaseConstraint(type, ts.TypeFlags.ESSymbolLike)) {
                error(span.expression, ts.Diagnostics.Implicit_conversion_of_a_symbol_to_a_string_will_fail_at_runtime_Consider_wrapping_this_expression_in_String);
            }
            texts.push(span.literal.text);
            types.push(isTypeAssignableTo(type, templateConstraintType) ? type : stringType);
        }
        return isConstContext(node) || isTemplateLiteralContext(node) || someType(getContextualType(node, /*contextFlags*/ undefined) || unknownType, isTemplateLiteralContextualType) ? getTemplateLiteralType(texts, types) : stringType;
    }

    function isTemplateLiteralContextualType(type: ts.Type): boolean {
        return !!(type.flags & (ts.TypeFlags.StringLiteral | ts.TypeFlags.TemplateLiteral) ||
            type.flags & ts.TypeFlags.InstantiableNonPrimitive && maybeTypeOfKind(getBaseConstraintOfType(type) || unknownType, ts.TypeFlags.StringLike));
    }

    function getContextNode(node: ts.Expression): ts.Node {
        if (node.kind === ts.SyntaxKind.JsxAttributes && !ts.isJsxSelfClosingElement(node.parent)) {
            return node.parent.parent; // Needs to be the root JsxElement, so it encompasses the attributes _and_ the children (which are essentially part of the attributes)
        }
        return node;
    }

    function checkExpressionWithContextualType(node: ts.Expression, contextualType: ts.Type, inferenceContext: ts.InferenceContext | undefined, checkMode: CheckMode): ts.Type {
        const context = getContextNode(node);
        const saveContextualType = context.contextualType;
        const saveInferenceContext = context.inferenceContext;
        try {
            context.contextualType = contextualType;
            context.inferenceContext = inferenceContext;
            const type = checkExpression(node, checkMode | CheckMode.Contextual | (inferenceContext ? CheckMode.Inferential : 0));
            // In CheckMode.Inferential we collect intra-expression inference sites to process before fixing any type
            // parameters. This information is no longer needed after the call to checkExpression.
            if (inferenceContext && inferenceContext.intraExpressionInferenceSites) {
                inferenceContext.intraExpressionInferenceSites = undefined;
            }
            // We strip literal freshness when an appropriate contextual type is present such that contextually typed
            // literals always preserve their literal types (otherwise they might widen during type inference). An alternative
            // here would be to not mark contextually typed literals as fresh in the first place.
            const result = maybeTypeOfKind(type, ts.TypeFlags.Literal) && isLiteralOfContextualType(type, instantiateContextualType(contextualType, node, /*contextFlags*/ undefined)) ?
                getRegularTypeOfLiteralType(type) : type;
            return result;
        }
        finally {
            // In the event our operation is canceled or some other exception occurs, reset the contextual type
            // so that we do not accidentally hold onto an instance of the checker, as a Type created in the services layer
            // may hold onto the checker that created it.
            context.contextualType = saveContextualType;
            context.inferenceContext = saveInferenceContext;
        }
    }

    function checkExpressionCached(node: ts.Expression | ts.QualifiedName, checkMode?: CheckMode): ts.Type {
        if (checkMode) {
            return checkExpression(node, checkMode);
        }
        const links = getNodeLinks(node);
        if (!links.resolvedType) {
            // When computing a type that we're going to cache, we need to ignore any ongoing control flow
            // analysis because variables may have transient types in indeterminable states. Moving flowLoopStart
            // to the top of the stack ensures all transient types are computed from a known point.
            const saveFlowLoopStart = flowLoopStart;
            const saveFlowTypeCache = flowTypeCache;
            flowLoopStart = flowLoopCount;
            flowTypeCache = undefined;
            links.resolvedType = checkExpression(node, checkMode);
            flowTypeCache = saveFlowTypeCache;
            flowLoopStart = saveFlowLoopStart;
        }
        return links.resolvedType;
    }

    function isTypeAssertion(node: ts.Expression) {
        node = ts.skipParentheses(node, /*excludeJSDocTypeAssertions*/ true);
        return node.kind === ts.SyntaxKind.TypeAssertionExpression ||
            node.kind === ts.SyntaxKind.AsExpression ||
            ts.isJSDocTypeAssertion(node);
    }

    function checkDeclarationInitializer(
        declaration: ts.HasExpressionInitializer,
        checkMode: CheckMode,
        contextualType?: ts.Type | undefined
    ) {
        const initializer = ts.getEffectiveInitializer(declaration)!;
        const type = getQuickTypeOfExpression(initializer) ||
            (contextualType ?
                checkExpressionWithContextualType(initializer, contextualType, /*inferenceContext*/ undefined, checkMode || CheckMode.Normal)
                : checkExpressionCached(initializer, checkMode));
        return ts.isParameter(declaration) && declaration.name.kind === ts.SyntaxKind.ArrayBindingPattern &&
            isTupleType(type) && !type.target.hasRestElement && getTypeReferenceArity(type) < declaration.name.elements.length ?
            padTupleType(type, declaration.name) : type;
    }

    function padTupleType(type: ts.TupleTypeReference, pattern: ts.ArrayBindingPattern) {
        const patternElements = pattern.elements;
        const elementTypes = getTypeArguments(type).slice();
        const elementFlags = type.target.elementFlags.slice();
        for (let i = getTypeReferenceArity(type); i < patternElements.length; i++) {
            const e = patternElements[i];
            if (i < patternElements.length - 1 || !(e.kind === ts.SyntaxKind.BindingElement && e.dotDotDotToken)) {
                elementTypes.push(!ts.isOmittedExpression(e) && hasDefaultValue(e) ? getTypeFromBindingElement(e, /*includePatternInType*/ false, /*reportErrors*/ false) : anyType);
                elementFlags.push(ts.ElementFlags.Optional);
                if (!ts.isOmittedExpression(e) && !hasDefaultValue(e)) {
                    reportImplicitAny(e, anyType);
                }
            }
        }
        return createTupleType(elementTypes, elementFlags, type.target.readonly);
    }

    function widenTypeInferredFromInitializer(declaration: ts.HasExpressionInitializer, type: ts.Type) {
        const widened = ts.getCombinedNodeFlags(declaration) & ts.NodeFlags.Const || ts.isDeclarationReadonly(declaration) ? type : getWidenedLiteralType(type);
        if (ts.isInJSFile(declaration)) {
            if (isEmptyLiteralType(widened)) {
                reportImplicitAny(declaration, anyType);
                return anyType;
            }
            else if (isEmptyArrayLiteralType(widened)) {
                reportImplicitAny(declaration, anyArrayType);
                return anyArrayType;
            }
        }
        return widened;
    }

    function isLiteralOfContextualType(candidateType: ts.Type, contextualType: ts.Type | undefined): boolean {
        if (contextualType) {
            if (contextualType.flags & ts.TypeFlags.UnionOrIntersection) {
                const types = (contextualType as ts.UnionType).types;
                return ts.some(types, t => isLiteralOfContextualType(candidateType, t));
            }
            if (contextualType.flags & ts.TypeFlags.InstantiableNonPrimitive) {
                // If the contextual type is a type variable constrained to a primitive type, consider
                // this a literal context for literals of that primitive type. For example, given a
                // type parameter 'T extends string', infer string literal types for T.
                const constraint = getBaseConstraintOfType(contextualType) || unknownType;
                return maybeTypeOfKind(constraint, ts.TypeFlags.String) && maybeTypeOfKind(candidateType, ts.TypeFlags.StringLiteral) ||
                    maybeTypeOfKind(constraint, ts.TypeFlags.Number) && maybeTypeOfKind(candidateType, ts.TypeFlags.NumberLiteral) ||
                    maybeTypeOfKind(constraint, ts.TypeFlags.BigInt) && maybeTypeOfKind(candidateType, ts.TypeFlags.BigIntLiteral) ||
                    maybeTypeOfKind(constraint, ts.TypeFlags.ESSymbol) && maybeTypeOfKind(candidateType, ts.TypeFlags.UniqueESSymbol) ||
                    isLiteralOfContextualType(candidateType, constraint);
            }
            // If the contextual type is a literal of a particular primitive type, we consider this a
            // literal context for all literals of that primitive type.
            return !!(contextualType.flags & (ts.TypeFlags.StringLiteral | ts.TypeFlags.Index | ts.TypeFlags.TemplateLiteral | ts.TypeFlags.StringMapping) && maybeTypeOfKind(candidateType, ts.TypeFlags.StringLiteral) ||
                contextualType.flags & ts.TypeFlags.NumberLiteral && maybeTypeOfKind(candidateType, ts.TypeFlags.NumberLiteral) ||
                contextualType.flags & ts.TypeFlags.BigIntLiteral && maybeTypeOfKind(candidateType, ts.TypeFlags.BigIntLiteral) ||
                contextualType.flags & ts.TypeFlags.BooleanLiteral && maybeTypeOfKind(candidateType, ts.TypeFlags.BooleanLiteral) ||
                contextualType.flags & ts.TypeFlags.UniqueESSymbol && maybeTypeOfKind(candidateType, ts.TypeFlags.UniqueESSymbol));
        }
        return false;
    }

    function isConstContext(node: ts.Expression): boolean {
        const parent = node.parent;
        return ts.isAssertionExpression(parent) && ts.isConstTypeReference(parent.type) ||
            ts.isJSDocTypeAssertion(parent) && ts.isConstTypeReference(ts.getJSDocTypeAssertionType(parent)) ||
            (ts.isParenthesizedExpression(parent) || ts.isArrayLiteralExpression(parent) || ts.isSpreadElement(parent)) && isConstContext(parent) ||
            (ts.isPropertyAssignment(parent) || ts.isShorthandPropertyAssignment(parent) || ts.isTemplateSpan(parent)) && isConstContext(parent.parent);
    }

    function checkExpressionForMutableLocation(node: ts.Expression, checkMode: CheckMode | undefined, contextualType?: ts.Type, forceTuple?: boolean): ts.Type {
        const type = checkExpression(node, checkMode, forceTuple);
        return isConstContext(node) || ts.isCommonJsExportedExpression(node) ? getRegularTypeOfLiteralType(type) :
            isTypeAssertion(node) ? type :
            getWidenedLiteralLikeTypeForContextualType(type, instantiateContextualType(arguments.length === 2 ? getContextualType(node, /*contextFlags*/ undefined) : contextualType, node, /*contextFlags*/ undefined));
    }

    function checkPropertyAssignment(node: ts.PropertyAssignment, checkMode?: CheckMode): ts.Type {
        // Do not use hasDynamicName here, because that returns false for well known symbols.
        // We want to perform checkComputedPropertyName for all computed properties, including
        // well known symbols.
        if (node.name.kind === ts.SyntaxKind.ComputedPropertyName) {
            checkComputedPropertyName(node.name);
        }

        return checkExpressionForMutableLocation(node.initializer, checkMode);
    }

    function checkObjectLiteralMethod(node: ts.MethodDeclaration, checkMode?: CheckMode): ts.Type {
        // Grammar checking
        checkGrammarMethod(node);

        // Do not use hasDynamicName here, because that returns false for well known symbols.
        // We want to perform checkComputedPropertyName for all computed properties, including
        // well known symbols.
        if (node.name.kind === ts.SyntaxKind.ComputedPropertyName) {
            checkComputedPropertyName(node.name);
        }

        const uninstantiatedType = checkFunctionExpressionOrObjectLiteralMethod(node, checkMode);
        return instantiateTypeWithSingleGenericCallSignature(node, uninstantiatedType, checkMode);
    }

    function instantiateTypeWithSingleGenericCallSignature(node: ts.Expression | ts.MethodDeclaration | ts.QualifiedName, type: ts.Type, checkMode?: CheckMode) {
        if (checkMode && checkMode & (CheckMode.Inferential | CheckMode.SkipGenericFunctions)) {
            const callSignature = getSingleSignature(type, ts.SignatureKind.Call, /*allowMembers*/ true);
            const constructSignature = getSingleSignature(type, ts.SignatureKind.Construct, /*allowMembers*/ true);
            const signature = callSignature || constructSignature;
            if (signature && signature.typeParameters) {
                const contextualType = getApparentTypeOfContextualType(node as ts.Expression, ts.ContextFlags.NoConstraints);
                if (contextualType) {
                    const contextualSignature = getSingleSignature(getNonNullableType(contextualType), callSignature ? ts.SignatureKind.Call : ts.SignatureKind.Construct, /*allowMembers*/ false);
                    if (contextualSignature && !contextualSignature.typeParameters) {
                        if (checkMode & CheckMode.SkipGenericFunctions) {
                            skippedGenericFunction(node, checkMode);
                            return anyFunctionType;
                        }
                        const context = getInferenceContext(node)!;
                        // We have an expression that is an argument of a generic function for which we are performing
                        // type argument inference. The expression is of a function type with a single generic call
                        // signature and a contextual function type with a single non-generic call signature. Now check
                        // if the outer function returns a function type with a single non-generic call signature and
                        // if some of the outer function type parameters have no inferences so far. If so, we can
                        // potentially add inferred type parameters to the outer function return type.
                        const returnType = context.signature && getReturnTypeOfSignature(context.signature);
                        const returnSignature = returnType && getSingleCallOrConstructSignature(returnType);
                        if (returnSignature && !returnSignature.typeParameters && !ts.every(context.inferences, hasInferenceCandidates)) {
                            // Instantiate the signature with its own type parameters as type arguments, possibly
                            // renaming the type parameters to ensure they have unique names.
                            const uniqueTypeParameters = getUniqueTypeParameters(context, signature.typeParameters);
                            const instantiatedSignature = getSignatureInstantiationWithoutFillingInTypeArguments(signature, uniqueTypeParameters);
                            // Infer from the parameters of the instantiated signature to the parameters of the
                            // contextual signature starting with an empty set of inference candidates.
                            const inferences = ts.map(context.inferences, info => createInferenceInfo(info.typeParameter));
                            applyToParameterTypes(instantiatedSignature, contextualSignature, (source, target) => {
                                inferTypes(inferences, source, target, /*priority*/ 0, /*contravariant*/ true);
                            });
                            if (ts.some(inferences, hasInferenceCandidates)) {
                                // We have inference candidates, indicating that one or more type parameters are referenced
                                // in the parameter types of the contextual signature. Now also infer from the return type.
                                applyToReturnTypes(instantiatedSignature, contextualSignature, (source, target) => {
                                    inferTypes(inferences, source, target);
                                });
                                // If the type parameters for which we produced candidates do not have any inferences yet,
                                // we adopt the new inference candidates and add the type parameters of the expression type
                                // to the set of inferred type parameters for the outer function return type.
                                if (!hasOverlappingInferences(context.inferences, inferences)) {
                                    mergeInferences(context.inferences, inferences);
                                    context.inferredTypeParameters = ts.concatenate(context.inferredTypeParameters, uniqueTypeParameters);
                                    return getOrCreateTypeFromSignature(instantiatedSignature);
                                }
                            }
                        }
                        return getOrCreateTypeFromSignature(instantiateSignatureInContextOf(signature, contextualSignature, context));
                    }
                }
            }
        }
        return type;
    }

    function skippedGenericFunction(node: ts.Node, checkMode: CheckMode) {
        if (checkMode & CheckMode.Inferential) {
            // We have skipped a generic function during inferential typing. Obtain the inference context and
            // indicate this has occurred such that we know a second pass of inference is be needed.
            const context = getInferenceContext(node)!;
            context.flags |= ts.InferenceFlags.SkippedGenericFunction;
        }
    }

    function hasInferenceCandidates(info: ts.InferenceInfo) {
        return !!(info.candidates || info.contraCandidates);
    }

    function hasInferenceCandidatesOrDefault(info: ts.InferenceInfo) {
        return !!(info.candidates || info.contraCandidates || hasTypeParameterDefault(info.typeParameter));
    }

    function hasOverlappingInferences(a: ts.InferenceInfo[], b: ts.InferenceInfo[]) {
        for (let i = 0; i < a.length; i++) {
            if (hasInferenceCandidates(a[i]) && hasInferenceCandidates(b[i])) {
                return true;
            }
        }
        return false;
    }

    function mergeInferences(target: ts.InferenceInfo[], source: ts.InferenceInfo[]) {
        for (let i = 0; i < target.length; i++) {
            if (!hasInferenceCandidates(target[i]) && hasInferenceCandidates(source[i])) {
                target[i] = source[i];
            }
        }
    }

    function getUniqueTypeParameters(context: ts.InferenceContext, typeParameters: readonly ts.TypeParameter[]): readonly ts.TypeParameter[] {
        const result: ts.TypeParameter[] = [];
        let oldTypeParameters: ts.TypeParameter[] | undefined;
        let newTypeParameters: ts.TypeParameter[] | undefined;
        for (const tp of typeParameters) {
            const name = tp.symbol.escapedName;
            if (hasTypeParameterByName(context.inferredTypeParameters, name) || hasTypeParameterByName(result, name)) {
                const newName = getUniqueTypeParameterName(ts.concatenate(context.inferredTypeParameters, result), name);
                const symbol = createSymbol(ts.SymbolFlags.TypeParameter, newName);
                const newTypeParameter = createTypeParameter(symbol);
                newTypeParameter.target = tp;
                oldTypeParameters = ts.append(oldTypeParameters, tp);
                newTypeParameters = ts.append(newTypeParameters, newTypeParameter);
                result.push(newTypeParameter);
            }
            else {
                result.push(tp);
            }
        }
        if (newTypeParameters) {
            const mapper = createTypeMapper(oldTypeParameters!, newTypeParameters);
            for (const tp of newTypeParameters) {
                tp.mapper = mapper;
            }
        }
        return result;
    }

    function hasTypeParameterByName(typeParameters: readonly ts.TypeParameter[] | undefined, name: ts.__String) {
        return ts.some(typeParameters, tp => tp.symbol.escapedName === name);
    }

    function getUniqueTypeParameterName(typeParameters: readonly ts.TypeParameter[], baseName: ts.__String) {
        let len = (baseName as string).length;
        while (len > 1 && (baseName as string).charCodeAt(len - 1) >= ts.CharacterCodes._0 && (baseName as string).charCodeAt(len - 1) <= ts.CharacterCodes._9) len--;
        const s = (baseName as string).slice(0, len);
        for (let index = 1; true; index++) {
            const augmentedName = (s + index as ts.__String);
            if (!hasTypeParameterByName(typeParameters, augmentedName)) {
                return augmentedName;
            }
        }
    }

    function getReturnTypeOfSingleNonGenericCallSignature(funcType: ts.Type) {
        const signature = getSingleCallSignature(funcType);
        if (signature && !signature.typeParameters) {
            return getReturnTypeOfSignature(signature);
        }
    }

    function getReturnTypeOfSingleNonGenericSignatureOfCallChain(expr: ts.CallChain) {
        const funcType = checkExpression(expr.expression);
        const nonOptionalType = getOptionalExpressionType(funcType, expr.expression);
        const returnType = getReturnTypeOfSingleNonGenericCallSignature(funcType);
        return returnType && propagateOptionalTypeMarker(returnType, expr, nonOptionalType !== funcType);
    }

    /**
     * Returns the type of an expression. Unlike checkExpression, this function is simply concerned
     * with computing the type and may not fully check all contained sub-expressions for errors.
     */
    function getTypeOfExpression(node: ts.Expression) {
        // Don't bother caching types that require no flow analysis and are quick to compute.
        const quickType = getQuickTypeOfExpression(node);
        if (quickType) {
            return quickType;
        }
        // If a type has been cached for the node, return it.
        if (node.flags & ts.NodeFlags.TypeCached && flowTypeCache) {
            const cachedType = flowTypeCache[getNodeId(node)];
            if (cachedType) {
                return cachedType;
            }
        }
        const startInvocationCount = flowInvocationCount;
        const type = checkExpression(node);
        // If control flow analysis was required to determine the type, it is worth caching.
        if (flowInvocationCount !== startInvocationCount) {
            const cache = flowTypeCache || (flowTypeCache = []);
            cache[getNodeId(node)] = type;
            ts.setNodeFlags(node, node.flags | ts.NodeFlags.TypeCached);
        }
        return type;
    }

    function getQuickTypeOfExpression(node: ts.Expression) {
        let expr = ts.skipParentheses(node, /*excludeJSDocTypeAssertions*/ true);
        if (ts.isJSDocTypeAssertion(expr)) {
            const type = ts.getJSDocTypeAssertionType(expr);
            if (!ts.isConstTypeReference(type)) {
                return getTypeFromTypeNode(type);
            }
        }
        expr = ts.skipParentheses(node);
        // Optimize for the common case of a call to a function with a single non-generic call
        // signature where we can just fetch the return type without checking the arguments.
        if (ts.isCallExpression(expr) && expr.expression.kind !== ts.SyntaxKind.SuperKeyword && !ts.isRequireCall(expr, /*checkArgumentIsStringLiteralLike*/ true) && !isSymbolOrSymbolForCall(expr)) {
            const type = ts.isCallChain(expr) ? getReturnTypeOfSingleNonGenericSignatureOfCallChain(expr) :
                getReturnTypeOfSingleNonGenericCallSignature(checkNonNullExpression(expr.expression));
            if (type) {
                return type;
            }
        }
        else if (ts.isAssertionExpression(expr) && !ts.isConstTypeReference(expr.type)) {
            return getTypeFromTypeNode((expr as ts.TypeAssertion).type);
        }
        else if (node.kind === ts.SyntaxKind.NumericLiteral || node.kind === ts.SyntaxKind.StringLiteral ||
            node.kind === ts.SyntaxKind.TrueKeyword || node.kind === ts.SyntaxKind.FalseKeyword) {
            return checkExpression(node);
        }
        return undefined;
    }

    /**
     * Returns the type of an expression. Unlike checkExpression, this function is simply concerned
     * with computing the type and may not fully check all contained sub-expressions for errors.
     * It is intended for uses where you know there is no contextual type,
     * and requesting the contextual type might cause a circularity or other bad behaviour.
     * It sets the contextual type of the node to any before calling getTypeOfExpression.
     */
    function getContextFreeTypeOfExpression(node: ts.Expression) {
        const links = getNodeLinks(node);
        if (links.contextFreeType) {
            return links.contextFreeType;
        }
        const saveContextualType = node.contextualType;
        node.contextualType = anyType;
        try {
            const type = links.contextFreeType = checkExpression(node, CheckMode.SkipContextSensitive);
            return type;
        }
        finally {
            // In the event our operation is canceled or some other exception occurs, reset the contextual type
            // so that we do not accidentally hold onto an instance of the checker, as a Type created in the services layer
            // may hold onto the checker that created it.
            node.contextualType = saveContextualType;
        }
    }

    function checkExpression(node: ts.Expression | ts.QualifiedName, checkMode?: CheckMode, forceTuple?: boolean): ts.Type {
        ts.tracing?.push(ts.tracing.Phase.Check, "checkExpression", { kind: node.kind, pos: node.pos, end: node.end, path: (node as ts.TracingNode).tracingPath });
        const saveCurrentNode = currentNode;
        currentNode = node;
        instantiationCount = 0;
        const uninstantiatedType = checkExpressionWorker(node, checkMode, forceTuple);
        const type = instantiateTypeWithSingleGenericCallSignature(node, uninstantiatedType, checkMode);
        if (isConstEnumObjectType(type)) {
            checkConstEnumAccess(node, type);
        }
        currentNode = saveCurrentNode;
        ts.tracing?.pop();
        return type;
    }

    function checkConstEnumAccess(node: ts.Expression | ts.QualifiedName, type: ts.Type) {
        // enum object type for const enums are only permitted in:
        // - 'left' in property access
        // - 'object' in indexed access
        // - target in rhs of import statement
        const ok =
            (node.parent.kind === ts.SyntaxKind.PropertyAccessExpression && (node.parent as ts.PropertyAccessExpression).expression === node) ||
            (node.parent.kind === ts.SyntaxKind.ElementAccessExpression && (node.parent as ts.ElementAccessExpression).expression === node) ||
            ((node.kind === ts.SyntaxKind.Identifier || node.kind === ts.SyntaxKind.QualifiedName) && isInRightSideOfImportOrExportAssignment(node as ts.Identifier) ||
                (node.parent.kind === ts.SyntaxKind.TypeQuery && (node.parent as ts.TypeQueryNode).exprName === node)) ||
            (node.parent.kind === ts.SyntaxKind.ExportSpecifier); // We allow reexporting const enums

        if (!ok) {
            error(node, ts.Diagnostics.const_enums_can_only_be_used_in_property_or_index_access_expressions_or_the_right_hand_side_of_an_import_declaration_or_export_assignment_or_type_query);
        }

        if (compilerOptions.isolatedModules) {
            ts.Debug.assert(!!(type.symbol.flags & ts.SymbolFlags.ConstEnum));
            const constEnumDeclaration = type.symbol.valueDeclaration as ts.EnumDeclaration;
            if (constEnumDeclaration.flags & ts.NodeFlags.Ambient) {
                error(node, ts.Diagnostics.Cannot_access_ambient_const_enums_when_the_isolatedModules_flag_is_provided);
            }
        }
    }

    function checkParenthesizedExpression(node: ts.ParenthesizedExpression, checkMode?: CheckMode): ts.Type {
        if (ts.hasJSDocNodes(node) && ts.isJSDocTypeAssertion(node)) {
            const type = ts.getJSDocTypeAssertionType(node);
            return checkAssertionWorker(type, type, node.expression, checkMode);
        }
        return checkExpression(node.expression, checkMode);
    }

    function checkExpressionWorker(node: ts.Expression | ts.QualifiedName, checkMode: CheckMode | undefined, forceTuple?: boolean): ts.Type {
        const kind = node.kind;
        if (cancellationToken) {
            // Only bother checking on a few construct kinds.  We don't want to be excessively
            // hitting the cancellation token on every node we check.
            switch (kind) {
                case ts.SyntaxKind.ClassExpression:
                case ts.SyntaxKind.FunctionExpression:
                case ts.SyntaxKind.ArrowFunction:
                    cancellationToken.throwIfCancellationRequested();
            }
        }
        switch (kind) {
            case ts.SyntaxKind.Identifier:
                return checkIdentifier(node as ts.Identifier, checkMode);
            case ts.SyntaxKind.PrivateIdentifier:
                return checkPrivateIdentifierExpression(node as ts.PrivateIdentifier);
            case ts.SyntaxKind.ThisKeyword:
                return checkThisExpression(node);
            case ts.SyntaxKind.SuperKeyword:
                return checkSuperExpression(node);
            case ts.SyntaxKind.NullKeyword:
                return nullWideningType;
            case ts.SyntaxKind.NoSubstitutionTemplateLiteral:
            case ts.SyntaxKind.StringLiteral:
                return getFreshTypeOfLiteralType(getStringLiteralType((node as ts.StringLiteralLike).text));
            case ts.SyntaxKind.NumericLiteral:
                checkGrammarNumericLiteral(node as ts.NumericLiteral);
                return getFreshTypeOfLiteralType(getNumberLiteralType(+(node as ts.NumericLiteral).text));
            case ts.SyntaxKind.BigIntLiteral:
                checkGrammarBigIntLiteral(node as ts.BigIntLiteral);
                return getFreshTypeOfLiteralType(getBigIntLiteralType({
                    negative: false,
                    base10Value: ts.parsePseudoBigInt((node as ts.BigIntLiteral).text)
                }));
            case ts.SyntaxKind.TrueKeyword:
                return trueType;
            case ts.SyntaxKind.FalseKeyword:
                return falseType;
            case ts.SyntaxKind.TemplateExpression:
                return checkTemplateExpression(node as ts.TemplateExpression);
            case ts.SyntaxKind.RegularExpressionLiteral:
                return globalRegExpType;
            case ts.SyntaxKind.ArrayLiteralExpression:
                return checkArrayLiteral(node as ts.ArrayLiteralExpression, checkMode, forceTuple);
            case ts.SyntaxKind.ObjectLiteralExpression:
                return checkObjectLiteral(node as ts.ObjectLiteralExpression, checkMode);
            case ts.SyntaxKind.PropertyAccessExpression:
                return checkPropertyAccessExpression(node as ts.PropertyAccessExpression, checkMode);
            case ts.SyntaxKind.QualifiedName:
                return checkQualifiedName(node as ts.QualifiedName, checkMode);
            case ts.SyntaxKind.ElementAccessExpression:
                return checkIndexedAccess(node as ts.ElementAccessExpression, checkMode);
            case ts.SyntaxKind.CallExpression:
                if ((node as ts.CallExpression).expression.kind === ts.SyntaxKind.ImportKeyword) {
                    return checkImportCallExpression(node as ts.ImportCall);
                }
                // falls through
            case ts.SyntaxKind.NewExpression:
                return checkCallExpression(node as ts.CallExpression, checkMode);
            case ts.SyntaxKind.TaggedTemplateExpression:
                return checkTaggedTemplateExpression(node as ts.TaggedTemplateExpression);
            case ts.SyntaxKind.ParenthesizedExpression:
                return checkParenthesizedExpression(node as ts.ParenthesizedExpression, checkMode);
            case ts.SyntaxKind.ClassExpression:
                return checkClassExpression(node as ts.ClassExpression);
            case ts.SyntaxKind.FunctionExpression:
            case ts.SyntaxKind.ArrowFunction:
                return checkFunctionExpressionOrObjectLiteralMethod(node as ts.FunctionExpression | ts.ArrowFunction, checkMode);
            case ts.SyntaxKind.TypeOfExpression:
                return checkTypeOfExpression(node as ts.TypeOfExpression);
            case ts.SyntaxKind.TypeAssertionExpression:
            case ts.SyntaxKind.AsExpression:
                return checkAssertion(node as ts.AssertionExpression);
            case ts.SyntaxKind.NonNullExpression:
                return checkNonNullAssertion(node as ts.NonNullExpression);
            case ts.SyntaxKind.ExpressionWithTypeArguments:
                return checkExpressionWithTypeArguments(node as ts.ExpressionWithTypeArguments);
            case ts.SyntaxKind.SatisfiesExpression:
                return checkSatisfiesExpression(node as ts.SatisfiesExpression);
            case ts.SyntaxKind.MetaProperty:
                return checkMetaProperty(node as ts.MetaProperty);
            case ts.SyntaxKind.DeleteExpression:
                return checkDeleteExpression(node as ts.DeleteExpression);
            case ts.SyntaxKind.VoidExpression:
                return checkVoidExpression(node as ts.VoidExpression);
            case ts.SyntaxKind.AwaitExpression:
                return checkAwaitExpression(node as ts.AwaitExpression);
            case ts.SyntaxKind.PrefixUnaryExpression:
                return checkPrefixUnaryExpression(node as ts.PrefixUnaryExpression);
            case ts.SyntaxKind.PostfixUnaryExpression:
                return checkPostfixUnaryExpression(node as ts.PostfixUnaryExpression);
            case ts.SyntaxKind.BinaryExpression:
                return checkBinaryExpression(node as ts.BinaryExpression, checkMode);
            case ts.SyntaxKind.ConditionalExpression:
                return checkConditionalExpression(node as ts.ConditionalExpression, checkMode);
            case ts.SyntaxKind.SpreadElement:
                return checkSpreadExpression(node as ts.SpreadElement, checkMode);
            case ts.SyntaxKind.OmittedExpression:
                return undefinedWideningType;
            case ts.SyntaxKind.YieldExpression:
                return checkYieldExpression(node as ts.YieldExpression);
            case ts.SyntaxKind.SyntheticExpression:
                return checkSyntheticExpression(node as ts.SyntheticExpression);
            case ts.SyntaxKind.JsxExpression:
                return checkJsxExpression(node as ts.JsxExpression, checkMode);
            case ts.SyntaxKind.JsxElement:
                return checkJsxElement(node as ts.JsxElement, checkMode);
            case ts.SyntaxKind.JsxSelfClosingElement:
                return checkJsxSelfClosingElement(node as ts.JsxSelfClosingElement, checkMode);
            case ts.SyntaxKind.JsxFragment:
                return checkJsxFragment(node as ts.JsxFragment);
            case ts.SyntaxKind.JsxAttributes:
                return checkJsxAttributes(node as ts.JsxAttributes, checkMode);
            case ts.SyntaxKind.JsxOpeningElement:
                ts.Debug.fail("Shouldn't ever directly check a JsxOpeningElement");
        }
        return errorType;
    }

    // DECLARATION AND STATEMENT TYPE CHECKING

    function checkTypeParameter(node: ts.TypeParameterDeclaration) {
        // Grammar Checking
        checkGrammarModifiers(node);
        if (node.expression) {
            grammarErrorOnFirstToken(node.expression, ts.Diagnostics.Type_expected);
        }

        checkSourceElement(node.constraint);
        checkSourceElement(node.default);
        const typeParameter = getDeclaredTypeOfTypeParameter(getSymbolOfNode(node));
        // Resolve base constraint to reveal circularity errors
        getBaseConstraintOfType(typeParameter);
        if (!hasNonCircularTypeParameterDefault(typeParameter)) {
            error(node.default, ts.Diagnostics.Type_parameter_0_has_a_circular_default, typeToString(typeParameter));
        }
        const constraintType = getConstraintOfTypeParameter(typeParameter);
        const defaultType = getDefaultFromTypeParameter(typeParameter);
        if (constraintType && defaultType) {
            checkTypeAssignableTo(defaultType, getTypeWithThisArgument(instantiateType(constraintType, makeUnaryTypeMapper(typeParameter, defaultType)), defaultType), node.default, ts.Diagnostics.Type_0_does_not_satisfy_the_constraint_1);
        }
        checkNodeDeferred(node);
        addLazyDiagnostic(() => checkTypeNameIsReserved(node.name, ts.Diagnostics.Type_parameter_name_cannot_be_0));
    }

    function checkTypeParameterDeferred(node: ts.TypeParameterDeclaration) {
        if (ts.isInterfaceDeclaration(node.parent) || ts.isClassLike(node.parent) || ts.isTypeAliasDeclaration(node.parent)) {
            const typeParameter = getDeclaredTypeOfTypeParameter(getSymbolOfNode(node));
            const modifiers = getVarianceModifiers(typeParameter);
            if (modifiers) {
                const symbol = getSymbolOfNode(node.parent);
                if (ts.isTypeAliasDeclaration(node.parent) && !(ts.getObjectFlags(getDeclaredTypeOfSymbol(symbol)) & (ts.ObjectFlags.Anonymous | ts.ObjectFlags.Mapped))) {
                    error(node, ts.Diagnostics.Variance_annotations_are_only_supported_in_type_aliases_for_object_function_constructor_and_mapped_types);
                }
                else if (modifiers === ts.ModifierFlags.In || modifiers === ts.ModifierFlags.Out) {
                    ts.tracing?.push(ts.tracing.Phase.CheckTypes, "checkTypeParameterDeferred", { parent: getTypeId(getDeclaredTypeOfSymbol(symbol)), id: getTypeId(typeParameter) });
                    const source = createMarkerType(symbol, typeParameter, modifiers === ts.ModifierFlags.Out ? markerSubTypeForCheck : markerSuperTypeForCheck);
                    const target = createMarkerType(symbol, typeParameter, modifiers === ts.ModifierFlags.Out ? markerSuperTypeForCheck : markerSubTypeForCheck);
                    const saveVarianceTypeParameter = typeParameter;
                    varianceTypeParameter = typeParameter;
                    checkTypeAssignableTo(source, target, node, ts.Diagnostics.Type_0_is_not_assignable_to_type_1_as_implied_by_variance_annotation);
                    varianceTypeParameter = saveVarianceTypeParameter;
                    ts.tracing?.pop();
                }
            }
        }
    }

    function checkParameter(node: ts.ParameterDeclaration) {
        // Grammar checking
        // It is a SyntaxError if the Identifier "eval" or the Identifier "arguments" occurs as the
        // Identifier in a PropertySetParameterList of a PropertyAssignment that is contained in strict code
        // or if its FunctionBody is strict code(11.1.5).
        checkGrammarDecoratorsAndModifiers(node);

        checkVariableLikeDeclaration(node);
        const func = ts.getContainingFunction(node)!;
        if (ts.hasSyntacticModifier(node, ts.ModifierFlags.ParameterPropertyModifier)) {
            if (!(func.kind === ts.SyntaxKind.Constructor && ts.nodeIsPresent(func.body))) {
                error(node, ts.Diagnostics.A_parameter_property_is_only_allowed_in_a_constructor_implementation);
            }
            if (func.kind === ts.SyntaxKind.Constructor && ts.isIdentifier(node.name) && node.name.escapedText === "constructor") {
                error(node.name, ts.Diagnostics.constructor_cannot_be_used_as_a_parameter_property_name);
            }
        }
        if ((node.questionToken || isJSDocOptionalParameter(node)) && ts.isBindingPattern(node.name) && (func as ts.FunctionLikeDeclaration).body) {
            error(node, ts.Diagnostics.A_binding_pattern_parameter_cannot_be_optional_in_an_implementation_signature);
        }
        if (node.name && ts.isIdentifier(node.name) && (node.name.escapedText === "this" || node.name.escapedText === "new")) {
            if (func.parameters.indexOf(node) !== 0) {
                error(node, ts.Diagnostics.A_0_parameter_must_be_the_first_parameter, node.name.escapedText as string);
            }
            if (func.kind === ts.SyntaxKind.Constructor || func.kind === ts.SyntaxKind.ConstructSignature || func.kind === ts.SyntaxKind.ConstructorType) {
                error(node, ts.Diagnostics.A_constructor_cannot_have_a_this_parameter);
            }
            if (func.kind === ts.SyntaxKind.ArrowFunction) {
                error(node, ts.Diagnostics.An_arrow_function_cannot_have_a_this_parameter);
            }
            if (func.kind === ts.SyntaxKind.GetAccessor || func.kind === ts.SyntaxKind.SetAccessor) {
                error(node, ts.Diagnostics.get_and_set_accessors_cannot_declare_this_parameters);
            }
        }

        // Only check rest parameter type if it's not a binding pattern. Since binding patterns are
        // not allowed in a rest parameter, we already have an error from checkGrammarParameterList.
        if (node.dotDotDotToken && !ts.isBindingPattern(node.name) && !isTypeAssignableTo(getReducedType(getTypeOfSymbol(node.symbol)), anyReadonlyArrayType)) {
            error(node, ts.Diagnostics.A_rest_parameter_must_be_of_an_array_type);
        }
    }

    function checkTypePredicate(node: ts.TypePredicateNode): void {
        const parent = getTypePredicateParent(node);
        if (!parent) {
            // The parent must not be valid.
            error(node, ts.Diagnostics.A_type_predicate_is_only_allowed_in_return_type_position_for_functions_and_methods);
            return;
        }

        const signature = getSignatureFromDeclaration(parent);
        const typePredicate = getTypePredicateOfSignature(signature);
        if (!typePredicate) {
            return;
        }

        checkSourceElement(node.type);

        const { parameterName } = node;
        if (typePredicate.kind === ts.TypePredicateKind.This || typePredicate.kind === ts.TypePredicateKind.AssertsThis) {
            getTypeFromThisTypeNode(parameterName as ts.ThisTypeNode);
        }
        else {
            if (typePredicate.parameterIndex >= 0) {
                if (signatureHasRestParameter(signature) && typePredicate.parameterIndex === signature.parameters.length - 1) {
                    error(parameterName, ts.Diagnostics.A_type_predicate_cannot_reference_a_rest_parameter);
                }
                else {
                    if (typePredicate.type) {
                        const leadingError = () => ts.chainDiagnosticMessages(/*details*/ undefined, ts.Diagnostics.A_type_predicate_s_type_must_be_assignable_to_its_parameter_s_type);
                        checkTypeAssignableTo(typePredicate.type,
                            getTypeOfSymbol(signature.parameters[typePredicate.parameterIndex]),
                            node.type,
                            /*headMessage*/ undefined,
                            leadingError);
                    }
                }
            }
            else if (parameterName) {
                let hasReportedError = false;
                for (const { name } of parent.parameters) {
                    if (ts.isBindingPattern(name) &&
                            checkIfTypePredicateVariableIsDeclaredInBindingPattern(name, parameterName, typePredicate.parameterName)) {
                        hasReportedError = true;
                        break;
                    }
                }
                if (!hasReportedError) {
                    error(node.parameterName, ts.Diagnostics.Cannot_find_parameter_0, typePredicate.parameterName);
                }
            }
        }
    }

    function getTypePredicateParent(node: ts.Node): ts.SignatureDeclaration | undefined {
        switch (node.parent.kind) {
            case ts.SyntaxKind.ArrowFunction:
            case ts.SyntaxKind.CallSignature:
            case ts.SyntaxKind.FunctionDeclaration:
            case ts.SyntaxKind.FunctionExpression:
            case ts.SyntaxKind.FunctionType:
            case ts.SyntaxKind.MethodDeclaration:
            case ts.SyntaxKind.MethodSignature:
                const parent = node.parent as ts.SignatureDeclaration;
                if (node === parent.type) {
                    return parent;
                }
        }
    }

    function checkIfTypePredicateVariableIsDeclaredInBindingPattern(
        pattern: ts.BindingPattern,
        predicateVariableNode: ts.Node,
        predicateVariableName: string) {
        for (const element of pattern.elements) {
            if (ts.isOmittedExpression(element)) {
                continue;
            }

            const name = element.name;
            if (name.kind === ts.SyntaxKind.Identifier && name.escapedText === predicateVariableName) {
                error(predicateVariableNode,
                    ts.Diagnostics.A_type_predicate_cannot_reference_element_0_in_a_binding_pattern,
                    predicateVariableName);
                return true;
            }
            else if (name.kind === ts.SyntaxKind.ArrayBindingPattern || name.kind === ts.SyntaxKind.ObjectBindingPattern) {
                if (checkIfTypePredicateVariableIsDeclaredInBindingPattern(
                    name,
                    predicateVariableNode,
                    predicateVariableName)) {
                    return true;
                }
            }
        }
    }

    function checkSignatureDeclaration(node: ts.SignatureDeclaration) {
        // Grammar checking
        if (node.kind === ts.SyntaxKind.IndexSignature) {
            checkGrammarIndexSignature(node);
        }
        // TODO (yuisu): Remove this check in else-if when SyntaxKind.Construct is moved and ambient context is handled
        else if (node.kind === ts.SyntaxKind.FunctionType || node.kind === ts.SyntaxKind.FunctionDeclaration || node.kind === ts.SyntaxKind.ConstructorType ||
            node.kind === ts.SyntaxKind.CallSignature || node.kind === ts.SyntaxKind.Constructor ||
            node.kind === ts.SyntaxKind.ConstructSignature) {
            checkGrammarFunctionLikeDeclaration(node as ts.FunctionLikeDeclaration);
        }

        const functionFlags = ts.getFunctionFlags(node as ts.FunctionLikeDeclaration);
        if (!(functionFlags & ts.FunctionFlags.Invalid)) {
            // Async generators prior to ESNext require the __await and __asyncGenerator helpers
            if ((functionFlags & ts.FunctionFlags.AsyncGenerator) === ts.FunctionFlags.AsyncGenerator && languageVersion < ts.ScriptTarget.ESNext) {
                checkExternalEmitHelpers(node, ts.ExternalEmitHelpers.AsyncGeneratorIncludes);
            }

            // Async functions prior to ES2017 require the __awaiter helper
            if ((functionFlags & ts.FunctionFlags.AsyncGenerator) === ts.FunctionFlags.Async && languageVersion < ts.ScriptTarget.ES2017) {
                checkExternalEmitHelpers(node, ts.ExternalEmitHelpers.Awaiter);
            }

            // Generator functions, Async functions, and Async Generator functions prior to
            // ES2015 require the __generator helper
            if ((functionFlags & ts.FunctionFlags.AsyncGenerator) !== ts.FunctionFlags.Normal && languageVersion < ts.ScriptTarget.ES2015) {
                checkExternalEmitHelpers(node, ts.ExternalEmitHelpers.Generator);
            }
        }

        checkTypeParameters(ts.getEffectiveTypeParameterDeclarations(node));
        checkUnmatchedJSDocParameters(node);

        ts.forEach(node.parameters, checkParameter);

        // TODO(rbuckton): Should we start checking JSDoc types?
        if (node.type) {
            checkSourceElement(node.type);
        }

        addLazyDiagnostic(checkSignatureDeclarationDiagnostics);

        function checkSignatureDeclarationDiagnostics() {
            checkCollisionWithArgumentsInGeneratedCode(node);
            const returnTypeNode = ts.getEffectiveReturnTypeNode(node);
            if (noImplicitAny && !returnTypeNode) {
                switch (node.kind) {
                    case ts.SyntaxKind.ConstructSignature:
                        error(node, ts.Diagnostics.Construct_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type);
                        break;
                    case ts.SyntaxKind.CallSignature:
                        error(node, ts.Diagnostics.Call_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type);
                        break;
                }
            }

            if (returnTypeNode) {
                const functionFlags = ts.getFunctionFlags(node as ts.FunctionDeclaration);
                if ((functionFlags & (ts.FunctionFlags.Invalid | ts.FunctionFlags.Generator)) === ts.FunctionFlags.Generator) {
                    const returnType = getTypeFromTypeNode(returnTypeNode);
                    if (returnType === voidType) {
                        error(returnTypeNode, ts.Diagnostics.A_generator_cannot_have_a_void_type_annotation);
                    }
                    else {
                        // Naively, one could check that Generator<any, any, any> is assignable to the return type annotation.
                        // However, that would not catch the error in the following case.
                        //
                        //    interface BadGenerator extends Iterable<number>, Iterator<string> { }
                        //    function* g(): BadGenerator { } // Iterable and Iterator have different types!
                        //
                        const generatorYieldType = getIterationTypeOfGeneratorFunctionReturnType(IterationTypeKind.Yield, returnType, (functionFlags & ts.FunctionFlags.Async) !== 0) || anyType;
                        const generatorReturnType = getIterationTypeOfGeneratorFunctionReturnType(IterationTypeKind.Return, returnType, (functionFlags & ts.FunctionFlags.Async) !== 0) || generatorYieldType;
                        const generatorNextType = getIterationTypeOfGeneratorFunctionReturnType(IterationTypeKind.Next, returnType, (functionFlags & ts.FunctionFlags.Async) !== 0) || unknownType;
                        const generatorInstantiation = createGeneratorReturnType(generatorYieldType, generatorReturnType, generatorNextType, !!(functionFlags & ts.FunctionFlags.Async));
                        checkTypeAssignableTo(generatorInstantiation, returnType, returnTypeNode);
                    }
                }
                else if ((functionFlags & ts.FunctionFlags.AsyncGenerator) === ts.FunctionFlags.Async) {
                    checkAsyncFunctionReturnType(node as ts.FunctionLikeDeclaration, returnTypeNode);
                }
            }
            if (node.kind !== ts.SyntaxKind.IndexSignature && node.kind !== ts.SyntaxKind.JSDocFunctionType) {
                registerForUnusedIdentifiersCheck(node);
            }
        }
    }

    function checkClassForDuplicateDeclarations(node: ts.ClassLikeDeclaration) {
        const instanceNames = new ts.Map<ts.__String, DeclarationMeaning>();
        const staticNames = new ts.Map<ts.__String, DeclarationMeaning>();
        // instance and static private identifiers share the same scope
        const privateIdentifiers = new ts.Map<ts.__String, DeclarationMeaning>();
        for (const member of node.members) {
            if (member.kind === ts.SyntaxKind.Constructor) {
                for (const param of (member as ts.ConstructorDeclaration).parameters) {
                    if (ts.isParameterPropertyDeclaration(param, member) && !ts.isBindingPattern(param.name)) {
                        addName(instanceNames, param.name, param.name.escapedText, DeclarationMeaning.GetOrSetAccessor);
                    }
                }
            }
            else {
                const isStaticMember = ts.isStatic(member);
                const name = member.name;
                if (!name) {
                    continue;
                }
                const isPrivate = ts.isPrivateIdentifier(name);
                const privateStaticFlags = isPrivate && isStaticMember ? DeclarationMeaning.PrivateStatic : 0;
                const names =
                    isPrivate ? privateIdentifiers :
                    isStaticMember ? staticNames :
                    instanceNames;

                const memberName = name && ts.getPropertyNameForPropertyNameNode(name);
                if (memberName) {
                    switch (member.kind) {
                        case ts.SyntaxKind.GetAccessor:
                            addName(names, name, memberName, DeclarationMeaning.GetAccessor | privateStaticFlags);
                            break;

                        case ts.SyntaxKind.SetAccessor:
                            addName(names, name, memberName, DeclarationMeaning.SetAccessor | privateStaticFlags);
                            break;

                        case ts.SyntaxKind.PropertyDeclaration:
                            addName(names, name, memberName, DeclarationMeaning.GetOrSetAccessor | privateStaticFlags);
                            break;

                        case ts.SyntaxKind.MethodDeclaration:
                            addName(names, name, memberName, DeclarationMeaning.Method | privateStaticFlags);
                            break;
                    }
                }
            }
        }

        function addName(names: ts.UnderscoreEscapedMap<DeclarationMeaning>, location: ts.Node, name: ts.__String, meaning: DeclarationMeaning) {
            const prev = names.get(name);
            if (prev) {
                // For private identifiers, do not allow mixing of static and instance members with the same name
                if ((prev & DeclarationMeaning.PrivateStatic) !== (meaning & DeclarationMeaning.PrivateStatic)) {
                    error(location, ts.Diagnostics.Duplicate_identifier_0_Static_and_instance_elements_cannot_share_the_same_private_name, ts.getTextOfNode(location));
                }
                else {
                    const prevIsMethod = !!(prev & DeclarationMeaning.Method);
                    const isMethod = !!(meaning & DeclarationMeaning.Method);
                    if (prevIsMethod || isMethod) {
                        if (prevIsMethod !== isMethod) {
                            error(location, ts.Diagnostics.Duplicate_identifier_0, ts.getTextOfNode(location));
                        }
                        // If this is a method/method duplication is might be an overload, so this will be handled when overloads are considered
                    }
                    else if (prev & meaning & ~DeclarationMeaning.PrivateStatic) {
                        error(location, ts.Diagnostics.Duplicate_identifier_0, ts.getTextOfNode(location));
                    }
                    else {
                        names.set(name, prev | meaning);
                    }
                }
            }
            else {
                names.set(name, meaning);
            }
        }
    }

    /**
     * Static members being set on a constructor function may conflict with built-in properties
     * of Function. Esp. in ECMAScript 5 there are non-configurable and non-writable
     * built-in properties. This check issues a transpile error when a class has a static
     * member with the same name as a non-writable built-in property.
     *
     * @see http://www.ecma-international.org/ecma-262/5.1/#sec-15.3.3
     * @see http://www.ecma-international.org/ecma-262/5.1/#sec-15.3.5
     * @see http://www.ecma-international.org/ecma-262/6.0/#sec-properties-of-the-function-constructor
     * @see http://www.ecma-international.org/ecma-262/6.0/#sec-function-instances
     */
    function checkClassForStaticPropertyNameConflicts(node: ts.ClassLikeDeclaration) {
        for (const member of node.members) {
            const memberNameNode = member.name;
            const isStaticMember = ts.isStatic(member);
            if (isStaticMember && memberNameNode) {
                const memberName = ts.getPropertyNameForPropertyNameNode(memberNameNode);
                switch (memberName) {
                    case "name":
                    case "length":
                    case "caller":
                    case "arguments":
                    case "prototype":
                        const message = ts.Diagnostics.Static_property_0_conflicts_with_built_in_property_Function_0_of_constructor_function_1;
                        const className = getNameOfSymbolAsWritten(getSymbolOfNode(node));
                        error(memberNameNode, message, memberName, className);
                        break;
                }
            }
        }
    }

    function checkObjectTypeForDuplicateDeclarations(node: ts.TypeLiteralNode | ts.InterfaceDeclaration) {
        const names = new ts.Map<string, boolean>();
        for (const member of node.members) {
            if (member.kind === ts.SyntaxKind.PropertySignature) {
                let memberName: string;
                const name = member.name!;
                switch (name.kind) {
                    case ts.SyntaxKind.StringLiteral:
                    case ts.SyntaxKind.NumericLiteral:
                        memberName = name.text;
                        break;
                    case ts.SyntaxKind.Identifier:
                        memberName = ts.idText(name);
                        break;
                    default:
                        continue;
                }

                if (names.get(memberName)) {
                    error(ts.getNameOfDeclaration(member.symbol.valueDeclaration), ts.Diagnostics.Duplicate_identifier_0, memberName);
                    error(member.name, ts.Diagnostics.Duplicate_identifier_0, memberName);
                }
                else {
                    names.set(memberName, true);
                }
            }
        }
    }

    function checkTypeForDuplicateIndexSignatures(node: ts.Node) {
        if (node.kind === ts.SyntaxKind.InterfaceDeclaration) {
            const nodeSymbol = getSymbolOfNode(node as ts.InterfaceDeclaration);
            // in case of merging interface declaration it is possible that we'll enter this check procedure several times for every declaration
            // to prevent this run check only for the first declaration of a given kind
            if (nodeSymbol.declarations && nodeSymbol.declarations.length > 0 && nodeSymbol.declarations[0] !== node) {
                return;
            }
        }

        // TypeScript 1.0 spec (April 2014)
        // 3.7.4: An object type can contain at most one string index signature and one numeric index signature.
        // 8.5: A class declaration can have at most one string index member declaration and one numeric index member declaration
        const indexSymbol = getIndexSymbol(getSymbolOfNode(node)!);
        if (indexSymbol?.declarations) {
            const indexSignatureMap = new ts.Map<ts.TypeId, { type: ts.Type, declarations: ts.IndexSignatureDeclaration[] }>();
            for (const declaration of (indexSymbol.declarations as ts.IndexSignatureDeclaration[])) {
                if (declaration.parameters.length === 1 && declaration.parameters[0].type) {
                    forEachType(getTypeFromTypeNode(declaration.parameters[0].type), type => {
                        const entry = indexSignatureMap.get(getTypeId(type));
                        if (entry) {
                            entry.declarations.push(declaration);
                        }
                        else {
                            indexSignatureMap.set(getTypeId(type), { type, declarations: [declaration] });
                        }
                    });
                }
            }
            indexSignatureMap.forEach(entry => {
                if (entry.declarations.length > 1) {
                    for (const declaration of entry.declarations) {
                        error(declaration, ts.Diagnostics.Duplicate_index_signature_for_type_0, typeToString(entry.type));
                    }
                }
            });
        }
    }

    function checkPropertyDeclaration(node: ts.PropertyDeclaration | ts.PropertySignature) {
        // Grammar checking
        if (!checkGrammarDecoratorsAndModifiers(node) && !checkGrammarProperty(node)) checkGrammarComputedPropertyName(node.name);
        checkVariableLikeDeclaration(node);

        setNodeLinksForPrivateIdentifierScope(node);

        // property signatures already report "initializer not allowed in ambient context" elsewhere
        if (ts.hasSyntacticModifier(node, ts.ModifierFlags.Abstract) && node.kind === ts.SyntaxKind.PropertyDeclaration && node.initializer) {
            error(node, ts.Diagnostics.Property_0_cannot_have_an_initializer_because_it_is_marked_abstract, ts.declarationNameToString(node.name));
        }
    }

    function checkPropertySignature(node: ts.PropertySignature) {
        if (ts.isPrivateIdentifier(node.name)) {
            error(node, ts.Diagnostics.Private_identifiers_are_not_allowed_outside_class_bodies);
        }
        return checkPropertyDeclaration(node);
    }

    function checkMethodDeclaration(node: ts.MethodDeclaration | ts.MethodSignature) {
        // Grammar checking
        if (!checkGrammarMethod(node)) checkGrammarComputedPropertyName(node.name);

        if (ts.isMethodDeclaration(node) && node.asteriskToken && ts.isIdentifier(node.name) && ts.idText(node.name) === "constructor") {
            error(node.name, ts.Diagnostics.Class_constructor_may_not_be_a_generator);
        }

        // Grammar checking for modifiers is done inside the function checkGrammarFunctionLikeDeclaration
        checkFunctionOrMethodDeclaration(node);

        // method signatures already report "implementation not allowed in ambient context" elsewhere
        if (ts.hasSyntacticModifier(node, ts.ModifierFlags.Abstract) && node.kind === ts.SyntaxKind.MethodDeclaration && node.body) {
            error(node, ts.Diagnostics.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract, ts.declarationNameToString(node.name));
        }

        // Private named methods are only allowed in class declarations
        if (ts.isPrivateIdentifier(node.name) && !ts.getContainingClass(node)) {
            error(node, ts.Diagnostics.Private_identifiers_are_not_allowed_outside_class_bodies);
        }

        setNodeLinksForPrivateIdentifierScope(node);
    }

    function setNodeLinksForPrivateIdentifierScope(node: ts.PropertyDeclaration | ts.PropertySignature | ts.MethodDeclaration | ts.MethodSignature | ts.AccessorDeclaration) {
        if (ts.isPrivateIdentifier(node.name) && languageVersion < ts.ScriptTarget.ESNext) {
            for (let lexicalScope = ts.getEnclosingBlockScopeContainer(node); !!lexicalScope; lexicalScope = ts.getEnclosingBlockScopeContainer(lexicalScope)) {
                getNodeLinks(lexicalScope).flags |= ts.NodeCheckFlags.ContainsClassWithPrivateIdentifiers;
            }

            // If this is a private element in a class expression inside the body of a loop,
            // then we must use a block-scoped binding to store the additional variables required
            // to transform private elements.
            if (ts.isClassExpression(node.parent)) {
                const enclosingIterationStatement = getEnclosingIterationStatement(node.parent);
                if (enclosingIterationStatement) {
                    getNodeLinks(node.name).flags |= ts.NodeCheckFlags.BlockScopedBindingInLoop;
                    getNodeLinks(enclosingIterationStatement).flags |= ts.NodeCheckFlags.LoopWithCapturedBlockScopedBinding;
                }
            }
        }
    }

    function checkClassStaticBlockDeclaration(node: ts.ClassStaticBlockDeclaration) {
        checkGrammarDecoratorsAndModifiers(node);

        ts.forEachChild(node, checkSourceElement);
    }

    function checkConstructorDeclaration(node: ts.ConstructorDeclaration) {
        // Grammar check on signature of constructor and modifier of the constructor is done in checkSignatureDeclaration function.
        checkSignatureDeclaration(node);
        // Grammar check for checking only related to constructorDeclaration
        if (!checkGrammarConstructorTypeParameters(node)) checkGrammarConstructorTypeAnnotation(node);

        checkSourceElement(node.body);

        const symbol = getSymbolOfNode(node);
        const firstDeclaration = ts.getDeclarationOfKind(symbol, node.kind);

        // Only type check the symbol once
        if (node === firstDeclaration) {
            checkFunctionOrConstructorSymbol(symbol);
        }

        // exit early in the case of signature - super checks are not relevant to them
        if (ts.nodeIsMissing(node.body)) {
            return;
        }

        addLazyDiagnostic(checkConstructorDeclarationDiagnostics);

        return;

        function isInstancePropertyWithInitializerOrPrivateIdentifierProperty(n: ts.Node): boolean {
            if (ts.isPrivateIdentifierClassElementDeclaration(n)) {
                return true;
            }
            return n.kind === ts.SyntaxKind.PropertyDeclaration &&
                !ts.isStatic(n) &&
                !!(n as ts.PropertyDeclaration).initializer;
        }

        function checkConstructorDeclarationDiagnostics() {
            // TS 1.0 spec (April 2014): 8.3.2
            // Constructors of classes with no extends clause may not contain super calls, whereas
            // constructors of derived classes must contain at least one super call somewhere in their function body.
            const containingClassDecl = node.parent as ts.ClassDeclaration;
            if (ts.getClassExtendsHeritageElement(containingClassDecl)) {
                captureLexicalThis(node.parent, containingClassDecl);
                const classExtendsNull = classDeclarationExtendsNull(containingClassDecl);
                const superCall = findFirstSuperCall(node.body!);
                if (superCall) {
                    if (classExtendsNull) {
                        error(superCall, ts.Diagnostics.A_constructor_cannot_contain_a_super_call_when_its_class_extends_null);
                    }

                    // A super call must be root-level in a constructor if both of the following are true:
                    // - The containing class is a derived class.
                    // - The constructor declares parameter properties
                    //   or the containing class declares instance member variables with initializers.

                    const superCallShouldBeRootLevel =
                        (ts.getEmitScriptTarget(compilerOptions) !== ts.ScriptTarget.ESNext || !useDefineForClassFields) &&
                        (ts.some((node.parent as ts.ClassDeclaration).members, isInstancePropertyWithInitializerOrPrivateIdentifierProperty) ||
                        ts.some(node.parameters, p => ts.hasSyntacticModifier(p, ts.ModifierFlags.ParameterPropertyModifier)));

                    if (superCallShouldBeRootLevel) {
                        // Until we have better flow analysis, it is an error to place the super call within any kind of block or conditional
                        // See GH #8277
                        if (!superCallIsRootLevelInConstructor(superCall, node.body!)) {
                            error(superCall, ts.Diagnostics.A_super_call_must_be_a_root_level_statement_within_a_constructor_of_a_derived_class_that_contains_initialized_properties_parameter_properties_or_private_identifiers);
                        }
                        // Skip past any prologue directives to check statements for referring to 'super' or 'this' before a super call
                        else {
                            let superCallStatement: ts.ExpressionStatement | undefined;

                            for (const statement of node.body!.statements) {
                                if (ts.isExpressionStatement(statement) && ts.isSuperCall(ts.skipOuterExpressions(statement.expression))) {
                                    superCallStatement = statement;
                                    break;
                                }
                                if (nodeImmediatelyReferencesSuperOrThis(statement)) {
                                    break;
                                }
                            }

                            // Until we have better flow analysis, it is an error to place the super call within any kind of block or conditional
                            // See GH #8277
                            if (superCallStatement === undefined) {
                                error(node, ts.Diagnostics.A_super_call_must_be_the_first_statement_in_the_constructor_to_refer_to_super_or_this_when_a_derived_class_contains_initialized_properties_parameter_properties_or_private_identifiers);
                            }
                        }
                    }
                }
                else if (!classExtendsNull) {
                    error(node, ts.Diagnostics.Constructors_for_derived_classes_must_contain_a_super_call);
                }
            }
        }
    }

    function superCallIsRootLevelInConstructor(superCall: ts.Node, body: ts.Block) {
        const superCallParent = ts.walkUpParenthesizedExpressions(superCall.parent);
        return ts.isExpressionStatement(superCallParent) && superCallParent.parent === body;
    }

    function nodeImmediatelyReferencesSuperOrThis(node: ts.Node): boolean {
        if (node.kind === ts.SyntaxKind.SuperKeyword || node.kind === ts.SyntaxKind.ThisKeyword) {
            return true;
        }

        if (ts.isThisContainerOrFunctionBlock(node)) {
            return false;
        }

        return !!ts.forEachChild(node, nodeImmediatelyReferencesSuperOrThis);
    }

    function checkAccessorDeclaration(node: ts.AccessorDeclaration) {
        if (ts.isIdentifier(node.name) && ts.idText(node.name) === "constructor") {
            error(node.name, ts.Diagnostics.Class_constructor_may_not_be_an_accessor);
        }
        addLazyDiagnostic(checkAccessorDeclarationDiagnostics);
        checkSourceElement(node.body);
        setNodeLinksForPrivateIdentifierScope(node);

        function checkAccessorDeclarationDiagnostics() {
            // Grammar checking accessors
            if (!checkGrammarFunctionLikeDeclaration(node) && !checkGrammarAccessor(node)) checkGrammarComputedPropertyName(node.name);

            checkDecorators(node);
            checkSignatureDeclaration(node);
            if (node.kind === ts.SyntaxKind.GetAccessor) {
                if (!(node.flags & ts.NodeFlags.Ambient) && ts.nodeIsPresent(node.body) && (node.flags & ts.NodeFlags.HasImplicitReturn)) {
                    if (!(node.flags & ts.NodeFlags.HasExplicitReturn)) {
                        error(node.name, ts.Diagnostics.A_get_accessor_must_return_a_value);
                    }
                }
            }
            // Do not use hasDynamicName here, because that returns false for well known symbols.
            // We want to perform checkComputedPropertyName for all computed properties, including
            // well known symbols.
            if (node.name.kind === ts.SyntaxKind.ComputedPropertyName) {
                checkComputedPropertyName(node.name);
            }

            if (hasBindableName(node)) {
                // TypeScript 1.0 spec (April 2014): 8.4.3
                // Accessors for the same member name must specify the same accessibility.
                const symbol = getSymbolOfNode(node);
                const getter = ts.getDeclarationOfKind<ts.AccessorDeclaration>(symbol, ts.SyntaxKind.GetAccessor);
                const setter = ts.getDeclarationOfKind<ts.AccessorDeclaration>(symbol, ts.SyntaxKind.SetAccessor);
                if (getter && setter && !(getNodeCheckFlags(getter) & ts.NodeCheckFlags.TypeChecked)) {
                    getNodeLinks(getter).flags |= ts.NodeCheckFlags.TypeChecked;
                    const getterFlags = ts.getEffectiveModifierFlags(getter);
                    const setterFlags = ts.getEffectiveModifierFlags(setter);
                    if ((getterFlags & ts.ModifierFlags.Abstract) !== (setterFlags & ts.ModifierFlags.Abstract)) {
                        error(getter.name, ts.Diagnostics.Accessors_must_both_be_abstract_or_non_abstract);
                        error(setter.name, ts.Diagnostics.Accessors_must_both_be_abstract_or_non_abstract);
                    }
                    if (((getterFlags & ts.ModifierFlags.Protected) && !(setterFlags & (ts.ModifierFlags.Protected | ts.ModifierFlags.Private))) ||
                        ((getterFlags & ts.ModifierFlags.Private) && !(setterFlags & ts.ModifierFlags.Private))) {
                        error(getter.name, ts.Diagnostics.A_get_accessor_must_be_at_least_as_accessible_as_the_setter);
                        error(setter.name, ts.Diagnostics.A_get_accessor_must_be_at_least_as_accessible_as_the_setter);
                    }

                    const getterType = getAnnotatedAccessorType(getter);
                    const setterType = getAnnotatedAccessorType(setter);
                    if (getterType && setterType) {
                        checkTypeAssignableTo(getterType, setterType, getter, ts.Diagnostics.The_return_type_of_a_get_accessor_must_be_assignable_to_its_set_accessor_type);
                    }
                }
            }
            const returnType = getTypeOfAccessors(getSymbolOfNode(node));
            if (node.kind === ts.SyntaxKind.GetAccessor) {
                checkAllCodePathsInNonVoidFunctionReturnOrThrow(node, returnType);
            }
        }
    }

    function checkMissingDeclaration(node: ts.Node) {
        checkDecorators(node);
    }

    function getEffectiveTypeArgumentAtIndex(node: ts.TypeReferenceNode | ts.ExpressionWithTypeArguments, typeParameters: readonly ts.TypeParameter[], index: number): ts.Type {
        if (node.typeArguments && index < node.typeArguments.length) {
            return getTypeFromTypeNode(node.typeArguments[index]);
        }
        return getEffectiveTypeArguments(node, typeParameters)[index];
    }

    function getEffectiveTypeArguments(node: ts.TypeReferenceNode | ts.ExpressionWithTypeArguments, typeParameters: readonly ts.TypeParameter[]): ts.Type[] {
        return fillMissingTypeArguments(ts.map(node.typeArguments!, getTypeFromTypeNode), typeParameters,
            getMinTypeArgumentCount(typeParameters), ts.isInJSFile(node));
    }

    function checkTypeArgumentConstraints(node: ts.TypeReferenceNode | ts.ExpressionWithTypeArguments, typeParameters: readonly ts.TypeParameter[]): boolean {
        let typeArguments: ts.Type[] | undefined;
        let mapper: ts.TypeMapper | undefined;
        let result = true;
        for (let i = 0; i < typeParameters.length; i++) {
            const constraint = getConstraintOfTypeParameter(typeParameters[i]);
            if (constraint) {
                if (!typeArguments) {
                    typeArguments = getEffectiveTypeArguments(node, typeParameters);
                    mapper = createTypeMapper(typeParameters, typeArguments);
                }
                result = result && checkTypeAssignableTo(
                    typeArguments[i],
                    instantiateType(constraint, mapper),
                    node.typeArguments![i],
                    ts.Diagnostics.Type_0_does_not_satisfy_the_constraint_1);
            }
        }
        return result;
    }

    function getTypeParametersForTypeReference(node: ts.TypeReferenceNode | ts.ExpressionWithTypeArguments) {
        const type = getTypeFromTypeReference(node);
        if (!isErrorType(type)) {
            const symbol = getNodeLinks(node).resolvedSymbol;
            if (symbol) {
                return symbol.flags & ts.SymbolFlags.TypeAlias && getSymbolLinks(symbol).typeParameters ||
                    (ts.getObjectFlags(type) & ts.ObjectFlags.Reference ? (type as ts.TypeReference).target.localTypeParameters : undefined);
            }
        }
        return undefined;
    }

    function checkTypeReferenceNode(node: ts.TypeReferenceNode | ts.ExpressionWithTypeArguments) {
        checkGrammarTypeArguments(node, node.typeArguments);
        if (node.kind === ts.SyntaxKind.TypeReference && node.typeName.jsdocDotPos !== undefined && !ts.isInJSFile(node) && !ts.isInJSDoc(node)) {
            grammarErrorAtPos(node, node.typeName.jsdocDotPos, 1, ts.Diagnostics.JSDoc_types_can_only_be_used_inside_documentation_comments);
        }
        ts.forEach(node.typeArguments, checkSourceElement);
        const type = getTypeFromTypeReference(node);
        if (!isErrorType(type)) {
            if (node.typeArguments) {
                addLazyDiagnostic(() => {
                    const typeParameters = getTypeParametersForTypeReference(node);
                    if (typeParameters) {
                        checkTypeArgumentConstraints(node, typeParameters);
                    }
                });
            }
            const symbol = getNodeLinks(node).resolvedSymbol;
            if (symbol) {
                if (ts.some(symbol.declarations, d => ts.isTypeDeclaration(d) && !!(d.flags & ts.NodeFlags.Deprecated))) {
                    addDeprecatedSuggestion(
                        getDeprecatedSuggestionNode(node),
                        symbol.declarations!,
                        symbol.escapedName as string
                    );
                }
            }
        }
    }

    function getTypeArgumentConstraint(node: ts.TypeNode): ts.Type | undefined {
        const typeReferenceNode = ts.tryCast(node.parent, ts.isTypeReferenceType);
        if (!typeReferenceNode) return undefined;
        const typeParameters = getTypeParametersForTypeReference(typeReferenceNode);
        if (!typeParameters) return undefined;
        const constraint = getConstraintOfTypeParameter(typeParameters[typeReferenceNode.typeArguments!.indexOf(node)]);
        return constraint && instantiateType(constraint, createTypeMapper(typeParameters, getEffectiveTypeArguments(typeReferenceNode, typeParameters)));
    }

    function checkTypeQuery(node: ts.TypeQueryNode) {
        getTypeFromTypeQueryNode(node);
    }

    function checkTypeLiteral(node: ts.TypeLiteralNode) {
        ts.forEach(node.members, checkSourceElement);
        addLazyDiagnostic(checkTypeLiteralDiagnostics);

        function checkTypeLiteralDiagnostics() {
            const type = getTypeFromTypeLiteralOrFunctionOrConstructorTypeNode(node);
            checkIndexConstraints(type, type.symbol);
            checkTypeForDuplicateIndexSignatures(node);
            checkObjectTypeForDuplicateDeclarations(node);
        }
    }

    function checkArrayType(node: ts.ArrayTypeNode) {
        checkSourceElement(node.elementType);
    }

    function checkTupleType(node: ts.TupleTypeNode) {
        const elementTypes = node.elements;
        let seenOptionalElement = false;
        let seenRestElement = false;
        const hasNamedElement = ts.some(elementTypes, ts.isNamedTupleMember);
        for (const e of elementTypes) {
            if (e.kind !== ts.SyntaxKind.NamedTupleMember && hasNamedElement) {
                grammarErrorOnNode(e, ts.Diagnostics.Tuple_members_must_all_have_names_or_all_not_have_names);
                break;
            }
            const flags = getTupleElementFlags(e);
            if (flags & ts.ElementFlags.Variadic) {
                const type = getTypeFromTypeNode((e as ts.RestTypeNode | ts.NamedTupleMember).type);
                if (!isArrayLikeType(type)) {
                    error(e, ts.Diagnostics.A_rest_element_type_must_be_an_array_type);
                    break;
                }
                if (isArrayType(type) || isTupleType(type) && type.target.combinedFlags & ts.ElementFlags.Rest) {
                    seenRestElement = true;
                }
            }
            else if (flags & ts.ElementFlags.Rest) {
                if (seenRestElement) {
                    grammarErrorOnNode(e, ts.Diagnostics.A_rest_element_cannot_follow_another_rest_element);
                    break;
                }
                seenRestElement = true;
            }
            else if (flags & ts.ElementFlags.Optional) {
                if (seenRestElement) {
                    grammarErrorOnNode(e, ts.Diagnostics.An_optional_element_cannot_follow_a_rest_element);
                    break;
                }
                seenOptionalElement = true;
            }
            else if (seenOptionalElement) {
                grammarErrorOnNode(e, ts.Diagnostics.A_required_element_cannot_follow_an_optional_element);
                break;
            }
        }
        ts.forEach(node.elements, checkSourceElement);
        getTypeFromTypeNode(node);
    }

    function checkUnionOrIntersectionType(node: ts.UnionOrIntersectionTypeNode) {
        ts.forEach(node.types, checkSourceElement);
        getTypeFromTypeNode(node);
    }

    function checkIndexedAccessIndexType(type: ts.Type, accessNode: ts.IndexedAccessTypeNode | ts.ElementAccessExpression) {
        if (!(type.flags & ts.TypeFlags.IndexedAccess)) {
            return type;
        }
        // Check if the index type is assignable to 'keyof T' for the object type.
        const objectType = (type as ts.IndexedAccessType).objectType;
        const indexType = (type as ts.IndexedAccessType).indexType;
        if (isTypeAssignableTo(indexType, getIndexType(objectType, /*stringsOnly*/ false))) {
            if (accessNode.kind === ts.SyntaxKind.ElementAccessExpression && ts.isAssignmentTarget(accessNode) &&
                ts.getObjectFlags(objectType) & ts.ObjectFlags.Mapped && getMappedTypeModifiers(objectType as ts.MappedType) & MappedTypeModifiers.IncludeReadonly) {
                error(accessNode, ts.Diagnostics.Index_signature_in_type_0_only_permits_reading, typeToString(objectType));
            }
            return type;
        }
        // Check if we're indexing with a numeric type and if either object or index types
        // is a generic type with a constraint that has a numeric index signature.
        const apparentObjectType = getApparentType(objectType);
        if (getIndexInfoOfType(apparentObjectType, numberType) && isTypeAssignableToKind(indexType, ts.TypeFlags.NumberLike)) {
            return type;
        }
        if (isGenericObjectType(objectType)) {
            const propertyName = getPropertyNameFromIndex(indexType, accessNode);
            if (propertyName) {
                const propertySymbol = forEachType(apparentObjectType, t => getPropertyOfType(t, propertyName));
                if (propertySymbol && ts.getDeclarationModifierFlagsFromSymbol(propertySymbol) & ts.ModifierFlags.NonPublicAccessibilityModifier) {
                    error(accessNode, ts.Diagnostics.Private_or_protected_member_0_cannot_be_accessed_on_a_type_parameter, ts.unescapeLeadingUnderscores(propertyName));
                    return errorType;
                }
            }
        }
        error(accessNode, ts.Diagnostics.Type_0_cannot_be_used_to_index_type_1, typeToString(indexType), typeToString(objectType));
        return errorType;
    }

    function checkIndexedAccessType(node: ts.IndexedAccessTypeNode) {
        checkSourceElement(node.objectType);
        checkSourceElement(node.indexType);
        checkIndexedAccessIndexType(getTypeFromIndexedAccessTypeNode(node), node);
    }

    function checkMappedType(node: ts.MappedTypeNode) {
        checkGrammarMappedType(node);
        checkSourceElement(node.typeParameter);
        checkSourceElement(node.nameType);
        checkSourceElement(node.type);

        if (!node.type) {
            reportImplicitAny(node, anyType);
        }

        const type = getTypeFromMappedTypeNode(node) as ts.MappedType;
        const nameType = getNameTypeFromMappedType(type);
        if (nameType) {
            checkTypeAssignableTo(nameType, keyofConstraintType, node.nameType);
        }
        else {
            const constraintType = getConstraintTypeFromMappedType(type);
            checkTypeAssignableTo(constraintType, keyofConstraintType, ts.getEffectiveConstraintOfTypeParameter(node.typeParameter));
        }
    }

    function checkGrammarMappedType(node: ts.MappedTypeNode) {
        if (node.members?.length) {
            return grammarErrorOnNode(node.members[0], ts.Diagnostics.A_mapped_type_may_not_declare_properties_or_methods);
        }
    }

    function checkThisType(node: ts.ThisTypeNode) {
        getTypeFromThisTypeNode(node);
    }

    function checkTypeOperator(node: ts.TypeOperatorNode) {
        checkGrammarTypeOperatorNode(node);
        checkSourceElement(node.type);
    }

    function checkConditionalType(node: ts.ConditionalTypeNode) {
        ts.forEachChild(node, checkSourceElement);
    }

    function checkInferType(node: ts.InferTypeNode) {
        if (!ts.findAncestor(node, n => n.parent && n.parent.kind === ts.SyntaxKind.ConditionalType && (n.parent as ts.ConditionalTypeNode).extendsType === n)) {
            grammarErrorOnNode(node, ts.Diagnostics.infer_declarations_are_only_permitted_in_the_extends_clause_of_a_conditional_type);
        }
        checkSourceElement(node.typeParameter);
        const symbol = getSymbolOfNode(node.typeParameter);
        if (symbol.declarations && symbol.declarations.length > 1) {
            const links = getSymbolLinks(symbol);
            if (!links.typeParametersChecked) {
                links.typeParametersChecked = true;
                const typeParameter = getDeclaredTypeOfTypeParameter(symbol);
                const declarations: ts.TypeParameterDeclaration[] = ts.getDeclarationsOfKind(symbol, ts.SyntaxKind.TypeParameter);
                if (!areTypeParametersIdentical(declarations, [typeParameter], decl => [decl])) {
                    // Report an error on every conflicting declaration.
                    const name = symbolToString(symbol);
                    for (const declaration of declarations) {
                        error(declaration.name, ts.Diagnostics.All_declarations_of_0_must_have_identical_constraints, name);
                    }
                }
            }
        }
        registerForUnusedIdentifiersCheck(node);
    }

    function checkTemplateLiteralType(node: ts.TemplateLiteralTypeNode) {
        for (const span of node.templateSpans) {
            checkSourceElement(span.type);
            const type = getTypeFromTypeNode(span.type);
            checkTypeAssignableTo(type, templateConstraintType, span.type);
        }
        getTypeFromTypeNode(node);
    }

    function checkImportType(node: ts.ImportTypeNode) {
        checkSourceElement(node.argument);

        if (node.assertions) {
            const override = ts.getResolutionModeOverrideForClause(node.assertions.assertClause, grammarErrorOnNode);
            if (override) {
                if (!ts.isNightly()) {
                    grammarErrorOnNode(node.assertions.assertClause, ts.Diagnostics.resolution_mode_assertions_are_unstable_Use_nightly_TypeScript_to_silence_this_error_Try_updating_with_npm_install_D_typescript_next);
                }
                if (ts.getEmitModuleResolutionKind(compilerOptions) !== ts.ModuleResolutionKind.Node16 && ts.getEmitModuleResolutionKind(compilerOptions) !== ts.ModuleResolutionKind.NodeNext) {
                    grammarErrorOnNode(node.assertions.assertClause, ts.Diagnostics.resolution_mode_assertions_are_only_supported_when_moduleResolution_is_node16_or_nodenext);
                }
            }
        }

        getTypeFromTypeNode(node);
    }

    function checkNamedTupleMember(node: ts.NamedTupleMember) {
        if (node.dotDotDotToken && node.questionToken) {
            grammarErrorOnNode(node, ts.Diagnostics.A_tuple_member_cannot_be_both_optional_and_rest);
        }
        if (node.type.kind === ts.SyntaxKind.OptionalType) {
            grammarErrorOnNode(node.type, ts.Diagnostics.A_labeled_tuple_element_is_declared_as_optional_with_a_question_mark_after_the_name_and_before_the_colon_rather_than_after_the_type);
        }
        if (node.type.kind === ts.SyntaxKind.RestType) {
            grammarErrorOnNode(node.type, ts.Diagnostics.A_labeled_tuple_element_is_declared_as_rest_with_a_before_the_name_rather_than_before_the_type);
        }
        checkSourceElement(node.type);
        getTypeFromTypeNode(node);
    }

    function isPrivateWithinAmbient(node: ts.Node): boolean {
        return (ts.hasEffectiveModifier(node, ts.ModifierFlags.Private) || ts.isPrivateIdentifierClassElementDeclaration(node)) && !!(node.flags & ts.NodeFlags.Ambient);
    }

    function getEffectiveDeclarationFlags(n: ts.Declaration, flagsToCheck: ts.ModifierFlags): ts.ModifierFlags {
        let flags = ts.getCombinedModifierFlags(n);

        // children of classes (even ambient classes) should not be marked as ambient or export
        // because those flags have no useful semantics there.
        if (n.parent.kind !== ts.SyntaxKind.InterfaceDeclaration &&
            n.parent.kind !== ts.SyntaxKind.ClassDeclaration &&
            n.parent.kind !== ts.SyntaxKind.ClassExpression &&
            n.flags & ts.NodeFlags.Ambient) {
            if (!(flags & ts.ModifierFlags.Ambient) && !(ts.isModuleBlock(n.parent) && ts.isModuleDeclaration(n.parent.parent) && ts.isGlobalScopeAugmentation(n.parent.parent))) {
                // It is nested in an ambient context, which means it is automatically exported
                flags |= ts.ModifierFlags.Export;
            }
            flags |= ts.ModifierFlags.Ambient;
        }

        return flags & flagsToCheck;
    }

    function checkFunctionOrConstructorSymbol(symbol: ts.Symbol): void {
        addLazyDiagnostic(() => checkFunctionOrConstructorSymbolWorker(symbol));
    }

    function checkFunctionOrConstructorSymbolWorker(symbol: ts.Symbol): void {
        function getCanonicalOverload(overloads: ts.Declaration[], implementation: ts.FunctionLikeDeclaration | undefined): ts.Declaration {
            // Consider the canonical set of flags to be the flags of the bodyDeclaration or the first declaration
            // Error on all deviations from this canonical set of flags
            // The caveat is that if some overloads are defined in lib.d.ts, we don't want to
            // report the errors on those. To achieve this, we will say that the implementation is
            // the canonical signature only if it is in the same container as the first overload
            const implementationSharesContainerWithFirstOverload = implementation !== undefined && implementation.parent === overloads[0].parent;
            return implementationSharesContainerWithFirstOverload ? implementation : overloads[0];
        }

        function checkFlagAgreementBetweenOverloads(overloads: ts.Declaration[], implementation: ts.FunctionLikeDeclaration | undefined, flagsToCheck: ts.ModifierFlags, someOverloadFlags: ts.ModifierFlags, allOverloadFlags: ts.ModifierFlags): void {
            // Error if some overloads have a flag that is not shared by all overloads. To find the
            // deviations, we XOR someOverloadFlags with allOverloadFlags
            const someButNotAllOverloadFlags = someOverloadFlags ^ allOverloadFlags;
            if (someButNotAllOverloadFlags !== 0) {
                const canonicalFlags = getEffectiveDeclarationFlags(getCanonicalOverload(overloads, implementation), flagsToCheck);
                ts.forEach(overloads, o => {
                    const deviation = getEffectiveDeclarationFlags(o, flagsToCheck) ^ canonicalFlags;
                    if (deviation & ts.ModifierFlags.Export) {
                        error(ts.getNameOfDeclaration(o), ts.Diagnostics.Overload_signatures_must_all_be_exported_or_non_exported);
                    }
                    else if (deviation & ts.ModifierFlags.Ambient) {
                        error(ts.getNameOfDeclaration(o), ts.Diagnostics.Overload_signatures_must_all_be_ambient_or_non_ambient);
                    }
                    else if (deviation & (ts.ModifierFlags.Private | ts.ModifierFlags.Protected)) {
                        error(ts.getNameOfDeclaration(o) || o, ts.Diagnostics.Overload_signatures_must_all_be_public_private_or_protected);
                    }
                    else if (deviation & ts.ModifierFlags.Abstract) {
                        error(ts.getNameOfDeclaration(o), ts.Diagnostics.Overload_signatures_must_all_be_abstract_or_non_abstract);
                    }
                });
            }
        }

        function checkQuestionTokenAgreementBetweenOverloads(overloads: ts.Declaration[], implementation: ts.FunctionLikeDeclaration | undefined, someHaveQuestionToken: boolean, allHaveQuestionToken: boolean): void {
            if (someHaveQuestionToken !== allHaveQuestionToken) {
                const canonicalHasQuestionToken = ts.hasQuestionToken(getCanonicalOverload(overloads, implementation));
                ts.forEach(overloads, o => {
                    const deviation = ts.hasQuestionToken(o) !== canonicalHasQuestionToken;
                    if (deviation) {
                        error(ts.getNameOfDeclaration(o), ts.Diagnostics.Overload_signatures_must_all_be_optional_or_required);
                    }
                });
            }
        }

        const flagsToCheck: ts.ModifierFlags = ts.ModifierFlags.Export | ts.ModifierFlags.Ambient | ts.ModifierFlags.Private | ts.ModifierFlags.Protected | ts.ModifierFlags.Abstract;
        let someNodeFlags: ts.ModifierFlags = ts.ModifierFlags.None;
        let allNodeFlags = flagsToCheck;
        let someHaveQuestionToken = false;
        let allHaveQuestionToken = true;
        let hasOverloads = false;
        let bodyDeclaration: ts.FunctionLikeDeclaration | undefined;
        let lastSeenNonAmbientDeclaration: ts.FunctionLikeDeclaration | undefined;
        let previousDeclaration: ts.SignatureDeclaration | undefined;

        const declarations = symbol.declarations;
        const isConstructor = (symbol.flags & ts.SymbolFlags.Constructor) !== 0;

        function reportImplementationExpectedError(node: ts.SignatureDeclaration): void {
            if (node.name && ts.nodeIsMissing(node.name)) {
                return;
            }

            let seen = false;
            const subsequentNode = ts.forEachChild(node.parent, c => {
                if (seen) {
                    return c;
                }
                else {
                    seen = c === node;
                }
            });
            // We may be here because of some extra nodes between overloads that could not be parsed into a valid node.
            // In this case the subsequent node is not really consecutive (.pos !== node.end), and we must ignore it here.
            if (subsequentNode && subsequentNode.pos === node.end) {
                if (subsequentNode.kind === node.kind) {
                    const errorNode: ts.Node = (subsequentNode as ts.FunctionLikeDeclaration).name || subsequentNode;
                    const subsequentName = (subsequentNode as ts.FunctionLikeDeclaration).name;
                    if (node.name && subsequentName && (
                        // both are private identifiers
                        ts.isPrivateIdentifier(node.name) && ts.isPrivateIdentifier(subsequentName) && node.name.escapedText === subsequentName.escapedText ||
                        // Both are computed property names
                        // TODO: GH#17345: These are methods, so handle computed name case. (`Always allowing computed property names is *not* the correct behavior!)
                        ts.isComputedPropertyName(node.name) && ts.isComputedPropertyName(subsequentName) ||
                        // Both are literal property names that are the same.
                        ts.isPropertyNameLiteral(node.name) && ts.isPropertyNameLiteral(subsequentName) &&
                        ts.getEscapedTextOfIdentifierOrLiteral(node.name) === ts.getEscapedTextOfIdentifierOrLiteral(subsequentName)
                    )) {
                        const reportError =
                            (node.kind === ts.SyntaxKind.MethodDeclaration || node.kind === ts.SyntaxKind.MethodSignature) &&
                            ts.isStatic(node) !== ts.isStatic(subsequentNode);
                        // we can get here in two cases
                        // 1. mixed static and instance class members
                        // 2. something with the same name was defined before the set of overloads that prevents them from merging
                        // here we'll report error only for the first case since for second we should already report error in binder
                        if (reportError) {
                            const diagnostic = ts.isStatic(node) ? ts.Diagnostics.Function_overload_must_be_static : ts.Diagnostics.Function_overload_must_not_be_static;
                            error(errorNode, diagnostic);
                        }
                        return;
                    }
                    if (ts.nodeIsPresent((subsequentNode as ts.FunctionLikeDeclaration).body)) {
                        error(errorNode, ts.Diagnostics.Function_implementation_name_must_be_0, ts.declarationNameToString(node.name));
                        return;
                    }
                }
            }
            const errorNode: ts.Node = node.name || node;
            if (isConstructor) {
                error(errorNode, ts.Diagnostics.Constructor_implementation_is_missing);
            }
            else {
                // Report different errors regarding non-consecutive blocks of declarations depending on whether
                // the node in question is abstract.
                if (ts.hasSyntacticModifier(node, ts.ModifierFlags.Abstract)) {
                    error(errorNode, ts.Diagnostics.All_declarations_of_an_abstract_method_must_be_consecutive);
                }
                else {
                    error(errorNode, ts.Diagnostics.Function_implementation_is_missing_or_not_immediately_following_the_declaration);
                }
            }
        }

        let duplicateFunctionDeclaration = false;
        let multipleConstructorImplementation = false;
        let hasNonAmbientClass = false;
        const functionDeclarations = [] as ts.Declaration[];
        if (declarations) {
            for (const current of declarations) {
                const node = current as ts.SignatureDeclaration | ts.ClassDeclaration | ts.ClassExpression;
                const inAmbientContext = node.flags & ts.NodeFlags.Ambient;
                const inAmbientContextOrInterface = node.parent && (node.parent.kind === ts.SyntaxKind.InterfaceDeclaration || node.parent.kind === ts.SyntaxKind.TypeLiteral) || inAmbientContext;
                if (inAmbientContextOrInterface) {
                    // check if declarations are consecutive only if they are non-ambient
                    // 1. ambient declarations can be interleaved
                    // i.e. this is legal
                    //     declare function foo();
                    //     declare function bar();
                    //     declare function foo();
                    // 2. mixing ambient and non-ambient declarations is a separate error that will be reported - do not want to report an extra one
                    previousDeclaration = undefined;
                }

                if ((node.kind === ts.SyntaxKind.ClassDeclaration || node.kind === ts.SyntaxKind.ClassExpression) && !inAmbientContext) {
                    hasNonAmbientClass = true;
                }

                if (node.kind === ts.SyntaxKind.FunctionDeclaration || node.kind === ts.SyntaxKind.MethodDeclaration || node.kind === ts.SyntaxKind.MethodSignature || node.kind === ts.SyntaxKind.Constructor) {
                    functionDeclarations.push(node);
                    const currentNodeFlags = getEffectiveDeclarationFlags(node, flagsToCheck);
                    someNodeFlags |= currentNodeFlags;
                    allNodeFlags &= currentNodeFlags;
                    someHaveQuestionToken = someHaveQuestionToken || ts.hasQuestionToken(node);
                    allHaveQuestionToken = allHaveQuestionToken && ts.hasQuestionToken(node);
                    const bodyIsPresent = ts.nodeIsPresent((node as ts.FunctionLikeDeclaration).body);

                    if (bodyIsPresent && bodyDeclaration) {
                        if (isConstructor) {
                            multipleConstructorImplementation = true;
                        }
                        else {
                            duplicateFunctionDeclaration = true;
                        }
                    }
                    else if (previousDeclaration?.parent === node.parent && previousDeclaration.end !== node.pos) {
                        reportImplementationExpectedError(previousDeclaration);
                    }

                    if (bodyIsPresent) {
                        if (!bodyDeclaration) {
                            bodyDeclaration = node as ts.FunctionLikeDeclaration;
                        }
                    }
                    else {
                        hasOverloads = true;
                    }

                    previousDeclaration = node;

                    if (!inAmbientContextOrInterface) {
                        lastSeenNonAmbientDeclaration = node as ts.FunctionLikeDeclaration;
                    }
                }
            }
        }

        if (multipleConstructorImplementation) {
            ts.forEach(functionDeclarations, declaration => {
                error(declaration, ts.Diagnostics.Multiple_constructor_implementations_are_not_allowed);
            });
        }

        if (duplicateFunctionDeclaration) {
            ts.forEach(functionDeclarations, declaration => {
                error(ts.getNameOfDeclaration(declaration) || declaration, ts.Diagnostics.Duplicate_function_implementation);
            });
        }

        if (hasNonAmbientClass && !isConstructor && symbol.flags & ts.SymbolFlags.Function && declarations) {
            const relatedDiagnostics = ts.filter(declarations, d => d.kind === ts.SyntaxKind.ClassDeclaration)
                .map(d => ts.createDiagnosticForNode(d, ts.Diagnostics.Consider_adding_a_declare_modifier_to_this_class));

            ts.forEach(declarations, declaration => {
                const diagnostic = declaration.kind === ts.SyntaxKind.ClassDeclaration
                        ? ts.Diagnostics.Class_declaration_cannot_implement_overload_list_for_0
                        : declaration.kind === ts.SyntaxKind.FunctionDeclaration
                            ? ts.Diagnostics.Function_with_bodies_can_only_merge_with_classes_that_are_ambient
                            : undefined;
                if (diagnostic) {
                    ts.addRelatedInfo(
                        error(ts.getNameOfDeclaration(declaration) || declaration, diagnostic, ts.symbolName(symbol)),
                        ...relatedDiagnostics
                    );
                }
            });
        }

        // Abstract methods can't have an implementation -- in particular, they don't need one.
        if (lastSeenNonAmbientDeclaration && !lastSeenNonAmbientDeclaration.body &&
            !ts.hasSyntacticModifier(lastSeenNonAmbientDeclaration, ts.ModifierFlags.Abstract) && !lastSeenNonAmbientDeclaration.questionToken) {
            reportImplementationExpectedError(lastSeenNonAmbientDeclaration);
        }

        if (hasOverloads) {
            if (declarations) {
                checkFlagAgreementBetweenOverloads(declarations, bodyDeclaration, flagsToCheck, someNodeFlags, allNodeFlags);
                checkQuestionTokenAgreementBetweenOverloads(declarations, bodyDeclaration, someHaveQuestionToken, allHaveQuestionToken);
            }

            if (bodyDeclaration) {
                const signatures = getSignaturesOfSymbol(symbol);
                const bodySignature = getSignatureFromDeclaration(bodyDeclaration);
                for (const signature of signatures) {
                    if (!isImplementationCompatibleWithOverload(bodySignature, signature)) {
                        ts.addRelatedInfo(
                            error(signature.declaration, ts.Diagnostics.This_overload_signature_is_not_compatible_with_its_implementation_signature),
                            ts.createDiagnosticForNode(bodyDeclaration, ts.Diagnostics.The_implementation_signature_is_declared_here)
                        );
                        break;
                    }
                }
            }
        }
    }

    function checkExportsOnMergedDeclarations(node: ts.Declaration): void {
        addLazyDiagnostic(() => checkExportsOnMergedDeclarationsWorker(node));
    }

    function checkExportsOnMergedDeclarationsWorker(node: ts.Declaration): void {
        // if localSymbol is defined on node then node itself is exported - check is required
        let symbol = node.localSymbol;
        if (!symbol) {
            // local symbol is undefined => this declaration is non-exported.
            // however symbol might contain other declarations that are exported
            symbol = getSymbolOfNode(node)!;
            if (!symbol.exportSymbol) {
                // this is a pure local symbol (all declarations are non-exported) - no need to check anything
                return;
            }
        }

        // run the check only for the first declaration in the list
        if (ts.getDeclarationOfKind(symbol, node.kind) !== node) {
            return;
        }

        let exportedDeclarationSpaces = DeclarationSpaces.None;
        let nonExportedDeclarationSpaces = DeclarationSpaces.None;
        let defaultExportedDeclarationSpaces = DeclarationSpaces.None;
        for (const d of symbol.declarations!) {
            const declarationSpaces = getDeclarationSpaces(d);
            const effectiveDeclarationFlags = getEffectiveDeclarationFlags(d, ts.ModifierFlags.Export | ts.ModifierFlags.Default);

            if (effectiveDeclarationFlags & ts.ModifierFlags.Export) {
                if (effectiveDeclarationFlags & ts.ModifierFlags.Default) {
                    defaultExportedDeclarationSpaces |= declarationSpaces;
                }
                else {
                    exportedDeclarationSpaces |= declarationSpaces;
                }
            }
            else {
                nonExportedDeclarationSpaces |= declarationSpaces;
            }
        }

        // Spaces for anything not declared a 'default export'.
        const nonDefaultExportedDeclarationSpaces = exportedDeclarationSpaces | nonExportedDeclarationSpaces;

        const commonDeclarationSpacesForExportsAndLocals = exportedDeclarationSpaces & nonExportedDeclarationSpaces;
        const commonDeclarationSpacesForDefaultAndNonDefault = defaultExportedDeclarationSpaces & nonDefaultExportedDeclarationSpaces;

        if (commonDeclarationSpacesForExportsAndLocals || commonDeclarationSpacesForDefaultAndNonDefault) {
            // declaration spaces for exported and non-exported declarations intersect
            for (const d of symbol.declarations!) {
                const declarationSpaces = getDeclarationSpaces(d);

                const name = ts.getNameOfDeclaration(d);
                // Only error on the declarations that contributed to the intersecting spaces.
                if (declarationSpaces & commonDeclarationSpacesForDefaultAndNonDefault) {
                    error(name, ts.Diagnostics.Merged_declaration_0_cannot_include_a_default_export_declaration_Consider_adding_a_separate_export_default_0_declaration_instead, ts.declarationNameToString(name));
                }
                else if (declarationSpaces & commonDeclarationSpacesForExportsAndLocals) {
                    error(name, ts.Diagnostics.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local, ts.declarationNameToString(name));
                }
            }
        }

        function getDeclarationSpaces(decl: ts.Declaration): DeclarationSpaces {
            let d = decl as ts.Node;
            switch (d.kind) {
                case ts.SyntaxKind.InterfaceDeclaration:
                case ts.SyntaxKind.TypeAliasDeclaration:

                // A jsdoc typedef and callback are, by definition, type aliases.
                // falls through
                case ts.SyntaxKind.JSDocTypedefTag:
                case ts.SyntaxKind.JSDocCallbackTag:
                case ts.SyntaxKind.JSDocEnumTag:
                    return DeclarationSpaces.ExportType;
                case ts.SyntaxKind.ModuleDeclaration:
                    return ts.isAmbientModule(d as ts.ModuleDeclaration) || ts.getModuleInstanceState(d as ts.ModuleDeclaration) !== ts.ModuleInstanceState.NonInstantiated
                        ? DeclarationSpaces.ExportNamespace | DeclarationSpaces.ExportValue
                        : DeclarationSpaces.ExportNamespace;
                case ts.SyntaxKind.ClassDeclaration:
                case ts.SyntaxKind.EnumDeclaration:
                case ts.SyntaxKind.EnumMember:
                    return DeclarationSpaces.ExportType | DeclarationSpaces.ExportValue;
                case ts.SyntaxKind.SourceFile:
                    return DeclarationSpaces.ExportType | DeclarationSpaces.ExportValue | DeclarationSpaces.ExportNamespace;
                case ts.SyntaxKind.ExportAssignment:
                case ts.SyntaxKind.BinaryExpression:
                    const node = d as ts.ExportAssignment | ts.BinaryExpression;
                    const expression = ts.isExportAssignment(node) ? node.expression : node.right;
                    // Export assigned entity name expressions act as aliases and should fall through, otherwise they export values
                    if (!ts.isEntityNameExpression(expression)) {
                        return DeclarationSpaces.ExportValue;
                    }
                    d = expression;

                // The below options all declare an Alias, which is allowed to merge with other values within the importing module.
                // falls through
                case ts.SyntaxKind.ImportEqualsDeclaration:
                case ts.SyntaxKind.NamespaceImport:
                case ts.SyntaxKind.ImportClause:
                    let result = DeclarationSpaces.None;
                    const target = resolveAlias(getSymbolOfNode(d)!);
                    ts.forEach(target.declarations, d => {
                        result |= getDeclarationSpaces(d);
                    });
                    return result;
                case ts.SyntaxKind.VariableDeclaration:
                case ts.SyntaxKind.BindingElement:
                case ts.SyntaxKind.FunctionDeclaration:
                case ts.SyntaxKind.ImportSpecifier: // https://github.com/Microsoft/TypeScript/pull/7591
                case ts.SyntaxKind.Identifier: // https://github.com/microsoft/TypeScript/issues/36098
                // Identifiers are used as declarations of assignment declarations whose parents may be
                // SyntaxKind.CallExpression - `Object.defineProperty(thing, "aField", {value: 42});`
                // SyntaxKind.ElementAccessExpression - `thing["aField"] = 42;` or `thing["aField"];` (with a doc comment on it)
                // or SyntaxKind.PropertyAccessExpression - `thing.aField = 42;`
                // all of which are pretty much always values, or at least imply a value meaning.
                // It may be apprpriate to treat these as aliases in the future.
                    return DeclarationSpaces.ExportValue;
                default:
                    return ts.Debug.failBadSyntaxKind(d);
            }
        }
    }

    function getAwaitedTypeOfPromise(type: ts.Type, errorNode?: ts.Node, diagnosticMessage?: ts.DiagnosticMessage, arg0?: string | number): ts.Type | undefined {
        const promisedType = getPromisedTypeOfPromise(type, errorNode);
        return promisedType && getAwaitedType(promisedType, errorNode, diagnosticMessage, arg0);
    }

    /**
     * Gets the "promised type" of a promise.
     * @param type The type of the promise.
     * @remarks The "promised type" of a type is the type of the "value" parameter of the "onfulfilled" callback.
     */
    function getPromisedTypeOfPromise(type: ts.Type, errorNode?: ts.Node, thisTypeForErrorOut?: { value?: ts.Type }): ts.Type | undefined {
        //
        //  { // type
        //      then( // thenFunction
        //          onfulfilled: ( // onfulfilledParameterType
        //              value: T // valueParameterType
        //          ) => any
        //      ): any;
        //  }
        //

        if (isTypeAny(type)) {
            return undefined;
        }

        const typeAsPromise = type as ts.PromiseOrAwaitableType;
        if (typeAsPromise.promisedTypeOfPromise) {
            return typeAsPromise.promisedTypeOfPromise;
        }

        if (isReferenceToType(type, getGlobalPromiseType(/*reportErrors*/ false))) {
            return typeAsPromise.promisedTypeOfPromise = getTypeArguments(type as ts.GenericType)[0];
        }

        // primitives with a `{ then() }` won't be unwrapped/adopted.
        if (allTypesAssignableToKind(getBaseConstraintOrType(type), ts.TypeFlags.Primitive | ts.TypeFlags.Never)) {
            return undefined;
        }

        const thenFunction = getTypeOfPropertyOfType(type, "then" as ts.__String)!; // TODO: GH#18217
        if (isTypeAny(thenFunction)) {
            return undefined;
        }

        const thenSignatures = thenFunction ? getSignaturesOfType(thenFunction, ts.SignatureKind.Call) : ts.emptyArray;
        if (thenSignatures.length === 0) {
            if (errorNode) {
                error(errorNode, ts.Diagnostics.A_promise_must_have_a_then_method);
            }
            return undefined;
        }

        let thisTypeForError: ts.Type | undefined;
        let candidates: ts.Signature[] | undefined;
        for (const thenSignature of thenSignatures) {
            const thisType = getThisTypeOfSignature(thenSignature);
            if (thisType && thisType !== voidType && !isTypeRelatedTo(type, thisType, subtypeRelation)) {
                thisTypeForError = thisType;
            }
            else {
                candidates = ts.append(candidates, thenSignature);
            }
        }

        if (!candidates) {
            ts.Debug.assertIsDefined(thisTypeForError);
            if (thisTypeForErrorOut) {
                thisTypeForErrorOut.value = thisTypeForError;
            }
            if (errorNode) {
                error(errorNode, ts.Diagnostics.The_this_context_of_type_0_is_not_assignable_to_method_s_this_of_type_1, typeToString(type), typeToString(thisTypeForError));
            }
            return undefined;
        }

        const onfulfilledParameterType = getTypeWithFacts(getUnionType(ts.map(candidates, getTypeOfFirstParameterOfSignature)), TypeFacts.NEUndefinedOrNull);
        if (isTypeAny(onfulfilledParameterType)) {
            return undefined;
        }

        const onfulfilledParameterSignatures = getSignaturesOfType(onfulfilledParameterType, ts.SignatureKind.Call);
        if (onfulfilledParameterSignatures.length === 0) {
            if (errorNode) {
                error(errorNode, ts.Diagnostics.The_first_parameter_of_the_then_method_of_a_promise_must_be_a_callback);
            }
            return undefined;
        }

        return typeAsPromise.promisedTypeOfPromise = getUnionType(ts.map(onfulfilledParameterSignatures, getTypeOfFirstParameterOfSignature), ts.UnionReduction.Subtype);
    }

    /**
     * Gets the "awaited type" of a type.
     * @param type The type to await.
     * @param withAlias When `true`, wraps the "awaited type" in `Awaited<T>` if needed.
     * @remarks The "awaited type" of an expression is its "promised type" if the expression is a
     * Promise-like type; otherwise, it is the type of the expression. This is used to reflect
     * The runtime behavior of the `await` keyword.
     */
    function checkAwaitedType(type: ts.Type, withAlias: boolean, errorNode: ts.Node, diagnosticMessage: ts.DiagnosticMessage, arg0?: string | number): ts.Type {
        const awaitedType = withAlias ?
            getAwaitedType(type, errorNode, diagnosticMessage, arg0) :
            getAwaitedTypeNoAlias(type, errorNode, diagnosticMessage, arg0);
        return awaitedType || errorType;
    }

    /**
     * Determines whether a type is an object with a callable `then` member.
     */
    function isThenableType(type: ts.Type): boolean {
        if (allTypesAssignableToKind(getBaseConstraintOrType(type), ts.TypeFlags.Primitive | ts.TypeFlags.Never)) {
            // primitive types cannot be considered "thenable" since they are not objects.
            return false;
        }

        const thenFunction = getTypeOfPropertyOfType(type, "then" as ts.__String);
        return !!thenFunction && getSignaturesOfType(getTypeWithFacts(thenFunction, TypeFacts.NEUndefinedOrNull), ts.SignatureKind.Call).length > 0;
    }

    interface AwaitedTypeInstantiation extends ts.Type {
        _awaitedTypeBrand: never;
        aliasSymbol: ts.Symbol;
        aliasTypeArguments: readonly ts.Type[];
    }

    function isAwaitedTypeInstantiation(type: ts.Type): type is AwaitedTypeInstantiation {
        if (type.flags & ts.TypeFlags.Conditional) {
            const awaitedSymbol = getGlobalAwaitedSymbol(/*reportErrors*/ false);
            return !!awaitedSymbol && type.aliasSymbol === awaitedSymbol && type.aliasTypeArguments?.length === 1;
        }
        return false;
    }

    /**
     * For a generic `Awaited<T>`, gets `T`.
     */
    function unwrapAwaitedType(type: ts.Type) {
        return type.flags & ts.TypeFlags.Union ? mapType(type, unwrapAwaitedType) :
            isAwaitedTypeInstantiation(type) ? type.aliasTypeArguments[0] :
            type;
    }

    function isAwaitedTypeNeeded(type: ts.Type) {
        // If this is already an `Awaited<T>`, we shouldn't wrap it. This helps to avoid `Awaited<Awaited<T>>` in higher-order.
        if (isTypeAny(type) || isAwaitedTypeInstantiation(type)) {
            return false;
        }

        // We only need `Awaited<T>` if `T` contains possibly non-primitive types.
        if (isGenericObjectType(type)) {
            const baseConstraint = getBaseConstraintOfType(type);
            // We only need `Awaited<T>` if `T` is a type variable that has no base constraint, or the base constraint of `T` is `any`, `unknown`, `{}`, `object`,
            // or is promise-like.
            if (baseConstraint ?
                baseConstraint.flags & ts.TypeFlags.AnyOrUnknown || isEmptyObjectType(baseConstraint) || someType(baseConstraint, isThenableType) :
                maybeTypeOfKind(type, ts.TypeFlags.TypeVariable)) {
                return true;
            }
        }

        return false;
    }

    function tryCreateAwaitedType(type: ts.Type): ts.Type | undefined {
        // Nothing to do if `Awaited<T>` doesn't exist
        const awaitedSymbol = getGlobalAwaitedSymbol(/*reportErrors*/ true);
        if (awaitedSymbol) {
            // Unwrap unions that may contain `Awaited<T>`, otherwise its possible to manufacture an `Awaited<Awaited<T> | U>` where
            // an `Awaited<T | U>` would suffice.
            return getTypeAliasInstantiation(awaitedSymbol, [unwrapAwaitedType(type)]);
        }

        return undefined;
    }

    function createAwaitedTypeIfNeeded(type: ts.Type): ts.Type {
        // We wrap type `T` in `Awaited<T>` based on the following conditions:
        // - `T` is not already an `Awaited<U>`, and
        // - `T` is generic, and
        // - One of the following applies:
        //   - `T` has no base constraint, or
        //   - The base constraint of `T` is `any`, `unknown`, `object`, or `{}`, or
        //   - The base constraint of `T` is an object type with a callable `then` method.

        if (isAwaitedTypeNeeded(type)) {
            const awaitedType = tryCreateAwaitedType(type);
            if (awaitedType) {
                return awaitedType;
            }
        }

        ts.Debug.assert(getPromisedTypeOfPromise(type) === undefined, "type provided should not be a non-generic 'promise'-like.");
        return type;
    }

    /**
     * Gets the "awaited type" of a type.
     *
     * The "awaited type" of an expression is its "promised type" if the expression is a
     * Promise-like type; otherwise, it is the type of the expression. If the "promised
     * type" is itself a Promise-like, the "promised type" is recursively unwrapped until a
     * non-promise type is found.
     *
     * This is used to reflect the runtime behavior of the `await` keyword.
     */
    function getAwaitedType(type: ts.Type, errorNode?: ts.Node, diagnosticMessage?: ts.DiagnosticMessage, arg0?: string | number): ts.Type | undefined {
        const awaitedType = getAwaitedTypeNoAlias(type, errorNode, diagnosticMessage, arg0);
        return awaitedType && createAwaitedTypeIfNeeded(awaitedType);
    }

    /**
     * Gets the "awaited type" of a type without introducing an `Awaited<T>` wrapper.
     *
     * @see {@link getAwaitedType}
     */
    function getAwaitedTypeNoAlias(type: ts.Type, errorNode?: ts.Node, diagnosticMessage?: ts.DiagnosticMessage, arg0?: string | number): ts.Type | undefined {
        if (isTypeAny(type)) {
            return type;
        }

        // If this is already an `Awaited<T>`, just return it. This avoids `Awaited<Awaited<T>>` in higher-order
        if (isAwaitedTypeInstantiation(type)) {
            return type;
        }

        // If we've already cached an awaited type, return a possible `Awaited<T>` for it.
        const typeAsAwaitable = type as ts.PromiseOrAwaitableType;
        if (typeAsAwaitable.awaitedTypeOfType) {
            return typeAsAwaitable.awaitedTypeOfType;
        }

        // For a union, get a union of the awaited types of each constituent.
        if (type.flags & ts.TypeFlags.Union) {
            if (awaitedTypeStack.lastIndexOf(type.id) >= 0) {
                if (errorNode) {
                    error(errorNode, ts.Diagnostics.Type_is_referenced_directly_or_indirectly_in_the_fulfillment_callback_of_its_own_then_method);
                }
                return undefined;
            }

            const mapper = errorNode ? (constituentType: ts.Type) => getAwaitedTypeNoAlias(constituentType, errorNode, diagnosticMessage, arg0) : getAwaitedTypeNoAlias;

            awaitedTypeStack.push(type.id);
            const mapped = mapType(type, mapper);
            awaitedTypeStack.pop();

            return typeAsAwaitable.awaitedTypeOfType = mapped;
        }

        // If `type` is generic and should be wrapped in `Awaited<T>`, return it.
        if (isAwaitedTypeNeeded(type)) {
            return typeAsAwaitable.awaitedTypeOfType = type;
        }

        const thisTypeForErrorOut: { value: ts.Type | undefined } = { value: undefined };
        const promisedType = getPromisedTypeOfPromise(type, /*errorNode*/ undefined, thisTypeForErrorOut);
        if (promisedType) {
            if (type.id === promisedType.id || awaitedTypeStack.lastIndexOf(promisedType.id) >= 0) {
                // Verify that we don't have a bad actor in the form of a promise whose
                // promised type is the same as the promise type, or a mutually recursive
                // promise. If so, we return undefined as we cannot guess the shape. If this
                // were the actual case in the JavaScript, this Promise would never resolve.
                //
                // An example of a bad actor with a singly-recursive promise type might
                // be:
                //
                //  interface BadPromise {
                //      then(
                //          onfulfilled: (value: BadPromise) => any,
                //          onrejected: (error: any) => any): BadPromise;
                //  }
                //
                // The above interface will pass the PromiseLike check, and return a
                // promised type of `BadPromise`. Since this is a self reference, we
                // don't want to keep recursing ad infinitum.
                //
                // An example of a bad actor in the form of a mutually-recursive
                // promise type might be:
                //
                //  interface BadPromiseA {
                //      then(
                //          onfulfilled: (value: BadPromiseB) => any,
                //          onrejected: (error: any) => any): BadPromiseB;
                //  }
                //
                //  interface BadPromiseB {
                //      then(
                //          onfulfilled: (value: BadPromiseA) => any,
                //          onrejected: (error: any) => any): BadPromiseA;
                //  }
                //
                if (errorNode) {
                    error(errorNode, ts.Diagnostics.Type_is_referenced_directly_or_indirectly_in_the_fulfillment_callback_of_its_own_then_method);
                }
                return undefined;
            }

            // Keep track of the type we're about to unwrap to avoid bad recursive promise types.
            // See the comments above for more information.
            awaitedTypeStack.push(type.id);
            const awaitedType = getAwaitedTypeNoAlias(promisedType, errorNode, diagnosticMessage, arg0);
            awaitedTypeStack.pop();

            if (!awaitedType) {
                return undefined;
            }

            return typeAsAwaitable.awaitedTypeOfType = awaitedType;
        }

        // The type was not a promise, so it could not be unwrapped any further.
        // As long as the type does not have a callable "then" property, it is
        // safe to return the type; otherwise, an error is reported and we return
        // undefined.
        //
        // An example of a non-promise "thenable" might be:
        //
        //  await { then(): void {} }
        //
        // The "thenable" does not match the minimal definition for a promise. When
        // a Promise/A+-compatible or ES6 promise tries to adopt this value, the promise
        // will never settle. We treat this as an error to help flag an early indicator
        // of a runtime problem. If the user wants to return this value from an async
        // function, they would need to wrap it in some other value. If they want it to
        // be treated as a promise, they can cast to <any>.
        if (isThenableType(type)) {
            if (errorNode) {
                ts.Debug.assertIsDefined(diagnosticMessage);
                let chain: ts.DiagnosticMessageChain | undefined;
                if (thisTypeForErrorOut.value) {
                    chain = ts.chainDiagnosticMessages(chain, ts.Diagnostics.The_this_context_of_type_0_is_not_assignable_to_method_s_this_of_type_1, typeToString(type), typeToString(thisTypeForErrorOut.value));
                }
                chain = ts.chainDiagnosticMessages(chain, diagnosticMessage, arg0);
                diagnostics.add(ts.createDiagnosticForNodeFromMessageChain(errorNode, chain));
            }
            return undefined;
        }

        return typeAsAwaitable.awaitedTypeOfType = type;
    }

    /**
     * Checks the return type of an async function to ensure it is a compatible
     * Promise implementation.
     *
     * This checks that an async function has a valid Promise-compatible return type.
     * An async function has a valid Promise-compatible return type if the resolved value
     * of the return type has a construct signature that takes in an `initializer` function
     * that in turn supplies a `resolve` function as one of its arguments and results in an
     * object with a callable `then` signature.
     *
     * @param node The signature to check
     */
    function checkAsyncFunctionReturnType(node: ts.FunctionLikeDeclaration | ts.MethodSignature, returnTypeNode: ts.TypeNode) {
        // As part of our emit for an async function, we will need to emit the entity name of
        // the return type annotation as an expression. To meet the necessary runtime semantics
        // for __awaiter, we must also check that the type of the declaration (e.g. the static
        // side or "constructor" of the promise type) is compatible `PromiseConstructorLike`.
        //
        // An example might be (from lib.es6.d.ts):
        //
        //  interface Promise<T> { ... }
        //  interface PromiseConstructor {
        //      new <T>(...): Promise<T>;
        //  }
        //  declare var Promise: PromiseConstructor;
        //
        // When an async function declares a return type annotation of `Promise<T>`, we
        // need to get the type of the `Promise` variable declaration above, which would
        // be `PromiseConstructor`.
        //
        // The same case applies to a class:
        //
        //  declare class Promise<T> {
        //      constructor(...);
        //      then<U>(...): Promise<U>;
        //  }
        //
        const returnType = getTypeFromTypeNode(returnTypeNode);

        if (languageVersion >= ts.ScriptTarget.ES2015) {
            if (isErrorType(returnType)) {
                return;
            }
            const globalPromiseType = getGlobalPromiseType(/*reportErrors*/ true);
            if (globalPromiseType !== emptyGenericType && !isReferenceToType(returnType, globalPromiseType)) {
                // The promise type was not a valid type reference to the global promise type, so we
                // report an error and return the unknown type.
                error(returnTypeNode, ts.Diagnostics.The_return_type_of_an_async_function_or_method_must_be_the_global_Promise_T_type_Did_you_mean_to_write_Promise_0, typeToString(getAwaitedTypeNoAlias(returnType) || voidType));
                return;
            }
        }
        else {
            // Always mark the type node as referenced if it points to a value
            markTypeNodeAsReferenced(returnTypeNode);

            if (isErrorType(returnType)) {
                return;
            }

            const promiseConstructorName = ts.getEntityNameFromTypeNode(returnTypeNode);
            if (promiseConstructorName === undefined) {
                error(returnTypeNode, ts.Diagnostics.Type_0_is_not_a_valid_async_function_return_type_in_ES5_SlashES3_because_it_does_not_refer_to_a_Promise_compatible_constructor_value, typeToString(returnType));
                return;
            }

            const promiseConstructorSymbol = resolveEntityName(promiseConstructorName, ts.SymbolFlags.Value, /*ignoreErrors*/ true);
            const promiseConstructorType = promiseConstructorSymbol ? getTypeOfSymbol(promiseConstructorSymbol) : errorType;
            if (isErrorType(promiseConstructorType)) {
                if (promiseConstructorName.kind === ts.SyntaxKind.Identifier && promiseConstructorName.escapedText === "Promise" && getTargetType(returnType) === getGlobalPromiseType(/*reportErrors*/ false)) {
                    error(returnTypeNode, ts.Diagnostics.An_async_function_or_method_in_ES5_SlashES3_requires_the_Promise_constructor_Make_sure_you_have_a_declaration_for_the_Promise_constructor_or_include_ES2015_in_your_lib_option);
                }
                else {
                    error(returnTypeNode, ts.Diagnostics.Type_0_is_not_a_valid_async_function_return_type_in_ES5_SlashES3_because_it_does_not_refer_to_a_Promise_compatible_constructor_value, ts.entityNameToString(promiseConstructorName));
                }
                return;
            }

            const globalPromiseConstructorLikeType = getGlobalPromiseConstructorLikeType(/*reportErrors*/ true);
            if (globalPromiseConstructorLikeType === emptyObjectType) {
                // If we couldn't resolve the global PromiseConstructorLike type we cannot verify
                // compatibility with __awaiter.
                error(returnTypeNode, ts.Diagnostics.Type_0_is_not_a_valid_async_function_return_type_in_ES5_SlashES3_because_it_does_not_refer_to_a_Promise_compatible_constructor_value, ts.entityNameToString(promiseConstructorName));
                return;
            }

            if (!checkTypeAssignableTo(promiseConstructorType, globalPromiseConstructorLikeType, returnTypeNode,
                ts.Diagnostics.Type_0_is_not_a_valid_async_function_return_type_in_ES5_SlashES3_because_it_does_not_refer_to_a_Promise_compatible_constructor_value)) {
                return;
            }

            // Verify there is no local declaration that could collide with the promise constructor.
            const rootName = promiseConstructorName && ts.getFirstIdentifier(promiseConstructorName);
            const collidingSymbol = getSymbol(node.locals!, rootName.escapedText, ts.SymbolFlags.Value);
            if (collidingSymbol) {
                error(collidingSymbol.valueDeclaration, ts.Diagnostics.Duplicate_identifier_0_Compiler_uses_declaration_1_to_support_async_functions,
                    ts.idText(rootName),
                    ts.entityNameToString(promiseConstructorName));
                return;
            }
        }
        checkAwaitedType(returnType, /*withAlias*/ false, node, ts.Diagnostics.The_return_type_of_an_async_function_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member);
    }

    /** Check a decorator */
    function checkDecorator(node: ts.Decorator): void {
        const signature = getResolvedSignature(node);
        checkDeprecatedSignature(signature, node);
        const returnType = getReturnTypeOfSignature(signature);
        if (returnType.flags & ts.TypeFlags.Any) {
            return;
        }

        let headMessage: ts.DiagnosticMessage;
        let expectedReturnType: ts.Type;
        switch (node.parent.kind) {
            case ts.SyntaxKind.ClassDeclaration:
                headMessage = ts.Diagnostics.Decorator_function_return_type_0_is_not_assignable_to_type_1;
                const classSymbol = getSymbolOfNode(node.parent);
                const classConstructorType = getTypeOfSymbol(classSymbol);
                expectedReturnType = getUnionType([classConstructorType, voidType]);
                break;

            case ts.SyntaxKind.PropertyDeclaration:
            case ts.SyntaxKind.Parameter:
                headMessage = ts.Diagnostics.Decorator_function_return_type_is_0_but_is_expected_to_be_void_or_any;
                expectedReturnType = voidType;
                break;

            case ts.SyntaxKind.MethodDeclaration:
            case ts.SyntaxKind.GetAccessor:
            case ts.SyntaxKind.SetAccessor:
                headMessage = ts.Diagnostics.Decorator_function_return_type_0_is_not_assignable_to_type_1;
                const methodType = getTypeOfNode(node.parent);
                const descriptorType = createTypedPropertyDescriptorType(methodType);
                expectedReturnType = getUnionType([descriptorType, voidType]);
                break;

            default:
                return ts.Debug.fail();
        }

        checkTypeAssignableTo(
            returnType,
            expectedReturnType,
            node,
            headMessage);
    }

    /**
     * If a TypeNode can be resolved to a value symbol imported from an external module, it is
     * marked as referenced to prevent import elision.
     */
    function markTypeNodeAsReferenced(node: ts.TypeNode) {
        markEntityNameOrEntityExpressionAsReference(node && ts.getEntityNameFromTypeNode(node), /*forDecoratorMetadata*/ false);
    }

    function markEntityNameOrEntityExpressionAsReference(typeName: ts.EntityNameOrEntityNameExpression | undefined, forDecoratorMetadata: boolean) {
        if (!typeName) return;

        const rootName = ts.getFirstIdentifier(typeName);
        const meaning = (typeName.kind === ts.SyntaxKind.Identifier ? ts.SymbolFlags.Type : ts.SymbolFlags.Namespace) | ts.SymbolFlags.Alias;
        const rootSymbol = resolveName(rootName, rootName.escapedText, meaning, /*nameNotFoundMessage*/ undefined, /*nameArg*/ undefined, /*isReference*/ true);
        if (rootSymbol && rootSymbol.flags & ts.SymbolFlags.Alias) {
            if (symbolIsValue(rootSymbol)
                && !isConstEnumOrConstEnumOnlyModule(resolveAlias(rootSymbol))
                && !getTypeOnlyAliasDeclaration(rootSymbol)) {
                markAliasSymbolAsReferenced(rootSymbol);
            }
            else if (forDecoratorMetadata
                && compilerOptions.isolatedModules
                && ts.getEmitModuleKind(compilerOptions) >= ts.ModuleKind.ES2015
                && !symbolIsValue(rootSymbol)
                && !ts.some(rootSymbol.declarations, ts.isTypeOnlyImportOrExportDeclaration)) {
                const diag = error(typeName, ts.Diagnostics.A_type_referenced_in_a_decorated_signature_must_be_imported_with_import_type_or_a_namespace_import_when_isolatedModules_and_emitDecoratorMetadata_are_enabled);
                const aliasDeclaration = ts.find(rootSymbol.declarations || ts.emptyArray, isAliasSymbolDeclaration);
                if (aliasDeclaration) {
                    ts.addRelatedInfo(diag, ts.createDiagnosticForNode(aliasDeclaration, ts.Diagnostics._0_was_imported_here, ts.idText(rootName)));
                }
            }
        }
    }

    /**
     * This function marks the type used for metadata decorator as referenced if it is import
     * from external module.
     * This is different from markTypeNodeAsReferenced because it tries to simplify type nodes in
     * union and intersection type
     * @param node
     */
    function markDecoratorMedataDataTypeNodeAsReferenced(node: ts.TypeNode | undefined): void {
        const entityName = getEntityNameForDecoratorMetadata(node);
        if (entityName && ts.isEntityName(entityName)) {
            markEntityNameOrEntityExpressionAsReference(entityName, /*forDecoratorMetadata*/ true);
        }
    }

    function getEntityNameForDecoratorMetadata(node: ts.TypeNode | undefined): ts.EntityName | undefined {
        if (node) {
            switch (node.kind) {
                case ts.SyntaxKind.IntersectionType:
                case ts.SyntaxKind.UnionType:
                    return getEntityNameForDecoratorMetadataFromTypeList((node as ts.UnionOrIntersectionTypeNode).types);

                case ts.SyntaxKind.ConditionalType:
                    return getEntityNameForDecoratorMetadataFromTypeList([(node as ts.ConditionalTypeNode).trueType, (node as ts.ConditionalTypeNode).falseType]);

                case ts.SyntaxKind.ParenthesizedType:
                case ts.SyntaxKind.NamedTupleMember:
                    return getEntityNameForDecoratorMetadata((node as ts.ParenthesizedTypeNode).type);

                case ts.SyntaxKind.TypeReference:
                    return (node as ts.TypeReferenceNode).typeName;
            }
        }
    }

    function getEntityNameForDecoratorMetadataFromTypeList(types: readonly ts.TypeNode[]): ts.EntityName | undefined {
        let commonEntityName: ts.EntityName | undefined;
        for (let typeNode of types) {
            while (typeNode.kind === ts.SyntaxKind.ParenthesizedType || typeNode.kind === ts.SyntaxKind.NamedTupleMember) {
                typeNode = (typeNode as ts.ParenthesizedTypeNode | ts.NamedTupleMember).type; // Skip parens if need be
            }
            if (typeNode.kind === ts.SyntaxKind.NeverKeyword) {
                continue; // Always elide `never` from the union/intersection if possible
            }
            if (!strictNullChecks && (typeNode.kind === ts.SyntaxKind.LiteralType && (typeNode as ts.LiteralTypeNode).literal.kind === ts.SyntaxKind.NullKeyword || typeNode.kind === ts.SyntaxKind.UndefinedKeyword)) {
                continue; // Elide null and undefined from unions for metadata, just like what we did prior to the implementation of strict null checks
            }
            const individualEntityName = getEntityNameForDecoratorMetadata(typeNode);
            if (!individualEntityName) {
                // Individual is something like string number
                // So it would be serialized to either that type or object
                // Safe to return here
                return undefined;
            }

            if (commonEntityName) {
                // Note this is in sync with the transformation that happens for type node.
                // Keep this in sync with serializeUnionOrIntersectionType
                // Verify if they refer to same entity and is identifier
                // return undefined if they dont match because we would emit object
                if (!ts.isIdentifier(commonEntityName) ||
                    !ts.isIdentifier(individualEntityName) ||
                    commonEntityName.escapedText !== individualEntityName.escapedText) {
                    return undefined;
                }
            }
            else {
                commonEntityName = individualEntityName;
            }
        }
        return commonEntityName;
    }

    function getParameterTypeNodeForDecoratorCheck(node: ts.ParameterDeclaration): ts.TypeNode | undefined {
        const typeNode = ts.getEffectiveTypeAnnotationNode(node);
        return ts.isRestParameter(node) ? ts.getRestParameterElementType(typeNode) : typeNode;
    }

    /** Check the decorators of a node */
    function checkDecorators(node: ts.Node): void {
        // skip this check for nodes that cannot have decorators. These should have already had an error reported by
        // checkGrammarDecorators.
        if (!ts.canHaveDecorators(node) || !ts.hasDecorators(node) || !node.modifiers || !ts.nodeCanBeDecorated(node, node.parent, node.parent.parent)) {
            return;
        }

        if (!compilerOptions.experimentalDecorators) {
            error(node, ts.Diagnostics.Experimental_support_for_decorators_is_a_feature_that_is_subject_to_change_in_a_future_release_Set_the_experimentalDecorators_option_in_your_tsconfig_or_jsconfig_to_remove_this_warning);
        }

        const firstDecorator = ts.find(node.modifiers, ts.isDecorator);
        if (!firstDecorator) {
            return;
        }

        checkExternalEmitHelpers(firstDecorator, ts.ExternalEmitHelpers.Decorate);
        if (node.kind === ts.SyntaxKind.Parameter) {
            checkExternalEmitHelpers(firstDecorator, ts.ExternalEmitHelpers.Param);
        }

        if (compilerOptions.emitDecoratorMetadata) {
            checkExternalEmitHelpers(firstDecorator, ts.ExternalEmitHelpers.Metadata);

            // we only need to perform these checks if we are emitting serialized type metadata for the target of a decorator.
            switch (node.kind) {
                case ts.SyntaxKind.ClassDeclaration:
                    const constructor = ts.getFirstConstructorWithBody(node);
                    if (constructor) {
                        for (const parameter of constructor.parameters) {
                            markDecoratorMedataDataTypeNodeAsReferenced(getParameterTypeNodeForDecoratorCheck(parameter));
                        }
                    }
                    break;

                case ts.SyntaxKind.GetAccessor:
                case ts.SyntaxKind.SetAccessor:
                    const otherKind = node.kind === ts.SyntaxKind.GetAccessor ? ts.SyntaxKind.SetAccessor : ts.SyntaxKind.GetAccessor;
                    const otherAccessor = ts.getDeclarationOfKind<ts.AccessorDeclaration>(getSymbolOfNode(node), otherKind);
                    markDecoratorMedataDataTypeNodeAsReferenced(getAnnotatedAccessorTypeNode(node) || otherAccessor && getAnnotatedAccessorTypeNode(otherAccessor));
                    break;
                case ts.SyntaxKind.MethodDeclaration:
                    for (const parameter of node.parameters) {
                        markDecoratorMedataDataTypeNodeAsReferenced(getParameterTypeNodeForDecoratorCheck(parameter));
                    }

                    markDecoratorMedataDataTypeNodeAsReferenced(ts.getEffectiveReturnTypeNode(node));
                    break;

                case ts.SyntaxKind.PropertyDeclaration:
                    markDecoratorMedataDataTypeNodeAsReferenced(ts.getEffectiveTypeAnnotationNode(node));
                    break;

                case ts.SyntaxKind.Parameter:
                    markDecoratorMedataDataTypeNodeAsReferenced(getParameterTypeNodeForDecoratorCheck(node));
                    const containingSignature = node.parent;
                    for (const parameter of containingSignature.parameters) {
                        markDecoratorMedataDataTypeNodeAsReferenced(getParameterTypeNodeForDecoratorCheck(parameter));
                    }
                    break;
            }
        }

        for (const modifier of node.modifiers) {
            if (ts.isDecorator(modifier)) {
                checkDecorator(modifier);
            }
        }
    }

    function checkFunctionDeclaration(node: ts.FunctionDeclaration): void {
        addLazyDiagnostic(checkFunctionDeclarationDiagnostics);

        function checkFunctionDeclarationDiagnostics() {
            checkFunctionOrMethodDeclaration(node);
            checkGrammarForGenerator(node);
            checkCollisionsForDeclarationName(node, node.name);
        }
    }

    function checkJSDocTypeAliasTag(node: ts.JSDocTypedefTag | ts.JSDocCallbackTag) {
        if (!node.typeExpression) {
            // If the node had `@property` tags, `typeExpression` would have been set to the first property tag.
            error(node.name, ts.Diagnostics.JSDoc_typedef_tag_should_either_have_a_type_annotation_or_be_followed_by_property_or_member_tags);
        }

        if (node.name) {
            checkTypeNameIsReserved(node.name, ts.Diagnostics.Type_alias_name_cannot_be_0);
        }
        checkSourceElement(node.typeExpression);
        checkTypeParameters(ts.getEffectiveTypeParameterDeclarations(node));
    }

    function checkJSDocTemplateTag(node: ts.JSDocTemplateTag): void {
        checkSourceElement(node.constraint);
        for (const tp of node.typeParameters) {
            checkSourceElement(tp);
        }
    }

    function checkJSDocTypeTag(node: ts.JSDocTypeTag) {
        checkSourceElement(node.typeExpression);
    }

    function checkJSDocLinkLikeTag(node: ts.JSDocLink | ts.JSDocLinkCode | ts.JSDocLinkPlain) {
        if (node.name) {
            resolveJSDocMemberName(node.name, /*ignoreErrors*/ true);
        }
    }

    function checkJSDocParameterTag(node: ts.JSDocParameterTag) {
        checkSourceElement(node.typeExpression);
    }
    function checkJSDocPropertyTag(node: ts.JSDocPropertyTag) {
        checkSourceElement(node.typeExpression);
    }

    function checkJSDocFunctionType(node: ts.JSDocFunctionType): void {
        addLazyDiagnostic(checkJSDocFunctionTypeImplicitAny);
        checkSignatureDeclaration(node);

        function checkJSDocFunctionTypeImplicitAny() {
            if (!node.type && !ts.isJSDocConstructSignature(node)) {
                reportImplicitAny(node, anyType);
            }
        }
    }

    function checkJSDocImplementsTag(node: ts.JSDocImplementsTag): void {
        const classLike = ts.getEffectiveJSDocHost(node);
        if (!classLike || !ts.isClassDeclaration(classLike) && !ts.isClassExpression(classLike)) {
            error(classLike, ts.Diagnostics.JSDoc_0_is_not_attached_to_a_class, ts.idText(node.tagName));
        }
    }

    function checkJSDocAugmentsTag(node: ts.JSDocAugmentsTag): void {
        const classLike = ts.getEffectiveJSDocHost(node);
        if (!classLike || !ts.isClassDeclaration(classLike) && !ts.isClassExpression(classLike)) {
            error(classLike, ts.Diagnostics.JSDoc_0_is_not_attached_to_a_class, ts.idText(node.tagName));
            return;
        }

        const augmentsTags = ts.getJSDocTags(classLike).filter(ts.isJSDocAugmentsTag);
        ts.Debug.assert(augmentsTags.length > 0);
        if (augmentsTags.length > 1) {
            error(augmentsTags[1], ts.Diagnostics.Class_declarations_cannot_have_more_than_one_augments_or_extends_tag);
        }

        const name = getIdentifierFromEntityNameExpression(node.class.expression);
        const extend = ts.getClassExtendsHeritageElement(classLike);
        if (extend) {
            const className = getIdentifierFromEntityNameExpression(extend.expression);
            if (className && name.escapedText !== className.escapedText) {
                error(name, ts.Diagnostics.JSDoc_0_1_does_not_match_the_extends_2_clause, ts.idText(node.tagName), ts.idText(name), ts.idText(className));
            }
        }
    }

    function checkJSDocAccessibilityModifiers(node: ts.JSDocPublicTag | ts.JSDocProtectedTag | ts.JSDocPrivateTag): void {
        const host = ts.getJSDocHost(node);
        if (host && ts.isPrivateIdentifierClassElementDeclaration(host)) {
            error(node, ts.Diagnostics.An_accessibility_modifier_cannot_be_used_with_a_private_identifier);
        }
    }

    function getIdentifierFromEntityNameExpression(node: ts.Identifier | ts.PropertyAccessExpression): ts.Identifier | ts.PrivateIdentifier;
    function getIdentifierFromEntityNameExpression(node: ts.Expression): ts.Identifier | ts.PrivateIdentifier | undefined;
    function getIdentifierFromEntityNameExpression(node: ts.Expression): ts.Identifier | ts.PrivateIdentifier | undefined {
        switch (node.kind) {
            case ts.SyntaxKind.Identifier:
                return node as ts.Identifier;
            case ts.SyntaxKind.PropertyAccessExpression:
                return (node as ts.PropertyAccessExpression).name;
            default:
                return undefined;
        }
    }

    function checkFunctionOrMethodDeclaration(node: ts.FunctionDeclaration | ts.MethodDeclaration | ts.MethodSignature): void {
        checkDecorators(node);
        checkSignatureDeclaration(node);
        const functionFlags = ts.getFunctionFlags(node);

        // Do not use hasDynamicName here, because that returns false for well known symbols.
        // We want to perform checkComputedPropertyName for all computed properties, including
        // well known symbols.
        if (node.name && node.name.kind === ts.SyntaxKind.ComputedPropertyName) {
            // This check will account for methods in class/interface declarations,
            // as well as accessors in classes/object literals
            checkComputedPropertyName(node.name);
        }

        if (hasBindableName(node)) {
            // first we want to check the local symbol that contain this declaration
            // - if node.localSymbol !== undefined - this is current declaration is exported and localSymbol points to the local symbol
            // - if node.localSymbol === undefined - this node is non-exported so we can just pick the result of getSymbolOfNode
            const symbol = getSymbolOfNode(node);
            const localSymbol = node.localSymbol || symbol;

            // Since the javascript won't do semantic analysis like typescript,
            // if the javascript file comes before the typescript file and both contain same name functions,
            // checkFunctionOrConstructorSymbol wouldn't be called if we didnt ignore javascript function.
            const firstDeclaration = localSymbol.declarations?.find(
                // Get first non javascript function declaration
                declaration => declaration.kind === node.kind && !(declaration.flags & ts.NodeFlags.JavaScriptFile));

            // Only type check the symbol once
            if (node === firstDeclaration) {
                checkFunctionOrConstructorSymbol(localSymbol);
            }

            if (symbol.parent) {
                // run check on export symbol to check that modifiers agree across all exported declarations
                checkFunctionOrConstructorSymbol(symbol);
            }
        }

        const body = node.kind === ts.SyntaxKind.MethodSignature ? undefined : node.body;
        checkSourceElement(body);
        checkAllCodePathsInNonVoidFunctionReturnOrThrow(node, getReturnTypeFromAnnotation(node));

        addLazyDiagnostic(checkFunctionOrMethodDeclarationDiagnostics);

        // A js function declaration can have a @type tag instead of a return type node, but that type must have a call signature
        if (ts.isInJSFile(node)) {
            const typeTag = ts.getJSDocTypeTag(node);
            if (typeTag && typeTag.typeExpression && !getContextualCallSignature(getTypeFromTypeNode(typeTag.typeExpression), node)) {
                error(typeTag.typeExpression.type, ts.Diagnostics.The_type_of_a_function_declaration_must_match_the_function_s_signature);
            }
        }

        function checkFunctionOrMethodDeclarationDiagnostics() {
            if (!ts.getEffectiveReturnTypeNode(node)) {
                // Report an implicit any error if there is no body, no explicit return type, and node is not a private method
                // in an ambient context
                if (ts.nodeIsMissing(body) && !isPrivateWithinAmbient(node)) {
                    reportImplicitAny(node, anyType);
                }

                if (functionFlags & ts.FunctionFlags.Generator && ts.nodeIsPresent(body)) {
                    // A generator with a body and no type annotation can still cause errors. It can error if the
                    // yielded values have no common supertype, or it can give an implicit any error if it has no
                    // yielded values. The only way to trigger these errors is to try checking its return type.
                    getReturnTypeOfSignature(getSignatureFromDeclaration(node));
                }
            }
        }
    }

    function registerForUnusedIdentifiersCheck(node: PotentiallyUnusedIdentifier): void {
        addLazyDiagnostic(registerForUnusedIdentifiersCheckDiagnostics);

        function registerForUnusedIdentifiersCheckDiagnostics() {
            // May be in a call such as getTypeOfNode that happened to call this. But potentiallyUnusedIdentifiers is only defined in the scope of `checkSourceFile`.
            const sourceFile = ts.getSourceFileOfNode(node);
            let potentiallyUnusedIdentifiers = allPotentiallyUnusedIdentifiers.get(sourceFile.path);
            if (!potentiallyUnusedIdentifiers) {
                potentiallyUnusedIdentifiers = [];
                allPotentiallyUnusedIdentifiers.set(sourceFile.path, potentiallyUnusedIdentifiers);
            }
            // TODO: GH#22580
            // Debug.assert(addToSeen(seenPotentiallyUnusedIdentifiers, getNodeId(node)), "Adding potentially-unused identifier twice");
            potentiallyUnusedIdentifiers.push(node);
        }
    }

    type PotentiallyUnusedIdentifier =
        | ts.SourceFile | ts.ModuleDeclaration | ts.ClassLikeDeclaration | ts.InterfaceDeclaration
        | ts.Block | ts.CaseBlock | ts.ForStatement | ts.ForInStatement | ts.ForOfStatement
        | Exclude<ts.SignatureDeclaration, ts.IndexSignatureDeclaration | ts.JSDocFunctionType> | ts.TypeAliasDeclaration
        | ts.InferTypeNode;

    function checkUnusedIdentifiers(potentiallyUnusedIdentifiers: readonly PotentiallyUnusedIdentifier[], addDiagnostic: AddUnusedDiagnostic) {
        for (const node of potentiallyUnusedIdentifiers) {
            switch (node.kind) {
                case ts.SyntaxKind.ClassDeclaration:
                case ts.SyntaxKind.ClassExpression:
                    checkUnusedClassMembers(node, addDiagnostic);
                    checkUnusedTypeParameters(node, addDiagnostic);
                    break;
                case ts.SyntaxKind.SourceFile:
                case ts.SyntaxKind.ModuleDeclaration:
                case ts.SyntaxKind.Block:
                case ts.SyntaxKind.CaseBlock:
                case ts.SyntaxKind.ForStatement:
                case ts.SyntaxKind.ForInStatement:
                case ts.SyntaxKind.ForOfStatement:
                    checkUnusedLocalsAndParameters(node, addDiagnostic);
                    break;
                case ts.SyntaxKind.Constructor:
                case ts.SyntaxKind.FunctionExpression:
                case ts.SyntaxKind.FunctionDeclaration:
                case ts.SyntaxKind.ArrowFunction:
                case ts.SyntaxKind.MethodDeclaration:
                case ts.SyntaxKind.GetAccessor:
                case ts.SyntaxKind.SetAccessor:
                    if (node.body) { // Don't report unused parameters in overloads
                        checkUnusedLocalsAndParameters(node, addDiagnostic);
                    }
                    checkUnusedTypeParameters(node, addDiagnostic);
                    break;
                case ts.SyntaxKind.MethodSignature:
                case ts.SyntaxKind.CallSignature:
                case ts.SyntaxKind.ConstructSignature:
                case ts.SyntaxKind.FunctionType:
                case ts.SyntaxKind.ConstructorType:
                case ts.SyntaxKind.TypeAliasDeclaration:
                case ts.SyntaxKind.InterfaceDeclaration:
                    checkUnusedTypeParameters(node, addDiagnostic);
                    break;
                case ts.SyntaxKind.InferType:
                    checkUnusedInferTypeParameter(node, addDiagnostic);
                    break;
                default:
                    ts.Debug.assertNever(node, "Node should not have been registered for unused identifiers check");
            }
        }
    }

    function errorUnusedLocal(declaration: ts.Declaration, name: string, addDiagnostic: AddUnusedDiagnostic) {
        const node = ts.getNameOfDeclaration(declaration) || declaration;
        const message = ts.isTypeDeclaration(declaration) ? ts.Diagnostics._0_is_declared_but_never_used : ts.Diagnostics._0_is_declared_but_its_value_is_never_read;
        addDiagnostic(declaration, UnusedKind.Local, ts.createDiagnosticForNode(node, message, name));
    }

    function isIdentifierThatStartsWithUnderscore(node: ts.Node) {
        return ts.isIdentifier(node) && ts.idText(node).charCodeAt(0) === ts.CharacterCodes._;
    }

    function checkUnusedClassMembers(node: ts.ClassDeclaration | ts.ClassExpression, addDiagnostic: AddUnusedDiagnostic): void {
        for (const member of node.members) {
            switch (member.kind) {
                case ts.SyntaxKind.MethodDeclaration:
                case ts.SyntaxKind.PropertyDeclaration:
                case ts.SyntaxKind.GetAccessor:
                case ts.SyntaxKind.SetAccessor:
                    if (member.kind === ts.SyntaxKind.SetAccessor && member.symbol.flags & ts.SymbolFlags.GetAccessor) {
                        // Already would have reported an error on the getter.
                        break;
                    }
                    const symbol = getSymbolOfNode(member);
                    if (!symbol.isReferenced
                        && (ts.hasEffectiveModifier(member, ts.ModifierFlags.Private) || ts.isNamedDeclaration(member) && ts.isPrivateIdentifier(member.name))
                        && !(member.flags & ts.NodeFlags.Ambient)) {
                        addDiagnostic(member, UnusedKind.Local, ts.createDiagnosticForNode(member.name!, ts.Diagnostics._0_is_declared_but_its_value_is_never_read, symbolToString(symbol)));
                    }
                    break;
                case ts.SyntaxKind.Constructor:
                    for (const parameter of (member as ts.ConstructorDeclaration).parameters) {
                        if (!parameter.symbol.isReferenced && ts.hasSyntacticModifier(parameter, ts.ModifierFlags.Private)) {
                            addDiagnostic(parameter, UnusedKind.Local, ts.createDiagnosticForNode(parameter.name, ts.Diagnostics.Property_0_is_declared_but_its_value_is_never_read, ts.symbolName(parameter.symbol)));
                        }
                    }
                    break;
                case ts.SyntaxKind.IndexSignature:
                case ts.SyntaxKind.SemicolonClassElement:
                case ts.SyntaxKind.ClassStaticBlockDeclaration:
                    // Can't be private
                    break;
                default:
                    ts.Debug.fail("Unexpected class member");
            }
        }
    }

    function checkUnusedInferTypeParameter(node: ts.InferTypeNode, addDiagnostic: AddUnusedDiagnostic): void {
        const { typeParameter } = node;
        if (isTypeParameterUnused(typeParameter)) {
            addDiagnostic(node, UnusedKind.Parameter, ts.createDiagnosticForNode(node, ts.Diagnostics._0_is_declared_but_its_value_is_never_read, ts.idText(typeParameter.name)));
        }
    }

    function checkUnusedTypeParameters(node: ts.ClassLikeDeclaration | ts.SignatureDeclaration | ts.InterfaceDeclaration | ts.TypeAliasDeclaration, addDiagnostic: AddUnusedDiagnostic): void {
        // Only report errors on the last declaration for the type parameter container;
        // this ensures that all uses have been accounted for.
        const declarations = getSymbolOfNode(node).declarations;
        if (!declarations || ts.last(declarations) !== node) return;

        const typeParameters = ts.getEffectiveTypeParameterDeclarations(node);
        const seenParentsWithEveryUnused = new ts.Set<ts.DeclarationWithTypeParameterChildren>();

        for (const typeParameter of typeParameters) {
            if (!isTypeParameterUnused(typeParameter)) continue;

            const name = ts.idText(typeParameter.name);
            const { parent } = typeParameter;
            if (parent.kind !== ts.SyntaxKind.InferType && parent.typeParameters!.every(isTypeParameterUnused)) {
                if (ts.tryAddToSet(seenParentsWithEveryUnused, parent)) {
                    const sourceFile = ts.getSourceFileOfNode(parent);
                    const range = ts.isJSDocTemplateTag(parent)
                        // Whole @template tag
                        ? ts.rangeOfNode(parent)
                        // Include the `<>` in the error message
                        : ts.rangeOfTypeParameters(sourceFile, parent.typeParameters!);
                    const only = parent.typeParameters!.length === 1;
                    //TODO: following line is possible reason for bug #41974, unusedTypeParameters_TemplateTag
                    const message = only ? ts.Diagnostics._0_is_declared_but_its_value_is_never_read : ts.Diagnostics.All_type_parameters_are_unused;
                    const arg0 = only ? name : undefined;
                    addDiagnostic(typeParameter, UnusedKind.Parameter, ts.createFileDiagnostic(sourceFile, range.pos, range.end - range.pos, message, arg0));
                }
            }
            else {
                //TODO: following line is possible reason for bug #41974, unusedTypeParameters_TemplateTag
                addDiagnostic(typeParameter, UnusedKind.Parameter, ts.createDiagnosticForNode(typeParameter, ts.Diagnostics._0_is_declared_but_its_value_is_never_read, name));
            }
        }
    }
    function isTypeParameterUnused(typeParameter: ts.TypeParameterDeclaration): boolean {
        return !(getMergedSymbol(typeParameter.symbol).isReferenced! & ts.SymbolFlags.TypeParameter) && !isIdentifierThatStartsWithUnderscore(typeParameter.name);
    }

    function addToGroup<K, V>(map: ts.ESMap<string, [K, V[]]>, key: K, value: V, getKey: (key: K) => number | string): void {
        const keyString = String(getKey(key));
        const group = map.get(keyString);
        if (group) {
            group[1].push(value);
        }
        else {
            map.set(keyString, [key, [value]]);
        }
    }

    function tryGetRootParameterDeclaration(node: ts.Node): ts.ParameterDeclaration | undefined {
        return ts.tryCast(ts.getRootDeclaration(node), ts.isParameter);
    }

    function isValidUnusedLocalDeclaration(declaration: ts.Declaration): boolean {
        if (ts.isBindingElement(declaration)) {
            if (ts.isObjectBindingPattern(declaration.parent)) {
                /**
                 * ignore starts with underscore names _
                 * const { a: _a } = { a: 1 }
                 */
                return !!(declaration.propertyName && isIdentifierThatStartsWithUnderscore(declaration.name));
            }
            return isIdentifierThatStartsWithUnderscore(declaration.name);
        }
        return ts.isAmbientModule(declaration) ||
            (ts.isVariableDeclaration(declaration) && ts.isForInOrOfStatement(declaration.parent.parent) || isImportedDeclaration(declaration)) && isIdentifierThatStartsWithUnderscore(declaration.name!);
    }

    function checkUnusedLocalsAndParameters(nodeWithLocals: ts.Node, addDiagnostic: AddUnusedDiagnostic): void {
        // Ideally we could use the ImportClause directly as a key, but must wait until we have full ES6 maps. So must store key along with value.
        const unusedImports = new ts.Map<string, [ts.ImportClause, ImportedDeclaration[]]>();
        const unusedDestructures = new ts.Map<string, [ts.BindingPattern, ts.BindingElement[]]>();
        const unusedVariables = new ts.Map<string, [ts.VariableDeclarationList, ts.VariableDeclaration[]]>();
        nodeWithLocals.locals!.forEach(local => {
            // If it's purely a type parameter, ignore, will be checked in `checkUnusedTypeParameters`.
            // If it's a type parameter merged with a parameter, check if the parameter-side is used.
            if (local.flags & ts.SymbolFlags.TypeParameter ? !(local.flags & ts.SymbolFlags.Variable && !(local.isReferenced! & ts.SymbolFlags.Variable)) : local.isReferenced || local.exportSymbol) {
                return;
            }

            if (local.declarations) {
                for (const declaration of local.declarations) {
                    if (isValidUnusedLocalDeclaration(declaration)) {
                        continue;
                    }

                    if (isImportedDeclaration(declaration)) {
                        addToGroup(unusedImports, importClauseFromImported(declaration), declaration, getNodeId);
                    }
                    else if (ts.isBindingElement(declaration) && ts.isObjectBindingPattern(declaration.parent)) {
                        // In `{ a, ...b }, `a` is considered used since it removes a property from `b`. `b` may still be unused though.
                        const lastElement = ts.last(declaration.parent.elements);
                        if (declaration === lastElement || !ts.last(declaration.parent.elements).dotDotDotToken) {
                            addToGroup(unusedDestructures, declaration.parent, declaration, getNodeId);
                        }
                    }
                    else if (ts.isVariableDeclaration(declaration)) {
                        addToGroup(unusedVariables, declaration.parent, declaration, getNodeId);
                    }
                    else {
                        const parameter = local.valueDeclaration && tryGetRootParameterDeclaration(local.valueDeclaration);
                        const name = local.valueDeclaration && ts.getNameOfDeclaration(local.valueDeclaration);
                        if (parameter && name) {
                            if (!ts.isParameterPropertyDeclaration(parameter, parameter.parent) && !ts.parameterIsThisKeyword(parameter) && !isIdentifierThatStartsWithUnderscore(name)) {
                                if (ts.isBindingElement(declaration) && ts.isArrayBindingPattern(declaration.parent)) {
                                    addToGroup(unusedDestructures, declaration.parent, declaration, getNodeId);
                                }
                                else {
                                    addDiagnostic(parameter, UnusedKind.Parameter, ts.createDiagnosticForNode(name, ts.Diagnostics._0_is_declared_but_its_value_is_never_read, ts.symbolName(local)));
                                }
                            }
                        }
                        else {
                            errorUnusedLocal(declaration, ts.symbolName(local), addDiagnostic);
                        }
                    }
                }
            }
        });
        unusedImports.forEach(([importClause, unuseds]) => {
            const importDecl = importClause.parent;
            const nDeclarations = (importClause.name ? 1 : 0) +
                (importClause.namedBindings ?
                    (importClause.namedBindings.kind === ts.SyntaxKind.NamespaceImport ? 1 : importClause.namedBindings.elements.length)
                    : 0);
            if (nDeclarations === unuseds.length) {
                addDiagnostic(importDecl, UnusedKind.Local, unuseds.length === 1
                    ? ts.createDiagnosticForNode(importDecl, ts.Diagnostics._0_is_declared_but_its_value_is_never_read, ts.idText(ts.first(unuseds).name!))
                    : ts.createDiagnosticForNode(importDecl, ts.Diagnostics.All_imports_in_import_declaration_are_unused));
            }
            else {
                for (const unused of unuseds) errorUnusedLocal(unused, ts.idText(unused.name!), addDiagnostic);
            }
        });
        unusedDestructures.forEach(([bindingPattern, bindingElements]) => {
            const kind = tryGetRootParameterDeclaration(bindingPattern.parent) ? UnusedKind.Parameter : UnusedKind.Local;
            if (bindingPattern.elements.length === bindingElements.length) {
                if (bindingElements.length === 1 && bindingPattern.parent.kind === ts.SyntaxKind.VariableDeclaration && bindingPattern.parent.parent.kind === ts.SyntaxKind.VariableDeclarationList) {
                    addToGroup(unusedVariables, bindingPattern.parent.parent, bindingPattern.parent, getNodeId);
                }
                else {
                    addDiagnostic(bindingPattern, kind, bindingElements.length === 1
                        ? ts.createDiagnosticForNode(bindingPattern, ts.Diagnostics._0_is_declared_but_its_value_is_never_read, bindingNameText(ts.first(bindingElements).name))
                        : ts.createDiagnosticForNode(bindingPattern, ts.Diagnostics.All_destructured_elements_are_unused));
                }
            }
            else {
                for (const e of bindingElements) {
                    addDiagnostic(e, kind, ts.createDiagnosticForNode(e, ts.Diagnostics._0_is_declared_but_its_value_is_never_read, bindingNameText(e.name)));
                }
            }
        });
        unusedVariables.forEach(([declarationList, declarations]) => {
            if (declarationList.declarations.length === declarations.length) {
                addDiagnostic(declarationList, UnusedKind.Local, declarations.length === 1
                    ? ts.createDiagnosticForNode(ts.first(declarations).name, ts.Diagnostics._0_is_declared_but_its_value_is_never_read, bindingNameText(ts.first(declarations).name))
                    : ts.createDiagnosticForNode(declarationList.parent.kind === ts.SyntaxKind.VariableStatement ? declarationList.parent : declarationList, ts.Diagnostics.All_variables_are_unused));
            }
            else {
                for (const decl of declarations) {
                    addDiagnostic(decl, UnusedKind.Local, ts.createDiagnosticForNode(decl, ts.Diagnostics._0_is_declared_but_its_value_is_never_read, bindingNameText(decl.name)));
                }
            }
        });
    }

    function checkPotentialUncheckedRenamedBindingElementsInTypes() {
        for (const node of potentialUnusedRenamedBindingElementsInTypes) {
            if (!getSymbolOfNode(node)?.isReferenced) {
                const wrappingDeclaration = ts.walkUpBindingElementsAndPatterns(node);
                ts.Debug.assert(ts.isParameterDeclaration(wrappingDeclaration), "Only parameter declaration should be checked here");
                const diagnostic = ts.createDiagnosticForNode(node.name, ts.Diagnostics._0_is_an_unused_renaming_of_1_Did_you_intend_to_use_it_as_a_type_annotation, ts.declarationNameToString(node.name), ts.declarationNameToString(node.propertyName));
                if (!wrappingDeclaration.type) {
                    // entire parameter does not have type annotation, suggest adding an annotation
                    ts.addRelatedInfo(
                        diagnostic,
                        ts.createFileDiagnostic(ts.getSourceFileOfNode(wrappingDeclaration), wrappingDeclaration.end, 1, ts.Diagnostics.We_can_only_write_a_type_for_0_by_adding_a_type_for_the_entire_parameter_here, ts.declarationNameToString(node.propertyName))
                    );
                }
                diagnostics.add(diagnostic);
            }
        }
    }

    function bindingNameText(name: ts.BindingName): string {
        switch (name.kind) {
            case ts.SyntaxKind.Identifier:
                return ts.idText(name);
            case ts.SyntaxKind.ArrayBindingPattern:
            case ts.SyntaxKind.ObjectBindingPattern:
                return bindingNameText(ts.cast(ts.first(name.elements), ts.isBindingElement).name);
            default:
                return ts.Debug.assertNever(name);
        }
    }

    type ImportedDeclaration = ts.ImportClause | ts.ImportSpecifier | ts.NamespaceImport;
    function isImportedDeclaration(node: ts.Node): node is ImportedDeclaration {
        return node.kind === ts.SyntaxKind.ImportClause || node.kind === ts.SyntaxKind.ImportSpecifier || node.kind === ts.SyntaxKind.NamespaceImport;
    }
    function importClauseFromImported(decl: ImportedDeclaration): ts.ImportClause {
        return decl.kind === ts.SyntaxKind.ImportClause ? decl : decl.kind === ts.SyntaxKind.NamespaceImport ? decl.parent : decl.parent.parent;
    }

    function checkBlock(node: ts.Block) {
        // Grammar checking for SyntaxKind.Block
        if (node.kind === ts.SyntaxKind.Block) {
            checkGrammarStatementInAmbientContext(node);
        }
        if (ts.isFunctionOrModuleBlock(node)) {
            const saveFlowAnalysisDisabled = flowAnalysisDisabled;
            ts.forEach(node.statements, checkSourceElement);
            flowAnalysisDisabled = saveFlowAnalysisDisabled;
        }
        else {
            ts.forEach(node.statements, checkSourceElement);
        }
        if (node.locals) {
            registerForUnusedIdentifiersCheck(node);
        }
    }

    function checkCollisionWithArgumentsInGeneratedCode(node: ts.SignatureDeclaration) {
        // no rest parameters \ declaration context \ overload - no codegen impact
        if (languageVersion >= ts.ScriptTarget.ES2015 || !ts.hasRestParameter(node) || node.flags & ts.NodeFlags.Ambient || ts.nodeIsMissing((node as ts.FunctionLikeDeclaration).body)) {
            return;
        }

        ts.forEach(node.parameters, p => {
            if (p.name && !ts.isBindingPattern(p.name) && p.name.escapedText === argumentsSymbol.escapedName) {
                errorSkippedOn("noEmit", p, ts.Diagnostics.Duplicate_identifier_arguments_Compiler_uses_arguments_to_initialize_rest_parameters);
            }
        });
    }

    /**
     * Checks whether an {@link Identifier}, in the context of another {@link Node}, would collide with a runtime value
     * of {@link name} in an outer scope. This is used to check for collisions for downlevel transformations that
     * require names like `Object`, `Promise`, `Reflect`, `require`, `exports`, etc.
     */
    function needCollisionCheckForIdentifier(node: ts.Node, identifier: ts.Identifier | undefined, name: string): boolean {
        if (identifier?.escapedText !== name) {
            return false;
        }

        if (node.kind === ts.SyntaxKind.PropertyDeclaration ||
            node.kind === ts.SyntaxKind.PropertySignature ||
            node.kind === ts.SyntaxKind.MethodDeclaration ||
            node.kind === ts.SyntaxKind.MethodSignature ||
            node.kind === ts.SyntaxKind.GetAccessor ||
            node.kind === ts.SyntaxKind.SetAccessor ||
            node.kind === ts.SyntaxKind.PropertyAssignment) {
            // it is ok to have member named '_super', '_this', `Promise`, etc. - member access is always qualified
            return false;
        }

        if (node.flags & ts.NodeFlags.Ambient) {
            // ambient context - no codegen impact
            return false;
        }

        if (ts.isImportClause(node) || ts.isImportEqualsDeclaration(node) || ts.isImportSpecifier(node)) {
            // type-only imports do not require collision checks against runtime values.
            if (ts.isTypeOnlyImportOrExportDeclaration(node)) {
                return false;
            }
        }

        const root = ts.getRootDeclaration(node);
        if (ts.isParameter(root) && ts.nodeIsMissing((root.parent as ts.FunctionLikeDeclaration).body)) {
            // just an overload - no codegen impact
            return false;
        }

        return true;
    }

    // this function will run after checking the source file so 'CaptureThis' is correct for all nodes
    function checkIfThisIsCapturedInEnclosingScope(node: ts.Node): void {
        ts.findAncestor(node, current => {
            if (getNodeCheckFlags(current) & ts.NodeCheckFlags.CaptureThis) {
                const isDeclaration = node.kind !== ts.SyntaxKind.Identifier;
                if (isDeclaration) {
                    error(ts.getNameOfDeclaration(node as ts.Declaration), ts.Diagnostics.Duplicate_identifier_this_Compiler_uses_variable_declaration_this_to_capture_this_reference);
                }
                else {
                    error(node, ts.Diagnostics.Expression_resolves_to_variable_declaration_this_that_compiler_uses_to_capture_this_reference);
                }
                return true;
            }
            return false;
        });
    }

    function checkIfNewTargetIsCapturedInEnclosingScope(node: ts.Node): void {
        ts.findAncestor(node, current => {
            if (getNodeCheckFlags(current) & ts.NodeCheckFlags.CaptureNewTarget) {
                const isDeclaration = node.kind !== ts.SyntaxKind.Identifier;
                if (isDeclaration) {
                    error(ts.getNameOfDeclaration(node as ts.Declaration), ts.Diagnostics.Duplicate_identifier_newTarget_Compiler_uses_variable_declaration_newTarget_to_capture_new_target_meta_property_reference);
                }
                else {
                    error(node, ts.Diagnostics.Expression_resolves_to_variable_declaration_newTarget_that_compiler_uses_to_capture_new_target_meta_property_reference);
                }
                return true;
            }
            return false;
        });
    }

    function checkCollisionWithRequireExportsInGeneratedCode(node: ts.Node, name: ts.Identifier | undefined) {
        // No need to check for require or exports for ES6 modules and later
        if (moduleKind >= ts.ModuleKind.ES2015 && !(moduleKind >= ts.ModuleKind.Node16 && ts.getSourceFileOfNode(node).impliedNodeFormat === ts.ModuleKind.CommonJS)) {
            return;
        }

        if (!name || !needCollisionCheckForIdentifier(node, name, "require") && !needCollisionCheckForIdentifier(node, name, "exports")) {
            return;
        }

        // Uninstantiated modules shouldnt do this check
        if (ts.isModuleDeclaration(node) && ts.getModuleInstanceState(node) !== ts.ModuleInstanceState.Instantiated) {
            return;
        }

        // In case of variable declaration, node.parent is variable statement so look at the variable statement's parent
        const parent = getDeclarationContainer(node);
        if (parent.kind === ts.SyntaxKind.SourceFile && ts.isExternalOrCommonJsModule(parent as ts.SourceFile)) {
            // If the declaration happens to be in external module, report error that require and exports are reserved keywords
            errorSkippedOn("noEmit", name, ts.Diagnostics.Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_a_module,
                ts.declarationNameToString(name), ts.declarationNameToString(name));
        }
    }

    function checkCollisionWithGlobalPromiseInGeneratedCode(node: ts.Node, name: ts.Identifier | undefined): void {
        if (!name || languageVersion >= ts.ScriptTarget.ES2017 || !needCollisionCheckForIdentifier(node, name, "Promise")) {
            return;
        }

        // Uninstantiated modules shouldnt do this check
        if (ts.isModuleDeclaration(node) && ts.getModuleInstanceState(node) !== ts.ModuleInstanceState.Instantiated) {
            return;
        }

        // In case of variable declaration, node.parent is variable statement so look at the variable statement's parent
        const parent = getDeclarationContainer(node);
        if (parent.kind === ts.SyntaxKind.SourceFile && ts.isExternalOrCommonJsModule(parent as ts.SourceFile) && parent.flags & ts.NodeFlags.HasAsyncFunctions) {
            // If the declaration happens to be in external module, report error that Promise is a reserved identifier.
            errorSkippedOn("noEmit", name, ts.Diagnostics.Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_a_module_containing_async_functions,
                ts.declarationNameToString(name), ts.declarationNameToString(name));
        }
    }

    function recordPotentialCollisionWithWeakMapSetInGeneratedCode(node: ts.Node, name: ts.Identifier): void {
        if (languageVersion <= ts.ScriptTarget.ES2021
            && (needCollisionCheckForIdentifier(node, name, "WeakMap") || needCollisionCheckForIdentifier(node, name, "WeakSet"))) {
            potentialWeakMapSetCollisions.push(node);
        }
    }

    function checkWeakMapSetCollision(node: ts.Node) {
        const enclosingBlockScope = ts.getEnclosingBlockScopeContainer(node);
        if (getNodeCheckFlags(enclosingBlockScope) & ts.NodeCheckFlags.ContainsClassWithPrivateIdentifiers) {
            ts.Debug.assert(ts.isNamedDeclaration(node) && ts.isIdentifier(node.name) && typeof node.name.escapedText === "string", "The target of a WeakMap/WeakSet collision check should be an identifier");
            errorSkippedOn("noEmit", node, ts.Diagnostics.Compiler_reserves_name_0_when_emitting_private_identifier_downlevel, node.name.escapedText);
        }
    }

    function recordPotentialCollisionWithReflectInGeneratedCode(node: ts.Node, name: ts.Identifier | undefined): void {
        if (name && languageVersion >= ts.ScriptTarget.ES2015 && languageVersion <= ts.ScriptTarget.ES2021
            && needCollisionCheckForIdentifier(node, name, "Reflect")) {
            potentialReflectCollisions.push(node);
        }
    }

    function checkReflectCollision(node: ts.Node) {
        let hasCollision = false;
        if (ts.isClassExpression(node)) {
            // ClassExpression names don't contribute to their containers, but do matter for any of their block-scoped members.
            for (const member of node.members) {
                if (getNodeCheckFlags(member) & ts.NodeCheckFlags.ContainsSuperPropertyInStaticInitializer) {
                    hasCollision = true;
                    break;
                }
            }
        }
        else if (ts.isFunctionExpression(node)) {
            // FunctionExpression names don't contribute to their containers, but do matter for their contents
            if (getNodeCheckFlags(node) & ts.NodeCheckFlags.ContainsSuperPropertyInStaticInitializer) {
                hasCollision = true;
            }
        }
        else {
            const container = ts.getEnclosingBlockScopeContainer(node);
            if (container && getNodeCheckFlags(container) & ts.NodeCheckFlags.ContainsSuperPropertyInStaticInitializer) {
                hasCollision = true;
            }
        }
        if (hasCollision) {
            ts.Debug.assert(ts.isNamedDeclaration(node) && ts.isIdentifier(node.name), "The target of a Reflect collision check should be an identifier");
            errorSkippedOn("noEmit", node, ts.Diagnostics.Duplicate_identifier_0_Compiler_reserves_name_1_when_emitting_super_references_in_static_initializers,
                ts.declarationNameToString(node.name),
                "Reflect");
        }
    }

    function checkCollisionsForDeclarationName(node: ts.Node, name: ts.Identifier | undefined) {
        if (!name) return;
        checkCollisionWithRequireExportsInGeneratedCode(node, name);
        checkCollisionWithGlobalPromiseInGeneratedCode(node, name);
        recordPotentialCollisionWithWeakMapSetInGeneratedCode(node, name);
        recordPotentialCollisionWithReflectInGeneratedCode(node, name);
        if (ts.isClassLike(node)) {
            checkTypeNameIsReserved(name, ts.Diagnostics.Class_name_cannot_be_0);
            if (!(node.flags & ts.NodeFlags.Ambient)) {
                checkClassNameCollisionWithObject(name);
            }
        }
        else if (ts.isEnumDeclaration(node)) {
            checkTypeNameIsReserved(name, ts.Diagnostics.Enum_name_cannot_be_0);
        }
    }

    function checkVarDeclaredNamesNotShadowed(node: ts.VariableDeclaration | ts.BindingElement) {
        // - ScriptBody : StatementList
        // It is a Syntax Error if any element of the LexicallyDeclaredNames of StatementList
        // also occurs in the VarDeclaredNames of StatementList.

        // - Block : { StatementList }
        // It is a Syntax Error if any element of the LexicallyDeclaredNames of StatementList
        // also occurs in the VarDeclaredNames of StatementList.

        // Variable declarations are hoisted to the top of their function scope. They can shadow
        // block scoped declarations, which bind tighter. this will not be flagged as duplicate definition
        // by the binder as the declaration scope is different.
        // A non-initialized declaration is a no-op as the block declaration will resolve before the var
        // declaration. the problem is if the declaration has an initializer. this will act as a write to the
        // block declared value. this is fine for let, but not const.
        // Only consider declarations with initializers, uninitialized const declarations will not
        // step on a let/const variable.
        // Do not consider const and const declarations, as duplicate block-scoped declarations
        // are handled by the binder.
        // We are only looking for const declarations that step on let\const declarations from a
        // different scope. e.g.:
        //      {
        //          const x = 0; // localDeclarationSymbol obtained after name resolution will correspond to this declaration
        //          const x = 0; // symbol for this declaration will be 'symbol'
        //      }

        // skip block-scoped variables and parameters
        if ((ts.getCombinedNodeFlags(node) & ts.NodeFlags.BlockScoped) !== 0 || ts.isParameterDeclaration(node)) {
            return;
        }

        // skip variable declarations that don't have initializers
        // NOTE: in ES6 spec initializer is required in variable declarations where name is binding pattern
        // so we'll always treat binding elements as initialized
        if (node.kind === ts.SyntaxKind.VariableDeclaration && !node.initializer) {
            return;
        }

        const symbol = getSymbolOfNode(node);
        if (symbol.flags & ts.SymbolFlags.FunctionScopedVariable) {
            if (!ts.isIdentifier(node.name)) return ts.Debug.fail();
            const localDeclarationSymbol = resolveName(node, node.name.escapedText, ts.SymbolFlags.Variable, /*nodeNotFoundErrorMessage*/ undefined, /*nameArg*/ undefined, /*isUse*/ false);
            if (localDeclarationSymbol &&
                localDeclarationSymbol !== symbol &&
                localDeclarationSymbol.flags & ts.SymbolFlags.BlockScopedVariable) {
                if (getDeclarationNodeFlagsFromSymbol(localDeclarationSymbol) & ts.NodeFlags.BlockScoped) {
                    const varDeclList = ts.getAncestor(localDeclarationSymbol.valueDeclaration, ts.SyntaxKind.VariableDeclarationList)!;
                    const container =
                        varDeclList.parent.kind === ts.SyntaxKind.VariableStatement && varDeclList.parent.parent
                            ? varDeclList.parent.parent
                            : undefined;

                    // names of block-scoped and function scoped variables can collide only
                    // if block scoped variable is defined in the function\module\source file scope (because of variable hoisting)
                    const namesShareScope =
                        container &&
                        (container.kind === ts.SyntaxKind.Block && ts.isFunctionLike(container.parent) ||
                            container.kind === ts.SyntaxKind.ModuleBlock ||
                            container.kind === ts.SyntaxKind.ModuleDeclaration ||
                            container.kind === ts.SyntaxKind.SourceFile);

                    // here we know that function scoped variable is shadowed by block scoped one
                    // if they are defined in the same scope - binder has already reported redeclaration error
                    // otherwise if variable has an initializer - show error that initialization will fail
                    // since LHS will be block scoped name instead of function scoped
                    if (!namesShareScope) {
                        const name = symbolToString(localDeclarationSymbol);
                        error(node, ts.Diagnostics.Cannot_initialize_outer_scoped_variable_0_in_the_same_scope_as_block_scoped_declaration_1, name, name);
                    }
                }
            }
        }
    }

    function convertAutoToAny(type: ts.Type) {
        return type === autoType ? anyType : type === autoArrayType ? anyArrayType : type;
    }

    // Check variable, parameter, or property declaration
    function checkVariableLikeDeclaration(node: ts.ParameterDeclaration | ts.PropertyDeclaration | ts.PropertySignature | ts.VariableDeclaration | ts.BindingElement) {
        checkDecorators(node);
        if (!ts.isBindingElement(node)) {
            checkSourceElement(node.type);
        }

        // JSDoc `function(string, string): string` syntax results in parameters with no name
        if (!node.name) {
            return;
        }

        // For a computed property, just check the initializer and exit
        // Do not use hasDynamicName here, because that returns false for well known symbols.
        // We want to perform checkComputedPropertyName for all computed properties, including
        // well known symbols.
        if (node.name.kind === ts.SyntaxKind.ComputedPropertyName) {
            checkComputedPropertyName(node.name);
            if (ts.hasOnlyExpressionInitializer(node) && node.initializer) {
                checkExpressionCached(node.initializer);
            }
        }

        if (ts.isBindingElement(node)) {
            if (
              node.propertyName &&
              ts.isIdentifier(node.name) &&
              ts.isParameterDeclaration(node) &&
              ts.nodeIsMissing((ts.getContainingFunction(node) as ts.FunctionLikeDeclaration).body)) {
                // type F = ({a: string}) => void;
                //               ^^^^^^
                // variable renaming in function type notation is confusing,
                // so we forbid it even if noUnusedLocals is not enabled
                potentialUnusedRenamedBindingElementsInTypes.push(node);
                return;
            }

            if (ts.isObjectBindingPattern(node.parent) && node.dotDotDotToken && languageVersion < ts.ScriptTarget.ES2018) {
                checkExternalEmitHelpers(node, ts.ExternalEmitHelpers.Rest);
            }
            // check computed properties inside property names of binding elements
            if (node.propertyName && node.propertyName.kind === ts.SyntaxKind.ComputedPropertyName) {
                checkComputedPropertyName(node.propertyName);
            }

            // check private/protected variable access
            const parent = node.parent.parent;
            const parentCheckMode = node.dotDotDotToken ? CheckMode.RestBindingElement : CheckMode.Normal;
            const parentType = getTypeForBindingElementParent(parent, parentCheckMode);
            const name = node.propertyName || node.name;
            if (parentType && !ts.isBindingPattern(name)) {
                const exprType = getLiteralTypeFromPropertyName(name);
                if (isTypeUsableAsPropertyName(exprType)) {
                    const nameText = getPropertyNameFromType(exprType);
                    const property = getPropertyOfType(parentType, nameText);
                    if (property) {
                        markPropertyAsReferenced(property, /*nodeForCheckWriteOnly*/ undefined, /*isSelfTypeAccess*/ false); // A destructuring is never a write-only reference.
                        checkPropertyAccessibility(node, !!parent.initializer && parent.initializer.kind === ts.SyntaxKind.SuperKeyword, /*writing*/ false, parentType, property);
                    }
                }
            }
        }

        // For a binding pattern, check contained binding elements
        if (ts.isBindingPattern(node.name)) {
            if (node.name.kind === ts.SyntaxKind.ArrayBindingPattern && languageVersion < ts.ScriptTarget.ES2015 && compilerOptions.downlevelIteration) {
                checkExternalEmitHelpers(node, ts.ExternalEmitHelpers.Read);
            }

            ts.forEach(node.name.elements, checkSourceElement);
        }
        // For a parameter declaration with an initializer, error and exit if the containing function doesn't have a body
        if (ts.isParameter(node) && node.initializer && ts.nodeIsMissing((ts.getContainingFunction(node) as ts.FunctionLikeDeclaration).body)) {
            error(node, ts.Diagnostics.A_parameter_initializer_is_only_allowed_in_a_function_or_constructor_implementation);
            return;
        }
        // For a binding pattern, validate the initializer and exit
        if (ts.isBindingPattern(node.name)) {
            const needCheckInitializer = ts.hasOnlyExpressionInitializer(node) && node.initializer && node.parent.parent.kind !== ts.SyntaxKind.ForInStatement;
            const needCheckWidenedType = !ts.some(node.name.elements, ts.not(ts.isOmittedExpression));
            if (needCheckInitializer || needCheckWidenedType) {
                // Don't validate for-in initializer as it is already an error
                const widenedType = getWidenedTypeForVariableLikeDeclaration(node);
                if (needCheckInitializer) {
                    const initializerType = checkExpressionCached(node.initializer);
                    if (strictNullChecks && needCheckWidenedType) {
                        checkNonNullNonVoidType(initializerType, node);
                    }
                    else {
                        checkTypeAssignableToAndOptionallyElaborate(initializerType, getWidenedTypeForVariableLikeDeclaration(node), node, node.initializer);
                    }
                }
                // check the binding pattern with empty elements
                if (needCheckWidenedType) {
                    if (ts.isArrayBindingPattern(node.name)) {
                        checkIteratedTypeOrElementType(IterationUse.Destructuring, widenedType, undefinedType, node);
                    }
                    else if (strictNullChecks) {
                        checkNonNullNonVoidType(widenedType, node);
                    }
                }
            }
            return;
        }
        // For a commonjs `const x = require`, validate the alias and exit
        const symbol = getSymbolOfNode(node);
        if (symbol.flags & ts.SymbolFlags.Alias && ts.isVariableDeclarationInitializedToBareOrAccessedRequire(node.kind === ts.SyntaxKind.BindingElement ? node.parent.parent : node)) {
            checkAliasSymbol(node as ts.BindingElement | ts.VariableDeclaration);
            return;
        }

        const type = convertAutoToAny(getTypeOfSymbol(symbol));
        if (node === symbol.valueDeclaration) {
            // Node is the primary declaration of the symbol, just validate the initializer
            // Don't validate for-in initializer as it is already an error
            const initializer = ts.hasOnlyExpressionInitializer(node) && ts.getEffectiveInitializer(node);
            if (initializer) {
                const isJSObjectLiteralInitializer = ts.isInJSFile(node) &&
                    ts.isObjectLiteralExpression(initializer) &&
                    (initializer.properties.length === 0 || ts.isPrototypeAccess(node.name)) &&
                    !!symbol.exports?.size;
                if (!isJSObjectLiteralInitializer && node.parent.parent.kind !== ts.SyntaxKind.ForInStatement) {
                    checkTypeAssignableToAndOptionallyElaborate(checkExpressionCached(initializer), type, node, initializer, /*headMessage*/ undefined);
                }
            }
            if (symbol.declarations && symbol.declarations.length > 1) {
                if (ts.some(symbol.declarations, d => d !== node && ts.isVariableLike(d) && !areDeclarationFlagsIdentical(d, node))) {
                    error(node.name, ts.Diagnostics.All_declarations_of_0_must_have_identical_modifiers, ts.declarationNameToString(node.name));
                }
            }
        }
        else {
            // Node is a secondary declaration, check that type is identical to primary declaration and check that
            // initializer is consistent with type associated with the node
            const declarationType = convertAutoToAny(getWidenedTypeForVariableLikeDeclaration(node));

            if (!isErrorType(type) && !isErrorType(declarationType) &&
                !isTypeIdenticalTo(type, declarationType) &&
                !(symbol.flags & ts.SymbolFlags.Assignment)) {
                errorNextVariableOrPropertyDeclarationMustHaveSameType(symbol.valueDeclaration, type, node, declarationType);
            }
            if (ts.hasOnlyExpressionInitializer(node) && node.initializer) {
                checkTypeAssignableToAndOptionallyElaborate(checkExpressionCached(node.initializer), declarationType, node, node.initializer, /*headMessage*/ undefined);
            }
            if (symbol.valueDeclaration && !areDeclarationFlagsIdentical(node, symbol.valueDeclaration)) {
                error(node.name, ts.Diagnostics.All_declarations_of_0_must_have_identical_modifiers, ts.declarationNameToString(node.name));
            }
        }
        if (node.kind !== ts.SyntaxKind.PropertyDeclaration && node.kind !== ts.SyntaxKind.PropertySignature) {
            // We know we don't have a binding pattern or computed name here
            checkExportsOnMergedDeclarations(node);
            if (node.kind === ts.SyntaxKind.VariableDeclaration || node.kind === ts.SyntaxKind.BindingElement) {
                checkVarDeclaredNamesNotShadowed(node);
            }
            checkCollisionsForDeclarationName(node, node.name);
        }
    }

    function errorNextVariableOrPropertyDeclarationMustHaveSameType(firstDeclaration: ts.Declaration | undefined, firstType: ts.Type, nextDeclaration: ts.Declaration, nextType: ts.Type): void {
        const nextDeclarationName = ts.getNameOfDeclaration(nextDeclaration);
        const message = nextDeclaration.kind === ts.SyntaxKind.PropertyDeclaration || nextDeclaration.kind === ts.SyntaxKind.PropertySignature
            ? ts.Diagnostics.Subsequent_property_declarations_must_have_the_same_type_Property_0_must_be_of_type_1_but_here_has_type_2
            : ts.Diagnostics.Subsequent_variable_declarations_must_have_the_same_type_Variable_0_must_be_of_type_1_but_here_has_type_2;
        const declName = ts.declarationNameToString(nextDeclarationName);
        const err = error(
            nextDeclarationName,
            message,
            declName,
            typeToString(firstType),
            typeToString(nextType)
        );
        if (firstDeclaration) {
            ts.addRelatedInfo(err,
                ts.createDiagnosticForNode(firstDeclaration, ts.Diagnostics._0_was_also_declared_here, declName)
            );
        }
    }

    function areDeclarationFlagsIdentical(left: ts.Declaration, right: ts.Declaration) {
        if ((left.kind === ts.SyntaxKind.Parameter && right.kind === ts.SyntaxKind.VariableDeclaration) ||
            (left.kind === ts.SyntaxKind.VariableDeclaration && right.kind === ts.SyntaxKind.Parameter)) {
            // Differences in optionality between parameters and variables are allowed.
            return true;
        }

        if (ts.hasQuestionToken(left) !== ts.hasQuestionToken(right)) {
            return false;
        }

        const interestingFlags = ts.ModifierFlags.Private |
            ts.ModifierFlags.Protected |
            ts.ModifierFlags.Async |
            ts.ModifierFlags.Abstract |
            ts.ModifierFlags.Readonly |
            ts.ModifierFlags.Static;

        return ts.getSelectedEffectiveModifierFlags(left, interestingFlags) === ts.getSelectedEffectiveModifierFlags(right, interestingFlags);
    }

    function checkVariableDeclaration(node: ts.VariableDeclaration) {
        ts.tracing?.push(ts.tracing.Phase.Check, "checkVariableDeclaration", { kind: node.kind, pos: node.pos, end: node.end, path: (node as ts.TracingNode).tracingPath });
        checkGrammarVariableDeclaration(node);
        checkVariableLikeDeclaration(node);
        ts.tracing?.pop();
    }

    function checkBindingElement(node: ts.BindingElement) {
        checkGrammarBindingElement(node);
        return checkVariableLikeDeclaration(node);
    }

    function checkVariableStatement(node: ts.VariableStatement) {
        // Grammar checking
        if (!checkGrammarDecoratorsAndModifiers(node) && !checkGrammarVariableDeclarationList(node.declarationList)) checkGrammarForDisallowedLetOrConstStatement(node);
        ts.forEach(node.declarationList.declarations, checkSourceElement);
    }

    function checkExpressionStatement(node: ts.ExpressionStatement) {
        // Grammar checking
        checkGrammarStatementInAmbientContext(node);

        checkExpression(node.expression);
    }

    function checkIfStatement(node: ts.IfStatement) {
        // Grammar checking
        checkGrammarStatementInAmbientContext(node);
        const type = checkTruthinessExpression(node.expression);
        checkTestingKnownTruthyCallableOrAwaitableType(node.expression, type, node.thenStatement);
        checkSourceElement(node.thenStatement);

        if (node.thenStatement.kind === ts.SyntaxKind.EmptyStatement) {
            error(node.thenStatement, ts.Diagnostics.The_body_of_an_if_statement_cannot_be_the_empty_statement);
        }

        checkSourceElement(node.elseStatement);
    }

    function checkTestingKnownTruthyCallableOrAwaitableType(condExpr: ts.Expression, condType: ts.Type, body?: ts.Statement | ts.Expression) {
        if (!strictNullChecks) return;

        helper(condExpr, body);
        while (ts.isBinaryExpression(condExpr) && condExpr.operatorToken.kind === ts.SyntaxKind.BarBarToken) {
            condExpr = condExpr.left;
            helper(condExpr, body);
        }

        function helper(condExpr: ts.Expression, body: ts.Expression | ts.Statement | undefined) {
            const location = ts.isBinaryExpression(condExpr) &&
                (condExpr.operatorToken.kind === ts.SyntaxKind.BarBarToken || condExpr.operatorToken.kind === ts.SyntaxKind.AmpersandAmpersandToken)
                ? condExpr.right
                : condExpr;
            if (ts.isModuleExportsAccessExpression(location)) return;
            const type = location === condExpr ? condType : checkTruthinessExpression(location);
            const isPropertyExpressionCast = ts.isPropertyAccessExpression(location) && isTypeAssertion(location.expression);
            if (!(getTypeFacts(type) & TypeFacts.Truthy) || isPropertyExpressionCast) return;

            // While it technically should be invalid for any known-truthy value
            // to be tested, we de-scope to functions and Promises unreferenced in
            // the block as a heuristic to identify the most common bugs. There
            // are too many false positives for values sourced from type
            // definitions without strictNullChecks otherwise.
            const callSignatures = getSignaturesOfType(type, ts.SignatureKind.Call);
            const isPromise = !!getAwaitedTypeOfPromise(type);
            if (callSignatures.length === 0 && !isPromise) {
                return;
            }

            const testedNode = ts.isIdentifier(location) ? location
                : ts.isPropertyAccessExpression(location) ? location.name
                : ts.isBinaryExpression(location) && ts.isIdentifier(location.right) ? location.right
                : undefined;
            const testedSymbol = testedNode && getSymbolAtLocation(testedNode);
            if (!testedSymbol && !isPromise) {
                return;
            }

            const isUsed = testedSymbol && ts.isBinaryExpression(condExpr.parent) && isSymbolUsedInBinaryExpressionChain(condExpr.parent, testedSymbol)
                || testedSymbol && body && isSymbolUsedInConditionBody(condExpr, body, testedNode, testedSymbol);
            if (!isUsed) {
                if (isPromise) {
                    errorAndMaybeSuggestAwait(
                        location,
                        /*maybeMissingAwait*/ true,
                        ts.Diagnostics.This_condition_will_always_return_true_since_this_0_is_always_defined,
                        getTypeNameForErrorDisplay(type));
                }
                else {
                    error(location, ts.Diagnostics.This_condition_will_always_return_true_since_this_function_is_always_defined_Did_you_mean_to_call_it_instead);
                }
            }
        }
    }

    function isSymbolUsedInConditionBody(expr: ts.Expression, body: ts.Statement | ts.Expression, testedNode: ts.Node, testedSymbol: ts.Symbol): boolean {
        return !!ts.forEachChild(body, function check(childNode): boolean | undefined {
            if (ts.isIdentifier(childNode)) {
                const childSymbol = getSymbolAtLocation(childNode);
                if (childSymbol && childSymbol === testedSymbol) {
                    // If the test was a simple identifier, the above check is sufficient
                    if (ts.isIdentifier(expr) || ts.isIdentifier(testedNode) && ts.isBinaryExpression(testedNode.parent)) {
                        return true;
                    }
                    // Otherwise we need to ensure the symbol is called on the same target
                    let testedExpression = testedNode.parent;
                    let childExpression = childNode.parent;
                    while (testedExpression && childExpression) {
                        if (ts.isIdentifier(testedExpression) && ts.isIdentifier(childExpression) ||
                            testedExpression.kind === ts.SyntaxKind.ThisKeyword && childExpression.kind === ts.SyntaxKind.ThisKeyword) {
                            return getSymbolAtLocation(testedExpression) === getSymbolAtLocation(childExpression);
                        }
                        else if (ts.isPropertyAccessExpression(testedExpression) && ts.isPropertyAccessExpression(childExpression)) {
                            if (getSymbolAtLocation(testedExpression.name) !== getSymbolAtLocation(childExpression.name)) {
                                return false;
                            }
                            childExpression = childExpression.expression;
                            testedExpression = testedExpression.expression;
                        }
                        else if (ts.isCallExpression(testedExpression) && ts.isCallExpression(childExpression)) {
                            childExpression = childExpression.expression;
                            testedExpression = testedExpression.expression;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            return ts.forEachChild(childNode, check);
        });
    }

    function isSymbolUsedInBinaryExpressionChain(node: ts.Node, testedSymbol: ts.Symbol): boolean {
        while (ts.isBinaryExpression(node) && node.operatorToken.kind === ts.SyntaxKind.AmpersandAmpersandToken) {
            const isUsed = ts.forEachChild(node.right, function visit(child): boolean | undefined {
                if (ts.isIdentifier(child)) {
                    const symbol = getSymbolAtLocation(child);
                    if (symbol && symbol === testedSymbol) {
                        return true;
                    }
                }
                return ts.forEachChild(child, visit);
            });
            if (isUsed) {
                return true;
            }
            node = node.parent;
        }
        return false;
    }

    function checkDoStatement(node: ts.DoStatement) {
        // Grammar checking
        checkGrammarStatementInAmbientContext(node);

        checkSourceElement(node.statement);
        checkTruthinessExpression(node.expression);
    }

    function checkWhileStatement(node: ts.WhileStatement) {
        // Grammar checking
        checkGrammarStatementInAmbientContext(node);

        checkTruthinessExpression(node.expression);
        checkSourceElement(node.statement);
    }

    function checkTruthinessOfType(type: ts.Type, node: ts.Node) {
        if (type.flags & ts.TypeFlags.Void) {
            error(node, ts.Diagnostics.An_expression_of_type_void_cannot_be_tested_for_truthiness);
        }
        return type;
    }

    function checkTruthinessExpression(node: ts.Expression, checkMode?: CheckMode) {
        return checkTruthinessOfType(checkExpression(node, checkMode), node);
    }

    function checkForStatement(node: ts.ForStatement) {
        // Grammar checking
        if (!checkGrammarStatementInAmbientContext(node)) {
            if (node.initializer && node.initializer.kind === ts.SyntaxKind.VariableDeclarationList) {
                checkGrammarVariableDeclarationList(node.initializer as ts.VariableDeclarationList);
            }
        }

        if (node.initializer) {
            if (node.initializer.kind === ts.SyntaxKind.VariableDeclarationList) {
                ts.forEach((node.initializer as ts.VariableDeclarationList).declarations, checkVariableDeclaration);
            }
            else {
                checkExpression(node.initializer);
            }
        }

        if (node.condition) checkTruthinessExpression(node.condition);
        if (node.incrementor) checkExpression(node.incrementor);
        checkSourceElement(node.statement);
        if (node.locals) {
            registerForUnusedIdentifiersCheck(node);
        }
    }

    function checkForOfStatement(node: ts.ForOfStatement): void {
        checkGrammarForInOrForOfStatement(node);

        const container = ts.getContainingFunctionOrClassStaticBlock(node);
        if (node.awaitModifier) {
            if (container && ts.isClassStaticBlockDeclaration(container)) {
                grammarErrorOnNode(node.awaitModifier, ts.Diagnostics.For_await_loops_cannot_be_used_inside_a_class_static_block);
            }
            else {
                const functionFlags = ts.getFunctionFlags(container);
                if ((functionFlags & (ts.FunctionFlags.Invalid | ts.FunctionFlags.Async)) === ts.FunctionFlags.Async && languageVersion < ts.ScriptTarget.ESNext) {
                    // for..await..of in an async function or async generator function prior to ESNext requires the __asyncValues helper
                    checkExternalEmitHelpers(node, ts.ExternalEmitHelpers.ForAwaitOfIncludes);
                }
            }
        }
        else if (compilerOptions.downlevelIteration && languageVersion < ts.ScriptTarget.ES2015) {
            // for..of prior to ES2015 requires the __values helper when downlevelIteration is enabled
            checkExternalEmitHelpers(node, ts.ExternalEmitHelpers.ForOfIncludes);
        }

        // Check the LHS and RHS
        // If the LHS is a declaration, just check it as a variable declaration, which will in turn check the RHS
        // via checkRightHandSideOfForOf.
        // If the LHS is an expression, check the LHS, as a destructuring assignment or as a reference.
        // Then check that the RHS is assignable to it.
        if (node.initializer.kind === ts.SyntaxKind.VariableDeclarationList) {
            checkForInOrForOfVariableDeclaration(node);
        }
        else {
            const varExpr = node.initializer;
            const iteratedType = checkRightHandSideOfForOf(node);

            // There may be a destructuring assignment on the left side
            if (varExpr.kind === ts.SyntaxKind.ArrayLiteralExpression || varExpr.kind === ts.SyntaxKind.ObjectLiteralExpression) {
                // iteratedType may be undefined. In this case, we still want to check the structure of
                // varExpr, in particular making sure it's a valid LeftHandSideExpression. But we'd like
                // to short circuit the type relation checking as much as possible, so we pass the unknownType.
                checkDestructuringAssignment(varExpr, iteratedType || errorType);
            }
            else {
                const leftType = checkExpression(varExpr);
                checkReferenceExpression(
                    varExpr,
                    ts.Diagnostics.The_left_hand_side_of_a_for_of_statement_must_be_a_variable_or_a_property_access,
                    ts.Diagnostics.The_left_hand_side_of_a_for_of_statement_may_not_be_an_optional_property_access);

                // iteratedType will be undefined if the rightType was missing properties/signatures
                // required to get its iteratedType (like [Symbol.iterator] or next). This may be
                // because we accessed properties from anyType, or it may have led to an error inside
                // getElementTypeOfIterable.
                if (iteratedType) {
                    checkTypeAssignableToAndOptionallyElaborate(iteratedType, leftType, varExpr, node.expression);
                }
            }
        }

        checkSourceElement(node.statement);
        if (node.locals) {
            registerForUnusedIdentifiersCheck(node);
        }
    }

    function checkForInStatement(node: ts.ForInStatement) {
        // Grammar checking
        checkGrammarForInOrForOfStatement(node);

        const rightType = getNonNullableTypeIfNeeded(checkExpression(node.expression));
        // TypeScript 1.0 spec (April 2014): 5.4
        // In a 'for-in' statement of the form
        // for (let VarDecl in Expr) Statement
        //   VarDecl must be a variable declaration without a type annotation that declares a variable of type Any,
        //   and Expr must be an expression of type Any, an object type, or a type parameter type.
        if (node.initializer.kind === ts.SyntaxKind.VariableDeclarationList) {
            const variable = (node.initializer as ts.VariableDeclarationList).declarations[0];
            if (variable && ts.isBindingPattern(variable.name)) {
                error(variable.name, ts.Diagnostics.The_left_hand_side_of_a_for_in_statement_cannot_be_a_destructuring_pattern);
            }
            checkForInOrForOfVariableDeclaration(node);
        }
        else {
            // In a 'for-in' statement of the form
            // for (Var in Expr) Statement
            //   Var must be an expression classified as a reference of type Any or the String primitive type,
            //   and Expr must be an expression of type Any, an object type, or a type parameter type.
            const varExpr = node.initializer;
            const leftType = checkExpression(varExpr);
            if (varExpr.kind === ts.SyntaxKind.ArrayLiteralExpression || varExpr.kind === ts.SyntaxKind.ObjectLiteralExpression) {
                error(varExpr, ts.Diagnostics.The_left_hand_side_of_a_for_in_statement_cannot_be_a_destructuring_pattern);
            }
            else if (!isTypeAssignableTo(getIndexTypeOrString(rightType), leftType)) {
                error(varExpr, ts.Diagnostics.The_left_hand_side_of_a_for_in_statement_must_be_of_type_string_or_any);
            }
            else {
                // run check only former check succeeded to avoid cascading errors
                checkReferenceExpression(
                    varExpr,
                    ts.Diagnostics.The_left_hand_side_of_a_for_in_statement_must_be_a_variable_or_a_property_access,
                    ts.Diagnostics.The_left_hand_side_of_a_for_in_statement_may_not_be_an_optional_property_access);
            }
        }

        // unknownType is returned i.e. if node.expression is identifier whose name cannot be resolved
        // in this case error about missing name is already reported - do not report extra one
        if (rightType === neverType || !isTypeAssignableToKind(rightType, ts.TypeFlags.NonPrimitive | ts.TypeFlags.InstantiableNonPrimitive)) {
            error(node.expression, ts.Diagnostics.The_right_hand_side_of_a_for_in_statement_must_be_of_type_any_an_object_type_or_a_type_parameter_but_here_has_type_0, typeToString(rightType));
        }

        checkSourceElement(node.statement);
        if (node.locals) {
            registerForUnusedIdentifiersCheck(node);
        }
    }

    function checkForInOrForOfVariableDeclaration(iterationStatement: ts.ForInOrOfStatement): void {
        const variableDeclarationList = iterationStatement.initializer as ts.VariableDeclarationList;
        // checkGrammarForInOrForOfStatement will check that there is exactly one declaration.
        if (variableDeclarationList.declarations.length >= 1) {
            const decl = variableDeclarationList.declarations[0];
            checkVariableDeclaration(decl);
        }
    }

    function checkRightHandSideOfForOf(statement: ts.ForOfStatement): ts.Type {
        const use = statement.awaitModifier ? IterationUse.ForAwaitOf : IterationUse.ForOf;
        return checkIteratedTypeOrElementType(use, checkNonNullExpression(statement.expression), undefinedType, statement.expression);
    }

    function checkIteratedTypeOrElementType(use: IterationUse, inputType: ts.Type, sentType: ts.Type, errorNode: ts.Node | undefined): ts.Type {
        if (isTypeAny(inputType)) {
            return inputType;
        }
        return getIteratedTypeOrElementType(use, inputType, sentType, errorNode, /*checkAssignability*/ true) || anyType;
    }

    /**
     * When consuming an iterable type in a for..of, spread, or iterator destructuring assignment
     * we want to get the iterated type of an iterable for ES2015 or later, or the iterated type
     * of a iterable (if defined globally) or element type of an array like for ES2015 or earlier.
     */
    function getIteratedTypeOrElementType(use: IterationUse, inputType: ts.Type, sentType: ts.Type, errorNode: ts.Node | undefined, checkAssignability: boolean): ts.Type | undefined {
        const allowAsyncIterables = (use & IterationUse.AllowsAsyncIterablesFlag) !== 0;
        if (inputType === neverType) {
            reportTypeNotIterableError(errorNode!, inputType, allowAsyncIterables); // TODO: GH#18217
            return undefined;
        }

        const uplevelIteration = languageVersion >= ts.ScriptTarget.ES2015;
        const downlevelIteration = !uplevelIteration && compilerOptions.downlevelIteration;
        const possibleOutOfBounds = compilerOptions.noUncheckedIndexedAccess && !!(use & IterationUse.PossiblyOutOfBounds);

        // Get the iterated type of an `Iterable<T>` or `IterableIterator<T>` only in ES2015
        // or higher, when inside of an async generator or for-await-if, or when
        // downlevelIteration is requested.
        if (uplevelIteration || downlevelIteration || allowAsyncIterables) {
            // We only report errors for an invalid iterable type in ES2015 or higher.
            const iterationTypes = getIterationTypesOfIterable(inputType, use, uplevelIteration ? errorNode : undefined);
            if (checkAssignability) {
                if (iterationTypes) {
                    const diagnostic =
                        use & IterationUse.ForOfFlag ? ts.Diagnostics.Cannot_iterate_value_because_the_next_method_of_its_iterator_expects_type_1_but_for_of_will_always_send_0 :
                        use & IterationUse.SpreadFlag ? ts.Diagnostics.Cannot_iterate_value_because_the_next_method_of_its_iterator_expects_type_1_but_array_spread_will_always_send_0 :
                        use & IterationUse.DestructuringFlag ? ts.Diagnostics.Cannot_iterate_value_because_the_next_method_of_its_iterator_expects_type_1_but_array_destructuring_will_always_send_0 :
                        use & IterationUse.YieldStarFlag ? ts.Diagnostics.Cannot_delegate_iteration_to_value_because_the_next_method_of_its_iterator_expects_type_1_but_the_containing_generator_will_always_send_0 :
                        undefined;
                    if (diagnostic) {
                        checkTypeAssignableTo(sentType, iterationTypes.nextType, errorNode, diagnostic);
                    }
                }
            }
            if (iterationTypes || uplevelIteration) {
                return possibleOutOfBounds ? includeUndefinedInIndexSignature(iterationTypes && iterationTypes.yieldType) : (iterationTypes && iterationTypes.yieldType);
            }
        }

        let arrayType = inputType;
        let reportedError = false;
        let hasStringConstituent = false;

        // If strings are permitted, remove any string-like constituents from the array type.
        // This allows us to find other non-string element types from an array unioned with
        // a string.
        if (use & IterationUse.AllowsStringInputFlag) {
            if (arrayType.flags & ts.TypeFlags.Union) {
                // After we remove all types that are StringLike, we will know if there was a string constituent
                // based on whether the result of filter is a new array.
                const arrayTypes = (inputType as ts.UnionType).types;
                const filteredTypes = ts.filter(arrayTypes, t => !(t.flags & ts.TypeFlags.StringLike));
                if (filteredTypes !== arrayTypes) {
                    arrayType = getUnionType(filteredTypes, ts.UnionReduction.Subtype);
                }
            }
            else if (arrayType.flags & ts.TypeFlags.StringLike) {
                arrayType = neverType;
            }

            hasStringConstituent = arrayType !== inputType;
            if (hasStringConstituent) {
                if (languageVersion < ts.ScriptTarget.ES5) {
                    if (errorNode) {
                        error(errorNode, ts.Diagnostics.Using_a_string_in_a_for_of_statement_is_only_supported_in_ECMAScript_5_and_higher);
                        reportedError = true;
                    }
                }

                // Now that we've removed all the StringLike types, if no constituents remain, then the entire
                // arrayOrStringType was a string.
                if (arrayType.flags & ts.TypeFlags.Never) {
                    return possibleOutOfBounds ? includeUndefinedInIndexSignature(stringType) : stringType;
                }
            }
        }

        if (!isArrayLikeType(arrayType)) {
            if (errorNode && !reportedError) {
                // Which error we report depends on whether we allow strings or if there was a
                // string constituent. For example, if the input type is number | string, we
                // want to say that number is not an array type. But if the input was just
                // number and string input is allowed, we want to say that number is not an
                // array type or a string type.
                const allowsStrings = !!(use & IterationUse.AllowsStringInputFlag) && !hasStringConstituent;
                const [defaultDiagnostic, maybeMissingAwait] = getIterationDiagnosticDetails(allowsStrings, downlevelIteration);
                errorAndMaybeSuggestAwait(
                    errorNode,
                    maybeMissingAwait && !!getAwaitedTypeOfPromise(arrayType),
                    defaultDiagnostic,
                    typeToString(arrayType));
            }
            return hasStringConstituent ? possibleOutOfBounds ? includeUndefinedInIndexSignature(stringType) : stringType : undefined;
        }

        const arrayElementType = getIndexTypeOfType(arrayType, numberType);
        if (hasStringConstituent && arrayElementType) {
            // This is just an optimization for the case where arrayOrStringType is string | string[]
            if (arrayElementType.flags & ts.TypeFlags.StringLike && !compilerOptions.noUncheckedIndexedAccess) {
                return stringType;
            }

            return getUnionType(possibleOutOfBounds ? [arrayElementType, stringType, undefinedType] : [arrayElementType, stringType], ts.UnionReduction.Subtype);
        }

        return (use & IterationUse.PossiblyOutOfBounds) ? includeUndefinedInIndexSignature(arrayElementType) : arrayElementType;

        function getIterationDiagnosticDetails(allowsStrings: boolean, downlevelIteration: boolean | undefined): [error: ts.DiagnosticMessage, maybeMissingAwait: boolean] {
            if (downlevelIteration) {
                return allowsStrings
                    ? [ts.Diagnostics.Type_0_is_not_an_array_type_or_a_string_type_or_does_not_have_a_Symbol_iterator_method_that_returns_an_iterator, true]
                    : [ts.Diagnostics.Type_0_is_not_an_array_type_or_does_not_have_a_Symbol_iterator_method_that_returns_an_iterator, true];
            }

            const yieldType = getIterationTypeOfIterable(use, IterationTypeKind.Yield, inputType, /*errorNode*/ undefined);

            if (yieldType) {
                return [ts.Diagnostics.Type_0_can_only_be_iterated_through_when_using_the_downlevelIteration_flag_or_with_a_target_of_es2015_or_higher, false];
            }

            if (isES2015OrLaterIterable(inputType.symbol?.escapedName)) {
                return [ts.Diagnostics.Type_0_can_only_be_iterated_through_when_using_the_downlevelIteration_flag_or_with_a_target_of_es2015_or_higher, true];
            }

            return allowsStrings
                ? [ts.Diagnostics.Type_0_is_not_an_array_type_or_a_string_type, true]
                : [ts.Diagnostics.Type_0_is_not_an_array_type, true];
        }
    }

    function isES2015OrLaterIterable(n: ts.__String) {
        switch (n) {
            case "Float32Array":
            case "Float64Array":
            case "Int16Array":
            case "Int32Array":
            case "Int8Array":
            case "NodeList":
            case "Uint16Array":
            case "Uint32Array":
            case "Uint8Array":
            case "Uint8ClampedArray":
                return true;
        }
        return false;
    }

    /**
     * Gets the requested "iteration type" from an `Iterable`-like or `AsyncIterable`-like type.
     */
    function getIterationTypeOfIterable(use: IterationUse, typeKind: IterationTypeKind, inputType: ts.Type, errorNode: ts.Node | undefined): ts.Type | undefined {
        if (isTypeAny(inputType)) {
            return undefined;
        }

        const iterationTypes = getIterationTypesOfIterable(inputType, use, errorNode);
        return iterationTypes && iterationTypes[getIterationTypesKeyFromIterationTypeKind(typeKind)];
    }

    function createIterationTypes(yieldType: ts.Type = neverType, returnType: ts.Type = neverType, nextType: ts.Type = unknownType): ts.IterationTypes {
        // `yieldType` and `returnType` are defaulted to `neverType` they each will be combined
        // via `getUnionType` when merging iteration types. `nextType` is defined as `unknownType`
        // as it is combined via `getIntersectionType` when merging iteration types.

        // Use the cache only for intrinsic types to keep it small as they are likely to be
        // more frequently created (i.e. `Iterator<number, void, unknown>`). Iteration types
        // are also cached on the type they are requested for, so we shouldn't need to maintain
        // the cache for less-frequently used types.
        if (yieldType.flags & ts.TypeFlags.Intrinsic &&
            returnType.flags & (ts.TypeFlags.Any | ts.TypeFlags.Never | ts.TypeFlags.Unknown | ts.TypeFlags.Void | ts.TypeFlags.Undefined) &&
            nextType.flags & (ts.TypeFlags.Any | ts.TypeFlags.Never | ts.TypeFlags.Unknown | ts.TypeFlags.Void | ts.TypeFlags.Undefined)) {
            const id = getTypeListId([yieldType, returnType, nextType]);
            let iterationTypes = iterationTypesCache.get(id);
            if (!iterationTypes) {
                iterationTypes = { yieldType, returnType, nextType };
                iterationTypesCache.set(id, iterationTypes);
            }
            return iterationTypes;
        }
        return { yieldType, returnType, nextType };
    }

    /**
     * Combines multiple `IterationTypes` records.
     *
     * If `array` is empty or all elements are missing or are references to `noIterationTypes`,
     * then `noIterationTypes` is returned. Otherwise, an `IterationTypes` record is returned
     * for the combined iteration types.
     */
    function combineIterationTypes(array: (ts.IterationTypes | undefined)[]) {
        let yieldTypes: ts.Type[] | undefined;
        let returnTypes: ts.Type[] | undefined;
        let nextTypes: ts.Type[] | undefined;
        for (const iterationTypes of array) {
            if (iterationTypes === undefined || iterationTypes === noIterationTypes) {
                continue;
            }
            if (iterationTypes === anyIterationTypes) {
                return anyIterationTypes;
            }
            yieldTypes = ts.append(yieldTypes, iterationTypes.yieldType);
            returnTypes = ts.append(returnTypes, iterationTypes.returnType);
            nextTypes = ts.append(nextTypes, iterationTypes.nextType);
        }
        if (yieldTypes || returnTypes || nextTypes) {
            return createIterationTypes(
                yieldTypes && getUnionType(yieldTypes),
                returnTypes && getUnionType(returnTypes),
                nextTypes && getIntersectionType(nextTypes));
        }
        return noIterationTypes;
    }

    function getCachedIterationTypes(type: ts.Type, cacheKey: ts.MatchingKeys<ts.IterableOrIteratorType, ts.IterationTypes | undefined>) {
        return (type as ts.IterableOrIteratorType)[cacheKey];
    }

    function setCachedIterationTypes(type: ts.Type, cacheKey: ts.MatchingKeys<ts.IterableOrIteratorType, ts.IterationTypes | undefined>, cachedTypes: ts.IterationTypes) {
        return (type as ts.IterableOrIteratorType)[cacheKey] = cachedTypes;
    }

    /**
     * Gets the *yield*, *return*, and *next* types from an `Iterable`-like or `AsyncIterable`-like type.
     *
     * At every level that involves analyzing return types of signatures, we union the return types of all the signatures.
     *
     * Another thing to note is that at any step of this process, we could run into a dead end,
     * meaning either the property is missing, or we run into the anyType. If either of these things
     * happens, we return `undefined` to signal that we could not find the iteration type. If a property
     * is missing, and the previous step did not result in `any`, then we also give an error if the
     * caller requested it. Then the caller can decide what to do in the case where there is no iterated
     * type.
     *
     * For a **for-of** statement, `yield*` (in a normal generator), spread, array
     * destructuring, or normal generator we will only ever look for a `[Symbol.iterator]()`
     * method.
     *
     * For an async generator we will only ever look at the `[Symbol.asyncIterator]()` method.
     *
     * For a **for-await-of** statement or a `yield*` in an async generator we will look for
     * the `[Symbol.asyncIterator]()` method first, and then the `[Symbol.iterator]()` method.
     */
    function getIterationTypesOfIterable(type: ts.Type, use: IterationUse, errorNode: ts.Node | undefined) {
        if (isTypeAny(type)) {
            return anyIterationTypes;
        }

        if (!(type.flags & ts.TypeFlags.Union)) {
            const errorOutputContainer: { errors: ts.Diagnostic[] | undefined } | undefined = errorNode ? { errors: undefined } : undefined;
            const iterationTypes = getIterationTypesOfIterableWorker(type, use, errorNode, errorOutputContainer);
            if (iterationTypes === noIterationTypes) {
                if (errorNode) {
                    const rootDiag = reportTypeNotIterableError(errorNode, type, !!(use & IterationUse.AllowsAsyncIterablesFlag));
                    if (errorOutputContainer?.errors) {
                        ts.addRelatedInfo(rootDiag, ...errorOutputContainer.errors);
                    }
                }
                return undefined;
            }
            else if (errorOutputContainer?.errors?.length) {
                for (const diag of errorOutputContainer.errors) {
                    diagnostics.add(diag);
                }
            }
            return iterationTypes;
        }

        const cacheKey = use & IterationUse.AllowsAsyncIterablesFlag ? "iterationTypesOfAsyncIterable" : "iterationTypesOfIterable";
        const cachedTypes = getCachedIterationTypes(type, cacheKey);
        if (cachedTypes) return cachedTypes === noIterationTypes ? undefined : cachedTypes;

        let allIterationTypes: ts.IterationTypes[] | undefined;
        for (const constituent of (type as ts.UnionType).types) {
            const errorOutputContainer: { errors: ts.Diagnostic[] | undefined } | undefined = errorNode ? { errors: undefined } : undefined;
            const iterationTypes = getIterationTypesOfIterableWorker(constituent, use, errorNode, errorOutputContainer);
            if (iterationTypes === noIterationTypes) {
                if (errorNode) {
                    const rootDiag = reportTypeNotIterableError(errorNode, type, !!(use & IterationUse.AllowsAsyncIterablesFlag));
                    if (errorOutputContainer?.errors) {
                        ts.addRelatedInfo(rootDiag, ...errorOutputContainer.errors);
                    }
                }
                setCachedIterationTypes(type, cacheKey, noIterationTypes);
                return undefined;
            }
            else if (errorOutputContainer?.errors?.length) {
                for (const diag of errorOutputContainer.errors) {
                    diagnostics.add(diag);
                }
            }

            allIterationTypes = ts.append(allIterationTypes, iterationTypes);
        }

        const iterationTypes = allIterationTypes ? combineIterationTypes(allIterationTypes) : noIterationTypes;
        setCachedIterationTypes(type, cacheKey, iterationTypes);
        return iterationTypes === noIterationTypes ? undefined : iterationTypes;
    }

    function getAsyncFromSyncIterationTypes(iterationTypes: ts.IterationTypes, errorNode: ts.Node | undefined) {
        if (iterationTypes === noIterationTypes) return noIterationTypes;
        if (iterationTypes === anyIterationTypes) return anyIterationTypes;
        const { yieldType, returnType, nextType } = iterationTypes;
        // if we're requesting diagnostics, report errors for a missing `Awaited<T>`.
        if (errorNode) {
            getGlobalAwaitedSymbol(/*reportErrors*/ true);
        }
        return createIterationTypes(
            getAwaitedType(yieldType, errorNode) || anyType,
            getAwaitedType(returnType, errorNode) || anyType,
            nextType);
    }

    /**
     * Gets the *yield*, *return*, and *next* types from a non-union type.
     *
     * If we are unable to find the *yield*, *return*, and *next* types, `noIterationTypes` is
     * returned to indicate to the caller that it should report an error. Otherwise, an
     * `IterationTypes` record is returned.
     *
     * NOTE: You probably don't want to call this directly and should be calling
     * `getIterationTypesOfIterable` instead.
     */
    function getIterationTypesOfIterableWorker(type: ts.Type, use: IterationUse, errorNode: ts.Node | undefined, errorOutputContainer: { errors: ts.Diagnostic[] | undefined } | undefined) {
        if (isTypeAny(type)) {
            return anyIterationTypes;
        }

        // If we are reporting errors and encounter a cached `noIterationTypes`, we should ignore the cached value and continue as if nothing was cached.
        // In addition, we should not cache any new results for this call.
        let noCache = false;

        if (use & IterationUse.AllowsAsyncIterablesFlag) {
            const iterationTypes =
                getIterationTypesOfIterableCached(type, asyncIterationTypesResolver) ||
                getIterationTypesOfIterableFast(type, asyncIterationTypesResolver);
            if (iterationTypes) {
                if (iterationTypes === noIterationTypes && errorNode) {
                    // ignore the cached value
                    noCache = true;
                }
                else {
                    return use & IterationUse.ForOfFlag ?
                        getAsyncFromSyncIterationTypes(iterationTypes, errorNode) :
                        iterationTypes;
                }
            }
        }

        if (use & IterationUse.AllowsSyncIterablesFlag) {
            let iterationTypes =
                getIterationTypesOfIterableCached(type, syncIterationTypesResolver) ||
                getIterationTypesOfIterableFast(type, syncIterationTypesResolver);
            if (iterationTypes) {
                if (iterationTypes === noIterationTypes && errorNode) {
                    // ignore the cached value
                    noCache = true;
                }
                else {
                    if (use & IterationUse.AllowsAsyncIterablesFlag) {
                        // for a sync iterable in an async context, only use the cached types if they are valid.
                        if (iterationTypes !== noIterationTypes) {
                            iterationTypes = getAsyncFromSyncIterationTypes(iterationTypes, errorNode);
                            return noCache ? iterationTypes : setCachedIterationTypes(type, "iterationTypesOfAsyncIterable", iterationTypes);
                        }
                    }
                    else {
                        return iterationTypes;
                    }
                }
            }
        }

        if (use & IterationUse.AllowsAsyncIterablesFlag) {
            const iterationTypes = getIterationTypesOfIterableSlow(type, asyncIterationTypesResolver, errorNode, errorOutputContainer, noCache);
            if (iterationTypes !== noIterationTypes) {
                return iterationTypes;
            }
        }

        if (use & IterationUse.AllowsSyncIterablesFlag) {
            let iterationTypes = getIterationTypesOfIterableSlow(type, syncIterationTypesResolver, errorNode, errorOutputContainer, noCache);
            if (iterationTypes !== noIterationTypes) {
                if (use & IterationUse.AllowsAsyncIterablesFlag) {
                    iterationTypes = getAsyncFromSyncIterationTypes(iterationTypes, errorNode);
                    return noCache ? iterationTypes : setCachedIterationTypes(type, "iterationTypesOfAsyncIterable", iterationTypes);
                }
                else {
                    return iterationTypes;
                }
            }
        }

        return noIterationTypes;
    }

    /**
     * Gets the *yield*, *return*, and *next* types of an `Iterable`-like or
     * `AsyncIterable`-like type from the cache.
     *
     * NOTE: You probably don't want to call this directly and should be calling
     * `getIterationTypesOfIterable` instead.
     */
    function getIterationTypesOfIterableCached(type: ts.Type, resolver: IterationTypesResolver) {
        return getCachedIterationTypes(type, resolver.iterableCacheKey);
    }

    function getIterationTypesOfGlobalIterableType(globalType: ts.Type, resolver: IterationTypesResolver) {
        const globalIterationTypes =
            getIterationTypesOfIterableCached(globalType, resolver) ||
            getIterationTypesOfIterableSlow(globalType, resolver, /*errorNode*/ undefined, /*errorOutputContainer*/ undefined, /*noCache*/ false);
        return globalIterationTypes === noIterationTypes ? defaultIterationTypes : globalIterationTypes;
    }

    /**
     * Gets the *yield*, *return*, and *next* types of an `Iterable`-like or `AsyncIterable`-like
     * type from from common heuristics.
     *
     * If we previously analyzed this type and found no iteration types, `noIterationTypes` is
     * returned. If we found iteration types, an `IterationTypes` record is returned.
     * Otherwise, we return `undefined` to indicate to the caller it should perform a more
     * exhaustive analysis.
     *
     * NOTE: You probably don't want to call this directly and should be calling
     * `getIterationTypesOfIterable` instead.
     */
    function getIterationTypesOfIterableFast(type: ts.Type, resolver: IterationTypesResolver) {
        // As an optimization, if the type is an instantiation of one of the following global types, then
        // just grab its related type argument:
        // - `Iterable<T>` or `AsyncIterable<T>`
        // - `IterableIterator<T>` or `AsyncIterableIterator<T>`
        let globalType: ts.Type;
        if (isReferenceToType(type, globalType = resolver.getGlobalIterableType(/*reportErrors*/ false)) ||
            isReferenceToType(type, globalType = resolver.getGlobalIterableIteratorType(/*reportErrors*/ false))) {
            const [yieldType] = getTypeArguments(type as ts.GenericType);
            // The "return" and "next" types of `Iterable` and `IterableIterator` are defined by the
            // iteration types of their `[Symbol.iterator]()` method. The same is true for their async cousins.
            // While we define these as `any` and `undefined` in our libs by default, a custom lib *could* use
            // different definitions.
            const { returnType, nextType } = getIterationTypesOfGlobalIterableType(globalType, resolver);
            return setCachedIterationTypes(type, resolver.iterableCacheKey, createIterationTypes(resolver.resolveIterationType(yieldType, /*errorNode*/ undefined) || yieldType, resolver.resolveIterationType(returnType, /*errorNode*/ undefined) || returnType, nextType));
        }

        // As an optimization, if the type is an instantiation of the following global type, then
        // just grab its related type arguments:
        // - `Generator<T, TReturn, TNext>` or `AsyncGenerator<T, TReturn, TNext>`
        if (isReferenceToType(type, resolver.getGlobalGeneratorType(/*reportErrors*/ false))) {
            const [yieldType, returnType, nextType] = getTypeArguments(type as ts.GenericType);
            return setCachedIterationTypes(type, resolver.iterableCacheKey, createIterationTypes(resolver.resolveIterationType(yieldType, /*errorNode*/ undefined) || yieldType, resolver.resolveIterationType(returnType, /*errorNode*/ undefined) || returnType, nextType));
        }
    }

    function getPropertyNameForKnownSymbolName(symbolName: string): ts.__String {
        const ctorType = getGlobalESSymbolConstructorSymbol(/*reportErrors*/ false);
        const uniqueType = ctorType && getTypeOfPropertyOfType(getTypeOfSymbol(ctorType), ts.escapeLeadingUnderscores(symbolName));
        return uniqueType && isTypeUsableAsPropertyName(uniqueType) ? getPropertyNameFromType(uniqueType) : `__@${symbolName}` as ts.__String;
    }

    /**
     * Gets the *yield*, *return*, and *next* types of an `Iterable`-like or `AsyncIterable`-like
     * type from its members.
     *
     * If we successfully found the *yield*, *return*, and *next* types, an `IterationTypes`
     * record is returned. Otherwise, `noIterationTypes` is returned.
     *
     * NOTE: You probably don't want to call this directly and should be calling
     * `getIterationTypesOfIterable` instead.
     */
    function getIterationTypesOfIterableSlow(type: ts.Type, resolver: IterationTypesResolver, errorNode: ts.Node | undefined, errorOutputContainer: { errors: ts.Diagnostic[] | undefined } | undefined, noCache: boolean) {
        const method = getPropertyOfType(type, getPropertyNameForKnownSymbolName(resolver.iteratorSymbolName));
        const methodType = method && !(method.flags & ts.SymbolFlags.Optional) ? getTypeOfSymbol(method) : undefined;
        if (isTypeAny(methodType)) {
            return noCache ? anyIterationTypes : setCachedIterationTypes(type, resolver.iterableCacheKey, anyIterationTypes);
        }

        const signatures = methodType ? getSignaturesOfType(methodType, ts.SignatureKind.Call) : undefined;
        if (!ts.some(signatures)) {
            return noCache ? noIterationTypes : setCachedIterationTypes(type, resolver.iterableCacheKey, noIterationTypes);
        }

        const iteratorType = getIntersectionType(ts.map(signatures, getReturnTypeOfSignature));
        const iterationTypes = getIterationTypesOfIteratorWorker(iteratorType, resolver, errorNode, errorOutputContainer, noCache) ?? noIterationTypes;
        return noCache ? iterationTypes : setCachedIterationTypes(type, resolver.iterableCacheKey, iterationTypes);
    }

    function reportTypeNotIterableError(errorNode: ts.Node, type: ts.Type, allowAsyncIterables: boolean): ts.Diagnostic {
        const message = allowAsyncIterables
            ? ts.Diagnostics.Type_0_must_have_a_Symbol_asyncIterator_method_that_returns_an_async_iterator
            : ts.Diagnostics.Type_0_must_have_a_Symbol_iterator_method_that_returns_an_iterator;
        const suggestAwait =
            // for (const x of Promise<...>) or [...Promise<...>]
            !!getAwaitedTypeOfPromise(type)
            // for (const x of AsyncIterable<...>)
            || (
                !allowAsyncIterables &&
                ts.isForOfStatement(errorNode.parent) &&
                errorNode.parent.expression === errorNode &&
                getGlobalAsyncIterableType(/** reportErrors */ false) !== emptyGenericType &&
                isTypeAssignableTo(type, getGlobalAsyncIterableType(/** reportErrors */ false)
            ));
        return errorAndMaybeSuggestAwait(errorNode, suggestAwait, message, typeToString(type));
    }

    /**
     * Gets the *yield*, *return*, and *next* types from an `Iterator`-like or `AsyncIterator`-like type.
     *
     * If we successfully found the *yield*, *return*, and *next* types, an `IterationTypes`
     * record is returned. Otherwise, `undefined` is returned.
     */
    function getIterationTypesOfIterator(type: ts.Type, resolver: IterationTypesResolver, errorNode: ts.Node | undefined, errorOutputContainer: { errors: ts.Diagnostic[] | undefined } | undefined) {
        return getIterationTypesOfIteratorWorker(type, resolver, errorNode, errorOutputContainer, /*noCache*/ false);
    }

    /**
     * Gets the *yield*, *return*, and *next* types from an `Iterator`-like or `AsyncIterator`-like type.
     *
     * If we successfully found the *yield*, *return*, and *next* types, an `IterationTypes`
     * record is returned. Otherwise, `undefined` is returned.
     *
     * NOTE: You probably don't want to call this directly and should be calling
     * `getIterationTypesOfIterator` instead.
     */
    function getIterationTypesOfIteratorWorker(type: ts.Type, resolver: IterationTypesResolver, errorNode: ts.Node | undefined, errorOutputContainer: { errors: ts.Diagnostic[] | undefined } | undefined, noCache: boolean) {
        if (isTypeAny(type)) {
            return anyIterationTypes;
        }

        let iterationTypes =
            getIterationTypesOfIteratorCached(type, resolver) ||
            getIterationTypesOfIteratorFast(type, resolver);

        if (iterationTypes === noIterationTypes && errorNode) {
            iterationTypes = undefined;
            noCache = true;
        }

        iterationTypes ??= getIterationTypesOfIteratorSlow(type, resolver, errorNode, errorOutputContainer, noCache);
        return iterationTypes === noIterationTypes ? undefined : iterationTypes;
    }

    /**
     * Gets the iteration types of an `Iterator`-like or `AsyncIterator`-like type from the
     * cache.
     *
     * NOTE: You probably don't want to call this directly and should be calling
     * `getIterationTypesOfIterator` instead.
     */
    function getIterationTypesOfIteratorCached(type: ts.Type, resolver: IterationTypesResolver) {
        return getCachedIterationTypes(type, resolver.iteratorCacheKey);
    }

    /**
     * Gets the iteration types of an `Iterator`-like or `AsyncIterator`-like type from the
     * cache or from common heuristics.
     *
     * If we previously analyzed this type and found no iteration types, `noIterationTypes` is
     * returned. If we found iteration types, an `IterationTypes` record is returned.
     * Otherwise, we return `undefined` to indicate to the caller it should perform a more
     * exhaustive analysis.
     *
     * NOTE: You probably don't want to call this directly and should be calling
     * `getIterationTypesOfIterator` instead.
     */
    function getIterationTypesOfIteratorFast(type: ts.Type, resolver: IterationTypesResolver) {
        // As an optimization, if the type is an instantiation of one of the following global types,
        // then just grab its related type argument:
        // - `IterableIterator<T>` or `AsyncIterableIterator<T>`
        // - `Iterator<T, TReturn, TNext>` or `AsyncIterator<T, TReturn, TNext>`
        // - `Generator<T, TReturn, TNext>` or `AsyncGenerator<T, TReturn, TNext>`
        const globalType = resolver.getGlobalIterableIteratorType(/*reportErrors*/ false);
        if (isReferenceToType(type, globalType)) {
            const [yieldType] = getTypeArguments(type as ts.GenericType);
            // The "return" and "next" types of `IterableIterator` and `AsyncIterableIterator` are defined by the
            // iteration types of their `next`, `return`, and `throw` methods. While we define these as `any`
            // and `undefined` in our libs by default, a custom lib *could* use different definitions.
            const globalIterationTypes =
                getIterationTypesOfIteratorCached(globalType, resolver) ||
                getIterationTypesOfIteratorSlow(globalType, resolver, /*errorNode*/ undefined, /*errorOutputContainer*/ undefined, /*noCache*/ false);
            const { returnType, nextType } = globalIterationTypes === noIterationTypes ? defaultIterationTypes : globalIterationTypes;
            return setCachedIterationTypes(type, resolver.iteratorCacheKey, createIterationTypes(yieldType, returnType, nextType));
        }
        if (isReferenceToType(type, resolver.getGlobalIteratorType(/*reportErrors*/ false)) ||
            isReferenceToType(type, resolver.getGlobalGeneratorType(/*reportErrors*/ false))) {
            const [yieldType, returnType, nextType] = getTypeArguments(type as ts.GenericType);
            return setCachedIterationTypes(type, resolver.iteratorCacheKey, createIterationTypes(yieldType, returnType, nextType));
        }
    }

    function isIteratorResult(type: ts.Type, kind: IterationTypeKind.Yield | IterationTypeKind.Return) {
        // From https://tc39.github.io/ecma262/#sec-iteratorresult-interface:
        // > [done] is the result status of an iterator `next` method call. If the end of the iterator was reached `done` is `true`.
        // > If the end was not reached `done` is `false` and a value is available.
        // > If a `done` property (either own or inherited) does not exist, it is consider to have the value `false`.
        const doneType = getTypeOfPropertyOfType(type, "done" as ts.__String) || falseType;
        return isTypeAssignableTo(kind === IterationTypeKind.Yield ? falseType : trueType, doneType);
    }

    function isYieldIteratorResult(type: ts.Type) {
        return isIteratorResult(type, IterationTypeKind.Yield);
    }

    function isReturnIteratorResult(type: ts.Type) {
        return isIteratorResult(type, IterationTypeKind.Return);
    }

    /**
     * Gets the *yield* and *return* types of an `IteratorResult`-like type.
     *
     * If we are unable to determine a *yield* or a *return* type, `noIterationTypes` is
     * returned to indicate to the caller that it should handle the error. Otherwise, an
     * `IterationTypes` record is returned.
     */
    function getIterationTypesOfIteratorResult(type: ts.Type) {
        if (isTypeAny(type)) {
            return anyIterationTypes;
        }

        const cachedTypes = getCachedIterationTypes(type, "iterationTypesOfIteratorResult");
        if (cachedTypes) {
            return cachedTypes;
        }

        // As an optimization, if the type is an instantiation of one of the global `IteratorYieldResult<T>`
        // or `IteratorReturnResult<TReturn>` types, then just grab its type argument.
        if (isReferenceToType(type, getGlobalIteratorYieldResultType(/*reportErrors*/ false))) {
            const yieldType = getTypeArguments(type as ts.GenericType)[0];
            return setCachedIterationTypes(type, "iterationTypesOfIteratorResult", createIterationTypes(yieldType, /*returnType*/ undefined, /*nextType*/ undefined));
        }
        if (isReferenceToType(type, getGlobalIteratorReturnResultType(/*reportErrors*/ false))) {
            const returnType = getTypeArguments(type as ts.GenericType)[0];
            return setCachedIterationTypes(type, "iterationTypesOfIteratorResult", createIterationTypes(/*yieldType*/ undefined, returnType, /*nextType*/ undefined));
        }

        // Choose any constituents that can produce the requested iteration type.
        const yieldIteratorResult = filterType(type, isYieldIteratorResult);
        const yieldType = yieldIteratorResult !== neverType ? getTypeOfPropertyOfType(yieldIteratorResult, "value" as ts.__String) : undefined;

        const returnIteratorResult = filterType(type, isReturnIteratorResult);
        const returnType = returnIteratorResult !== neverType ? getTypeOfPropertyOfType(returnIteratorResult, "value" as ts.__String) : undefined;

        if (!yieldType && !returnType) {
            return setCachedIterationTypes(type, "iterationTypesOfIteratorResult", noIterationTypes);
        }

        // From https://tc39.github.io/ecma262/#sec-iteratorresult-interface
        // > ... If the iterator does not have a return value, `value` is `undefined`. In that case, the
        // > `value` property may be absent from the conforming object if it does not inherit an explicit
        // > `value` property.
        return setCachedIterationTypes(type, "iterationTypesOfIteratorResult", createIterationTypes(yieldType, returnType || voidType, /*nextType*/ undefined));
    }

    /**
     * Gets the *yield*, *return*, and *next* types of a the `next()`, `return()`, or
     * `throw()` method of an `Iterator`-like or `AsyncIterator`-like type.
     *
     * If we successfully found the *yield*, *return*, and *next* types, an `IterationTypes`
     * record is returned. Otherwise, we return `undefined`.
     */
    function getIterationTypesOfMethod(type: ts.Type, resolver: IterationTypesResolver, methodName: "next" | "return" | "throw", errorNode: ts.Node | undefined, errorOutputContainer: { errors: ts.Diagnostic[] | undefined } | undefined): ts.IterationTypes | undefined {
        const method = getPropertyOfType(type, methodName as ts.__String);

        // Ignore 'return' or 'throw' if they are missing.
        if (!method && methodName !== "next") {
            return undefined;
        }

        const methodType = method && !(methodName === "next" && (method.flags & ts.SymbolFlags.Optional))
            ? methodName === "next" ? getTypeOfSymbol(method) : getTypeWithFacts(getTypeOfSymbol(method), TypeFacts.NEUndefinedOrNull)
            : undefined;

        if (isTypeAny(methodType)) {
            // `return()` and `throw()` don't provide a *next* type.
            return methodName === "next" ? anyIterationTypes : anyIterationTypesExceptNext;
        }

        // Both async and non-async iterators *must* have a `next` method.
        const methodSignatures = methodType ? getSignaturesOfType(methodType, ts.SignatureKind.Call) : ts.emptyArray;
        if (methodSignatures.length === 0) {
            if (errorNode) {
                const diagnostic = methodName === "next"
                    ? resolver.mustHaveANextMethodDiagnostic
                    : resolver.mustBeAMethodDiagnostic;
                if (errorOutputContainer) {
                    errorOutputContainer.errors ??= [];
                    errorOutputContainer.errors.push(ts.createDiagnosticForNode(errorNode, diagnostic, methodName));
                }
                else {
                    error(errorNode, diagnostic, methodName);
                }
            }
            return methodName === "next" ? noIterationTypes : undefined;
        }

        // If the method signature comes exclusively from the global iterator or generator type,
        // create iteration types from its type arguments like `getIterationTypesOfIteratorFast`
        // does (so as to remove `undefined` from the next and return types). We arrive here when
        // a contextual type for a generator was not a direct reference to one of those global types,
        // but looking up `methodType` referred to one of them (and nothing else). E.g., in
        // `interface SpecialIterator extends Iterator<number> {}`, `SpecialIterator` is not a
        // reference to `Iterator`, but its `next` member derives exclusively from `Iterator`.
        if (methodType?.symbol && methodSignatures.length === 1) {
            const globalGeneratorType = resolver.getGlobalGeneratorType(/*reportErrors*/ false);
            const globalIteratorType = resolver.getGlobalIteratorType(/*reportErrors*/ false);
            const isGeneratorMethod = globalGeneratorType.symbol?.members?.get(methodName as ts.__String) === methodType.symbol;
            const isIteratorMethod = !isGeneratorMethod && globalIteratorType.symbol?.members?.get(methodName as ts.__String) === methodType.symbol;
            if (isGeneratorMethod || isIteratorMethod) {
                const globalType = isGeneratorMethod ? globalGeneratorType : globalIteratorType;
                const { mapper } = methodType as ts.AnonymousType;
                return createIterationTypes(
                    getMappedType(globalType.typeParameters![0], mapper!),
                    getMappedType(globalType.typeParameters![1], mapper!),
                    methodName === "next" ? getMappedType(globalType.typeParameters![2], mapper!) : undefined);
            }
        }

        // Extract the first parameter and return type of each signature.
        let methodParameterTypes: ts.Type[] | undefined;
        let methodReturnTypes: ts.Type[] | undefined;
        for (const signature of methodSignatures) {
            if (methodName !== "throw" && ts.some(signature.parameters)) {
                methodParameterTypes = ts.append(methodParameterTypes, getTypeAtPosition(signature, 0));
            }
            methodReturnTypes = ts.append(methodReturnTypes, getReturnTypeOfSignature(signature));
        }

        // Resolve the *next* or *return* type from the first parameter of a `next()` or
        // `return()` method, respectively.
        let returnTypes: ts.Type[] | undefined;
        let nextType: ts.Type | undefined;
        if (methodName !== "throw") {
            const methodParameterType = methodParameterTypes ? getUnionType(methodParameterTypes) : unknownType;
            if (methodName === "next") {
                // The value of `next(value)` is *not* awaited by async generators
                nextType = methodParameterType;
            }
            else if (methodName === "return") {
                // The value of `return(value)` *is* awaited by async generators
                const resolvedMethodParameterType = resolver.resolveIterationType(methodParameterType, errorNode) || anyType;
                returnTypes = ts.append(returnTypes, resolvedMethodParameterType);
            }
        }

        // Resolve the *yield* and *return* types from the return type of the method (i.e. `IteratorResult`)
        let yieldType: ts.Type;
        const methodReturnType = methodReturnTypes ? getIntersectionType(methodReturnTypes) : neverType;
        const resolvedMethodReturnType = resolver.resolveIterationType(methodReturnType, errorNode) || anyType;
        const iterationTypes = getIterationTypesOfIteratorResult(resolvedMethodReturnType);
        if (iterationTypes === noIterationTypes) {
            if (errorNode) {
                if (errorOutputContainer) {
                    errorOutputContainer.errors ??= [];
                    errorOutputContainer.errors.push(ts.createDiagnosticForNode(errorNode, resolver.mustHaveAValueDiagnostic, methodName));
                }
                else {
                    error(errorNode, resolver.mustHaveAValueDiagnostic, methodName);
                }
            }
            yieldType = anyType;
            returnTypes = ts.append(returnTypes, anyType);
        }
        else {
            yieldType = iterationTypes.yieldType;
            returnTypes = ts.append(returnTypes, iterationTypes.returnType);
        }

        return createIterationTypes(yieldType, getUnionType(returnTypes), nextType);
    }

    /**
     * Gets the *yield*, *return*, and *next* types of an `Iterator`-like or `AsyncIterator`-like
     * type from its members.
     *
     * If we successfully found the *yield*, *return*, and *next* types, an `IterationTypes`
     * record is returned. Otherwise, `noIterationTypes` is returned.
     *
     * NOTE: You probably don't want to call this directly and should be calling
     * `getIterationTypesOfIterator` instead.
     */
    function getIterationTypesOfIteratorSlow(type: ts.Type, resolver: IterationTypesResolver, errorNode: ts.Node | undefined, errorOutputContainer: { errors: ts.Diagnostic[] | undefined } | undefined, noCache: boolean) {
        const iterationTypes = combineIterationTypes([
            getIterationTypesOfMethod(type, resolver, "next", errorNode, errorOutputContainer),
            getIterationTypesOfMethod(type, resolver, "return", errorNode, errorOutputContainer),
            getIterationTypesOfMethod(type, resolver, "throw", errorNode, errorOutputContainer),
        ]);
        return noCache ? iterationTypes : setCachedIterationTypes(type, resolver.iteratorCacheKey, iterationTypes);
    }

    /**
     * Gets the requested "iteration type" from a type that is either `Iterable`-like, `Iterator`-like,
     * `IterableIterator`-like, or `Generator`-like (for a non-async generator); or `AsyncIterable`-like,
     * `AsyncIterator`-like, `AsyncIterableIterator`-like, or `AsyncGenerator`-like (for an async generator).
     */
    function getIterationTypeOfGeneratorFunctionReturnType(kind: IterationTypeKind, returnType: ts.Type, isAsyncGenerator: boolean): ts.Type | undefined {
        if (isTypeAny(returnType)) {
            return undefined;
        }

        const iterationTypes = getIterationTypesOfGeneratorFunctionReturnType(returnType, isAsyncGenerator);
        return iterationTypes && iterationTypes[getIterationTypesKeyFromIterationTypeKind(kind)];
    }

    function getIterationTypesOfGeneratorFunctionReturnType(type: ts.Type, isAsyncGenerator: boolean) {
        if (isTypeAny(type)) {
            return anyIterationTypes;
        }

        const use = isAsyncGenerator ? IterationUse.AsyncGeneratorReturnType : IterationUse.GeneratorReturnType;
        const resolver = isAsyncGenerator ? asyncIterationTypesResolver : syncIterationTypesResolver;
        return getIterationTypesOfIterable(type, use, /*errorNode*/ undefined) ||
            getIterationTypesOfIterator(type, resolver, /*errorNode*/ undefined, /*errorOutputContainer*/ undefined);
    }

    function checkBreakOrContinueStatement(node: ts.BreakOrContinueStatement) {
        // Grammar checking
        if (!checkGrammarStatementInAmbientContext(node)) checkGrammarBreakOrContinueStatement(node);

        // TODO: Check that target label is valid
    }

    function unwrapReturnType(returnType: ts.Type, functionFlags: ts.FunctionFlags) {
        const isGenerator = !!(functionFlags & ts.FunctionFlags.Generator);
        const isAsync = !!(functionFlags & ts.FunctionFlags.Async);
        if (isGenerator) {
            const returnIterationType = getIterationTypeOfGeneratorFunctionReturnType(IterationTypeKind.Return, returnType, isAsync);
            if (!returnIterationType) {
                return errorType;
            }
            return isAsync ? getAwaitedTypeNoAlias(unwrapAwaitedType(returnIterationType)) : returnIterationType;
        }
        return isAsync ? getAwaitedTypeNoAlias(returnType) || errorType : returnType;
    }

    function isUnwrappedReturnTypeVoidOrAny(func: ts.SignatureDeclaration, returnType: ts.Type): boolean {
        const unwrappedReturnType = unwrapReturnType(returnType, ts.getFunctionFlags(func));
        return !!unwrappedReturnType && maybeTypeOfKind(unwrappedReturnType, ts.TypeFlags.Void | ts.TypeFlags.AnyOrUnknown);
    }

    function checkReturnStatement(node: ts.ReturnStatement) {
        // Grammar checking
        if (checkGrammarStatementInAmbientContext(node)) {
            return;
        }

        const container = ts.getContainingFunctionOrClassStaticBlock(node);
        if(container && ts.isClassStaticBlockDeclaration(container)) {
            grammarErrorOnFirstToken(node, ts.Diagnostics.A_return_statement_cannot_be_used_inside_a_class_static_block);
            return;
        }

        if (!container) {
            grammarErrorOnFirstToken(node, ts.Diagnostics.A_return_statement_can_only_be_used_within_a_function_body);
            return;
        }

        const signature = getSignatureFromDeclaration(container);
        const returnType = getReturnTypeOfSignature(signature);
        const functionFlags = ts.getFunctionFlags(container);
        if (strictNullChecks || node.expression || returnType.flags & ts.TypeFlags.Never) {
            const exprType = node.expression ? checkExpressionCached(node.expression) : undefinedType;
            if (container.kind === ts.SyntaxKind.SetAccessor) {
                if (node.expression) {
                    error(node, ts.Diagnostics.Setters_cannot_return_a_value);
                }
            }
            else if (container.kind === ts.SyntaxKind.Constructor) {
                if (node.expression && !checkTypeAssignableToAndOptionallyElaborate(exprType, returnType, node, node.expression)) {
                    error(node, ts.Diagnostics.Return_type_of_constructor_signature_must_be_assignable_to_the_instance_type_of_the_class);
                }
            }
            else if (getReturnTypeFromAnnotation(container)) {
                const unwrappedReturnType = unwrapReturnType(returnType, functionFlags) ?? returnType;
                const unwrappedExprType = functionFlags & ts.FunctionFlags.Async
                    ? checkAwaitedType(exprType, /*withAlias*/ false, node, ts.Diagnostics.The_return_type_of_an_async_function_must_either_be_a_valid_promise_or_must_not_contain_a_callable_then_member)
                    : exprType;
                if (unwrappedReturnType) {
                    // If the function has a return type, but promisedType is
                    // undefined, an error will be reported in checkAsyncFunctionReturnType
                    // so we don't need to report one here.
                    checkTypeAssignableToAndOptionallyElaborate(unwrappedExprType, unwrappedReturnType, node, node.expression);
                }
            }
        }
        else if (container.kind !== ts.SyntaxKind.Constructor && compilerOptions.noImplicitReturns && !isUnwrappedReturnTypeVoidOrAny(container, returnType)) {
            // The function has a return type, but the return statement doesn't have an expression.
            error(node, ts.Diagnostics.Not_all_code_paths_return_a_value);
        }
    }

    function checkWithStatement(node: ts.WithStatement) {
        // Grammar checking for withStatement
        if (!checkGrammarStatementInAmbientContext(node)) {
            if (node.flags & ts.NodeFlags.AwaitContext) {
                grammarErrorOnFirstToken(node, ts.Diagnostics.with_statements_are_not_allowed_in_an_async_function_block);
            }
        }

        checkExpression(node.expression);

        const sourceFile = ts.getSourceFileOfNode(node);
        if (!hasParseDiagnostics(sourceFile)) {
            const start = ts.getSpanOfTokenAtPosition(sourceFile, node.pos).start;
            const end = node.statement.pos;
            grammarErrorAtPos(sourceFile, start, end - start, ts.Diagnostics.The_with_statement_is_not_supported_All_symbols_in_a_with_block_will_have_type_any);
        }
    }

    function checkSwitchStatement(node: ts.SwitchStatement) {
        // Grammar checking
        checkGrammarStatementInAmbientContext(node);

        let firstDefaultClause: ts.CaseOrDefaultClause;
        let hasDuplicateDefaultClause = false;

        const expressionType = checkExpression(node.expression);
        const expressionIsLiteral = isLiteralType(expressionType);
        ts.forEach(node.caseBlock.clauses, clause => {
            // Grammar check for duplicate default clauses, skip if we already report duplicate default clause
            if (clause.kind === ts.SyntaxKind.DefaultClause && !hasDuplicateDefaultClause) {
                if (firstDefaultClause === undefined) {
                    firstDefaultClause = clause;
                }
                else {
                    grammarErrorOnNode(clause, ts.Diagnostics.A_default_clause_cannot_appear_more_than_once_in_a_switch_statement);
                    hasDuplicateDefaultClause = true;
                }
            }

            if (clause.kind === ts.SyntaxKind.CaseClause) {
                addLazyDiagnostic(createLazyCaseClauseDiagnostics(clause));
            }
            ts.forEach(clause.statements, checkSourceElement);
            if (compilerOptions.noFallthroughCasesInSwitch && clause.fallthroughFlowNode && isReachableFlowNode(clause.fallthroughFlowNode)) {
                error(clause, ts.Diagnostics.Fallthrough_case_in_switch);
            }

            function createLazyCaseClauseDiagnostics(clause: ts.CaseClause) {
                return () => {
                    // TypeScript 1.0 spec (April 2014): 5.9
                    // In a 'switch' statement, each 'case' expression must be of a type that is comparable
                    // to or from the type of the 'switch' expression.
                    let caseType = checkExpression(clause.expression);
                    const caseIsLiteral = isLiteralType(caseType);
                    let comparedExpressionType = expressionType;
                    if (!caseIsLiteral || !expressionIsLiteral) {
                        caseType = caseIsLiteral ? getBaseTypeOfLiteralType(caseType) : caseType;
                        comparedExpressionType = getBaseTypeOfLiteralType(expressionType);
                    }
                    if (!isTypeEqualityComparableTo(comparedExpressionType, caseType)) {
                        // expressionType is not comparable to caseType, try the reversed check and report errors if it fails
                        checkTypeComparableTo(caseType, comparedExpressionType, clause.expression, /*headMessage*/ undefined);
                    }
                };
            }
        });
        if (node.caseBlock.locals) {
            registerForUnusedIdentifiersCheck(node.caseBlock);
        }
    }

    function checkLabeledStatement(node: ts.LabeledStatement) {
        // Grammar checking
        if (!checkGrammarStatementInAmbientContext(node)) {
            ts.findAncestor(node.parent, current => {
                if (ts.isFunctionLike(current)) {
                    return "quit";
                }
                if (current.kind === ts.SyntaxKind.LabeledStatement && (current as ts.LabeledStatement).label.escapedText === node.label.escapedText) {
                    grammarErrorOnNode(node.label, ts.Diagnostics.Duplicate_label_0, ts.getTextOfNode(node.label));
                    return true;
                }
                return false;
            });
        }

        // ensure that label is unique
        checkSourceElement(node.statement);
    }

    function checkThrowStatement(node: ts.ThrowStatement) {
        // Grammar checking
        if (!checkGrammarStatementInAmbientContext(node)) {
            if (ts.isIdentifier(node.expression) && !node.expression.escapedText) {
                grammarErrorAfterFirstToken(node, ts.Diagnostics.Line_break_not_permitted_here);
            }
        }

        if (node.expression) {
            checkExpression(node.expression);
        }
    }

    function checkTryStatement(node: ts.TryStatement) {
        // Grammar checking
        checkGrammarStatementInAmbientContext(node);

        checkBlock(node.tryBlock);
        const catchClause = node.catchClause;
        if (catchClause) {
            // Grammar checking
            if (catchClause.variableDeclaration) {
                const declaration = catchClause.variableDeclaration;
                const typeNode = ts.getEffectiveTypeAnnotationNode(ts.getRootDeclaration(declaration));
                if (typeNode) {
                    const type = getTypeForVariableLikeDeclaration(declaration, /*includeOptionality*/ false, CheckMode.Normal);
                    if (type && !(type.flags & ts.TypeFlags.AnyOrUnknown)) {
                        grammarErrorOnFirstToken(typeNode, ts.Diagnostics.Catch_clause_variable_type_annotation_must_be_any_or_unknown_if_specified);
                    }
                }
                else if (declaration.initializer) {
                    grammarErrorOnFirstToken(declaration.initializer, ts.Diagnostics.Catch_clause_variable_cannot_have_an_initializer);
                }
                else {
                    const blockLocals = catchClause.block.locals;
                    if (blockLocals) {
                        ts.forEachKey(catchClause.locals!, caughtName => {
                            const blockLocal = blockLocals.get(caughtName);
                            if (blockLocal?.valueDeclaration && (blockLocal.flags & ts.SymbolFlags.BlockScopedVariable) !== 0) {
                                grammarErrorOnNode(blockLocal.valueDeclaration, ts.Diagnostics.Cannot_redeclare_identifier_0_in_catch_clause, caughtName);
                            }
                        });
                    }
                }
            }

            checkBlock(catchClause.block);
        }

        if (node.finallyBlock) {
            checkBlock(node.finallyBlock);
        }
    }

    function checkIndexConstraints(type: ts.Type, symbol: ts.Symbol, isStaticIndex?: boolean) {
        const indexInfos = getIndexInfosOfType(type);
        if (indexInfos.length === 0) {
            return;
        }
        for (const prop of getPropertiesOfObjectType(type)) {
            if (!(isStaticIndex && prop.flags & ts.SymbolFlags.Prototype)) {
                checkIndexConstraintForProperty(type, prop, getLiteralTypeFromProperty(prop, ts.TypeFlags.StringOrNumberLiteralOrUnique, /*includeNonPublic*/ true), getNonMissingTypeOfSymbol(prop));
            }
        }
        const typeDeclaration = symbol.valueDeclaration;
        if (typeDeclaration && ts.isClassLike(typeDeclaration)) {
            for (const member of typeDeclaration.members) {
                // Only process instance properties with computed names here. Static properties cannot be in conflict with indexers,
                // and properties with literal names were already checked.
                if (!ts.isStatic(member) && !hasBindableName(member)) {
                    const symbol = getSymbolOfNode(member);
                    checkIndexConstraintForProperty(type, symbol, getTypeOfExpression((member as ts.DynamicNamedDeclaration).name.expression), getNonMissingTypeOfSymbol(symbol));
                }
            }
        }
        if (indexInfos.length > 1) {
            for (const info of indexInfos) {
                checkIndexConstraintForIndexSignature(type, info);
            }
        }
    }

    function checkIndexConstraintForProperty(type: ts.Type, prop: ts.Symbol, propNameType: ts.Type, propType: ts.Type) {
        const declaration = prop.valueDeclaration;
        const name = ts.getNameOfDeclaration(declaration);
        if (name && ts.isPrivateIdentifier(name)) {
            return;
        }
        const indexInfos = getApplicableIndexInfos(type, propNameType);
        const interfaceDeclaration = ts.getObjectFlags(type) & ts.ObjectFlags.Interface ? ts.getDeclarationOfKind(type.symbol, ts.SyntaxKind.InterfaceDeclaration) : undefined;
        const propDeclaration = declaration && declaration.kind === ts.SyntaxKind.BinaryExpression ||
            name && name.kind === ts.SyntaxKind.ComputedPropertyName ? declaration : undefined;
        const localPropDeclaration = getParentOfSymbol(prop) === type.symbol ? declaration : undefined;
        for (const info of indexInfos) {
            const localIndexDeclaration = info.declaration && getParentOfSymbol(getSymbolOfNode(info.declaration)) === type.symbol ? info.declaration : undefined;
            // We check only when (a) the property is declared in the containing type, or (b) the applicable index signature is declared
            // in the containing type, or (c) the containing type is an interface and no base interface contains both the property and
            // the index signature (i.e. property and index signature are declared in separate inherited interfaces).
            const errorNode = localPropDeclaration || localIndexDeclaration ||
                (interfaceDeclaration && !ts.some(getBaseTypes(type as ts.InterfaceType), base => !!getPropertyOfObjectType(base, prop.escapedName) && !!getIndexTypeOfType(base, info.keyType)) ? interfaceDeclaration : undefined);
            if (errorNode && !isTypeAssignableTo(propType, info.type)) {
                const diagnostic = createError(errorNode, ts.Diagnostics.Property_0_of_type_1_is_not_assignable_to_2_index_type_3,
                    symbolToString(prop), typeToString(propType), typeToString(info.keyType), typeToString(info.type));
                if (propDeclaration && errorNode !== propDeclaration) {
                    ts.addRelatedInfo(diagnostic, ts.createDiagnosticForNode(propDeclaration, ts.Diagnostics._0_is_declared_here, symbolToString(prop)));
                }
                diagnostics.add(diagnostic);
            }
        }
    }

    function checkIndexConstraintForIndexSignature(type: ts.Type, checkInfo: ts.IndexInfo) {
        const declaration = checkInfo.declaration;
        const indexInfos = getApplicableIndexInfos(type, checkInfo.keyType);
        const interfaceDeclaration = ts.getObjectFlags(type) & ts.ObjectFlags.Interface ? ts.getDeclarationOfKind(type.symbol, ts.SyntaxKind.InterfaceDeclaration) : undefined;
        const localCheckDeclaration = declaration && getParentOfSymbol(getSymbolOfNode(declaration)) === type.symbol ? declaration : undefined;
        for (const info of indexInfos) {
            if (info === checkInfo) continue;
            const localIndexDeclaration = info.declaration && getParentOfSymbol(getSymbolOfNode(info.declaration)) === type.symbol ? info.declaration : undefined;
            // We check only when (a) the check index signature is declared in the containing type, or (b) the applicable index
            // signature is declared in the containing type, or (c) the containing type is an interface and no base interface contains
            // both index signatures (i.e. the index signatures are declared in separate inherited interfaces).
            const errorNode = localCheckDeclaration || localIndexDeclaration ||
                (interfaceDeclaration && !ts.some(getBaseTypes(type as ts.InterfaceType), base => !!getIndexInfoOfType(base, checkInfo.keyType) && !!getIndexTypeOfType(base, info.keyType)) ? interfaceDeclaration : undefined);
            if (errorNode && !isTypeAssignableTo(checkInfo.type, info.type)) {
                error(errorNode, ts.Diagnostics._0_index_type_1_is_not_assignable_to_2_index_type_3,
                    typeToString(checkInfo.keyType), typeToString(checkInfo.type), typeToString(info.keyType), typeToString(info.type));
            }
        }
    }

    function checkTypeNameIsReserved(name: ts.Identifier, message: ts.DiagnosticMessage): void {
        // TS 1.0 spec (April 2014): 3.6.1
        // The predefined type keywords are reserved and cannot be used as names of user defined types.
        switch (name.escapedText) {
            case "any":
            case "unknown":
            case "never":
            case "number":
            case "bigint":
            case "boolean":
            case "string":
            case "symbol":
            case "void":
            case "object":
                error(name, message, name.escapedText as string);
        }
    }

    /**
     * The name cannot be used as 'Object' of user defined types with special target.
     */
    function checkClassNameCollisionWithObject(name: ts.Identifier): void {
        if (languageVersion >= ts.ScriptTarget.ES5 && name.escapedText === "Object"
            && (moduleKind < ts.ModuleKind.ES2015 || ts.getSourceFileOfNode(name).impliedNodeFormat === ts.ModuleKind.CommonJS)) {
            error(name, ts.Diagnostics.Class_name_cannot_be_Object_when_targeting_ES5_with_module_0, ts.ModuleKind[moduleKind]); // https://github.com/Microsoft/TypeScript/issues/17494
        }
    }

    function checkUnmatchedJSDocParameters(node: ts.SignatureDeclaration) {
        const jsdocParameters = ts.filter(ts.getJSDocTags(node), ts.isJSDocParameterTag);
        if (!ts.length(jsdocParameters)) return;

        const isJs = ts.isInJSFile(node);
        const parameters = new ts.Set<ts.__String>();
        const excludedParameters = new ts.Set<number>();
        ts.forEach(node.parameters, ({ name }, index) => {
            if (ts.isIdentifier(name)) {
                parameters.add(name.escapedText);
            }
            if (ts.isBindingPattern(name)) {
                excludedParameters.add(index);
            }
        });

        const containsArguments = containsArgumentsReference(node);
        if (containsArguments) {
            const lastJSDocParam = ts.lastOrUndefined(jsdocParameters);
            if (isJs && lastJSDocParam && ts.isIdentifier(lastJSDocParam.name) && lastJSDocParam.typeExpression &&
                lastJSDocParam.typeExpression.type && !parameters.has(lastJSDocParam.name.escapedText) && !isArrayType(getTypeFromTypeNode(lastJSDocParam.typeExpression.type))) {
                error(lastJSDocParam.name, ts.Diagnostics.JSDoc_param_tag_has_name_0_but_there_is_no_parameter_with_that_name_It_would_match_arguments_if_it_had_an_array_type, ts.idText(lastJSDocParam.name));
            }
        }
        else {
            ts.forEach(jsdocParameters, ({ name, isNameFirst }, index) => {
                if (excludedParameters.has(index) || ts.isIdentifier(name) && parameters.has(name.escapedText)) {
                    return;
                }
                if (ts.isQualifiedName(name)) {
                    if (isJs) {
                        error(name, ts.Diagnostics.Qualified_name_0_is_not_allowed_without_a_leading_param_object_1, ts.entityNameToString(name), ts.entityNameToString(name.left));
                    }
                }
                else {
                    if (!isNameFirst) {
                        errorOrSuggestion(isJs, name, ts.Diagnostics.JSDoc_param_tag_has_name_0_but_there_is_no_parameter_with_that_name, ts.idText(name));
                    }
                }
            });
        }
    }

    /**
     * Check each type parameter and check that type parameters have no duplicate type parameter declarations
     */
    function checkTypeParameters(typeParameterDeclarations: readonly ts.TypeParameterDeclaration[] | undefined) {
        let seenDefault = false;
        if (typeParameterDeclarations) {
            for (let i = 0; i < typeParameterDeclarations.length; i++) {
                const node = typeParameterDeclarations[i];
                checkTypeParameter(node);

                addLazyDiagnostic(createCheckTypeParameterDiagnostic(node, i));
            }
        }

        function createCheckTypeParameterDiagnostic(node: ts.TypeParameterDeclaration, i: number) {
            return () => {
                if (node.default) {
                    seenDefault = true;
                    checkTypeParametersNotReferenced(node.default, typeParameterDeclarations!, i);
                }
                else if (seenDefault) {
                    error(node, ts.Diagnostics.Required_type_parameters_may_not_follow_optional_type_parameters);
                }
                for (let j = 0; j < i; j++) {
                    if (typeParameterDeclarations![j].symbol === node.symbol) {
                        error(node.name, ts.Diagnostics.Duplicate_identifier_0, ts.declarationNameToString(node.name));
                    }
                }
            };
        }
    }

    /** Check that type parameter defaults only reference previously declared type parameters */
    function checkTypeParametersNotReferenced(root: ts.TypeNode, typeParameters: readonly ts.TypeParameterDeclaration[], index: number) {
        visit(root);
        function visit(node: ts.Node) {
            if (node.kind === ts.SyntaxKind.TypeReference) {
                const type = getTypeFromTypeReference(node as ts.TypeReferenceNode);
                if (type.flags & ts.TypeFlags.TypeParameter) {
                    for (let i = index; i < typeParameters.length; i++) {
                        if (type.symbol === getSymbolOfNode(typeParameters[i])) {
                            error(node, ts.Diagnostics.Type_parameter_defaults_can_only_reference_previously_declared_type_parameters);
                        }
                    }
                }
            }
            ts.forEachChild(node, visit);
        }
    }

    /** Check that type parameter lists are identical across multiple declarations */
    function checkTypeParameterListsIdentical(symbol: ts.Symbol) {
        if (symbol.declarations && symbol.declarations.length === 1) {
            return;
        }

        const links = getSymbolLinks(symbol);
        if (!links.typeParametersChecked) {
            links.typeParametersChecked = true;
            const declarations = getClassOrInterfaceDeclarationsOfSymbol(symbol);
            if (!declarations || declarations.length <= 1) {
                return;
            }

            const type = getDeclaredTypeOfSymbol(symbol) as ts.InterfaceType;
            if (!areTypeParametersIdentical(declarations, type.localTypeParameters!, ts.getEffectiveTypeParameterDeclarations)) {
                // Report an error on every conflicting declaration.
                const name = symbolToString(symbol);
                for (const declaration of declarations) {
                    error(declaration.name, ts.Diagnostics.All_declarations_of_0_must_have_identical_type_parameters, name);
                }
            }
        }
    }

    function areTypeParametersIdentical<T extends ts.DeclarationWithTypeParameters | ts.TypeParameterDeclaration>(declarations: readonly T[], targetParameters: ts.TypeParameter[], getTypeParameterDeclarations: (node: T) => readonly ts.TypeParameterDeclaration[]) {
        const maxTypeArgumentCount = ts.length(targetParameters);
        const minTypeArgumentCount = getMinTypeArgumentCount(targetParameters);

        for (const declaration of declarations) {
            // If this declaration has too few or too many type parameters, we report an error
            const sourceParameters = getTypeParameterDeclarations(declaration);
            const numTypeParameters = sourceParameters.length;
            if (numTypeParameters < minTypeArgumentCount || numTypeParameters > maxTypeArgumentCount) {
                return false;
            }

            for (let i = 0; i < numTypeParameters; i++) {
                const source = sourceParameters[i];
                const target = targetParameters[i];

                // If the type parameter node does not have the same as the resolved type
                // parameter at this position, we report an error.
                if (source.name.escapedText !== target.symbol.escapedName) {
                    return false;
                }

                // If the type parameter node does not have an identical constraint as the resolved
                // type parameter at this position, we report an error.
                const constraint = ts.getEffectiveConstraintOfTypeParameter(source);
                const sourceConstraint = constraint && getTypeFromTypeNode(constraint);
                const targetConstraint = getConstraintOfTypeParameter(target);
                // relax check if later interface augmentation has no constraint, it's more broad and is OK to merge with
                // a more constrained interface (this could be generalized to a full hierarchy check, but that's maybe overkill)
                if (sourceConstraint && targetConstraint && !isTypeIdenticalTo(sourceConstraint, targetConstraint)) {
                    return false;
                }

                // If the type parameter node has a default and it is not identical to the default
                // for the type parameter at this position, we report an error.
                const sourceDefault = source.default && getTypeFromTypeNode(source.default);
                const targetDefault = getDefaultFromTypeParameter(target);
                if (sourceDefault && targetDefault && !isTypeIdenticalTo(sourceDefault, targetDefault)) {
                    return false;
                }
            }
        }

        return true;
    }

    function checkClassExpression(node: ts.ClassExpression): ts.Type {
        checkClassLikeDeclaration(node);
        checkNodeDeferred(node);
        return getTypeOfSymbol(getSymbolOfNode(node));
    }

    function checkClassExpressionDeferred(node: ts.ClassExpression) {
        ts.forEach(node.members, checkSourceElement);
        registerForUnusedIdentifiersCheck(node);
    }

    function checkClassDeclaration(node: ts.ClassDeclaration) {
        const firstDecorator = ts.find(node.modifiers, ts.isDecorator);
        if (firstDecorator && ts.some(node.members, p => ts.hasStaticModifier(p) && ts.isPrivateIdentifierClassElementDeclaration(p))) {
            grammarErrorOnNode(firstDecorator, ts.Diagnostics.Class_decorators_can_t_be_used_with_static_private_identifier_Consider_removing_the_experimental_decorator);
        }
        if (!node.name && !ts.hasSyntacticModifier(node, ts.ModifierFlags.Default)) {
            grammarErrorOnFirstToken(node, ts.Diagnostics.A_class_declaration_without_the_default_modifier_must_have_a_name);
        }
        checkClassLikeDeclaration(node);
        ts.forEach(node.members, checkSourceElement);

        registerForUnusedIdentifiersCheck(node);
    }

    function checkClassLikeDeclaration(node: ts.ClassLikeDeclaration) {
        checkGrammarClassLikeDeclaration(node);
        checkDecorators(node);
        checkCollisionsForDeclarationName(node, node.name);
        checkTypeParameters(ts.getEffectiveTypeParameterDeclarations(node));
        checkExportsOnMergedDeclarations(node);
        const symbol = getSymbolOfNode(node);
        const type = getDeclaredTypeOfSymbol(symbol) as ts.InterfaceType;
        const typeWithThis = getTypeWithThisArgument(type);
        const staticType = getTypeOfSymbol(symbol) as ts.ObjectType;
        checkTypeParameterListsIdentical(symbol);
        checkFunctionOrConstructorSymbol(symbol);
        checkClassForDuplicateDeclarations(node);

        // Only check for reserved static identifiers on non-ambient context.
        const nodeInAmbientContext = !!(node.flags & ts.NodeFlags.Ambient);
        if (!nodeInAmbientContext) {
            checkClassForStaticPropertyNameConflicts(node);
        }

        const baseTypeNode = ts.getEffectiveBaseTypeNode(node);
        if (baseTypeNode) {
            ts.forEach(baseTypeNode.typeArguments, checkSourceElement);
            if (languageVersion < ts.ScriptTarget.ES2015) {
                checkExternalEmitHelpers(baseTypeNode.parent, ts.ExternalEmitHelpers.Extends);
            }
            // check both @extends and extends if both are specified.
            const extendsNode = ts.getClassExtendsHeritageElement(node);
            if (extendsNode && extendsNode !== baseTypeNode) {
                checkExpression(extendsNode.expression);
            }

            const baseTypes = getBaseTypes(type);
            if (baseTypes.length) {
                addLazyDiagnostic(() => {
                    const baseType = baseTypes[0];
                    const baseConstructorType = getBaseConstructorTypeOfClass(type);
                    const staticBaseType = getApparentType(baseConstructorType);
                    checkBaseTypeAccessibility(staticBaseType, baseTypeNode);
                    checkSourceElement(baseTypeNode.expression);
                    if (ts.some(baseTypeNode.typeArguments)) {
                        ts.forEach(baseTypeNode.typeArguments, checkSourceElement);
                        for (const constructor of getConstructorsForTypeArguments(staticBaseType, baseTypeNode.typeArguments, baseTypeNode)) {
                            if (!checkTypeArgumentConstraints(baseTypeNode, constructor.typeParameters!)) {
                                break;
                            }
                        }
                    }
                    const baseWithThis = getTypeWithThisArgument(baseType, type.thisType);
                    if (!checkTypeAssignableTo(typeWithThis, baseWithThis, /*errorNode*/ undefined)) {
                        issueMemberSpecificError(node, typeWithThis, baseWithThis, ts.Diagnostics.Class_0_incorrectly_extends_base_class_1);
                    }
                    else {
                        // Report static side error only when instance type is assignable
                        checkTypeAssignableTo(staticType, getTypeWithoutSignatures(staticBaseType), node.name || node,
                            ts.Diagnostics.Class_static_side_0_incorrectly_extends_base_class_static_side_1);
                    }
                    if (baseConstructorType.flags & ts.TypeFlags.TypeVariable) {
                        if (!isMixinConstructorType(staticType)) {
                            error(node.name || node, ts.Diagnostics.A_mixin_class_must_have_a_constructor_with_a_single_rest_parameter_of_type_any);
                        }
                        else {
                            const constructSignatures = getSignaturesOfType(baseConstructorType, ts.SignatureKind.Construct);
                            if (constructSignatures.some(signature => signature.flags & ts.SignatureFlags.Abstract) && !ts.hasSyntacticModifier(node, ts.ModifierFlags.Abstract)) {
                                error(node.name || node, ts.Diagnostics.A_mixin_class_that_extends_from_a_type_variable_containing_an_abstract_construct_signature_must_also_be_declared_abstract);
                            }
                        }
                    }

                    if (!(staticBaseType.symbol && staticBaseType.symbol.flags & ts.SymbolFlags.Class) && !(baseConstructorType.flags & ts.TypeFlags.TypeVariable)) {
                        // When the static base type is a "class-like" constructor function (but not actually a class), we verify
                        // that all instantiated base constructor signatures return the same type.
                        const constructors = getInstantiatedConstructorsForTypeArguments(staticBaseType, baseTypeNode.typeArguments, baseTypeNode);
                        if (ts.forEach(constructors, sig => !isJSConstructor(sig.declaration) && !isTypeIdenticalTo(getReturnTypeOfSignature(sig), baseType))) {
                            error(baseTypeNode.expression, ts.Diagnostics.Base_constructors_must_all_have_the_same_return_type);
                        }
                    }
                    checkKindsOfPropertyMemberOverrides(type, baseType);
                });
            }
        }

        checkMembersForOverrideModifier(node, type, typeWithThis, staticType);

        const implementedTypeNodes = ts.getEffectiveImplementsTypeNodes(node);
        if (implementedTypeNodes) {
            for (const typeRefNode of implementedTypeNodes) {
                if (!ts.isEntityNameExpression(typeRefNode.expression) || ts.isOptionalChain(typeRefNode.expression)) {
                    error(typeRefNode.expression, ts.Diagnostics.A_class_can_only_implement_an_identifier_Slashqualified_name_with_optional_type_arguments);
                }
                checkTypeReferenceNode(typeRefNode);
                addLazyDiagnostic(createImplementsDiagnostics(typeRefNode));
            }
        }

        addLazyDiagnostic(() => {
            checkIndexConstraints(type, symbol);
            checkIndexConstraints(staticType, symbol, /*isStaticIndex*/ true);
            checkTypeForDuplicateIndexSignatures(node);
            checkPropertyInitialization(node);
        });

        function createImplementsDiagnostics(typeRefNode: ts.ExpressionWithTypeArguments) {
            return () => {
                const t = getReducedType(getTypeFromTypeNode(typeRefNode));
                if (!isErrorType(t)) {
                    if (isValidBaseType(t)) {
                        const genericDiag = t.symbol && t.symbol.flags & ts.SymbolFlags.Class ?
                            ts.Diagnostics.Class_0_incorrectly_implements_class_1_Did_you_mean_to_extend_1_and_inherit_its_members_as_a_subclass :
                            ts.Diagnostics.Class_0_incorrectly_implements_interface_1;
                        const baseWithThis = getTypeWithThisArgument(t, type.thisType);
                        if (!checkTypeAssignableTo(typeWithThis, baseWithThis, /*errorNode*/ undefined)) {
                            issueMemberSpecificError(node, typeWithThis, baseWithThis, genericDiag);
                        }
                    }
                    else {
                        error(typeRefNode, ts.Diagnostics.A_class_can_only_implement_an_object_type_or_intersection_of_object_types_with_statically_known_members);
                    }
                }
            };
        }
    }

    function checkMembersForOverrideModifier(node: ts.ClassLikeDeclaration, type: ts.InterfaceType, typeWithThis: ts.Type, staticType: ts.ObjectType) {
        const baseTypeNode = ts.getEffectiveBaseTypeNode(node);
        const baseTypes = baseTypeNode && getBaseTypes(type);
        const baseWithThis = baseTypes?.length ? getTypeWithThisArgument(ts.first(baseTypes), type.thisType) : undefined;
        const baseStaticType = getBaseConstructorTypeOfClass(type);

        for (const member of node.members) {
            if (ts.hasAmbientModifier(member)) {
                continue;
            }

            if (ts.isConstructorDeclaration(member)) {
                ts.forEach(member.parameters, param => {
                    if (ts.isParameterPropertyDeclaration(param, member)) {
                        checkExistingMemberForOverrideModifier(
                            node,
                            staticType,
                            baseStaticType,
                            baseWithThis,
                            type,
                            typeWithThis,
                            param,
                            /* memberIsParameterProperty */ true
                        );
                    }
                });
            }
            checkExistingMemberForOverrideModifier(
                node,
                staticType,
                baseStaticType,
                baseWithThis,
                type,
                typeWithThis,
                member,
                /* memberIsParameterProperty */ false,
            );
        }
    }

    /**
     * @param member Existing member node to be checked.
     * Note: `member` cannot be a synthetic node.
     */
    function checkExistingMemberForOverrideModifier(
        node: ts.ClassLikeDeclaration,
        staticType: ts.ObjectType,
        baseStaticType: ts.Type,
        baseWithThis: ts.Type | undefined,
        type: ts.InterfaceType,
        typeWithThis: ts.Type,
        member: ts.ClassElement | ts.ParameterPropertyDeclaration,
        memberIsParameterProperty: boolean,
        reportErrors = true,
    ): ts.MemberOverrideStatus {
        const declaredProp = member.name
            && getSymbolAtLocation(member.name)
            || getSymbolAtLocation(member);
        if (!declaredProp) {
            return ts.MemberOverrideStatus.Ok;
        }

        return checkMemberForOverrideModifier(
            node,
            staticType,
            baseStaticType,
            baseWithThis,
            type,
            typeWithThis,
            ts.hasOverrideModifier(member),
            ts.hasAbstractModifier(member),
            ts.isStatic(member),
            memberIsParameterProperty,
            ts.symbolName(declaredProp),
            reportErrors ? member : undefined,
        );
    }

    /**
     * Checks a class member declaration for either a missing or an invalid `override` modifier.
     * Note: this function can be used for speculative checking,
     * i.e. checking a member that does not yet exist in the program.
     * An example of that would be to call this function in a completions scenario,
     * when offering a method declaration as completion.
     * @param errorNode The node where we should report an error, or undefined if we should not report errors.
     */
    function checkMemberForOverrideModifier(
        node: ts.ClassLikeDeclaration,
        staticType: ts.ObjectType,
        baseStaticType: ts.Type,
        baseWithThis: ts.Type | undefined,
        type: ts.InterfaceType,
        typeWithThis: ts.Type,
        memberHasOverrideModifier: boolean,
        memberHasAbstractModifier: boolean,
        memberIsStatic: boolean,
        memberIsParameterProperty: boolean,
        memberName: string,
        errorNode?: ts.Node,
    ): ts.MemberOverrideStatus {
        const isJs = ts.isInJSFile(node);
        const nodeInAmbientContext = !!(node.flags & ts.NodeFlags.Ambient);
        if (baseWithThis && (memberHasOverrideModifier || compilerOptions.noImplicitOverride)) {
            const memberEscapedName = ts.escapeLeadingUnderscores(memberName);
            const thisType = memberIsStatic ? staticType : typeWithThis;
            const baseType = memberIsStatic ? baseStaticType : baseWithThis;
            const prop = getPropertyOfType(thisType, memberEscapedName);
            const baseProp = getPropertyOfType(baseType, memberEscapedName);

            const baseClassName = typeToString(baseWithThis);
            if (prop && !baseProp && memberHasOverrideModifier) {
                if (errorNode) {
                    const suggestion = getSuggestedSymbolForNonexistentClassMember(memberName, baseType); // Again, using symbol name: note that's different from `symbol.escapedName`
                    suggestion ?
                        error(
                            errorNode,
                            isJs ?
                                ts.Diagnostics.This_member_cannot_have_a_JSDoc_comment_with_an_override_tag_because_it_is_not_declared_in_the_base_class_0_Did_you_mean_1 :
                                ts.Diagnostics.This_member_cannot_have_an_override_modifier_because_it_is_not_declared_in_the_base_class_0_Did_you_mean_1,
                            baseClassName,
                            symbolToString(suggestion)) :
                        error(
                            errorNode,
                            isJs ?
                                ts.Diagnostics.This_member_cannot_have_a_JSDoc_comment_with_an_override_tag_because_it_is_not_declared_in_the_base_class_0 :
                                ts.Diagnostics.This_member_cannot_have_an_override_modifier_because_it_is_not_declared_in_the_base_class_0,
                            baseClassName);
                }
                return ts.MemberOverrideStatus.HasInvalidOverride;
            }
            else if (prop && baseProp?.declarations && compilerOptions.noImplicitOverride && !nodeInAmbientContext) {
                const baseHasAbstract = ts.some(baseProp.declarations, ts.hasAbstractModifier);
                if (memberHasOverrideModifier) {
                    return ts.MemberOverrideStatus.Ok;
                }

                if (!baseHasAbstract) {
                    if (errorNode) {
                        const diag = memberIsParameterProperty ?
                            isJs ?
                                ts.Diagnostics.This_parameter_property_must_have_a_JSDoc_comment_with_an_override_tag_because_it_overrides_a_member_in_the_base_class_0 :
                                ts.Diagnostics.This_parameter_property_must_have_an_override_modifier_because_it_overrides_a_member_in_base_class_0 :
                            isJs ?
                                ts.Diagnostics.This_member_must_have_a_JSDoc_comment_with_an_override_tag_because_it_overrides_a_member_in_the_base_class_0 :
                                ts.Diagnostics.This_member_must_have_an_override_modifier_because_it_overrides_a_member_in_the_base_class_0;
                        error(errorNode, diag, baseClassName);
                    }
                    return ts.MemberOverrideStatus.NeedsOverride;
                }
                else if (memberHasAbstractModifier && baseHasAbstract) {
                    if (errorNode) {
                        error(errorNode, ts.Diagnostics.This_member_must_have_an_override_modifier_because_it_overrides_an_abstract_method_that_is_declared_in_the_base_class_0, baseClassName);
                    }
                    return ts.MemberOverrideStatus.NeedsOverride;
                }
            }
        }
        else if (memberHasOverrideModifier) {
            if (errorNode) {
                const className = typeToString(type);
                error(
                    errorNode,
                    isJs ?
                        ts.Diagnostics.This_member_cannot_have_a_JSDoc_comment_with_an_override_tag_because_its_containing_class_0_does_not_extend_another_class :
                        ts.Diagnostics.This_member_cannot_have_an_override_modifier_because_its_containing_class_0_does_not_extend_another_class,
                    className);
            }
            return ts.MemberOverrideStatus.HasInvalidOverride;
        }

        return ts.MemberOverrideStatus.Ok;
    }

    function issueMemberSpecificError(node: ts.ClassLikeDeclaration, typeWithThis: ts.Type, baseWithThis: ts.Type, broadDiag: ts.DiagnosticMessage) {
        // iterate over all implemented properties and issue errors on each one which isn't compatible, rather than the class as a whole, if possible
        let issuedMemberError = false;
        for (const member of node.members) {
            if (ts.isStatic(member)) {
                continue;
            }
            const declaredProp = member.name && getSymbolAtLocation(member.name) || getSymbolAtLocation(member);
            if (declaredProp) {
                const prop = getPropertyOfType(typeWithThis, declaredProp.escapedName);
                const baseProp = getPropertyOfType(baseWithThis, declaredProp.escapedName);
                if (prop && baseProp) {
                    const rootChain = () => ts.chainDiagnosticMessages(
                        /*details*/ undefined,
                        ts.Diagnostics.Property_0_in_type_1_is_not_assignable_to_the_same_property_in_base_type_2,
                        symbolToString(declaredProp),
                        typeToString(typeWithThis),
                        typeToString(baseWithThis)
                    );
                    if (!checkTypeAssignableTo(getTypeOfSymbol(prop), getTypeOfSymbol(baseProp), member.name || member, /*message*/ undefined, rootChain)) {
                        issuedMemberError = true;
                    }
                }
            }
        }
        if (!issuedMemberError) {
            // check again with diagnostics to generate a less-specific error
            checkTypeAssignableTo(typeWithThis, baseWithThis, node.name || node, broadDiag);
        }
    }

    function checkBaseTypeAccessibility(type: ts.Type, node: ts.ExpressionWithTypeArguments) {
        const signatures = getSignaturesOfType(type, ts.SignatureKind.Construct);
        if (signatures.length) {
            const declaration = signatures[0].declaration;
            if (declaration && ts.hasEffectiveModifier(declaration, ts.ModifierFlags.Private)) {
                const typeClassDeclaration = ts.getClassLikeDeclarationOfSymbol(type.symbol)!;
                if (!isNodeWithinClass(node, typeClassDeclaration)) {
                    error(node, ts.Diagnostics.Cannot_extend_a_class_0_Class_constructor_is_marked_as_private, getFullyQualifiedName(type.symbol));
                }
            }
        }
    }

    /**
     * Checks a member declaration node to see if has a missing or invalid `override` modifier.
     * @param node Class-like node where the member is declared.
     * @param member Member declaration node.
     * Note: `member` can be a synthetic node without a parent.
     */
    function getMemberOverrideModifierStatus(node: ts.ClassLikeDeclaration, member: ts.ClassElement): ts.MemberOverrideStatus {
        if (!member.name) {
            return ts.MemberOverrideStatus.Ok;
        }

        const symbol = getSymbolOfNode(node);
        const type = getDeclaredTypeOfSymbol(symbol) as ts.InterfaceType;
        const typeWithThis = getTypeWithThisArgument(type);
        const staticType = getTypeOfSymbol(symbol) as ts.ObjectType;

        const baseTypeNode = ts.getEffectiveBaseTypeNode(node);
        const baseTypes = baseTypeNode && getBaseTypes(type);
        const baseWithThis = baseTypes?.length ? getTypeWithThisArgument(ts.first(baseTypes), type.thisType) : undefined;
        const baseStaticType = getBaseConstructorTypeOfClass(type);

        const memberHasOverrideModifier = member.parent
            ? ts.hasOverrideModifier(member)
            : ts.hasSyntacticModifier(member, ts.ModifierFlags.Override);

        const memberName = ts.unescapeLeadingUnderscores(ts.getTextOfPropertyName(member.name));

        return checkMemberForOverrideModifier(
            node,
            staticType,
            baseStaticType,
            baseWithThis,
            type,
            typeWithThis,
            memberHasOverrideModifier,
            ts.hasAbstractModifier(member),
            ts.isStatic(member),
            /* memberIsParameterProperty */ false,
            memberName,
        );
    }

    function getTargetSymbol(s: ts.Symbol) {
        // if symbol is instantiated its flags are not copied from the 'target'
        // so we'll need to get back original 'target' symbol to work with correct set of flags
        return ts.getCheckFlags(s) & ts.CheckFlags.Instantiated ? (s as ts.TransientSymbol).target! : s;
    }

    function getClassOrInterfaceDeclarationsOfSymbol(symbol: ts.Symbol) {
        return ts.filter(symbol.declarations, (d: ts.Declaration): d is ts.ClassDeclaration | ts.InterfaceDeclaration =>
            d.kind === ts.SyntaxKind.ClassDeclaration || d.kind === ts.SyntaxKind.InterfaceDeclaration);
    }

    function checkKindsOfPropertyMemberOverrides(type: ts.InterfaceType, baseType: ts.BaseType): void {
        // TypeScript 1.0 spec (April 2014): 8.2.3
        // A derived class inherits all members from its base class it doesn't override.
        // Inheritance means that a derived class implicitly contains all non - overridden members of the base class.
        // Both public and private property members are inherited, but only public property members can be overridden.
        // A property member in a derived class is said to override a property member in a base class
        // when the derived class property member has the same name and kind(instance or static)
        // as the base class property member.
        // The type of an overriding property member must be assignable(section 3.8.4)
        // to the type of the overridden property member, or otherwise a compile - time error occurs.
        // Base class instance member functions can be overridden by derived class instance member functions,
        // but not by other kinds of members.
        // Base class instance member variables and accessors can be overridden by
        // derived class instance member variables and accessors, but not by other kinds of members.

        // NOTE: assignability is checked in checkClassDeclaration
        const baseProperties = getPropertiesOfType(baseType);
        basePropertyCheck: for (const baseProperty of baseProperties) {
            const base = getTargetSymbol(baseProperty);

            if (base.flags & ts.SymbolFlags.Prototype) {
                continue;
            }
            const baseSymbol = getPropertyOfObjectType(type, base.escapedName);
            if (!baseSymbol) {
                continue;
            }
            const derived = getTargetSymbol(baseSymbol);
            const baseDeclarationFlags = ts.getDeclarationModifierFlagsFromSymbol(base);

            ts.Debug.assert(!!derived, "derived should point to something, even if it is the base class' declaration.");

            // In order to resolve whether the inherited method was overridden in the base class or not,
            // we compare the Symbols obtained. Since getTargetSymbol returns the symbol on the *uninstantiated*
            // type declaration, derived and base resolve to the same symbol even in the case of generic classes.
            if (derived === base) {
                // derived class inherits base without override/redeclaration
                const derivedClassDecl = ts.getClassLikeDeclarationOfSymbol(type.symbol)!;

                // It is an error to inherit an abstract member without implementing it or being declared abstract.
                // If there is no declaration for the derived class (as in the case of class expressions),
                // then the class cannot be declared abstract.
                if (baseDeclarationFlags & ts.ModifierFlags.Abstract && (!derivedClassDecl || !ts.hasSyntacticModifier(derivedClassDecl, ts.ModifierFlags.Abstract))) {
                    // Searches other base types for a declaration that would satisfy the inherited abstract member.
                    // (The class may have more than one base type via declaration merging with an interface with the
                    // same name.)
                    for (const otherBaseType of getBaseTypes(type)) {
                        if (otherBaseType === baseType) continue;
                        const baseSymbol = getPropertyOfObjectType(otherBaseType, base.escapedName);
                        const derivedElsewhere = baseSymbol && getTargetSymbol(baseSymbol);
                        if (derivedElsewhere && derivedElsewhere !== base) {
                            continue basePropertyCheck;
                        }
                    }

                    if (derivedClassDecl.kind === ts.SyntaxKind.ClassExpression) {
                        error(derivedClassDecl, ts.Diagnostics.Non_abstract_class_expression_does_not_implement_inherited_abstract_member_0_from_class_1,
                            symbolToString(baseProperty), typeToString(baseType));
                    }
                    else {
                        error(derivedClassDecl, ts.Diagnostics.Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_class_2,
                            typeToString(type), symbolToString(baseProperty), typeToString(baseType));
                    }
                }
            }
            else {
                // derived overrides base.
                const derivedDeclarationFlags = ts.getDeclarationModifierFlagsFromSymbol(derived);
                if (baseDeclarationFlags & ts.ModifierFlags.Private || derivedDeclarationFlags & ts.ModifierFlags.Private) {
                    // either base or derived property is private - not override, skip it
                    continue;
                }

                let errorMessage: ts.DiagnosticMessage;
                const basePropertyFlags = base.flags & ts.SymbolFlags.PropertyOrAccessor;
                const derivedPropertyFlags = derived.flags & ts.SymbolFlags.PropertyOrAccessor;
                if (basePropertyFlags && derivedPropertyFlags) {
                    // property/accessor is overridden with property/accessor
                    if ((ts.getCheckFlags(base) & ts.CheckFlags.Synthetic
                        ? base.declarations?.some(d => isPropertyAbstractOrInterface(d, baseDeclarationFlags))
                        : base.declarations?.every(d => isPropertyAbstractOrInterface(d, baseDeclarationFlags)))
                        || ts.getCheckFlags(base) & ts.CheckFlags.Mapped
                        || derived.valueDeclaration && ts.isBinaryExpression(derived.valueDeclaration)) {
                        // when the base property is abstract or from an interface, base/derived flags don't need to match
                        // for intersection properties, this must be true of *any* of the declarations, for others it must be true of *all*
                        // same when the derived property is from an assignment
                        continue;
                    }

                    const overriddenInstanceProperty = basePropertyFlags !== ts.SymbolFlags.Property && derivedPropertyFlags === ts.SymbolFlags.Property;
                    const overriddenInstanceAccessor = basePropertyFlags === ts.SymbolFlags.Property && derivedPropertyFlags !== ts.SymbolFlags.Property;
                    if (overriddenInstanceProperty || overriddenInstanceAccessor) {
                        const errorMessage = overriddenInstanceProperty ?
                            ts.Diagnostics._0_is_defined_as_an_accessor_in_class_1_but_is_overridden_here_in_2_as_an_instance_property :
                            ts.Diagnostics._0_is_defined_as_a_property_in_class_1_but_is_overridden_here_in_2_as_an_accessor;
                        error(ts.getNameOfDeclaration(derived.valueDeclaration) || derived.valueDeclaration, errorMessage, symbolToString(base), typeToString(baseType), typeToString(type));
                    }
                    else if (useDefineForClassFields) {
                        const uninitialized = derived.declarations?.find(d => d.kind === ts.SyntaxKind.PropertyDeclaration && !(d as ts.PropertyDeclaration).initializer);
                        if (uninitialized
                            && !(derived.flags & ts.SymbolFlags.Transient)
                            && !(baseDeclarationFlags & ts.ModifierFlags.Abstract)
                            && !(derivedDeclarationFlags & ts.ModifierFlags.Abstract)
                            && !derived.declarations?.some(d => !!(d.flags & ts.NodeFlags.Ambient))) {
                            const constructor = findConstructorDeclaration(ts.getClassLikeDeclarationOfSymbol(type.symbol)!);
                            const propName = (uninitialized as ts.PropertyDeclaration).name;
                            if ((uninitialized as ts.PropertyDeclaration).exclamationToken
                                || !constructor
                                || !ts.isIdentifier(propName)
                                || !strictNullChecks
                                || !isPropertyInitializedInConstructor(propName, type, constructor)) {
                                const errorMessage = ts.Diagnostics.Property_0_will_overwrite_the_base_property_in_1_If_this_is_intentional_add_an_initializer_Otherwise_add_a_declare_modifier_or_remove_the_redundant_declaration;
                                error(ts.getNameOfDeclaration(derived.valueDeclaration) || derived.valueDeclaration, errorMessage, symbolToString(base), typeToString(baseType));
                            }
                        }
                    }

                    // correct case
                    continue;
                }
                else if (isPrototypeProperty(base)) {
                    if (isPrototypeProperty(derived) || derived.flags & ts.SymbolFlags.Property) {
                        // method is overridden with method or property -- correct case
                        continue;
                    }
                    else {
                        ts.Debug.assert(!!(derived.flags & ts.SymbolFlags.Accessor));
                        errorMessage = ts.Diagnostics.Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_accessor;
                    }
                }
                else if (base.flags & ts.SymbolFlags.Accessor) {
                    errorMessage = ts.Diagnostics.Class_0_defines_instance_member_accessor_1_but_extended_class_2_defines_it_as_instance_member_function;
                }
                else {
                    errorMessage = ts.Diagnostics.Class_0_defines_instance_member_property_1_but_extended_class_2_defines_it_as_instance_member_function;
                }

                error(ts.getNameOfDeclaration(derived.valueDeclaration) || derived.valueDeclaration, errorMessage, typeToString(baseType), symbolToString(base), typeToString(type));
            }
        }
    }

    function isPropertyAbstractOrInterface(declaration: ts.Declaration, baseDeclarationFlags: ts.ModifierFlags) {
        return baseDeclarationFlags & ts.ModifierFlags.Abstract && (!ts.isPropertyDeclaration(declaration) || !declaration.initializer)
            || ts.isInterfaceDeclaration(declaration.parent);
    }

    function getNonInheritedProperties(type: ts.InterfaceType, baseTypes: ts.BaseType[], properties: ts.Symbol[]) {
        if (!ts.length(baseTypes)) {
            return properties;
        }
        const seen = new ts.Map<ts.__String, ts.Symbol>();
        ts.forEach(properties, p => {
            seen.set(p.escapedName, p);
        });

        for (const base of baseTypes) {
            const properties = getPropertiesOfType(getTypeWithThisArgument(base, type.thisType));
            for (const prop of properties) {
                const existing = seen.get(prop.escapedName);
                if (existing && prop.parent === existing.parent) {
                    seen.delete(prop.escapedName);
                }
            }
        }

        return ts.arrayFrom(seen.values());
    }

    function checkInheritedPropertiesAreIdentical(type: ts.InterfaceType, typeNode: ts.Node): boolean {
        const baseTypes = getBaseTypes(type);
        if (baseTypes.length < 2) {
            return true;
        }

        interface InheritanceInfoMap { prop: ts.Symbol; containingType: ts.Type; }
        const seen = new ts.Map<ts.__String, InheritanceInfoMap>();
        ts.forEach(resolveDeclaredMembers(type).declaredProperties, p => {
            seen.set(p.escapedName, { prop: p, containingType: type });
        });
        let ok = true;

        for (const base of baseTypes) {
            const properties = getPropertiesOfType(getTypeWithThisArgument(base, type.thisType));
            for (const prop of properties) {
                const existing = seen.get(prop.escapedName);
                if (!existing) {
                    seen.set(prop.escapedName, { prop, containingType: base });
                }
                else {
                    const isInheritedProperty = existing.containingType !== type;
                    if (isInheritedProperty && !isPropertyIdenticalTo(existing.prop, prop)) {
                        ok = false;

                        const typeName1 = typeToString(existing.containingType);
                        const typeName2 = typeToString(base);

                        let errorInfo = ts.chainDiagnosticMessages(/*details*/ undefined, ts.Diagnostics.Named_property_0_of_types_1_and_2_are_not_identical, symbolToString(prop), typeName1, typeName2);
                        errorInfo = ts.chainDiagnosticMessages(errorInfo, ts.Diagnostics.Interface_0_cannot_simultaneously_extend_types_1_and_2, typeToString(type), typeName1, typeName2);
                        diagnostics.add(ts.createDiagnosticForNodeFromMessageChain(typeNode, errorInfo));
                    }
                }
            }
        }

        return ok;
    }

    function checkPropertyInitialization(node: ts.ClassLikeDeclaration) {
        if (!strictNullChecks || !strictPropertyInitialization || node.flags & ts.NodeFlags.Ambient) {
            return;
        }
        const constructor = findConstructorDeclaration(node);
        for (const member of node.members) {
            if (ts.getEffectiveModifierFlags(member) & ts.ModifierFlags.Ambient) {
                continue;
            }
            if (!ts.isStatic(member) && isPropertyWithoutInitializer(member)) {
                const propName = (member as ts.PropertyDeclaration).name;
                if (ts.isIdentifier(propName) || ts.isPrivateIdentifier(propName) || ts.isComputedPropertyName(propName)) {
                    const type = getTypeOfSymbol(getSymbolOfNode(member));
                    if (!(type.flags & ts.TypeFlags.AnyOrUnknown || containsUndefinedType(type))) {
                        if (!constructor || !isPropertyInitializedInConstructor(propName, type, constructor)) {
                            error(member.name, ts.Diagnostics.Property_0_has_no_initializer_and_is_not_definitely_assigned_in_the_constructor, ts.declarationNameToString(propName));
                        }
                    }
                }
            }
        }
    }

    function isPropertyWithoutInitializer(node: ts.Node) {
        return node.kind === ts.SyntaxKind.PropertyDeclaration &&
            !ts.hasAbstractModifier(node) &&
            !(node as ts.PropertyDeclaration).exclamationToken &&
            !(node as ts.PropertyDeclaration).initializer;
    }

    function isPropertyInitializedInStaticBlocks(propName: ts.Identifier | ts.PrivateIdentifier, propType: ts.Type, staticBlocks: readonly ts.ClassStaticBlockDeclaration[], startPos: number, endPos: number) {
        for (const staticBlock of staticBlocks) {
            // static block must be within the provided range as they are evaluated in document order (unlike constructors)
            if (staticBlock.pos >= startPos && staticBlock.pos <= endPos) {
                const reference = ts.factory.createPropertyAccessExpression(ts.factory.createThis(), propName);
                ts.setParent(reference.expression, reference);
                ts.setParent(reference, staticBlock);
                reference.flowNode = staticBlock.returnFlowNode;
                const flowType = getFlowTypeOfReference(reference, propType, getOptionalType(propType));
                if (!containsUndefinedType(flowType)) {
                    return true;
                }
            }
        }
        return false;
    }

    function isPropertyInitializedInConstructor(propName: ts.Identifier | ts.PrivateIdentifier | ts.ComputedPropertyName, propType: ts.Type, constructor: ts.ConstructorDeclaration) {
        const reference = ts.isComputedPropertyName(propName)
            ? ts.factory.createElementAccessExpression(ts.factory.createThis(), propName.expression)
            : ts.factory.createPropertyAccessExpression(ts.factory.createThis(), propName);
        ts.setParent(reference.expression, reference);
        ts.setParent(reference, constructor);
        reference.flowNode = constructor.returnFlowNode;
        const flowType = getFlowTypeOfReference(reference, propType, getOptionalType(propType));
        return !containsUndefinedType(flowType);
    }


    function checkInterfaceDeclaration(node: ts.InterfaceDeclaration) {
        // Grammar checking
        if (!checkGrammarDecoratorsAndModifiers(node)) checkGrammarInterfaceDeclaration(node);

        checkTypeParameters(node.typeParameters);
        addLazyDiagnostic(() => {
            checkTypeNameIsReserved(node.name, ts.Diagnostics.Interface_name_cannot_be_0);

            checkExportsOnMergedDeclarations(node);
            const symbol = getSymbolOfNode(node);
            checkTypeParameterListsIdentical(symbol);

            // Only check this symbol once
            const firstInterfaceDecl = ts.getDeclarationOfKind<ts.InterfaceDeclaration>(symbol, ts.SyntaxKind.InterfaceDeclaration);
            if (node === firstInterfaceDecl) {
                const type = getDeclaredTypeOfSymbol(symbol) as ts.InterfaceType;
                const typeWithThis = getTypeWithThisArgument(type);
                // run subsequent checks only if first set succeeded
                if (checkInheritedPropertiesAreIdentical(type, node.name)) {
                    for (const baseType of getBaseTypes(type)) {
                        checkTypeAssignableTo(typeWithThis, getTypeWithThisArgument(baseType, type.thisType), node.name, ts.Diagnostics.Interface_0_incorrectly_extends_interface_1);
                    }
                    checkIndexConstraints(type, symbol);
                }
            }
            checkObjectTypeForDuplicateDeclarations(node);
        });
        ts.forEach(ts.getInterfaceBaseTypeNodes(node), heritageElement => {
            if (!ts.isEntityNameExpression(heritageElement.expression) || ts.isOptionalChain(heritageElement.expression)) {
                error(heritageElement.expression, ts.Diagnostics.An_interface_can_only_extend_an_identifier_Slashqualified_name_with_optional_type_arguments);
            }
            checkTypeReferenceNode(heritageElement);
        });

        ts.forEach(node.members, checkSourceElement);

        addLazyDiagnostic(() => {
            checkTypeForDuplicateIndexSignatures(node);
            registerForUnusedIdentifiersCheck(node);
        });
    }

    function checkTypeAliasDeclaration(node: ts.TypeAliasDeclaration) {
        // Grammar checking
        checkGrammarDecoratorsAndModifiers(node);
        checkTypeNameIsReserved(node.name, ts.Diagnostics.Type_alias_name_cannot_be_0);
        checkExportsOnMergedDeclarations(node);
        checkTypeParameters(node.typeParameters);
        if (node.type.kind === ts.SyntaxKind.IntrinsicKeyword) {
            if (!intrinsicTypeKinds.has(node.name.escapedText as string) || ts.length(node.typeParameters) !== 1) {
                error(node.type, ts.Diagnostics.The_intrinsic_keyword_can_only_be_used_to_declare_compiler_provided_intrinsic_types);
            }
        }
        else {
            checkSourceElement(node.type);
            registerForUnusedIdentifiersCheck(node);
        }
    }

    function computeEnumMemberValues(node: ts.EnumDeclaration) {
        const nodeLinks = getNodeLinks(node);
        if (!(nodeLinks.flags & ts.NodeCheckFlags.EnumValuesComputed)) {
            nodeLinks.flags |= ts.NodeCheckFlags.EnumValuesComputed;
            let autoValue: number | undefined = 0;
            for (const member of node.members) {
                const value = computeMemberValue(member, autoValue);
                getNodeLinks(member).enumMemberValue = value;
                autoValue = typeof value === "number" ? value + 1 : undefined;
            }
        }
    }

    function computeMemberValue(member: ts.EnumMember, autoValue: number | undefined) {
        if (ts.isComputedNonLiteralName(member.name)) {
            error(member.name, ts.Diagnostics.Computed_property_names_are_not_allowed_in_enums);
        }
        else {
            const text = ts.getTextOfPropertyName(member.name);
            if (ts.isNumericLiteralName(text) && !ts.isInfinityOrNaNString(text)) {
                error(member.name, ts.Diagnostics.An_enum_member_cannot_have_a_numeric_name);
            }
        }
        if (member.initializer) {
            return computeConstantValue(member);
        }
        // In ambient non-const numeric enum declarations, enum members without initializers are
        // considered computed members (as opposed to having auto-incremented values).
        if (member.parent.flags & ts.NodeFlags.Ambient && !ts.isEnumConst(member.parent)) {
            return undefined;
        }
        // If the member declaration specifies no value, the member is considered a constant enum member.
        // If the member is the first member in the enum declaration, it is assigned the value zero.
        // Otherwise, it is assigned the value of the immediately preceding member plus one, and an error
        // occurs if the immediately preceding member is not a constant enum member.
        if (autoValue !== undefined) {
            return autoValue;
        }
        error(member.name, ts.Diagnostics.Enum_member_must_have_initializer);
        return undefined;
    }

    function computeConstantValue(member: ts.EnumMember): string | number | undefined {
        const isConstEnum = ts.isEnumConst(member.parent);
        const initializer = member.initializer!;
        const value = evaluate(initializer, member);
        if (value !== undefined) {
            if (isConstEnum && typeof value === "number" && !isFinite(value)) {
                error(initializer, isNaN(value) ?
                    ts.Diagnostics.const_enum_member_initializer_was_evaluated_to_disallowed_value_NaN :
                    ts.Diagnostics.const_enum_member_initializer_was_evaluated_to_a_non_finite_value);
            }
        }
        else if (isConstEnum) {
            error(initializer, ts.Diagnostics.const_enum_member_initializers_must_be_constant_expressions);
        }
        else if (member.parent.flags & ts.NodeFlags.Ambient) {
            error(initializer, ts.Diagnostics.In_ambient_enum_declarations_member_initializer_must_be_constant_expression);
        }
        else {
            checkTypeAssignableTo(checkExpression(initializer), numberType, initializer, ts.Diagnostics.Type_0_is_not_assignable_to_type_1_as_required_for_computed_enum_member_values);
        }
        return value;
    }

    function evaluate(expr: ts.Expression, location: ts.Declaration): string | number | undefined {
        switch (expr.kind) {
            case ts.SyntaxKind.PrefixUnaryExpression:
                const value = evaluate((expr as ts.PrefixUnaryExpression).operand, location);
                if (typeof value === "number") {
                    switch ((expr as ts.PrefixUnaryExpression).operator) {
                        case ts.SyntaxKind.PlusToken: return value;
                        case ts.SyntaxKind.MinusToken: return -value;
                        case ts.SyntaxKind.TildeToken: return ~value;
                    }
                }
                break;
            case ts.SyntaxKind.BinaryExpression:
                const left = evaluate((expr as ts.BinaryExpression).left, location);
                const right = evaluate((expr as ts.BinaryExpression).right, location);
                if (typeof left === "number" && typeof right === "number") {
                    switch ((expr as ts.BinaryExpression).operatorToken.kind) {
                        case ts.SyntaxKind.BarToken: return left | right;
                        case ts.SyntaxKind.AmpersandToken: return left & right;
                        case ts.SyntaxKind.GreaterThanGreaterThanToken: return left >> right;
                        case ts.SyntaxKind.GreaterThanGreaterThanGreaterThanToken: return left >>> right;
                        case ts.SyntaxKind.LessThanLessThanToken: return left << right;
                        case ts.SyntaxKind.CaretToken: return left ^ right;
                        case ts.SyntaxKind.AsteriskToken: return left * right;
                        case ts.SyntaxKind.SlashToken: return left / right;
                        case ts.SyntaxKind.PlusToken: return left + right;
                        case ts.SyntaxKind.MinusToken: return left - right;
                        case ts.SyntaxKind.PercentToken: return left % right;
                        case ts.SyntaxKind.AsteriskAsteriskToken: return left ** right;
                    }
                }
                else if ((typeof left === "string" || typeof left === "number") &&
                    (typeof right === "string" || typeof right === "number") &&
                    (expr as ts.BinaryExpression).operatorToken.kind === ts.SyntaxKind.PlusToken) {
                    return "" + left + right;
                }
                break;
            case ts.SyntaxKind.StringLiteral:
            case ts.SyntaxKind.NoSubstitutionTemplateLiteral:
                return (expr as ts.StringLiteralLike).text;
            case ts.SyntaxKind.TemplateExpression:
                return evaluateTemplateExpression(expr as ts.TemplateExpression, location);
            case ts.SyntaxKind.NumericLiteral:
                checkGrammarNumericLiteral(expr as ts.NumericLiteral);
                return +(expr as ts.NumericLiteral).text;
            case ts.SyntaxKind.ParenthesizedExpression:
                return evaluate((expr as ts.ParenthesizedExpression).expression, location);
            case ts.SyntaxKind.Identifier:
                if (ts.isInfinityOrNaNString((expr as ts.Identifier).escapedText)) {
                    return +((expr as ts.Identifier).escapedText);
                }
                // falls through
            case ts.SyntaxKind.PropertyAccessExpression:
                if (ts.isEntityNameExpression(expr)) {
                    const symbol = resolveEntityName(expr, ts.SymbolFlags.Value, /*ignoreErrors*/ true);
                    if (symbol) {
                        if (symbol.flags & ts.SymbolFlags.EnumMember) {
                            return evaluateEnumMember(expr, symbol, location);
                        }
                        if (isConstVariable(symbol)) {
                            const declaration = symbol.valueDeclaration as ts.VariableDeclaration | undefined;
                            if (declaration && !declaration.type && declaration.initializer && declaration !== location && isBlockScopedNameDeclaredBeforeUse(declaration, location)) {
                                return evaluate(declaration.initializer, declaration);
                            }
                        }
                    }
                }
                break;
            case ts.SyntaxKind.ElementAccessExpression:
                const root = (expr as ts.ElementAccessExpression).expression;
                if (ts.isEntityNameExpression(root) && ts.isStringLiteralLike((expr as ts.ElementAccessExpression).argumentExpression)) {
                    const rootSymbol = resolveEntityName(root, ts.SymbolFlags.Value, /*ignoreErrors*/ true);
                    if (rootSymbol && rootSymbol.flags & ts.SymbolFlags.Enum) {
                        const name = ts.escapeLeadingUnderscores(((expr as ts.ElementAccessExpression).argumentExpression as ts.StringLiteralLike).text);
                        const member = rootSymbol.exports!.get(name);
                        if (member) {
                            return evaluateEnumMember(expr, member, location);
                        }
                    }
                }
                break;
        }
        return undefined;
    }

    function evaluateEnumMember(expr: ts.Expression, symbol: ts.Symbol, location: ts.Declaration) {
        const declaration = symbol.valueDeclaration;
        if (!declaration || declaration === location) {
            error(expr, ts.Diagnostics.Property_0_is_used_before_being_assigned, symbolToString(symbol));
            return undefined;
        }
        if (!isBlockScopedNameDeclaredBeforeUse(declaration, location)) {
            error(expr, ts.Diagnostics.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums);
            return 0;
        }
        return getEnumMemberValue(declaration as ts.EnumMember);
    }

    function evaluateTemplateExpression(expr: ts.TemplateExpression, location: ts.Declaration) {
        let result = expr.head.text;
        for (const span of expr.templateSpans) {
            const value = evaluate(span.expression, location);
            if (value === undefined) {
                return undefined;
            }
            result += value;
            result += span.literal.text;
        }
        return result;
    }

    function checkEnumDeclaration(node: ts.EnumDeclaration) {
        addLazyDiagnostic(() => checkEnumDeclarationWorker(node));
    }

    function checkEnumDeclarationWorker(node: ts.EnumDeclaration) {
        // Grammar checking
        checkGrammarDecoratorsAndModifiers(node);

        checkCollisionsForDeclarationName(node, node.name);
        checkExportsOnMergedDeclarations(node);
        node.members.forEach(checkEnumMember);

        computeEnumMemberValues(node);

        // Spec 2014 - Section 9.3:
        // It isn't possible for one enum declaration to continue the automatic numbering sequence of another,
        // and when an enum type has multiple declarations, only one declaration is permitted to omit a value
        // for the first member.
        //
        // Only perform this check once per symbol
        const enumSymbol = getSymbolOfNode(node);
        const firstDeclaration = ts.getDeclarationOfKind(enumSymbol, node.kind);
        if (node === firstDeclaration) {
            if (enumSymbol.declarations && enumSymbol.declarations.length > 1) {
                const enumIsConst = ts.isEnumConst(node);
                // check that const is placed\omitted on all enum declarations
                ts.forEach(enumSymbol.declarations, decl => {
                    if (ts.isEnumDeclaration(decl) && ts.isEnumConst(decl) !== enumIsConst) {
                        error(ts.getNameOfDeclaration(decl), ts.Diagnostics.Enum_declarations_must_all_be_const_or_non_const);
                    }
                });
            }

            let seenEnumMissingInitialInitializer = false;
            ts.forEach(enumSymbol.declarations, declaration => {
                // return true if we hit a violation of the rule, false otherwise
                if (declaration.kind !== ts.SyntaxKind.EnumDeclaration) {
                    return false;
                }

                const enumDeclaration = declaration as ts.EnumDeclaration;
                if (!enumDeclaration.members.length) {
                    return false;
                }

                const firstEnumMember = enumDeclaration.members[0];
                if (!firstEnumMember.initializer) {
                    if (seenEnumMissingInitialInitializer) {
                        error(firstEnumMember.name, ts.Diagnostics.In_an_enum_with_multiple_declarations_only_one_declaration_can_omit_an_initializer_for_its_first_enum_element);
                    }
                    else {
                        seenEnumMissingInitialInitializer = true;
                    }
                }
            });
        }
    }

    function checkEnumMember(node: ts.EnumMember) {
        if (ts.isPrivateIdentifier(node.name)) {
            error(node, ts.Diagnostics.An_enum_member_cannot_be_named_with_a_private_identifier);
        }
        if (node.initializer) {
            checkExpression(node.initializer);
        }
    }

    function getFirstNonAmbientClassOrFunctionDeclaration(symbol: ts.Symbol): ts.Declaration | undefined {
        const declarations = symbol.declarations;
        if (declarations) {
            for (const declaration of declarations) {
                if ((declaration.kind === ts.SyntaxKind.ClassDeclaration ||
                    (declaration.kind === ts.SyntaxKind.FunctionDeclaration && ts.nodeIsPresent((declaration as ts.FunctionLikeDeclaration).body))) &&
                    !(declaration.flags & ts.NodeFlags.Ambient)) {
                    return declaration;
                }
            }
        }
        return undefined;
    }

    function inSameLexicalScope(node1: ts.Node, node2: ts.Node) {
        const container1 = ts.getEnclosingBlockScopeContainer(node1);
        const container2 = ts.getEnclosingBlockScopeContainer(node2);
        if (isGlobalSourceFile(container1)) {
            return isGlobalSourceFile(container2);
        }
        else if (isGlobalSourceFile(container2)) {
            return false;
        }
        else {
            return container1 === container2;
        }
    }

    function checkModuleDeclaration(node: ts.ModuleDeclaration) {
        if (node.body) {
            checkSourceElement(node.body);
            if (!ts.isGlobalScopeAugmentation(node)) {
                registerForUnusedIdentifiersCheck(node);
            }
        }

        addLazyDiagnostic(checkModuleDeclarationDiagnostics);

        function checkModuleDeclarationDiagnostics() {
            // Grammar checking
            const isGlobalAugmentation = ts.isGlobalScopeAugmentation(node);
            const inAmbientContext = node.flags & ts.NodeFlags.Ambient;
            if (isGlobalAugmentation && !inAmbientContext) {
                error(node.name, ts.Diagnostics.Augmentations_for_the_global_scope_should_have_declare_modifier_unless_they_appear_in_already_ambient_context);
            }

            const isAmbientExternalModule: boolean = ts.isAmbientModule(node);
            const contextErrorMessage = isAmbientExternalModule
                ? ts.Diagnostics.An_ambient_module_declaration_is_only_allowed_at_the_top_level_in_a_file
                : ts.Diagnostics.A_namespace_declaration_is_only_allowed_at_the_top_level_of_a_namespace_or_module;
            if (checkGrammarModuleElementContext(node, contextErrorMessage)) {
                // If we hit a module declaration in an illegal context, just bail out to avoid cascading errors.
                return;
            }

            if (!checkGrammarDecoratorsAndModifiers(node)) {
                if (!inAmbientContext && node.name.kind === ts.SyntaxKind.StringLiteral) {
                    grammarErrorOnNode(node.name, ts.Diagnostics.Only_ambient_modules_can_use_quoted_names);
                }
            }

            if (ts.isIdentifier(node.name)) {
                checkCollisionsForDeclarationName(node, node.name);
            }

            checkExportsOnMergedDeclarations(node);
            const symbol = getSymbolOfNode(node);

            // The following checks only apply on a non-ambient instantiated module declaration.
            if (symbol.flags & ts.SymbolFlags.ValueModule
                && !inAmbientContext
                && symbol.declarations
                && symbol.declarations.length > 1
                && isInstantiatedModule(node, ts.shouldPreserveConstEnums(compilerOptions))) {
                const firstNonAmbientClassOrFunc = getFirstNonAmbientClassOrFunctionDeclaration(symbol);
                if (firstNonAmbientClassOrFunc) {
                    if (ts.getSourceFileOfNode(node) !== ts.getSourceFileOfNode(firstNonAmbientClassOrFunc)) {
                        error(node.name, ts.Diagnostics.A_namespace_declaration_cannot_be_in_a_different_file_from_a_class_or_function_with_which_it_is_merged);
                    }
                    else if (node.pos < firstNonAmbientClassOrFunc.pos) {
                        error(node.name, ts.Diagnostics.A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged);
                    }
                }

                // if the module merges with a class declaration in the same lexical scope,
                // we need to track this to ensure the correct emit.
                const mergedClass = ts.getDeclarationOfKind(symbol, ts.SyntaxKind.ClassDeclaration);
                if (mergedClass &&
                    inSameLexicalScope(node, mergedClass)) {
                    getNodeLinks(node).flags |= ts.NodeCheckFlags.LexicalModuleMergesWithClass;
                }
            }

            if (isAmbientExternalModule) {
                if (ts.isExternalModuleAugmentation(node)) {
                    // body of the augmentation should be checked for consistency only if augmentation was applied to its target (either global scope or module)
                    // otherwise we'll be swamped in cascading errors.
                    // We can detect if augmentation was applied using following rules:
                    // - augmentation for a global scope is always applied
                    // - augmentation for some external module is applied if symbol for augmentation is merged (it was combined with target module).
                    const checkBody = isGlobalAugmentation || (getSymbolOfNode(node).flags & ts.SymbolFlags.Transient);
                    if (checkBody && node.body) {
                        for (const statement of node.body.statements) {
                            checkModuleAugmentationElement(statement, isGlobalAugmentation);
                        }
                    }
                }
                else if (isGlobalSourceFile(node.parent)) {
                    if (isGlobalAugmentation) {
                        error(node.name, ts.Diagnostics.Augmentations_for_the_global_scope_can_only_be_directly_nested_in_external_modules_or_ambient_module_declarations);
                    }
                    else if (ts.isExternalModuleNameRelative(ts.getTextOfIdentifierOrLiteral(node.name))) {
                        error(node.name, ts.Diagnostics.Ambient_module_declaration_cannot_specify_relative_module_name);
                    }
                }
                else {
                    if (isGlobalAugmentation) {
                        error(node.name, ts.Diagnostics.Augmentations_for_the_global_scope_can_only_be_directly_nested_in_external_modules_or_ambient_module_declarations);
                    }
                    else {
                        // Node is not an augmentation and is not located on the script level.
                        // This means that this is declaration of ambient module that is located in other module or namespace which is prohibited.
                        error(node.name, ts.Diagnostics.Ambient_modules_cannot_be_nested_in_other_modules_or_namespaces);
                    }
                }
            }
        }
    }

    function checkModuleAugmentationElement(node: ts.Node, isGlobalAugmentation: boolean): void {
        switch (node.kind) {
            case ts.SyntaxKind.VariableStatement:
                // error each individual name in variable statement instead of marking the entire variable statement
                for (const decl of (node as ts.VariableStatement).declarationList.declarations) {
                    checkModuleAugmentationElement(decl, isGlobalAugmentation);
                }
                break;
            case ts.SyntaxKind.ExportAssignment:
            case ts.SyntaxKind.ExportDeclaration:
                grammarErrorOnFirstToken(node, ts.Diagnostics.Exports_and_export_assignments_are_not_permitted_in_module_augmentations);
                break;
            case ts.SyntaxKind.ImportEqualsDeclaration:
            case ts.SyntaxKind.ImportDeclaration:
                grammarErrorOnFirstToken(node, ts.Diagnostics.Imports_are_not_permitted_in_module_augmentations_Consider_moving_them_to_the_enclosing_external_module);
                break;
            case ts.SyntaxKind.BindingElement:
            case ts.SyntaxKind.VariableDeclaration:
                const name = (node as ts.VariableDeclaration | ts.BindingElement).name;
                if (ts.isBindingPattern(name)) {
                    for (const el of name.elements) {
                        // mark individual names in binding pattern
                        checkModuleAugmentationElement(el, isGlobalAugmentation);
                    }
                    break;
                }
                // falls through
            case ts.SyntaxKind.ClassDeclaration:
            case ts.SyntaxKind.EnumDeclaration:
            case ts.SyntaxKind.FunctionDeclaration:
            case ts.SyntaxKind.InterfaceDeclaration:
            case ts.SyntaxKind.ModuleDeclaration:
            case ts.SyntaxKind.TypeAliasDeclaration:
                if (isGlobalAugmentation) {
                    return;
                }
                break;
        }
    }

    function getFirstNonModuleExportsIdentifier(node: ts.EntityNameOrEntityNameExpression): ts.Identifier {
        switch (node.kind) {
            case ts.SyntaxKind.Identifier:
                return node;
            case ts.SyntaxKind.QualifiedName:
                do {
                    node = node.left;
                } while (node.kind !== ts.SyntaxKind.Identifier);
                return node;
            case ts.SyntaxKind.PropertyAccessExpression:
                do {
                    if (ts.isModuleExportsAccessExpression(node.expression) && !ts.isPrivateIdentifier(node.name)) {
                        return node.name;
                    }
                    node = node.expression;
                } while (node.kind !== ts.SyntaxKind.Identifier);
                return node;
        }
    }

    function checkExternalImportOrExportDeclaration(node: ts.ImportDeclaration | ts.ImportEqualsDeclaration | ts.ExportDeclaration): boolean {
        const moduleName = ts.getExternalModuleName(node);
        if (!moduleName || ts.nodeIsMissing(moduleName)) {
            // Should be a parse error.
            return false;
        }
        if (!ts.isStringLiteral(moduleName)) {
            error(moduleName, ts.Diagnostics.String_literal_expected);
            return false;
        }
        const inAmbientExternalModule = node.parent.kind === ts.SyntaxKind.ModuleBlock && ts.isAmbientModule(node.parent.parent);
        if (node.parent.kind !== ts.SyntaxKind.SourceFile && !inAmbientExternalModule) {
            error(moduleName, node.kind === ts.SyntaxKind.ExportDeclaration ?
                ts.Diagnostics.Export_declarations_are_not_permitted_in_a_namespace :
                ts.Diagnostics.Import_declarations_in_a_namespace_cannot_reference_a_module);
            return false;
        }
        if (inAmbientExternalModule && ts.isExternalModuleNameRelative(moduleName.text)) {
            // we have already reported errors on top level imports/exports in external module augmentations in checkModuleDeclaration
            // no need to do this again.
            if (!isTopLevelInExternalModuleAugmentation(node)) {
                // TypeScript 1.0 spec (April 2013): 12.1.6
                // An ExternalImportDeclaration in an AmbientExternalModuleDeclaration may reference
                // other external modules only through top - level external module names.
                // Relative external module names are not permitted.
                error(node, ts.Diagnostics.Import_or_export_declaration_in_an_ambient_module_declaration_cannot_reference_module_through_relative_module_name);
                return false;
            }
        }
        if (!ts.isImportEqualsDeclaration(node) && node.assertClause) {
            let hasError = false;
            for (const clause of node.assertClause.elements) {
                if (!ts.isStringLiteral(clause.value)) {
                    hasError = true;
                    error(clause.value, ts.Diagnostics.Import_assertion_values_must_be_string_literal_expressions);
                }
            }
            return !hasError;
        }
        return true;
    }

    function checkAliasSymbol(node: ts.ImportEqualsDeclaration | ts.VariableDeclaration | ts.ImportClause | ts.NamespaceImport | ts.ImportSpecifier | ts.ExportSpecifier | ts.NamespaceExport | ts.BindingElement) {
        let symbol = getSymbolOfNode(node);
        const target = resolveAlias(symbol);

        if (target !== unknownSymbol) {
            // For external modules, `symbol` represents the local symbol for an alias.
            // This local symbol will merge any other local declarations (excluding other aliases)
            // and symbol.flags will contains combined representation for all merged declaration.
            // Based on symbol.flags we can compute a set of excluded meanings (meaning that resolved alias should not have,
            // otherwise it will conflict with some local declaration). Note that in addition to normal flags we include matching SymbolFlags.Export*
            // in order to prevent collisions with declarations that were exported from the current module (they still contribute to local names).
            symbol = getMergedSymbol(symbol.exportSymbol || symbol);

            // A type-only import/export will already have a grammar error in a JS file, so no need to issue more errors within
            if (ts.isInJSFile(node) && !(target.flags & ts.SymbolFlags.Value) && !ts.isTypeOnlyImportOrExportDeclaration(node)) {
                const errorNode =
                    ts.isImportOrExportSpecifier(node) ? node.propertyName || node.name :
                    ts.isNamedDeclaration(node) ? node.name :
                    node;

                ts.Debug.assert(node.kind !== ts.SyntaxKind.NamespaceExport);
                if (node.kind === ts.SyntaxKind.ExportSpecifier) {
                    const diag = error(errorNode, ts.Diagnostics.Types_cannot_appear_in_export_declarations_in_JavaScript_files);
                    const alreadyExportedSymbol = ts.getSourceFileOfNode(node).symbol?.exports?.get((node.propertyName || node.name).escapedText);
                    if (alreadyExportedSymbol === target) {
                        const exportingDeclaration = alreadyExportedSymbol.declarations?.find(ts.isJSDocNode);
                        if (exportingDeclaration) {
                            ts.addRelatedInfo(diag, ts.createDiagnosticForNode(
                                exportingDeclaration,
                                ts.Diagnostics._0_is_automatically_exported_here,
                                ts.unescapeLeadingUnderscores(alreadyExportedSymbol.escapedName)));
                        }
                    }
                }
                else {
                    ts.Debug.assert(node.kind !== ts.SyntaxKind.VariableDeclaration);
                    const importDeclaration = ts.findAncestor(node, ts.or(ts.isImportDeclaration, ts.isImportEqualsDeclaration));
                    const moduleSpecifier = (importDeclaration && ts.tryGetModuleSpecifierFromDeclaration(importDeclaration)?.text) ?? "...";
                    const importedIdentifier = ts.unescapeLeadingUnderscores(ts.isIdentifier(errorNode) ? errorNode.escapedText : symbol.escapedName);
                    error(
                        errorNode,
                        ts.Diagnostics._0_is_a_type_and_cannot_be_imported_in_JavaScript_files_Use_1_in_a_JSDoc_type_annotation,
                        importedIdentifier,
                        `import("${moduleSpecifier}").${importedIdentifier}`);
                }
                return;
            }

            const targetFlags = getAllSymbolFlags(target);
            const excludedMeanings =
                (symbol.flags & (ts.SymbolFlags.Value | ts.SymbolFlags.ExportValue) ? ts.SymbolFlags.Value : 0) |
                (symbol.flags & ts.SymbolFlags.Type ? ts.SymbolFlags.Type : 0) |
                (symbol.flags & ts.SymbolFlags.Namespace ? ts.SymbolFlags.Namespace : 0);
            if (targetFlags & excludedMeanings) {
                const message = node.kind === ts.SyntaxKind.ExportSpecifier ?
                    ts.Diagnostics.Export_declaration_conflicts_with_exported_declaration_of_0 :
                    ts.Diagnostics.Import_declaration_conflicts_with_local_declaration_of_0;
                error(node, message, symbolToString(symbol));
            }

            if (compilerOptions.isolatedModules
                && !ts.isTypeOnlyImportOrExportDeclaration(node)
                && !(node.flags & ts.NodeFlags.Ambient)) {
                const typeOnlyAlias = getTypeOnlyAliasDeclaration(symbol);
                const isType = !(targetFlags & ts.SymbolFlags.Value);
                if (isType || typeOnlyAlias) {
                    switch (node.kind) {
                        case ts.SyntaxKind.ImportClause:
                        case ts.SyntaxKind.ImportSpecifier:
                        case ts.SyntaxKind.ImportEqualsDeclaration: {
                            if (compilerOptions.preserveValueImports) {
                                ts.Debug.assertIsDefined(node.name, "An ImportClause with a symbol should have a name");
                                const message = isType
                                    ? ts.Diagnostics._0_is_a_type_and_must_be_imported_using_a_type_only_import_when_preserveValueImports_and_isolatedModules_are_both_enabled
                                    : ts.Diagnostics._0_resolves_to_a_type_only_declaration_and_must_be_imported_using_a_type_only_import_when_preserveValueImports_and_isolatedModules_are_both_enabled;
                                const name = ts.idText(node.kind === ts.SyntaxKind.ImportSpecifier ? node.propertyName || node.name : node.name);
                                addTypeOnlyDeclarationRelatedInfo(
                                    error(node, message, name),
                                    isType ? undefined : typeOnlyAlias,
                                    name
                                );
                            }
                            if (isType && node.kind === ts.SyntaxKind.ImportEqualsDeclaration && ts.hasEffectiveModifier(node, ts.ModifierFlags.Export)) {
                                error(node, ts.Diagnostics.Cannot_use_export_import_on_a_type_or_type_only_namespace_when_the_isolatedModules_flag_is_provided);
                            }
                            break;
                        }
                        case ts.SyntaxKind.ExportSpecifier: {
                            // Don't allow re-exporting an export that will be elided when `--isolatedModules` is set.
                            // The exception is that `import type { A } from './a'; export { A }` is allowed
                            // because single-file analysis can determine that the export should be dropped.
                            if (ts.getSourceFileOfNode(typeOnlyAlias) !== ts.getSourceFileOfNode(node)) {
                                const message = isType
                                    ? ts.Diagnostics.Re_exporting_a_type_when_the_isolatedModules_flag_is_provided_requires_using_export_type
                                    : ts.Diagnostics._0_resolves_to_a_type_only_declaration_and_must_be_re_exported_using_a_type_only_re_export_when_isolatedModules_is_enabled;
                                const name = ts.idText(node.propertyName || node.name);
                                addTypeOnlyDeclarationRelatedInfo(
                                    error(node, message, name),
                                    isType ? undefined : typeOnlyAlias,
                                    name
                                );
                                return;
                            }
                        }
                    }
                }
            }

            if (ts.isImportSpecifier(node)) {
                const targetSymbol = checkDeprecatedAliasedSymbol(symbol, node);
                if (isDeprecatedAliasedSymbol(targetSymbol) && targetSymbol.declarations) {
                    addDeprecatedSuggestion(node, targetSymbol.declarations, targetSymbol.escapedName as string);
                }
            }
        }
    }

    function isDeprecatedAliasedSymbol(symbol: ts.Symbol) {
        return !!symbol.declarations && ts.every(symbol.declarations, d => !!(ts.getCombinedNodeFlags(d) & ts.NodeFlags.Deprecated));
    }

    function checkDeprecatedAliasedSymbol(symbol: ts.Symbol, location: ts.Node) {
        if (!(symbol.flags & ts.SymbolFlags.Alias)) return symbol;

        const targetSymbol = resolveAlias(symbol);
        if (targetSymbol === unknownSymbol) return targetSymbol;

        while (symbol.flags & ts.SymbolFlags.Alias) {
            const target = getImmediateAliasedSymbol(symbol);
            if (target) {
                if (target === targetSymbol) break;
                if (target.declarations && ts.length(target.declarations)) {
                    if (isDeprecatedAliasedSymbol(target)) {
                        addDeprecatedSuggestion(location, target.declarations, target.escapedName as string);
                        break;
                    }
                    else {
                        if (symbol === targetSymbol) break;
                        symbol = target;
                    }
                }
            }
            else {
                break;
            }
        }
        return targetSymbol;
    }

    function checkImportBinding(node: ts.ImportEqualsDeclaration | ts.ImportClause | ts.NamespaceImport | ts.ImportSpecifier) {
        checkCollisionsForDeclarationName(node, node.name);
        checkAliasSymbol(node);
        if (node.kind === ts.SyntaxKind.ImportSpecifier &&
            ts.idText(node.propertyName || node.name) === "default" &&
            ts.getESModuleInterop(compilerOptions) &&
            moduleKind !== ts.ModuleKind.System && (moduleKind < ts.ModuleKind.ES2015 || ts.getSourceFileOfNode(node).impliedNodeFormat === ts.ModuleKind.CommonJS)) {
            checkExternalEmitHelpers(node, ts.ExternalEmitHelpers.ImportDefault);
        }
    }

    function checkAssertClause(declaration: ts.ImportDeclaration | ts.ExportDeclaration) {
        if (declaration.assertClause) {
            const validForTypeAssertions = ts.isExclusivelyTypeOnlyImportOrExport(declaration);
            const override = ts.getResolutionModeOverrideForClause(declaration.assertClause, validForTypeAssertions ? grammarErrorOnNode : undefined);
            if (validForTypeAssertions && override) {
                if (!ts.isNightly()) {
                    grammarErrorOnNode(declaration.assertClause, ts.Diagnostics.resolution_mode_assertions_are_unstable_Use_nightly_TypeScript_to_silence_this_error_Try_updating_with_npm_install_D_typescript_next);
                }

                if (ts.getEmitModuleResolutionKind(compilerOptions) !== ts.ModuleResolutionKind.Node16 && ts.getEmitModuleResolutionKind(compilerOptions) !== ts.ModuleResolutionKind.NodeNext) {
                    return grammarErrorOnNode(declaration.assertClause, ts.Diagnostics.resolution_mode_assertions_are_only_supported_when_moduleResolution_is_node16_or_nodenext);
                }
                return; // Other grammar checks do not apply to type-only imports with resolution mode assertions
            }

            const mode = (moduleKind === ts.ModuleKind.NodeNext) && declaration.moduleSpecifier && getUsageModeForExpression(declaration.moduleSpecifier);
            if (mode !== ts.ModuleKind.ESNext && moduleKind !== ts.ModuleKind.ESNext) {
                return grammarErrorOnNode(declaration.assertClause,
                    moduleKind === ts.ModuleKind.NodeNext
                        ? ts.Diagnostics.Import_assertions_are_not_allowed_on_statements_that_transpile_to_commonjs_require_calls
                        : ts.Diagnostics.Import_assertions_are_only_supported_when_the_module_option_is_set_to_esnext_or_nodenext);
            }

            if (ts.isImportDeclaration(declaration) ? declaration.importClause?.isTypeOnly : declaration.isTypeOnly) {
                return grammarErrorOnNode(declaration.assertClause, ts.Diagnostics.Import_assertions_cannot_be_used_with_type_only_imports_or_exports);
            }

            if (override) {
                return grammarErrorOnNode(declaration.assertClause, ts.Diagnostics.resolution_mode_can_only_be_set_for_type_only_imports);
            }
        }
    }

    function checkImportDeclaration(node: ts.ImportDeclaration) {
        if (checkGrammarModuleElementContext(node, ts.isInJSFile(node) ? ts.Diagnostics.An_import_declaration_can_only_be_used_at_the_top_level_of_a_module : ts.Diagnostics.An_import_declaration_can_only_be_used_at_the_top_level_of_a_namespace_or_module)) {
            // If we hit an import declaration in an illegal context, just bail out to avoid cascading errors.
            return;
        }
        if (!checkGrammarDecoratorsAndModifiers(node) && ts.hasEffectiveModifiers(node)) {
            grammarErrorOnFirstToken(node, ts.Diagnostics.An_import_declaration_cannot_have_modifiers);
        }
        if (checkExternalImportOrExportDeclaration(node)) {
            const importClause = node.importClause;
            if (importClause && !checkGrammarImportClause(importClause)) {
                if (importClause.name) {
                    checkImportBinding(importClause);
                }
                if (importClause.namedBindings) {
                    if (importClause.namedBindings.kind === ts.SyntaxKind.NamespaceImport) {
                        checkImportBinding(importClause.namedBindings);
                        if (moduleKind !== ts.ModuleKind.System && (moduleKind < ts.ModuleKind.ES2015 || ts.getSourceFileOfNode(node).impliedNodeFormat === ts.ModuleKind.CommonJS) && ts.getESModuleInterop(compilerOptions)) {
                            // import * as ns from "foo";
                            checkExternalEmitHelpers(node, ts.ExternalEmitHelpers.ImportStar);
                        }
                    }
                    else {
                        const moduleExisted = resolveExternalModuleName(node, node.moduleSpecifier);
                        if (moduleExisted) {
                            ts.forEach(importClause.namedBindings.elements, checkImportBinding);
                        }
                    }
                }
            }
        }
        checkAssertClause(node);
    }

    function checkImportEqualsDeclaration(node: ts.ImportEqualsDeclaration) {
        if (checkGrammarModuleElementContext(node, ts.isInJSFile(node) ? ts.Diagnostics.An_import_declaration_can_only_be_used_at_the_top_level_of_a_module : ts.Diagnostics.An_import_declaration_can_only_be_used_at_the_top_level_of_a_namespace_or_module)) {
            // If we hit an import declaration in an illegal context, just bail out to avoid cascading errors.
            return;
        }

        checkGrammarDecoratorsAndModifiers(node);
        if (ts.isInternalModuleImportEqualsDeclaration(node) || checkExternalImportOrExportDeclaration(node)) {
            checkImportBinding(node);
            if (ts.hasSyntacticModifier(node, ts.ModifierFlags.Export)) {
                markExportAsReferenced(node);
            }
            if (node.moduleReference.kind !== ts.SyntaxKind.ExternalModuleReference) {
                const target = resolveAlias(getSymbolOfNode(node));
                if (target !== unknownSymbol) {
                    const targetFlags = getAllSymbolFlags(target);
                    if (targetFlags & ts.SymbolFlags.Value) {
                        // Target is a value symbol, check that it is not hidden by a local declaration with the same name
                        const moduleName = ts.getFirstIdentifier(node.moduleReference);
                        if (!(resolveEntityName(moduleName, ts.SymbolFlags.Value | ts.SymbolFlags.Namespace)!.flags & ts.SymbolFlags.Namespace)) {
                            error(moduleName, ts.Diagnostics.Module_0_is_hidden_by_a_local_declaration_with_the_same_name, ts.declarationNameToString(moduleName));
                        }
                    }
                    if (targetFlags & ts.SymbolFlags.Type) {
                        checkTypeNameIsReserved(node.name, ts.Diagnostics.Import_name_cannot_be_0);
                    }
                }
                if (node.isTypeOnly) {
                    grammarErrorOnNode(node, ts.Diagnostics.An_import_alias_cannot_use_import_type);
                }
            }
            else {
                if (moduleKind >= ts.ModuleKind.ES2015 && ts.getSourceFileOfNode(node).impliedNodeFormat === undefined && !node.isTypeOnly && !(node.flags & ts.NodeFlags.Ambient)) {
                    // Import equals declaration is deprecated in es6 or above
                    grammarErrorOnNode(node, ts.Diagnostics.Import_assignment_cannot_be_used_when_targeting_ECMAScript_modules_Consider_using_import_Asterisk_as_ns_from_mod_import_a_from_mod_import_d_from_mod_or_another_module_format_instead);
                }
            }
        }
    }

    function checkExportDeclaration(node: ts.ExportDeclaration) {
        if (checkGrammarModuleElementContext(node, ts.isInJSFile(node) ? ts.Diagnostics.An_export_declaration_can_only_be_used_at_the_top_level_of_a_module : ts.Diagnostics.An_export_declaration_can_only_be_used_at_the_top_level_of_a_namespace_or_module)) {
            // If we hit an export in an illegal context, just bail out to avoid cascading errors.
            return;
        }

        if (!checkGrammarDecoratorsAndModifiers(node) && ts.hasSyntacticModifiers(node)) {
            grammarErrorOnFirstToken(node, ts.Diagnostics.An_export_declaration_cannot_have_modifiers);
        }

        if (node.moduleSpecifier && node.exportClause && ts.isNamedExports(node.exportClause) && ts.length(node.exportClause.elements) && languageVersion === ts.ScriptTarget.ES3) {
            checkExternalEmitHelpers(node, ts.ExternalEmitHelpers.CreateBinding);
        }

        checkGrammarExportDeclaration(node);
        if (!node.moduleSpecifier || checkExternalImportOrExportDeclaration(node)) {
            if (node.exportClause && !ts.isNamespaceExport(node.exportClause)) {
                // export { x, y }
                // export { x, y } from "foo"
                ts.forEach(node.exportClause.elements, checkExportSpecifier);
                const inAmbientExternalModule = node.parent.kind === ts.SyntaxKind.ModuleBlock && ts.isAmbientModule(node.parent.parent);
                const inAmbientNamespaceDeclaration = !inAmbientExternalModule && node.parent.kind === ts.SyntaxKind.ModuleBlock &&
                    !node.moduleSpecifier && node.flags & ts.NodeFlags.Ambient;
                if (node.parent.kind !== ts.SyntaxKind.SourceFile && !inAmbientExternalModule && !inAmbientNamespaceDeclaration) {
                    error(node, ts.Diagnostics.Export_declarations_are_not_permitted_in_a_namespace);
                }
            }
            else {
                // export * from "foo"
                // export * as ns from "foo";
                const moduleSymbol = resolveExternalModuleName(node, node.moduleSpecifier!);
                if (moduleSymbol && hasExportAssignmentSymbol(moduleSymbol)) {
                    error(node.moduleSpecifier, ts.Diagnostics.Module_0_uses_export_and_cannot_be_used_with_export_Asterisk, symbolToString(moduleSymbol));
                }
                else if (node.exportClause) {
                    checkAliasSymbol(node.exportClause);
                }
                if (moduleKind !== ts.ModuleKind.System && (moduleKind < ts.ModuleKind.ES2015 || ts.getSourceFileOfNode(node).impliedNodeFormat === ts.ModuleKind.CommonJS)) {
                    if (node.exportClause) {
                        // export * as ns from "foo";
                        // For ES2015 modules, we emit it as a pair of `import * as a_1 ...; export { a_1 as ns }` and don't need the helper.
                        // We only use the helper here when in esModuleInterop
                        if (ts.getESModuleInterop(compilerOptions)) {
                            checkExternalEmitHelpers(node, ts.ExternalEmitHelpers.ImportStar);
                        }
                    }
                    else {
                        // export * from "foo"
                        checkExternalEmitHelpers(node, ts.ExternalEmitHelpers.ExportStar);
                    }
                }
            }
        }
        checkAssertClause(node);
    }

    function checkGrammarExportDeclaration(node: ts.ExportDeclaration): boolean {
        if (node.isTypeOnly) {
            if (node.exportClause?.kind === ts.SyntaxKind.NamedExports) {
                return checkGrammarNamedImportsOrExports(node.exportClause);
            }
            else {
                return grammarErrorOnNode(node, ts.Diagnostics.Only_named_exports_may_use_export_type);
            }
        }
        return false;
    }

    function checkGrammarModuleElementContext(node: ts.Statement, errorMessage: ts.DiagnosticMessage): boolean {
        const isInAppropriateContext = node.parent.kind === ts.SyntaxKind.SourceFile || node.parent.kind === ts.SyntaxKind.ModuleBlock || node.parent.kind === ts.SyntaxKind.ModuleDeclaration;
        if (!isInAppropriateContext) {
            grammarErrorOnFirstToken(node, errorMessage);
        }
        return !isInAppropriateContext;
    }

    function importClauseContainsReferencedImport(importClause: ts.ImportClause) {
        return ts.forEachImportClauseDeclaration(importClause, declaration => {
            return !!getSymbolOfNode(declaration).isReferenced;
        });
    }

    function importClauseContainsConstEnumUsedAsValue(importClause: ts.ImportClause) {
        return ts.forEachImportClauseDeclaration(importClause, declaration => {
            return !!getSymbolLinks(getSymbolOfNode(declaration)).constEnumReferenced;
        });
    }

    function canConvertImportDeclarationToTypeOnly(statement: ts.Statement) {
        return ts.isImportDeclaration(statement) &&
            statement.importClause &&
            !statement.importClause.isTypeOnly &&
            importClauseContainsReferencedImport(statement.importClause) &&
            !isReferencedAliasDeclaration(statement.importClause, /*checkChildren*/ true) &&
            !importClauseContainsConstEnumUsedAsValue(statement.importClause);
    }

    function canConvertImportEqualsDeclarationToTypeOnly(statement: ts.Statement) {
        return ts.isImportEqualsDeclaration(statement) &&
            ts.isExternalModuleReference(statement.moduleReference) &&
            !statement.isTypeOnly &&
            getSymbolOfNode(statement).isReferenced &&
            !isReferencedAliasDeclaration(statement, /*checkChildren*/ false) &&
            !getSymbolLinks(getSymbolOfNode(statement)).constEnumReferenced;
    }

    function checkImportsForTypeOnlyConversion(sourceFile: ts.SourceFile) {
        for (const statement of sourceFile.statements) {
            if (canConvertImportDeclarationToTypeOnly(statement) || canConvertImportEqualsDeclarationToTypeOnly(statement)) {
                error(
                    statement,
                    ts.Diagnostics.This_import_is_never_used_as_a_value_and_must_use_import_type_because_importsNotUsedAsValues_is_set_to_error);
            }
        }
    }

    function checkExportSpecifier(node: ts.ExportSpecifier) {
        checkAliasSymbol(node);
        if (ts.getEmitDeclarations(compilerOptions)) {
            collectLinkedAliases(node.propertyName || node.name, /*setVisibility*/ true);
        }
        if (!node.parent.parent.moduleSpecifier) {
            const exportedName = node.propertyName || node.name;
            // find immediate value referenced by exported name (SymbolFlags.Alias is set so we don't chase down aliases)
            const symbol = resolveName(exportedName, exportedName.escapedText, ts.SymbolFlags.Value | ts.SymbolFlags.Type | ts.SymbolFlags.Namespace | ts.SymbolFlags.Alias,
                /*nameNotFoundMessage*/ undefined, /*nameArg*/ undefined, /*isUse*/ true);
            if (symbol && (symbol === undefinedSymbol || symbol === globalThisSymbol || symbol.declarations && isGlobalSourceFile(getDeclarationContainer(symbol.declarations[0])))) {
                error(exportedName, ts.Diagnostics.Cannot_export_0_Only_local_declarations_can_be_exported_from_a_module, ts.idText(exportedName));
            }
            else {
                if (!node.isTypeOnly && !node.parent.parent.isTypeOnly) {
                    markExportAsReferenced(node);
                }
                const target = symbol && (symbol.flags & ts.SymbolFlags.Alias ? resolveAlias(symbol) : symbol);
                if (!target || getAllSymbolFlags(target) & ts.SymbolFlags.Value) {
                    checkExpressionCached(node.propertyName || node.name);
                }
            }
        }
        else {
            if (ts.getESModuleInterop(compilerOptions) &&
                moduleKind !== ts.ModuleKind.System &&
                (moduleKind < ts.ModuleKind.ES2015 || ts.getSourceFileOfNode(node).impliedNodeFormat === ts.ModuleKind.CommonJS) &&
                ts.idText(node.propertyName || node.name) === "default") {
                checkExternalEmitHelpers(node, ts.ExternalEmitHelpers.ImportDefault);
            }
        }
    }

    function checkExportAssignment(node: ts.ExportAssignment) {
        const illegalContextMessage = node.isExportEquals
            ? ts.Diagnostics.An_export_assignment_must_be_at_the_top_level_of_a_file_or_module_declaration
            : ts.Diagnostics.A_default_export_must_be_at_the_top_level_of_a_file_or_module_declaration;
        if (checkGrammarModuleElementContext(node, illegalContextMessage)) {
            // If we hit an export assignment in an illegal context, just bail out to avoid cascading errors.
            return;
        }

        const container = node.parent.kind === ts.SyntaxKind.SourceFile ? node.parent : node.parent.parent as ts.ModuleDeclaration;
        if (container.kind === ts.SyntaxKind.ModuleDeclaration && !ts.isAmbientModule(container)) {
            if (node.isExportEquals) {
                error(node, ts.Diagnostics.An_export_assignment_cannot_be_used_in_a_namespace);
            }
            else {
                error(node, ts.Diagnostics.A_default_export_can_only_be_used_in_an_ECMAScript_style_module);
            }

            return;
        }
        // Grammar checking
        if (!checkGrammarDecoratorsAndModifiers(node) && ts.hasEffectiveModifiers(node)) {
            grammarErrorOnFirstToken(node, ts.Diagnostics.An_export_assignment_cannot_have_modifiers);
        }

        const typeAnnotationNode = ts.getEffectiveTypeAnnotationNode(node);
        if (typeAnnotationNode) {
            checkTypeAssignableTo(checkExpressionCached(node.expression), getTypeFromTypeNode(typeAnnotationNode), node.expression);
        }

        if (node.expression.kind === ts.SyntaxKind.Identifier) {
            const id = node.expression as ts.Identifier;
            const sym = resolveEntityName(id, ts.SymbolFlags.All, /*ignoreErrors*/ true, /*dontResolveAlias*/ true, node);
            if (sym) {
                markAliasReferenced(sym, id);
                // If not a value, we're interpreting the identifier as a type export, along the lines of (`export { Id as default }`)
                const target = sym.flags & ts.SymbolFlags.Alias ? resolveAlias(sym) : sym;
                if (getAllSymbolFlags(target) & ts.SymbolFlags.Value) {
                    // However if it is a value, we need to check it's being used correctly
                    checkExpressionCached(node.expression);
                }
            }
            else {
                checkExpressionCached(node.expression); // doesn't resolve, check as expression to mark as error
            }

            if (ts.getEmitDeclarations(compilerOptions)) {
                collectLinkedAliases(node.expression as ts.Identifier, /*setVisibility*/ true);
            }
        }
        else {
            checkExpressionCached(node.expression);
        }

        checkExternalModuleExports(container);

        if ((node.flags & ts.NodeFlags.Ambient) && !ts.isEntityNameExpression(node.expression)) {
            grammarErrorOnNode(node.expression, ts.Diagnostics.The_expression_of_an_export_assignment_must_be_an_identifier_or_qualified_name_in_an_ambient_context);
        }

        if (node.isExportEquals && !(node.flags & ts.NodeFlags.Ambient)) {
            if (moduleKind >= ts.ModuleKind.ES2015 && ts.getSourceFileOfNode(node).impliedNodeFormat !== ts.ModuleKind.CommonJS) {
                // export assignment is not supported in es6 modules
                grammarErrorOnNode(node, ts.Diagnostics.Export_assignment_cannot_be_used_when_targeting_ECMAScript_modules_Consider_using_export_default_or_another_module_format_instead);
            }
            else if (moduleKind === ts.ModuleKind.System) {
                // system modules does not support export assignment
                grammarErrorOnNode(node, ts.Diagnostics.Export_assignment_is_not_supported_when_module_flag_is_system);
            }
        }
    }

    function hasExportedMembers(moduleSymbol: ts.Symbol) {
        return ts.forEachEntry(moduleSymbol.exports!, (_, id) => id !== "export=");
    }

    function checkExternalModuleExports(node: ts.SourceFile | ts.ModuleDeclaration) {
        const moduleSymbol = getSymbolOfNode(node);
        const links = getSymbolLinks(moduleSymbol);
        if (!links.exportsChecked) {
            const exportEqualsSymbol = moduleSymbol.exports!.get("export=" as ts.__String);
            if (exportEqualsSymbol && hasExportedMembers(moduleSymbol)) {
                const declaration = getDeclarationOfAliasSymbol(exportEqualsSymbol) || exportEqualsSymbol.valueDeclaration;
                if (declaration && !isTopLevelInExternalModuleAugmentation(declaration) && !ts.isInJSFile(declaration)) {
                    error(declaration, ts.Diagnostics.An_export_assignment_cannot_be_used_in_a_module_with_other_exported_elements);
                }
            }
            // Checks for export * conflicts
            const exports = getExportsOfModule(moduleSymbol);
            if (exports) {
                exports.forEach(({ declarations, flags }, id) => {
                    if (id === "__export") {
                        return;
                    }
                    // ECMA262: 15.2.1.1 It is a Syntax Error if the ExportedNames of ModuleItemList contains any duplicate entries.
                    // (TS Exceptions: namespaces, function overloads, enums, and interfaces)
                    if (flags & (ts.SymbolFlags.Namespace | ts.SymbolFlags.Enum)) {
                        return;
                    }
                    const exportedDeclarationsCount = ts.countWhere(declarations, ts.and(isNotOverloadAndNotAccessor, ts.not(ts.isInterfaceDeclaration)));
                    if (flags & ts.SymbolFlags.TypeAlias && exportedDeclarationsCount <= 2) {
                        // it is legal to merge type alias with other values
                        // so count should be either 1 (just type alias) or 2 (type alias + merged value)
                        return;
                    }
                    if (exportedDeclarationsCount > 1) {
                        if (!isDuplicatedCommonJSExport(declarations)) {
                            for (const declaration of declarations!) {
                                if (isNotOverload(declaration)) {
                                    diagnostics.add(ts.createDiagnosticForNode(declaration, ts.Diagnostics.Cannot_redeclare_exported_variable_0, ts.unescapeLeadingUnderscores(id)));
                                }
                            }
                        }
                    }
                });
            }
            links.exportsChecked = true;
        }
    }

    function isDuplicatedCommonJSExport(declarations: ts.Declaration[] | undefined) {
        return declarations
            && declarations.length > 1
            && declarations.every(d => ts.isInJSFile(d) && ts.isAccessExpression(d) && (ts.isExportsIdentifier(d.expression) || ts.isModuleExportsAccessExpression(d.expression)));
    }

    function checkSourceElement(node: ts.Node | undefined): void {
        if (node) {
            const saveCurrentNode = currentNode;
            currentNode = node;
            instantiationCount = 0;
            checkSourceElementWorker(node);
            currentNode = saveCurrentNode;
        }
    }

    function checkSourceElementWorker(node: ts.Node): void {
        ts.forEach((node as ts.JSDocContainer).jsDoc, ({ comment, tags }) => {
            checkJSDocCommentWorker(comment);
            ts.forEach(tags, tag => {
                checkJSDocCommentWorker(tag.comment);
                if (ts.isInJSFile(node)) {
                    checkSourceElement(tag);
                }
            });
        });

        const kind = node.kind;
        if (cancellationToken) {
            // Only bother checking on a few construct kinds.  We don't want to be excessively
            // hitting the cancellation token on every node we check.
            switch (kind) {
                case ts.SyntaxKind.ModuleDeclaration:
                case ts.SyntaxKind.ClassDeclaration:
                case ts.SyntaxKind.InterfaceDeclaration:
                case ts.SyntaxKind.FunctionDeclaration:
                    cancellationToken.throwIfCancellationRequested();
            }
        }
        if (kind >= ts.SyntaxKind.FirstStatement && kind <= ts.SyntaxKind.LastStatement && node.flowNode && !isReachableFlowNode(node.flowNode)) {
            errorOrSuggestion(compilerOptions.allowUnreachableCode === false, node, ts.Diagnostics.Unreachable_code_detected);
        }

        switch (kind) {
            case ts.SyntaxKind.TypeParameter:
                return checkTypeParameter(node as ts.TypeParameterDeclaration);
            case ts.SyntaxKind.Parameter:
                return checkParameter(node as ts.ParameterDeclaration);
            case ts.SyntaxKind.PropertyDeclaration:
                return checkPropertyDeclaration(node as ts.PropertyDeclaration);
            case ts.SyntaxKind.PropertySignature:
                return checkPropertySignature(node as ts.PropertySignature);
            case ts.SyntaxKind.ConstructorType:
            case ts.SyntaxKind.FunctionType:
            case ts.SyntaxKind.CallSignature:
            case ts.SyntaxKind.ConstructSignature:
            case ts.SyntaxKind.IndexSignature:
                return checkSignatureDeclaration(node as ts.SignatureDeclaration);
            case ts.SyntaxKind.MethodDeclaration:
            case ts.SyntaxKind.MethodSignature:
                return checkMethodDeclaration(node as ts.MethodDeclaration | ts.MethodSignature);
            case ts.SyntaxKind.ClassStaticBlockDeclaration:
                return checkClassStaticBlockDeclaration(node as ts.ClassStaticBlockDeclaration);
            case ts.SyntaxKind.Constructor:
                return checkConstructorDeclaration(node as ts.ConstructorDeclaration);
            case ts.SyntaxKind.GetAccessor:
            case ts.SyntaxKind.SetAccessor:
                return checkAccessorDeclaration(node as ts.AccessorDeclaration);
            case ts.SyntaxKind.TypeReference:
                return checkTypeReferenceNode(node as ts.TypeReferenceNode);
            case ts.SyntaxKind.TypePredicate:
                return checkTypePredicate(node as ts.TypePredicateNode);
            case ts.SyntaxKind.TypeQuery:
                return checkTypeQuery(node as ts.TypeQueryNode);
            case ts.SyntaxKind.TypeLiteral:
                return checkTypeLiteral(node as ts.TypeLiteralNode);
            case ts.SyntaxKind.ArrayType:
                return checkArrayType(node as ts.ArrayTypeNode);
            case ts.SyntaxKind.TupleType:
                return checkTupleType(node as ts.TupleTypeNode);
            case ts.SyntaxKind.UnionType:
            case ts.SyntaxKind.IntersectionType:
                return checkUnionOrIntersectionType(node as ts.UnionOrIntersectionTypeNode);
            case ts.SyntaxKind.ParenthesizedType:
            case ts.SyntaxKind.OptionalType:
            case ts.SyntaxKind.RestType:
                return checkSourceElement((node as ts.ParenthesizedTypeNode | ts.OptionalTypeNode | ts.RestTypeNode).type);
            case ts.SyntaxKind.ThisType:
                return checkThisType(node as ts.ThisTypeNode);
            case ts.SyntaxKind.TypeOperator:
                return checkTypeOperator(node as ts.TypeOperatorNode);
            case ts.SyntaxKind.ConditionalType:
                return checkConditionalType(node as ts.ConditionalTypeNode);
            case ts.SyntaxKind.InferType:
                return checkInferType(node as ts.InferTypeNode);
            case ts.SyntaxKind.TemplateLiteralType:
                return checkTemplateLiteralType(node as ts.TemplateLiteralTypeNode);
            case ts.SyntaxKind.ImportType:
                return checkImportType(node as ts.ImportTypeNode);
            case ts.SyntaxKind.NamedTupleMember:
                return checkNamedTupleMember(node as ts.NamedTupleMember);
            case ts.SyntaxKind.JSDocAugmentsTag:
                return checkJSDocAugmentsTag(node as ts.JSDocAugmentsTag);
            case ts.SyntaxKind.JSDocImplementsTag:
                return checkJSDocImplementsTag(node as ts.JSDocImplementsTag);
            case ts.SyntaxKind.JSDocTypedefTag:
            case ts.SyntaxKind.JSDocCallbackTag:
            case ts.SyntaxKind.JSDocEnumTag:
                return checkJSDocTypeAliasTag(node as ts.JSDocTypedefTag);
            case ts.SyntaxKind.JSDocTemplateTag:
                return checkJSDocTemplateTag(node as ts.JSDocTemplateTag);
            case ts.SyntaxKind.JSDocTypeTag:
                return checkJSDocTypeTag(node as ts.JSDocTypeTag);
            case ts.SyntaxKind.JSDocLink:
            case ts.SyntaxKind.JSDocLinkCode:
            case ts.SyntaxKind.JSDocLinkPlain:
                return checkJSDocLinkLikeTag(node as ts.JSDocLink | ts.JSDocLinkCode | ts.JSDocLinkPlain);
            case ts.SyntaxKind.JSDocParameterTag:
                return checkJSDocParameterTag(node as ts.JSDocParameterTag);
            case ts.SyntaxKind.JSDocPropertyTag:
                return checkJSDocPropertyTag(node as ts.JSDocPropertyTag);
            case ts.SyntaxKind.JSDocFunctionType:
                checkJSDocFunctionType(node as ts.JSDocFunctionType);
                // falls through
            case ts.SyntaxKind.JSDocNonNullableType:
            case ts.SyntaxKind.JSDocNullableType:
            case ts.SyntaxKind.JSDocAllType:
            case ts.SyntaxKind.JSDocUnknownType:
            case ts.SyntaxKind.JSDocTypeLiteral:
                checkJSDocTypeIsInJsFile(node);
                ts.forEachChild(node, checkSourceElement);
                return;
            case ts.SyntaxKind.JSDocVariadicType:
                checkJSDocVariadicType(node as ts.JSDocVariadicType);
                return;
            case ts.SyntaxKind.JSDocTypeExpression:
                return checkSourceElement((node as ts.JSDocTypeExpression).type);
            case ts.SyntaxKind.JSDocPublicTag:
            case ts.SyntaxKind.JSDocProtectedTag:
            case ts.SyntaxKind.JSDocPrivateTag:
                return checkJSDocAccessibilityModifiers(node as ts.JSDocPublicTag | ts.JSDocProtectedTag | ts.JSDocPrivateTag);
            case ts.SyntaxKind.IndexedAccessType:
                return checkIndexedAccessType(node as ts.IndexedAccessTypeNode);
            case ts.SyntaxKind.MappedType:
                return checkMappedType(node as ts.MappedTypeNode);
            case ts.SyntaxKind.FunctionDeclaration:
                return checkFunctionDeclaration(node as ts.FunctionDeclaration);
            case ts.SyntaxKind.Block:
            case ts.SyntaxKind.ModuleBlock:
                return checkBlock(node as ts.Block);
            case ts.SyntaxKind.VariableStatement:
                return checkVariableStatement(node as ts.VariableStatement);
            case ts.SyntaxKind.ExpressionStatement:
                return checkExpressionStatement(node as ts.ExpressionStatement);
            case ts.SyntaxKind.IfStatement:
                return checkIfStatement(node as ts.IfStatement);
            case ts.SyntaxKind.DoStatement:
                return checkDoStatement(node as ts.DoStatement);
            case ts.SyntaxKind.WhileStatement:
                return checkWhileStatement(node as ts.WhileStatement);
            case ts.SyntaxKind.ForStatement:
                return checkForStatement(node as ts.ForStatement);
            case ts.SyntaxKind.ForInStatement:
                return checkForInStatement(node as ts.ForInStatement);
            case ts.SyntaxKind.ForOfStatement:
                return checkForOfStatement(node as ts.ForOfStatement);
            case ts.SyntaxKind.ContinueStatement:
            case ts.SyntaxKind.BreakStatement:
                return checkBreakOrContinueStatement(node as ts.BreakOrContinueStatement);
            case ts.SyntaxKind.ReturnStatement:
                return checkReturnStatement(node as ts.ReturnStatement);
            case ts.SyntaxKind.WithStatement:
                return checkWithStatement(node as ts.WithStatement);
            case ts.SyntaxKind.SwitchStatement:
                return checkSwitchStatement(node as ts.SwitchStatement);
            case ts.SyntaxKind.LabeledStatement:
                return checkLabeledStatement(node as ts.LabeledStatement);
            case ts.SyntaxKind.ThrowStatement:
                return checkThrowStatement(node as ts.ThrowStatement);
            case ts.SyntaxKind.TryStatement:
                return checkTryStatement(node as ts.TryStatement);
            case ts.SyntaxKind.VariableDeclaration:
                return checkVariableDeclaration(node as ts.VariableDeclaration);
            case ts.SyntaxKind.BindingElement:
                return checkBindingElement(node as ts.BindingElement);
            case ts.SyntaxKind.ClassDeclaration:
                return checkClassDeclaration(node as ts.ClassDeclaration);
            case ts.SyntaxKind.InterfaceDeclaration:
                return checkInterfaceDeclaration(node as ts.InterfaceDeclaration);
            case ts.SyntaxKind.TypeAliasDeclaration:
                return checkTypeAliasDeclaration(node as ts.TypeAliasDeclaration);
            case ts.SyntaxKind.EnumDeclaration:
                return checkEnumDeclaration(node as ts.EnumDeclaration);
            case ts.SyntaxKind.ModuleDeclaration:
                return checkModuleDeclaration(node as ts.ModuleDeclaration);
            case ts.SyntaxKind.ImportDeclaration:
                return checkImportDeclaration(node as ts.ImportDeclaration);
            case ts.SyntaxKind.ImportEqualsDeclaration:
                return checkImportEqualsDeclaration(node as ts.ImportEqualsDeclaration);
            case ts.SyntaxKind.ExportDeclaration:
                return checkExportDeclaration(node as ts.ExportDeclaration);
            case ts.SyntaxKind.ExportAssignment:
                return checkExportAssignment(node as ts.ExportAssignment);
            case ts.SyntaxKind.EmptyStatement:
            case ts.SyntaxKind.DebuggerStatement:
                checkGrammarStatementInAmbientContext(node);
                return;
            case ts.SyntaxKind.MissingDeclaration:
                return checkMissingDeclaration(node);
        }
    }

    function checkJSDocCommentWorker(node: string | readonly ts.JSDocComment[] | undefined) {
        if (ts.isArray(node)) {
            ts.forEach(node, tag => {
                if (ts.isJSDocLinkLike(tag)) {
                    checkSourceElement(tag);
                }
            });
        }
    }

    function checkJSDocTypeIsInJsFile(node: ts.Node): void {
        if (!ts.isInJSFile(node)) {
            grammarErrorOnNode(node, ts.Diagnostics.JSDoc_types_can_only_be_used_inside_documentation_comments);
        }
    }

    function checkJSDocVariadicType(node: ts.JSDocVariadicType): void {
        checkJSDocTypeIsInJsFile(node);
        checkSourceElement(node.type);

        // Only legal location is in the *last* parameter tag or last parameter of a JSDoc function.
        const { parent } = node;
        if (ts.isParameter(parent) && ts.isJSDocFunctionType(parent.parent)) {
            if (ts.last(parent.parent.parameters) !== parent) {
                error(node, ts.Diagnostics.A_rest_parameter_must_be_last_in_a_parameter_list);
            }
            return;
        }

        if (!ts.isJSDocTypeExpression(parent)) {
            error(node, ts.Diagnostics.JSDoc_may_only_appear_in_the_last_parameter_of_a_signature);
        }

        const paramTag = node.parent.parent;
        if (!ts.isJSDocParameterTag(paramTag)) {
            error(node, ts.Diagnostics.JSDoc_may_only_appear_in_the_last_parameter_of_a_signature);
            return;
        }

        const param = ts.getParameterSymbolFromJSDoc(paramTag);
        if (!param) {
            // We will error in `checkJSDocParameterTag`.
            return;
        }

        const host = ts.getHostSignatureFromJSDoc(paramTag);
        if (!host || ts.last(host.parameters).symbol !== param) {
            error(node, ts.Diagnostics.A_rest_parameter_must_be_last_in_a_parameter_list);
        }
    }

    function getTypeFromJSDocVariadicType(node: ts.JSDocVariadicType): ts.Type {
        const type = getTypeFromTypeNode(node.type);
        const { parent } = node;
        const paramTag = node.parent.parent;
        if (ts.isJSDocTypeExpression(node.parent) && ts.isJSDocParameterTag(paramTag)) {
            // Else we will add a diagnostic, see `checkJSDocVariadicType`.
            const host = ts.getHostSignatureFromJSDoc(paramTag);
            const isCallbackTag = ts.isJSDocCallbackTag(paramTag.parent.parent);
            if (host || isCallbackTag) {
                /*
                Only return an array type if the corresponding parameter is marked as a rest parameter, or if there are no parameters.
                So in the following situation we will not create an array type:
                    /** @param {...number} a * /
                    function f(a) {}
                Because `a` will just be of type `number | undefined`. A synthetic `...args` will also be added, which *will* get an array type.
                */
                const lastParamDeclaration = isCallbackTag
                    ? ts.lastOrUndefined((paramTag.parent.parent as unknown as ts.JSDocCallbackTag).typeExpression.parameters)
                    : ts.lastOrUndefined(host!.parameters);
                const symbol = ts.getParameterSymbolFromJSDoc(paramTag);
                if (!lastParamDeclaration ||
                    symbol && lastParamDeclaration.symbol === symbol && ts.isRestParameter(lastParamDeclaration)) {
                    return createArrayType(type);
                }
            }
        }
        if (ts.isParameter(parent) && ts.isJSDocFunctionType(parent.parent)) {
            return createArrayType(type);
        }
        return addOptionality(type);
    }

    // Function and class expression bodies are checked after all statements in the enclosing body. This is
    // to ensure constructs like the following are permitted:
    //     const foo = function () {
    //        const s = foo();
    //        return "hello";
    //     }
    // Here, performing a full type check of the body of the function expression whilst in the process of
    // determining the type of foo would cause foo to be given type any because of the recursive reference.
    // Delaying the type check of the body ensures foo has been assigned a type.
    function checkNodeDeferred(node: ts.Node) {
        const enclosingFile = ts.getSourceFileOfNode(node);
        const links = getNodeLinks(enclosingFile);
        if (!(links.flags & ts.NodeCheckFlags.TypeChecked)) {
            links.deferredNodes ||= new ts.Set();
            links.deferredNodes.add(node);
        }
    }

    function checkDeferredNodes(context: ts.SourceFile) {
        const links = getNodeLinks(context);
        if (links.deferredNodes) {
            links.deferredNodes.forEach(checkDeferredNode);
        }
    }

    function checkDeferredNode(node: ts.Node) {
        ts.tracing?.push(ts.tracing.Phase.Check, "checkDeferredNode", { kind: node.kind, pos: node.pos, end: node.end, path: (node as ts.TracingNode).tracingPath });
        const saveCurrentNode = currentNode;
        currentNode = node;
        instantiationCount = 0;
        switch (node.kind) {
            case ts.SyntaxKind.CallExpression:
            case ts.SyntaxKind.NewExpression:
            case ts.SyntaxKind.TaggedTemplateExpression:
            case ts.SyntaxKind.Decorator:
            case ts.SyntaxKind.JsxOpeningElement:
                // These node kinds are deferred checked when overload resolution fails
                // To save on work, we ensure the arguments are checked just once, in
                // a deferred way
                resolveUntypedCall(node as ts.CallLikeExpression);
                break;
            case ts.SyntaxKind.FunctionExpression:
            case ts.SyntaxKind.ArrowFunction:
            case ts.SyntaxKind.MethodDeclaration:
            case ts.SyntaxKind.MethodSignature:
                checkFunctionExpressionOrObjectLiteralMethodDeferred(node as ts.FunctionExpression);
                break;
            case ts.SyntaxKind.GetAccessor:
            case ts.SyntaxKind.SetAccessor:
                checkAccessorDeclaration(node as ts.AccessorDeclaration);
                break;
            case ts.SyntaxKind.ClassExpression:
                checkClassExpressionDeferred(node as ts.ClassExpression);
                break;
            case ts.SyntaxKind.TypeParameter:
                checkTypeParameterDeferred(node as ts.TypeParameterDeclaration);
                break;
            case ts.SyntaxKind.JsxSelfClosingElement:
                checkJsxSelfClosingElementDeferred(node as ts.JsxSelfClosingElement);
                break;
            case ts.SyntaxKind.JsxElement:
                checkJsxElementDeferred(node as ts.JsxElement);
                break;
        }
        currentNode = saveCurrentNode;
        ts.tracing?.pop();
    }

    function checkSourceFile(node: ts.SourceFile) {
        ts.tracing?.push(ts.tracing.Phase.Check, "checkSourceFile", { path: node.path }, /*separateBeginAndEnd*/ true);
        ts.performance.mark("beforeCheck");
        checkSourceFileWorker(node);
        ts.performance.mark("afterCheck");
        ts.performance.measure("Check", "beforeCheck", "afterCheck");
        ts.tracing?.pop();
    }

    function unusedIsError(kind: UnusedKind, isAmbient: boolean): boolean {
        if (isAmbient) {
            return false;
        }
        switch (kind) {
            case UnusedKind.Local:
                return !!compilerOptions.noUnusedLocals;
            case UnusedKind.Parameter:
                return !!compilerOptions.noUnusedParameters;
            default:
                return ts.Debug.assertNever(kind);
        }
    }

    function getPotentiallyUnusedIdentifiers(sourceFile: ts.SourceFile): readonly PotentiallyUnusedIdentifier[] {
        return allPotentiallyUnusedIdentifiers.get(sourceFile.path) || ts.emptyArray;
    }

    // Fully type check a source file and collect the relevant diagnostics.
    function checkSourceFileWorker(node: ts.SourceFile) {
        const links = getNodeLinks(node);
        if (!(links.flags & ts.NodeCheckFlags.TypeChecked)) {
            if (ts.skipTypeChecking(node, compilerOptions, host)) {
                return;
            }

            // Grammar checking
            checkGrammarSourceFile(node);

            ts.clear(potentialThisCollisions);
            ts.clear(potentialNewTargetCollisions);
            ts.clear(potentialWeakMapSetCollisions);
            ts.clear(potentialReflectCollisions);
            ts.clear(potentialUnusedRenamedBindingElementsInTypes);

            ts.forEach(node.statements, checkSourceElement);
            checkSourceElement(node.endOfFileToken);

            checkDeferredNodes(node);

            if (ts.isExternalOrCommonJsModule(node)) {
                registerForUnusedIdentifiersCheck(node);
            }

            addLazyDiagnostic(() => {
                // This relies on the results of other lazy diagnostics, so must be computed after them
                if (!node.isDeclarationFile && (compilerOptions.noUnusedLocals || compilerOptions.noUnusedParameters)) {
                    checkUnusedIdentifiers(getPotentiallyUnusedIdentifiers(node), (containingNode, kind, diag) => {
                        if (!ts.containsParseError(containingNode) && unusedIsError(kind, !!(containingNode.flags & ts.NodeFlags.Ambient))) {
                            diagnostics.add(diag);
                        }
                    });
                }
                if (!node.isDeclarationFile) {
                    checkPotentialUncheckedRenamedBindingElementsInTypes();
                }
            });

            if (compilerOptions.importsNotUsedAsValues === ts.ImportsNotUsedAsValues.Error &&
                !node.isDeclarationFile &&
                ts.isExternalModule(node)
            ) {
                checkImportsForTypeOnlyConversion(node);
            }

            if (ts.isExternalOrCommonJsModule(node)) {
                checkExternalModuleExports(node);
            }

            if (potentialThisCollisions.length) {
                ts.forEach(potentialThisCollisions, checkIfThisIsCapturedInEnclosingScope);
                ts.clear(potentialThisCollisions);
            }

            if (potentialNewTargetCollisions.length) {
                ts.forEach(potentialNewTargetCollisions, checkIfNewTargetIsCapturedInEnclosingScope);
                ts.clear(potentialNewTargetCollisions);
            }

            if (potentialWeakMapSetCollisions.length) {
                ts.forEach(potentialWeakMapSetCollisions, checkWeakMapSetCollision);
                ts.clear(potentialWeakMapSetCollisions);
            }

            if (potentialReflectCollisions.length) {
                ts.forEach(potentialReflectCollisions, checkReflectCollision);
                ts.clear(potentialReflectCollisions);
            }

            links.flags |= ts.NodeCheckFlags.TypeChecked;
        }
    }

    function getDiagnostics(sourceFile: ts.SourceFile, ct: ts.CancellationToken): ts.Diagnostic[] {
        try {
            // Record the cancellation token so it can be checked later on during checkSourceElement.
            // Do this in a finally block so we can ensure that it gets reset back to nothing after
            // this call is done.
            cancellationToken = ct;
            return getDiagnosticsWorker(sourceFile);
        }
        finally {
            cancellationToken = undefined;
        }
    }

    function ensurePendingDiagnosticWorkComplete() {
        // Invoke any existing lazy diagnostics to add them, clear the backlog of diagnostics
        for (const cb of deferredDiagnosticsCallbacks) {
            cb();
        }
        deferredDiagnosticsCallbacks = [];
    }

    function checkSourceFileWithEagerDiagnostics(sourceFile: ts.SourceFile) {
        ensurePendingDiagnosticWorkComplete();
        // then setup diagnostics for immediate invocation (as we are about to collect them, and
        // this avoids the overhead of longer-lived callbacks we don't need to allocate)
        // This also serves to make the shift to possibly lazy diagnostics transparent to serial command-line scenarios
        // (as in those cases, all the diagnostics will still be computed as the appropriate place in the tree,
        // thus much more likely retaining the same union ordering as before we had lazy diagnostics)
        const oldAddLazyDiagnostics = addLazyDiagnostic;
        addLazyDiagnostic = cb => cb();
        checkSourceFile(sourceFile);
        addLazyDiagnostic = oldAddLazyDiagnostics;
    }

    function getDiagnosticsWorker(sourceFile: ts.SourceFile): ts.Diagnostic[] {
        if (sourceFile) {
            ensurePendingDiagnosticWorkComplete();
            // Some global diagnostics are deferred until they are needed and
            // may not be reported in the first call to getGlobalDiagnostics.
            // We should catch these changes and report them.
            const previousGlobalDiagnostics = diagnostics.getGlobalDiagnostics();
            const previousGlobalDiagnosticsSize = previousGlobalDiagnostics.length;

            checkSourceFileWithEagerDiagnostics(sourceFile);

            const semanticDiagnostics = diagnostics.getDiagnostics(sourceFile.fileName);
            const currentGlobalDiagnostics = diagnostics.getGlobalDiagnostics();
            if (currentGlobalDiagnostics !== previousGlobalDiagnostics) {
                // If the arrays are not the same reference, new diagnostics were added.
                const deferredGlobalDiagnostics = ts.relativeComplement(previousGlobalDiagnostics, currentGlobalDiagnostics, ts.compareDiagnostics);
                return ts.concatenate(deferredGlobalDiagnostics, semanticDiagnostics);
            }
            else if (previousGlobalDiagnosticsSize === 0 && currentGlobalDiagnostics.length > 0) {
                // If the arrays are the same reference, but the length has changed, a single
                // new diagnostic was added as DiagnosticCollection attempts to reuse the
                // same array.
                return ts.concatenate(currentGlobalDiagnostics, semanticDiagnostics);
            }

            return semanticDiagnostics;
        }

        // Global diagnostics are always added when a file is not provided to
        // getDiagnostics
        ts.forEach(host.getSourceFiles(), checkSourceFileWithEagerDiagnostics);
        return diagnostics.getDiagnostics();
    }

    function getGlobalDiagnostics(): ts.Diagnostic[] {
        ensurePendingDiagnosticWorkComplete();
        return diagnostics.getGlobalDiagnostics();
    }

    // Language service support

    function getSymbolsInScope(location: ts.Node, meaning: ts.SymbolFlags): ts.Symbol[] {
        if (location.flags & ts.NodeFlags.InWithStatement) {
            // We cannot answer semantic questions within a with block, do not proceed any further
            return [];
        }

        const symbols = ts.createSymbolTable();
        let isStaticSymbol = false;

        populateSymbols();

        symbols.delete(ts.InternalSymbolName.This); // Not a symbol, a keyword
        return symbolsToArray(symbols);

        function populateSymbols() {
            while (location) {
                if (location.locals && !isGlobalSourceFile(location)) {
                    copySymbols(location.locals, meaning);
                }

                switch (location.kind) {
                    case ts.SyntaxKind.SourceFile:
                        if (!ts.isExternalModule(location as ts.SourceFile)) break;
                        // falls through
                    case ts.SyntaxKind.ModuleDeclaration:
                        copyLocallyVisibleExportSymbols(getSymbolOfNode(location as ts.ModuleDeclaration | ts.SourceFile).exports!, meaning & ts.SymbolFlags.ModuleMember);
                        break;
                    case ts.SyntaxKind.EnumDeclaration:
                        copySymbols(getSymbolOfNode(location as ts.EnumDeclaration).exports!, meaning & ts.SymbolFlags.EnumMember);
                        break;
                    case ts.SyntaxKind.ClassExpression:
                        const className = (location as ts.ClassExpression).name;
                        if (className) {
                            copySymbol(location.symbol, meaning);
                        }

                    // this fall-through is necessary because we would like to handle
                    // type parameter inside class expression similar to how we handle it in classDeclaration and interface Declaration.
                    // falls through
                    case ts.SyntaxKind.ClassDeclaration:
                    case ts.SyntaxKind.InterfaceDeclaration:
                        // If we didn't come from static member of class or interface,
                        // add the type parameters into the symbol table
                        // (type parameters of classDeclaration/classExpression and interface are in member property of the symbol.
                        // Note: that the memberFlags come from previous iteration.
                        if (!isStaticSymbol) {
                            copySymbols(getMembersOfSymbol(getSymbolOfNode(location as ts.ClassDeclaration | ts.InterfaceDeclaration)), meaning & ts.SymbolFlags.Type);
                        }
                        break;
                    case ts.SyntaxKind.FunctionExpression:
                        const funcName = (location as ts.FunctionExpression).name;
                        if (funcName) {
                            copySymbol(location.symbol, meaning);
                        }
                        break;
                }

                if (ts.introducesArgumentsExoticObject(location)) {
                    copySymbol(argumentsSymbol, meaning);
                }

                isStaticSymbol = ts.isStatic(location);
                location = location.parent;
            }

            copySymbols(globals, meaning);
        }

        /**
         * Copy the given symbol into symbol tables if the symbol has the given meaning
         * and it doesn't already existed in the symbol table
         * @param key a key for storing in symbol table; if undefined, use symbol.name
         * @param symbol the symbol to be added into symbol table
         * @param meaning meaning of symbol to filter by before adding to symbol table
         */
        function copySymbol(symbol: ts.Symbol, meaning: ts.SymbolFlags): void {
            if (ts.getCombinedLocalAndExportSymbolFlags(symbol) & meaning) {
                const id = symbol.escapedName;
                // We will copy all symbol regardless of its reserved name because
                // symbolsToArray will check whether the key is a reserved name and
                // it will not copy symbol with reserved name to the array
                if (!symbols.has(id)) {
                    symbols.set(id, symbol);
                }
            }
        }

        function copySymbols(source: ts.SymbolTable, meaning: ts.SymbolFlags): void {
            if (meaning) {
                source.forEach(symbol => {
                    copySymbol(symbol, meaning);
                });
            }
        }

        function copyLocallyVisibleExportSymbols(source: ts.SymbolTable, meaning: ts.SymbolFlags): void {
            if (meaning) {
                source.forEach(symbol => {
                    // Similar condition as in `resolveNameHelper`
                    if (!ts.getDeclarationOfKind(symbol, ts.SyntaxKind.ExportSpecifier) && !ts.getDeclarationOfKind(symbol, ts.SyntaxKind.NamespaceExport)) {
                        copySymbol(symbol, meaning);
                    }
                });
            }
        }
    }

    function isTypeDeclarationName(name: ts.Node): boolean {
        return name.kind === ts.SyntaxKind.Identifier &&
            ts.isTypeDeclaration(name.parent) &&
            ts.getNameOfDeclaration(name.parent) === name;
    }

    // True if the given identifier is part of a type reference
    function isTypeReferenceIdentifier(node: ts.EntityName): boolean {
        while (node.parent.kind === ts.SyntaxKind.QualifiedName) {
            node = node.parent as ts.QualifiedName;
        }

        return node.parent.kind === ts.SyntaxKind.TypeReference;
    }

    function isHeritageClauseElementIdentifier(node: ts.Node): boolean {
        while (node.parent.kind === ts.SyntaxKind.PropertyAccessExpression) {
            node = node.parent;
        }

        return node.parent.kind === ts.SyntaxKind.ExpressionWithTypeArguments;
    }

    function forEachEnclosingClass<T>(node: ts.Node, callback: (node: ts.Node) => T | undefined): T | undefined {
        let result: T | undefined;

        while (true) {
            node = ts.getContainingClass(node)!;
            if (!node) break;
            if (result = callback(node)) break;
        }

        return result;
    }

    function isNodeUsedDuringClassInitialization(node: ts.Node) {
        return !!ts.findAncestor(node, element => {
            if (ts.isConstructorDeclaration(element) && ts.nodeIsPresent(element.body) || ts.isPropertyDeclaration(element)) {
                return true;
            }
            else if (ts.isClassLike(element) || ts.isFunctionLikeDeclaration(element)) {
                return "quit";
            }

            return false;
        });
    }

    function isNodeWithinClass(node: ts.Node, classDeclaration: ts.ClassLikeDeclaration) {
        return !!forEachEnclosingClass(node, n => n === classDeclaration);
    }

    function getLeftSideOfImportEqualsOrExportAssignment(nodeOnRightSide: ts.EntityName): ts.ImportEqualsDeclaration | ts.ExportAssignment | undefined {
        while (nodeOnRightSide.parent.kind === ts.SyntaxKind.QualifiedName) {
            nodeOnRightSide = nodeOnRightSide.parent as ts.QualifiedName;
        }

        if (nodeOnRightSide.parent.kind === ts.SyntaxKind.ImportEqualsDeclaration) {
            return (nodeOnRightSide.parent as ts.ImportEqualsDeclaration).moduleReference === nodeOnRightSide ? nodeOnRightSide.parent as ts.ImportEqualsDeclaration : undefined;
        }

        if (nodeOnRightSide.parent.kind === ts.SyntaxKind.ExportAssignment) {
            return (nodeOnRightSide.parent as ts.ExportAssignment).expression === nodeOnRightSide as ts.Node ? nodeOnRightSide.parent as ts.ExportAssignment : undefined;
        }

        return undefined;
    }

    function isInRightSideOfImportOrExportAssignment(node: ts.EntityName) {
        return getLeftSideOfImportEqualsOrExportAssignment(node) !== undefined;
    }

    function getSpecialPropertyAssignmentSymbolFromEntityName(entityName: ts.EntityName | ts.PropertyAccessExpression) {
        const specialPropertyAssignmentKind = ts.getAssignmentDeclarationKind(entityName.parent.parent as ts.BinaryExpression);
        switch (specialPropertyAssignmentKind) {
            case ts.AssignmentDeclarationKind.ExportsProperty:
            case ts.AssignmentDeclarationKind.PrototypeProperty:
                return getSymbolOfNode(entityName.parent);
            case ts.AssignmentDeclarationKind.ThisProperty:
            case ts.AssignmentDeclarationKind.ModuleExports:
            case ts.AssignmentDeclarationKind.Property:
                return getSymbolOfNode(entityName.parent.parent);
        }
    }

    function isImportTypeQualifierPart(node: ts.EntityName): ts.ImportTypeNode | undefined {
        let parent = node.parent;
        while (ts.isQualifiedName(parent)) {
            node = parent;
            parent = parent.parent;
        }
        if (parent && parent.kind === ts.SyntaxKind.ImportType && (parent as ts.ImportTypeNode).qualifier === node) {
            return parent as ts.ImportTypeNode;
        }
        return undefined;
    }

    function getSymbolOfNameOrPropertyAccessExpression(name: ts.EntityName | ts.PrivateIdentifier | ts.PropertyAccessExpression | ts.JSDocMemberName): ts.Symbol | undefined {
        if (ts.isDeclarationName(name)) {
            return getSymbolOfNode(name.parent);
        }

        if (ts.isInJSFile(name) &&
            name.parent.kind === ts.SyntaxKind.PropertyAccessExpression &&
            name.parent === (name.parent.parent as ts.BinaryExpression).left) {
            // Check if this is a special property assignment
            if (!ts.isPrivateIdentifier(name) && !ts.isJSDocMemberName(name)) {
                const specialPropertyAssignmentSymbol = getSpecialPropertyAssignmentSymbolFromEntityName(name);
                if (specialPropertyAssignmentSymbol) {
                    return specialPropertyAssignmentSymbol;
                }
            }
        }

        if (name.parent.kind === ts.SyntaxKind.ExportAssignment && ts.isEntityNameExpression(name)) {
            // Even an entity name expression that doesn't resolve as an entityname may still typecheck as a property access expression
            const success = resolveEntityName(name,
                /*all meanings*/ ts.SymbolFlags.Value | ts.SymbolFlags.Type | ts.SymbolFlags.Namespace | ts.SymbolFlags.Alias, /*ignoreErrors*/ true);
            if (success && success !== unknownSymbol) {
                return success;
            }
        }
        else if (ts.isEntityName(name) && isInRightSideOfImportOrExportAssignment(name)) {
            // Since we already checked for ExportAssignment, this really could only be an Import
            const importEqualsDeclaration = ts.getAncestor(name, ts.SyntaxKind.ImportEqualsDeclaration);
            ts.Debug.assert(importEqualsDeclaration !== undefined);
            return getSymbolOfPartOfRightHandSideOfImportEquals(name, /*dontResolveAlias*/ true);
        }

        if (ts.isEntityName(name)) {
            const possibleImportNode = isImportTypeQualifierPart(name);
            if (possibleImportNode) {
                getTypeFromTypeNode(possibleImportNode);
                const sym = getNodeLinks(name).resolvedSymbol;
                return sym === unknownSymbol ? undefined : sym;
            }
        }

        while (ts.isRightSideOfQualifiedNameOrPropertyAccessOrJSDocMemberName(name)) {
            name = name.parent as ts.QualifiedName | ts.PropertyAccessEntityNameExpression | ts.JSDocMemberName;
        }

        if (isHeritageClauseElementIdentifier(name)) {
            let meaning = ts.SymbolFlags.None;
            // In an interface or class, we're definitely interested in a type.
            if (name.parent.kind === ts.SyntaxKind.ExpressionWithTypeArguments) {
                meaning = ts.SymbolFlags.Type;

                // In a class 'extends' clause we are also looking for a value.
                if (ts.isExpressionWithTypeArgumentsInClassExtendsClause(name.parent)) {
                    meaning |= ts.SymbolFlags.Value;
                }
            }
            else {
                meaning = ts.SymbolFlags.Namespace;
            }

            meaning |= ts.SymbolFlags.Alias;
            const entityNameSymbol = ts.isEntityNameExpression(name) ? resolveEntityName(name, meaning) : undefined;
            if (entityNameSymbol) {
                return entityNameSymbol;
            }
        }

        if (name.parent.kind === ts.SyntaxKind.JSDocParameterTag) {
            return ts.getParameterSymbolFromJSDoc(name.parent as ts.JSDocParameterTag);
        }

        if (name.parent.kind === ts.SyntaxKind.TypeParameter && name.parent.parent.kind === ts.SyntaxKind.JSDocTemplateTag) {
            ts.Debug.assert(!ts.isInJSFile(name)); // Otherwise `isDeclarationName` would have been true.
            const typeParameter = ts.getTypeParameterFromJsDoc(name.parent as ts.TypeParameterDeclaration & { parent: ts.JSDocTemplateTag });
            return typeParameter && typeParameter.symbol;
        }

        if (ts.isExpressionNode(name)) {
            if (ts.nodeIsMissing(name)) {
                // Missing entity name.
                return undefined;
            }

            const isJSDoc = ts.findAncestor(name, ts.or(ts.isJSDocLinkLike, ts.isJSDocNameReference, ts.isJSDocMemberName));
            const meaning = isJSDoc ? ts.SymbolFlags.Type | ts.SymbolFlags.Namespace | ts.SymbolFlags.Value : ts.SymbolFlags.Value;
            if (name.kind === ts.SyntaxKind.Identifier) {
                if (ts.isJSXTagName(name) && isJsxIntrinsicIdentifier(name)) {
                    const symbol = getIntrinsicTagSymbol(name.parent as ts.JsxOpeningLikeElement);
                    return symbol === unknownSymbol ? undefined : symbol;
                }
                const result = resolveEntityName(name, meaning, /*ignoreErrors*/ false, /* dontResolveAlias */ true, ts.getHostSignatureFromJSDoc(name));
                if (!result && isJSDoc) {
                    const container = ts.findAncestor(name, ts.or(ts.isClassLike, ts.isInterfaceDeclaration));
                    if (container) {
                        return resolveJSDocMemberName(name, /*ignoreErrors*/ false, getSymbolOfNode(container));
                    }
                }
                if (result && isJSDoc) {
                    const container = ts.getJSDocHost(name);
                    if (container && ts.isEnumMember(container) && container === result.valueDeclaration) {
                        return resolveEntityName(name, meaning, /*ignoreErrors*/ true, /* dontResolveAlias */ true, ts.getSourceFileOfNode(container)) || result;
                    }
                }
                return result;
            }
            else if (ts.isPrivateIdentifier(name)) {
                return getSymbolForPrivateIdentifierExpression(name);
            }
            else if (name.kind === ts.SyntaxKind.PropertyAccessExpression || name.kind === ts.SyntaxKind.QualifiedName) {
                const links = getNodeLinks(name);
                if (links.resolvedSymbol) {
                    return links.resolvedSymbol;
                }

                if (name.kind === ts.SyntaxKind.PropertyAccessExpression) {
                    checkPropertyAccessExpression(name, CheckMode.Normal);
                    if (!links.resolvedSymbol) {
                        const expressionType = checkExpressionCached(name.expression);
                        const infos = getApplicableIndexInfos(expressionType, getLiteralTypeFromPropertyName(name.name));
                        if (infos.length && (expressionType as ts.ObjectType).members) {
                            const resolved = resolveStructuredTypeMembers(expressionType as ts.ObjectType);
                            const symbol = resolved.members.get(ts.InternalSymbolName.Index);
                            if (infos === getIndexInfosOfType(expressionType)) {
                                links.resolvedSymbol = symbol;
                            }
                            else if (symbol) {
                                const symbolLinks = getSymbolLinks(symbol);
                                const declarationList = ts.mapDefined(infos, i => i.declaration);
                                const nodeListId = ts.map(declarationList, getNodeId).join(",");
                                if (!symbolLinks.filteredIndexSymbolCache) {
                                    symbolLinks.filteredIndexSymbolCache = new ts.Map();
                                }
                                if (symbolLinks.filteredIndexSymbolCache.has(nodeListId)) {
                                    links.resolvedSymbol = symbolLinks.filteredIndexSymbolCache.get(nodeListId)!;
                                }
                                else {
                                    const copy = createSymbol(ts.SymbolFlags.Signature, ts.InternalSymbolName.Index);
                                    copy.declarations = ts.mapDefined(infos, i => i.declaration);
                                    copy.parent = expressionType.aliasSymbol ? expressionType.aliasSymbol : expressionType.symbol ? expressionType.symbol : getSymbolAtLocation(copy.declarations[0].parent);
                                    symbolLinks.filteredIndexSymbolCache.set(nodeListId, copy);
                                    links.resolvedSymbol = symbolLinks.filteredIndexSymbolCache.get(nodeListId)!;
                                }
                            }
                        }
                    }
                }
                else {
                    checkQualifiedName(name, CheckMode.Normal);
                }
                if (!links.resolvedSymbol && isJSDoc && ts.isQualifiedName(name)) {
                    return resolveJSDocMemberName(name);
                }
                return links.resolvedSymbol;
            }
            else if (ts.isJSDocMemberName(name)) {
                return resolveJSDocMemberName(name);
            }
        }
        else if (isTypeReferenceIdentifier(name as ts.EntityName)) {
            const meaning = name.parent.kind === ts.SyntaxKind.TypeReference ? ts.SymbolFlags.Type : ts.SymbolFlags.Namespace;
            const symbol = resolveEntityName(name as ts.EntityName, meaning, /*ignoreErrors*/ false, /*dontResolveAlias*/ true);
            return symbol && symbol !== unknownSymbol ? symbol : getUnresolvedSymbolForEntityName(name as ts.EntityName);
        }
        if (name.parent.kind === ts.SyntaxKind.TypePredicate) {
            return resolveEntityName(name as ts.Identifier, /*meaning*/ ts.SymbolFlags.FunctionScopedVariable);
        }

        return undefined;
    }

    /**
     * Recursively resolve entity names and jsdoc instance references:
     * 1. K#m as K.prototype.m for a class (or other value) K
     * 2. K.m as K.prototype.m
     * 3. I.m as I.m for a type I, or any other I.m that fails to resolve in (1) or (2)
     *
     * For unqualified names, a container K may be provided as a second argument.
     */
    function resolveJSDocMemberName(name: ts.EntityName | ts.JSDocMemberName, ignoreErrors?: boolean, container?: ts.Symbol): ts.Symbol | undefined {
        if (ts.isEntityName(name)) {
            // resolve static values first
            const meaning = ts.SymbolFlags.Type | ts.SymbolFlags.Namespace | ts.SymbolFlags.Value;
            let symbol = resolveEntityName(name, meaning, ignoreErrors, /*dontResolveAlias*/ true, ts.getHostSignatureFromJSDoc(name));
            if (!symbol && ts.isIdentifier(name) && container) {
                symbol = getMergedSymbol(getSymbol(getExportsOfSymbol(container), name.escapedText, meaning));
            }
            if (symbol) {
                return symbol;
            }
        }
        const left = ts.isIdentifier(name) ? container : resolveJSDocMemberName(name.left, ignoreErrors, container);
        const right = ts.isIdentifier(name) ? name.escapedText : name.right.escapedText;
        if (left) {
            const proto = left.flags & ts.SymbolFlags.Value && getPropertyOfType(getTypeOfSymbol(left), "prototype" as ts.__String);
            const t = proto ? getTypeOfSymbol(proto) : getDeclaredTypeOfSymbol(left);
            return getPropertyOfType(t, right);
        }
    }

    function getSymbolAtLocation(node: ts.Node, ignoreErrors?: boolean): ts.Symbol | undefined {
        if (node.kind === ts.SyntaxKind.SourceFile) {
            return ts.isExternalModule(node as ts.SourceFile) ? getMergedSymbol(node.symbol) : undefined;
        }
        const { parent } = node;
        const grandParent = parent.parent;

        if (node.flags & ts.NodeFlags.InWithStatement) {
            // We cannot answer semantic questions within a with block, do not proceed any further
            return undefined;
        }

        if (isDeclarationNameOrImportPropertyName(node)) {
            // This is a declaration, call getSymbolOfNode
            const parentSymbol = getSymbolOfNode(parent)!;
            return ts.isImportOrExportSpecifier(node.parent) && node.parent.propertyName === node
                ? getImmediateAliasedSymbol(parentSymbol)
                : parentSymbol;
        }
        else if (ts.isLiteralComputedPropertyDeclarationName(node)) {
            return getSymbolOfNode(parent.parent);
        }

        if (node.kind === ts.SyntaxKind.Identifier) {
            if (isInRightSideOfImportOrExportAssignment(node as ts.Identifier)) {
                return getSymbolOfNameOrPropertyAccessExpression(node as ts.Identifier);
            }
            else if (parent.kind === ts.SyntaxKind.BindingElement &&
                grandParent.kind === ts.SyntaxKind.ObjectBindingPattern &&
                node === (parent as ts.BindingElement).propertyName) {
                const typeOfPattern = getTypeOfNode(grandParent);
                const propertyDeclaration = getPropertyOfType(typeOfPattern, (node as ts.Identifier).escapedText);

                if (propertyDeclaration) {
                    return propertyDeclaration;
                }
            }
            else if (ts.isMetaProperty(parent) && parent.name === node) {
                if (parent.keywordToken === ts.SyntaxKind.NewKeyword && ts.idText(node as ts.Identifier) === "target") {
                    // `target` in `new.target`
                    return checkNewTargetMetaProperty(parent).symbol;
                }
                // The `meta` in `import.meta` could be given `getTypeOfNode(parent).symbol` (the `ImportMeta` interface symbol), but
                // we have a fake expression type made for other reasons already, whose transient `meta`
                // member should more exactly be the kind of (declarationless) symbol we want.
                // (See #44364 and #45031 for relevant implementation PRs)
                if (parent.keywordToken === ts.SyntaxKind.ImportKeyword && ts.idText(node as ts.Identifier) === "meta") {
                    return getGlobalImportMetaExpressionType().members!.get("meta" as ts.__String);
                }
                // no other meta properties are valid syntax, thus no others should have symbols
                return undefined;
            }
        }

        switch (node.kind) {
            case ts.SyntaxKind.Identifier:
            case ts.SyntaxKind.PrivateIdentifier:
            case ts.SyntaxKind.PropertyAccessExpression:
            case ts.SyntaxKind.QualifiedName:
                if (!ts.isThisInTypeQuery(node)) {
                    return getSymbolOfNameOrPropertyAccessExpression(node as ts.EntityName | ts.PrivateIdentifier | ts.PropertyAccessExpression);
                }
                // falls through

            case ts.SyntaxKind.ThisKeyword:
                const container = ts.getThisContainer(node, /*includeArrowFunctions*/ false);
                if (ts.isFunctionLike(container)) {
                    const sig = getSignatureFromDeclaration(container);
                    if (sig.thisParameter) {
                        return sig.thisParameter;
                    }
                }
                if (ts.isInExpressionContext(node)) {
                    return checkExpression(node as ts.Expression).symbol;
                }
                // falls through

            case ts.SyntaxKind.ThisType:
                return getTypeFromThisTypeNode(node as ts.ThisExpression | ts.ThisTypeNode).symbol;

            case ts.SyntaxKind.SuperKeyword:
                return checkExpression(node as ts.Expression).symbol;

            case ts.SyntaxKind.ConstructorKeyword:
                // constructor keyword for an overload, should take us to the definition if it exist
                const constructorDeclaration = node.parent;
                if (constructorDeclaration && constructorDeclaration.kind === ts.SyntaxKind.Constructor) {
                    return (constructorDeclaration.parent as ts.ClassDeclaration).symbol;
                }
                return undefined;

            case ts.SyntaxKind.StringLiteral:
            case ts.SyntaxKind.NoSubstitutionTemplateLiteral:
                // 1). import x = require("./mo/*gotToDefinitionHere*/d")
                // 2). External module name in an import declaration
                // 3). Dynamic import call or require in javascript
                // 4). type A = import("./f/*gotToDefinitionHere*/oo")
                if ((ts.isExternalModuleImportEqualsDeclaration(node.parent.parent) && ts.getExternalModuleImportEqualsDeclarationExpression(node.parent.parent) === node) ||
                    ((node.parent.kind === ts.SyntaxKind.ImportDeclaration || node.parent.kind === ts.SyntaxKind.ExportDeclaration) && (node.parent as ts.ImportDeclaration).moduleSpecifier === node) ||
                    ((ts.isInJSFile(node) && ts.isRequireCall(node.parent, /*checkArgumentIsStringLiteralLike*/ false)) || ts.isImportCall(node.parent)) ||
                    (ts.isLiteralTypeNode(node.parent) && ts.isLiteralImportTypeNode(node.parent.parent) && node.parent.parent.argument === node.parent)
                ) {
                    return resolveExternalModuleName(node, node as ts.LiteralExpression, ignoreErrors);
                }
                if (ts.isCallExpression(parent) && ts.isBindableObjectDefinePropertyCall(parent) && parent.arguments[1] === node) {
                    return getSymbolOfNode(parent);
                }
                // falls through

            case ts.SyntaxKind.NumericLiteral:
                // index access
                const objectType = ts.isElementAccessExpression(parent)
                    ? parent.argumentExpression === node ? getTypeOfExpression(parent.expression) : undefined
                    : ts.isLiteralTypeNode(parent) && ts.isIndexedAccessTypeNode(grandParent)
                        ? getTypeFromTypeNode(grandParent.objectType)
                        : undefined;
                return objectType && getPropertyOfType(objectType, ts.escapeLeadingUnderscores((node as ts.StringLiteral | ts.NumericLiteral).text));

            case ts.SyntaxKind.DefaultKeyword:
            case ts.SyntaxKind.FunctionKeyword:
            case ts.SyntaxKind.EqualsGreaterThanToken:
            case ts.SyntaxKind.ClassKeyword:
                return getSymbolOfNode(node.parent);
            case ts.SyntaxKind.ImportType:
                return ts.isLiteralImportTypeNode(node) ? getSymbolAtLocation(node.argument.literal, ignoreErrors) : undefined;

            case ts.SyntaxKind.ExportKeyword:
                return ts.isExportAssignment(node.parent) ? ts.Debug.checkDefined(node.parent.symbol) : undefined;

            case ts.SyntaxKind.ImportKeyword:
            case ts.SyntaxKind.NewKeyword:
                return ts.isMetaProperty(node.parent) ? checkMetaPropertyKeyword(node.parent).symbol : undefined;
            case ts.SyntaxKind.MetaProperty:
                return checkExpression(node as ts.Expression).symbol;

            default:
                return undefined;
        }
    }

    function getIndexInfosAtLocation(node: ts.Node): readonly ts.IndexInfo[] | undefined {
        if (ts.isIdentifier(node) && ts.isPropertyAccessExpression(node.parent) && node.parent.name === node) {
            const keyType = getLiteralTypeFromPropertyName(node);
            const objectType = getTypeOfExpression(node.parent.expression);
            const objectTypes = objectType.flags & ts.TypeFlags.Union ? (objectType as ts.UnionType).types : [objectType];
            return ts.flatMap(objectTypes, t => ts.filter(getIndexInfosOfType(t), info => isApplicableIndexType(keyType, info.keyType)));
        }
        return undefined;
    }

    function getShorthandAssignmentValueSymbol(location: ts.Node | undefined): ts.Symbol | undefined {
        if (location && location.kind === ts.SyntaxKind.ShorthandPropertyAssignment) {
            return resolveEntityName((location as ts.ShorthandPropertyAssignment).name, ts.SymbolFlags.Value | ts.SymbolFlags.Alias);
        }
        return undefined;
    }

    /** Returns the target of an export specifier without following aliases */
    function getExportSpecifierLocalTargetSymbol(node: ts.ExportSpecifier | ts.Identifier): ts.Symbol | undefined {
        if (ts.isExportSpecifier(node)) {
            return node.parent.parent.moduleSpecifier ?
                getExternalModuleMember(node.parent.parent, node) :
                resolveEntityName(node.propertyName || node.name, ts.SymbolFlags.Value | ts.SymbolFlags.Type | ts.SymbolFlags.Namespace | ts.SymbolFlags.Alias);
        }
        else {
            return resolveEntityName(node, ts.SymbolFlags.Value | ts.SymbolFlags.Type | ts.SymbolFlags.Namespace | ts.SymbolFlags.Alias);
        }
    }

    function getTypeOfNode(node: ts.Node): ts.Type {
        if (ts.isSourceFile(node) && !ts.isExternalModule(node)) {
            return errorType;
        }

        if (node.flags & ts.NodeFlags.InWithStatement) {
            // We cannot answer semantic questions within a with block, do not proceed any further
            return errorType;
        }

        const classDecl = ts.tryGetClassImplementingOrExtendingExpressionWithTypeArguments(node);
        const classType = classDecl && getDeclaredTypeOfClassOrInterface(getSymbolOfNode(classDecl.class));
        if (ts.isPartOfTypeNode(node)) {
            const typeFromTypeNode = getTypeFromTypeNode(node as ts.TypeNode);
            return classType ? getTypeWithThisArgument(typeFromTypeNode, classType.thisType) : typeFromTypeNode;
        }

        if (ts.isExpressionNode(node)) {
            return getRegularTypeOfExpression(node as ts.Expression);
        }

        if (classType && !classDecl.isImplements) {
            // A SyntaxKind.ExpressionWithTypeArguments is considered a type node, except when it occurs in the
            // extends clause of a class. We handle that case here.
            const baseType = ts.firstOrUndefined(getBaseTypes(classType));
            return baseType ? getTypeWithThisArgument(baseType, classType.thisType) : errorType;
        }

        if (ts.isTypeDeclaration(node)) {
            // In this case, we call getSymbolOfNode instead of getSymbolAtLocation because it is a declaration
            const symbol = getSymbolOfNode(node);
            return getDeclaredTypeOfSymbol(symbol);
        }

        if (isTypeDeclarationName(node)) {
            const symbol = getSymbolAtLocation(node);
            return symbol ? getDeclaredTypeOfSymbol(symbol) : errorType;
        }

        if (ts.isDeclaration(node)) {
            // In this case, we call getSymbolOfNode instead of getSymbolAtLocation because it is a declaration
            const symbol = getSymbolOfNode(node);
            return symbol ? getTypeOfSymbol(symbol) : errorType;
        }

        if (isDeclarationNameOrImportPropertyName(node)) {
            const symbol = getSymbolAtLocation(node);
            if (symbol) {
                return getTypeOfSymbol(symbol);
            }
            return errorType;
        }

        if (ts.isBindingPattern(node)) {
            return getTypeForVariableLikeDeclaration(node.parent, /*includeOptionality*/ true, CheckMode.Normal) || errorType;
        }

        if (isInRightSideOfImportOrExportAssignment(node as ts.Identifier)) {
            const symbol = getSymbolAtLocation(node);
            if (symbol) {
                const declaredType = getDeclaredTypeOfSymbol(symbol);
                return !isErrorType(declaredType) ? declaredType : getTypeOfSymbol(symbol);
            }
        }

        if (ts.isMetaProperty(node.parent) && node.parent.keywordToken === node.kind) {
            return checkMetaPropertyKeyword(node.parent);
        }

        return errorType;
    }

    // Gets the type of object literal or array literal of destructuring assignment.
    // { a } from
    //     for ( { a } of elems) {
    //     }
    // [ a ] from
    //     [a] = [ some array ...]
    function getTypeOfAssignmentPattern(expr: ts.AssignmentPattern): ts.Type | undefined {
        ts.Debug.assert(expr.kind === ts.SyntaxKind.ObjectLiteralExpression || expr.kind === ts.SyntaxKind.ArrayLiteralExpression);
        // If this is from "for of"
        //     for ( { a } of elems) {
        //     }
        if (expr.parent.kind === ts.SyntaxKind.ForOfStatement) {
            const iteratedType = checkRightHandSideOfForOf(expr.parent as ts.ForOfStatement);
            return checkDestructuringAssignment(expr, iteratedType || errorType);
        }
        // If this is from "for" initializer
        //     for ({a } = elems[0];.....) { }
        if (expr.parent.kind === ts.SyntaxKind.BinaryExpression) {
            const iteratedType = getTypeOfExpression((expr.parent as ts.BinaryExpression).right);
            return checkDestructuringAssignment(expr, iteratedType || errorType);
        }
        // If this is from nested object binding pattern
        //     for ({ skills: { primary, secondary } } = multiRobot, i = 0; i < 1; i++) {
        if (expr.parent.kind === ts.SyntaxKind.PropertyAssignment) {
            const node = ts.cast(expr.parent.parent, ts.isObjectLiteralExpression);
            const typeOfParentObjectLiteral = getTypeOfAssignmentPattern(node) || errorType;
            const propertyIndex = ts.indexOfNode(node.properties, expr.parent);
            return checkObjectLiteralDestructuringPropertyAssignment(node, typeOfParentObjectLiteral, propertyIndex);
        }
        // Array literal assignment - array destructuring pattern
        const node = ts.cast(expr.parent, ts.isArrayLiteralExpression);
        //    [{ property1: p1, property2 }] = elems;
        const typeOfArrayLiteral = getTypeOfAssignmentPattern(node) || errorType;
        const elementType = checkIteratedTypeOrElementType(IterationUse.Destructuring, typeOfArrayLiteral, undefinedType, expr.parent) || errorType;
        return checkArrayLiteralDestructuringElementAssignment(node, typeOfArrayLiteral, node.elements.indexOf(expr), elementType);
    }

    // Gets the property symbol corresponding to the property in destructuring assignment
    // 'property1' from
    //     for ( { property1: a } of elems) {
    //     }
    // 'property1' at location 'a' from:
    //     [a] = [ property1, property2 ]
    function getPropertySymbolOfDestructuringAssignment(location: ts.Identifier) {
        // Get the type of the object or array literal and then look for property of given name in the type
        const typeOfObjectLiteral = getTypeOfAssignmentPattern(ts.cast(location.parent.parent, ts.isAssignmentPattern));
        return typeOfObjectLiteral && getPropertyOfType(typeOfObjectLiteral, location.escapedText);
    }

    function getRegularTypeOfExpression(expr: ts.Expression): ts.Type {
        if (ts.isRightSideOfQualifiedNameOrPropertyAccess(expr)) {
            expr = expr.parent as ts.Expression;
        }
        return getRegularTypeOfLiteralType(getTypeOfExpression(expr));
    }

    /**
     * Gets either the static or instance type of a class element, based on
     * whether the element is declared as "static".
     */
    function getParentTypeOfClassElement(node: ts.ClassElement) {
        const classSymbol = getSymbolOfNode(node.parent)!;
        return ts.isStatic(node)
            ? getTypeOfSymbol(classSymbol)
            : getDeclaredTypeOfSymbol(classSymbol);
    }

    function getClassElementPropertyKeyType(element: ts.ClassElement) {
        const name = element.name!;
        switch (name.kind) {
            case ts.SyntaxKind.Identifier:
                return getStringLiteralType(ts.idText(name));
            case ts.SyntaxKind.NumericLiteral:
            case ts.SyntaxKind.StringLiteral:
                return getStringLiteralType(name.text);
            case ts.SyntaxKind.ComputedPropertyName:
                const nameType = checkComputedPropertyName(name);
                return isTypeAssignableToKind(nameType, ts.TypeFlags.ESSymbolLike) ? nameType : stringType;
            default:
                return ts.Debug.fail("Unsupported property name.");
        }
    }

    // Return the list of properties of the given type, augmented with properties from Function
    // if the type has call or construct signatures
    function getAugmentedPropertiesOfType(type: ts.Type): ts.Symbol[] {
        type = getApparentType(type);
        const propsByName = ts.createSymbolTable(getPropertiesOfType(type));
        const functionType = getSignaturesOfType(type, ts.SignatureKind.Call).length ? globalCallableFunctionType :
            getSignaturesOfType(type, ts.SignatureKind.Construct).length ? globalNewableFunctionType :
            undefined;
        if (functionType) {
            ts.forEach(getPropertiesOfType(functionType), p => {
                if (!propsByName.has(p.escapedName)) {
                    propsByName.set(p.escapedName, p);
                }
            });
        }
        return getNamedMembers(propsByName);
    }

    function typeHasCallOrConstructSignatures(type: ts.Type): boolean {
        return ts.typeHasCallOrConstructSignatures(type, checker);
    }

    function getRootSymbols(symbol: ts.Symbol): readonly ts.Symbol[] {
        const roots = getImmediateRootSymbols(symbol);
        return roots ? ts.flatMap(roots, getRootSymbols) : [symbol];
    }
    function getImmediateRootSymbols(symbol: ts.Symbol): readonly ts.Symbol[] | undefined {
        if (ts.getCheckFlags(symbol) & ts.CheckFlags.Synthetic) {
            return ts.mapDefined(getSymbolLinks(symbol).containingType!.types, type => getPropertyOfType(type, symbol.escapedName));
        }
        else if (symbol.flags & ts.SymbolFlags.Transient) {
            const { leftSpread, rightSpread, syntheticOrigin } = symbol as ts.TransientSymbol;
            return leftSpread ? [leftSpread, rightSpread!]
                : syntheticOrigin ? [syntheticOrigin]
                : ts.singleElementArray(tryGetTarget(symbol));
        }
        return undefined;
    }
    function tryGetTarget(symbol: ts.Symbol): ts.Symbol | undefined {
        let target: ts.Symbol | undefined;
        let next: ts.Symbol | undefined = symbol;
        while (next = getSymbolLinks(next).target) {
            target = next;
        }
        return target;
    }

    // Emitter support

    function isArgumentsLocalBinding(nodeIn: ts.Identifier): boolean {
        // Note: does not handle isShorthandPropertyAssignment (and probably a few more)
        if (ts.isGeneratedIdentifier(nodeIn)) return false;
        const node = ts.getParseTreeNode(nodeIn, ts.isIdentifier);
        if (!node) return false;
        const parent = node.parent;
        if (!parent) return false;
        const isPropertyName = ((ts.isPropertyAccessExpression(parent)
                                 || ts.isPropertyAssignment(parent))
                                && parent.name === node);
        return !isPropertyName && getReferencedValueSymbol(node) === argumentsSymbol;
    }

    function moduleExportsSomeValue(moduleReferenceExpression: ts.Expression): boolean {
        let moduleSymbol = resolveExternalModuleName(moduleReferenceExpression.parent, moduleReferenceExpression);
        if (!moduleSymbol || ts.isShorthandAmbientModuleSymbol(moduleSymbol)) {
            // If the module is not found or is shorthand, assume that it may export a value.
            return true;
        }

        const hasExportAssignment = hasExportAssignmentSymbol(moduleSymbol);
        // if module has export assignment then 'resolveExternalModuleSymbol' will return resolved symbol for export assignment
        // otherwise it will return moduleSymbol itself
        moduleSymbol = resolveExternalModuleSymbol(moduleSymbol);

        const symbolLinks = getSymbolLinks(moduleSymbol);
        if (symbolLinks.exportsSomeValue === undefined) {
            // for export assignments - check if resolved symbol for RHS is itself a value
            // otherwise - check if at least one export is value
            symbolLinks.exportsSomeValue = hasExportAssignment
                ? !!(moduleSymbol.flags & ts.SymbolFlags.Value)
                : ts.forEachEntry(getExportsOfModule(moduleSymbol), isValue);
        }

        return symbolLinks.exportsSomeValue!;

        function isValue(s: ts.Symbol): boolean {
            s = resolveSymbol(s);
            return s && !!(getAllSymbolFlags(s) & ts.SymbolFlags.Value);
        }
    }

    function isNameOfModuleOrEnumDeclaration(node: ts.Identifier) {
        return ts.isModuleOrEnumDeclaration(node.parent) && node === node.parent.name;
    }

    // When resolved as an expression identifier, if the given node references an exported entity, return the declaration
    // node of the exported entity's container. Otherwise, return undefined.
    function getReferencedExportContainer(nodeIn: ts.Identifier, prefixLocals?: boolean): ts.SourceFile | ts.ModuleDeclaration | ts.EnumDeclaration | undefined {
        const node = ts.getParseTreeNode(nodeIn, ts.isIdentifier);
        if (node) {
            // When resolving the export container for the name of a module or enum
            // declaration, we need to start resolution at the declaration's container.
            // Otherwise, we could incorrectly resolve the export container as the
            // declaration if it contains an exported member with the same name.
            let symbol = getReferencedValueSymbol(node, /*startInDeclarationContainer*/ isNameOfModuleOrEnumDeclaration(node));
            if (symbol) {
                if (symbol.flags & ts.SymbolFlags.ExportValue) {
                    // If we reference an exported entity within the same module declaration, then whether
                    // we prefix depends on the kind of entity. SymbolFlags.ExportHasLocal encompasses all the
                    // kinds that we do NOT prefix.
                    const exportSymbol = getMergedSymbol(symbol.exportSymbol!);
                    if (!prefixLocals && exportSymbol.flags & ts.SymbolFlags.ExportHasLocal && !(exportSymbol.flags & ts.SymbolFlags.Variable)) {
                        return undefined;
                    }
                    symbol = exportSymbol;
                }
                const parentSymbol = getParentOfSymbol(symbol);
                if (parentSymbol) {
                    if (parentSymbol.flags & ts.SymbolFlags.ValueModule && parentSymbol.valueDeclaration?.kind === ts.SyntaxKind.SourceFile) {
                        const symbolFile = parentSymbol.valueDeclaration as ts.SourceFile;
                        const referenceFile = ts.getSourceFileOfNode(node);
                        // If `node` accesses an export and that export isn't in the same file, then symbol is a namespace export, so return undefined.
                        const symbolIsUmdExport = symbolFile !== referenceFile;
                        return symbolIsUmdExport ? undefined : symbolFile;
                    }
                    return ts.findAncestor(node.parent, (n): n is ts.ModuleDeclaration | ts.EnumDeclaration => ts.isModuleOrEnumDeclaration(n) && getSymbolOfNode(n) === parentSymbol);
                }
            }
        }
    }

    // When resolved as an expression identifier, if the given node references an import, return the declaration of
    // that import. Otherwise, return undefined.
    function getReferencedImportDeclaration(nodeIn: ts.Identifier): ts.Declaration | undefined {
        if (nodeIn.generatedImportReference) {
            return nodeIn.generatedImportReference;
        }
        const node = ts.getParseTreeNode(nodeIn, ts.isIdentifier);
        if (node) {
            const symbol = getReferencedValueOrAliasSymbol(node);

            // We should only get the declaration of an alias if there isn't a local value
            // declaration for the symbol
            if (isNonLocalAlias(symbol, /*excludes*/ ts.SymbolFlags.Value) && !getTypeOnlyAliasDeclaration(symbol, ts.SymbolFlags.Value)) {
                return getDeclarationOfAliasSymbol(symbol);
            }
        }

        return undefined;
    }

    function isSymbolOfDestructuredElementOfCatchBinding(symbol: ts.Symbol) {
        return symbol.valueDeclaration
            && ts.isBindingElement(symbol.valueDeclaration)
            && ts.walkUpBindingElementsAndPatterns(symbol.valueDeclaration).parent.kind === ts.SyntaxKind.CatchClause;
    }

    function isSymbolOfDeclarationWithCollidingName(symbol: ts.Symbol): boolean {
        if (symbol.flags & ts.SymbolFlags.BlockScoped && symbol.valueDeclaration && !ts.isSourceFile(symbol.valueDeclaration)) {
            const links = getSymbolLinks(symbol);
            if (links.isDeclarationWithCollidingName === undefined) {
                const container = ts.getEnclosingBlockScopeContainer(symbol.valueDeclaration);
                if (ts.isStatementWithLocals(container) || isSymbolOfDestructuredElementOfCatchBinding(symbol)) {
                    const nodeLinks = getNodeLinks(symbol.valueDeclaration);
                    if (resolveName(container.parent, symbol.escapedName, ts.SymbolFlags.Value, /*nameNotFoundMessage*/ undefined, /*nameArg*/ undefined, /*isUse*/ false)) {
                        // redeclaration - always should be renamed
                        links.isDeclarationWithCollidingName = true;
                    }
                    else if (nodeLinks.flags & ts.NodeCheckFlags.CapturedBlockScopedBinding) {
                        // binding is captured in the function
                        // should be renamed if:
                        // - binding is not top level - top level bindings never collide with anything
                        // AND
                        //   - binding is not declared in loop, should be renamed to avoid name reuse across siblings
                        //     let a, b
                        //     { let x = 1; a = () => x; }
                        //     { let x = 100; b = () => x; }
                        //     console.log(a()); // should print '1'
                        //     console.log(b()); // should print '100'
                        //     OR
                        //   - binding is declared inside loop but not in inside initializer of iteration statement or directly inside loop body
                        //     * variables from initializer are passed to rewritten loop body as parameters so they are not captured directly
                        //     * variables that are declared immediately in loop body will become top level variable after loop is rewritten and thus
                        //       they will not collide with anything
                        const isDeclaredInLoop = nodeLinks.flags & ts.NodeCheckFlags.BlockScopedBindingInLoop;
                        const inLoopInitializer = ts.isIterationStatement(container, /*lookInLabeledStatements*/ false);
                        const inLoopBodyBlock = container.kind === ts.SyntaxKind.Block && ts.isIterationStatement(container.parent, /*lookInLabeledStatements*/ false);

                        links.isDeclarationWithCollidingName = !ts.isBlockScopedContainerTopLevel(container) && (!isDeclaredInLoop || (!inLoopInitializer && !inLoopBodyBlock));
                    }
                    else {
                        links.isDeclarationWithCollidingName = false;
                    }
                }
            }
            return links.isDeclarationWithCollidingName!;
        }
        return false;
    }

    // When resolved as an expression identifier, if the given node references a nested block scoped entity with
    // a name that either hides an existing name or might hide it when compiled downlevel,
    // return the declaration of that entity. Otherwise, return undefined.
    function getReferencedDeclarationWithCollidingName(nodeIn: ts.Identifier): ts.Declaration | undefined {
        if (!ts.isGeneratedIdentifier(nodeIn)) {
            const node = ts.getParseTreeNode(nodeIn, ts.isIdentifier);
            if (node) {
                const symbol = getReferencedValueSymbol(node);
                if (symbol && isSymbolOfDeclarationWithCollidingName(symbol)) {
                    return symbol.valueDeclaration;
                }
            }
        }

        return undefined;
    }

    // Return true if the given node is a declaration of a nested block scoped entity with a name that either hides an
    // existing name or might hide a name when compiled downlevel
    function isDeclarationWithCollidingName(nodeIn: ts.Declaration): boolean {
        const node = ts.getParseTreeNode(nodeIn, ts.isDeclaration);
        if (node) {
            const symbol = getSymbolOfNode(node);
            if (symbol) {
                return isSymbolOfDeclarationWithCollidingName(symbol);
            }
        }

        return false;
    }

    function isValueAliasDeclaration(node: ts.Node): boolean {
        switch (node.kind) {
            case ts.SyntaxKind.ImportEqualsDeclaration:
                return isAliasResolvedToValue(getSymbolOfNode(node));
            case ts.SyntaxKind.ImportClause:
            case ts.SyntaxKind.NamespaceImport:
            case ts.SyntaxKind.ImportSpecifier:
            case ts.SyntaxKind.ExportSpecifier:
                const symbol = getSymbolOfNode(node);
                return !!symbol && isAliasResolvedToValue(symbol) && !getTypeOnlyAliasDeclaration(symbol, ts.SymbolFlags.Value);
            case ts.SyntaxKind.ExportDeclaration:
                const exportClause = (node as ts.ExportDeclaration).exportClause;
                return !!exportClause && (
                    ts.isNamespaceExport(exportClause) ||
                    ts.some(exportClause.elements, isValueAliasDeclaration)
                );
            case ts.SyntaxKind.ExportAssignment:
                return (node as ts.ExportAssignment).expression && (node as ts.ExportAssignment).expression.kind === ts.SyntaxKind.Identifier ?
                    isAliasResolvedToValue(getSymbolOfNode(node)) :
                    true;
        }
        return false;
    }

    function isTopLevelValueImportEqualsWithEntityName(nodeIn: ts.ImportEqualsDeclaration): boolean {
        const node = ts.getParseTreeNode(nodeIn, ts.isImportEqualsDeclaration);
        if (node === undefined || node.parent.kind !== ts.SyntaxKind.SourceFile || !ts.isInternalModuleImportEqualsDeclaration(node)) {
            // parent is not source file or it is not reference to internal module
            return false;
        }

        const isValue = isAliasResolvedToValue(getSymbolOfNode(node));
        return isValue && node.moduleReference && !ts.nodeIsMissing(node.moduleReference);
    }

    function isAliasResolvedToValue(symbol: ts.Symbol | undefined): boolean {
        if (!symbol) {
            return false;
        }
        const target = getExportSymbolOfValueSymbolIfExported(resolveAlias(symbol));
        if (target === unknownSymbol) {
            return true;
        }
        // const enums and modules that contain only const enums are not considered values from the emit perspective
        // unless 'preserveConstEnums' option is set to true
        return !!((getAllSymbolFlags(target) ?? -1) & ts.SymbolFlags.Value) &&
            (ts.shouldPreserveConstEnums(compilerOptions) || !isConstEnumOrConstEnumOnlyModule(target));
    }

    function isConstEnumOrConstEnumOnlyModule(s: ts.Symbol): boolean {
        return isConstEnumSymbol(s) || !!s.constEnumOnlyModule;
    }

    function isReferencedAliasDeclaration(node: ts.Node, checkChildren?: boolean): boolean {
        if (isAliasSymbolDeclaration(node)) {
            const symbol = getSymbolOfNode(node);
            const links = symbol && getSymbolLinks(symbol);
            if (links?.referenced) {
                return true;
            }
            const target = getSymbolLinks(symbol!).aliasTarget; // TODO: GH#18217
            if (target && ts.getEffectiveModifierFlags(node) & ts.ModifierFlags.Export &&
                getAllSymbolFlags(target) & ts.SymbolFlags.Value &&
                (ts.shouldPreserveConstEnums(compilerOptions) || !isConstEnumOrConstEnumOnlyModule(target))) {
                // An `export import ... =` of a value symbol is always considered referenced
                return true;
            }
        }

        if (checkChildren) {
            return !!ts.forEachChild(node, node => isReferencedAliasDeclaration(node, checkChildren));
        }
        return false;
    }

    function isImplementationOfOverload(node: ts.SignatureDeclaration) {
        if (ts.nodeIsPresent((node as ts.FunctionLikeDeclaration).body)) {
            if (ts.isGetAccessor(node) || ts.isSetAccessor(node)) return false; // Get or set accessors can never be overload implementations, but can have up to 2 signatures
            const symbol = getSymbolOfNode(node);
            const signaturesOfSymbol = getSignaturesOfSymbol(symbol);
            // If this function body corresponds to function with multiple signature, it is implementation of overload
            // e.g.: function foo(a: string): string;
            //       function foo(a: number): number;
            //       function foo(a: any) { // This is implementation of the overloads
            //           return a;
            //       }
            return signaturesOfSymbol.length > 1 ||
                // If there is single signature for the symbol, it is overload if that signature isn't coming from the node
                // e.g.: function foo(a: string): string;
                //       function foo(a: any) { // This is implementation of the overloads
                //           return a;
                //       }
                (signaturesOfSymbol.length === 1 && signaturesOfSymbol[0].declaration !== node);
        }
        return false;
    }

    function isRequiredInitializedParameter(parameter: ts.ParameterDeclaration | ts.JSDocParameterTag): boolean {
        return !!strictNullChecks &&
            !isOptionalParameter(parameter) &&
            !ts.isJSDocParameterTag(parameter) &&
            !!parameter.initializer &&
            !ts.hasSyntacticModifier(parameter, ts.ModifierFlags.ParameterPropertyModifier);
    }

    function isOptionalUninitializedParameterProperty(parameter: ts.ParameterDeclaration) {
        return strictNullChecks &&
            isOptionalParameter(parameter) &&
            !parameter.initializer &&
            ts.hasSyntacticModifier(parameter, ts.ModifierFlags.ParameterPropertyModifier);
    }

    function isExpandoFunctionDeclaration(node: ts.Declaration): boolean {
        const declaration = ts.getParseTreeNode(node, ts.isFunctionDeclaration);
        if (!declaration) {
            return false;
        }
        const symbol = getSymbolOfNode(declaration);
        if (!symbol || !(symbol.flags & ts.SymbolFlags.Function)) {
            return false;
        }
        return !!ts.forEachEntry(getExportsOfSymbol(symbol), p => p.flags & ts.SymbolFlags.Value && p.valueDeclaration && ts.isPropertyAccessExpression(p.valueDeclaration));
    }

    function getPropertiesOfContainerFunction(node: ts.Declaration): ts.Symbol[] {
        const declaration = ts.getParseTreeNode(node, ts.isFunctionDeclaration);
        if (!declaration) {
            return ts.emptyArray;
        }
        const symbol = getSymbolOfNode(declaration);
        return symbol && getPropertiesOfType(getTypeOfSymbol(symbol)) || ts.emptyArray;
    }

    function getNodeCheckFlags(node: ts.Node): ts.NodeCheckFlags {
        const nodeId = node.id || 0;
        if (nodeId < 0 || nodeId >= nodeLinks.length) return 0;
        return nodeLinks[nodeId]?.flags || 0;
    }

    function getEnumMemberValue(node: ts.EnumMember): string | number | undefined {
        computeEnumMemberValues(node.parent);
        return getNodeLinks(node).enumMemberValue;
    }

    function canHaveConstantValue(node: ts.Node): node is ts.EnumMember | ts.AccessExpression {
        switch (node.kind) {
            case ts.SyntaxKind.EnumMember:
            case ts.SyntaxKind.PropertyAccessExpression:
            case ts.SyntaxKind.ElementAccessExpression:
                return true;
        }
        return false;
    }

    function getConstantValue(node: ts.EnumMember | ts.AccessExpression): string | number | undefined {
        if (node.kind === ts.SyntaxKind.EnumMember) {
            return getEnumMemberValue(node);
        }

        const symbol = getNodeLinks(node).resolvedSymbol;
        if (symbol && (symbol.flags & ts.SymbolFlags.EnumMember)) {
            // inline property\index accesses only for const enums
            const member = symbol.valueDeclaration as ts.EnumMember;
            if (ts.isEnumConst(member.parent)) {
                return getEnumMemberValue(member);
            }
        }

        return undefined;
    }

    function isFunctionType(type: ts.Type): boolean {
        return !!(type.flags & ts.TypeFlags.Object) && getSignaturesOfType(type, ts.SignatureKind.Call).length > 0;
    }

    function getTypeReferenceSerializationKind(typeNameIn: ts.EntityName, location?: ts.Node): ts.TypeReferenceSerializationKind {
        // ensure both `typeName` and `location` are parse tree nodes.
        const typeName = ts.getParseTreeNode(typeNameIn, ts.isEntityName);
        if (!typeName) return ts.TypeReferenceSerializationKind.Unknown;

        if (location) {
            location = ts.getParseTreeNode(location);
            if (!location) return ts.TypeReferenceSerializationKind.Unknown;
        }

        // Resolve the symbol as a value to ensure the type can be reached at runtime during emit.
        let isTypeOnly = false;
        if (ts.isQualifiedName(typeName)) {
            const rootValueSymbol = resolveEntityName(ts.getFirstIdentifier(typeName), ts.SymbolFlags.Value, /*ignoreErrors*/ true, /*dontResolveAlias*/ true, location);
            isTypeOnly = !!rootValueSymbol?.declarations?.every(ts.isTypeOnlyImportOrExportDeclaration);
        }
        const valueSymbol = resolveEntityName(typeName, ts.SymbolFlags.Value, /*ignoreErrors*/ true, /*dontResolveAlias*/ true, location);
        const resolvedSymbol = valueSymbol && valueSymbol.flags & ts.SymbolFlags.Alias ? resolveAlias(valueSymbol) : valueSymbol;
        isTypeOnly ||= !!valueSymbol?.declarations?.every(ts.isTypeOnlyImportOrExportDeclaration);

        // Resolve the symbol as a type so that we can provide a more useful hint for the type serializer.
        const typeSymbol = resolveEntityName(typeName, ts.SymbolFlags.Type, /*ignoreErrors*/ true, /*dontResolveAlias*/ false, location);
        if (resolvedSymbol && resolvedSymbol === typeSymbol) {
            const globalPromiseSymbol = getGlobalPromiseConstructorSymbol(/*reportErrors*/ false);
            if (globalPromiseSymbol && resolvedSymbol === globalPromiseSymbol) {
                return ts.TypeReferenceSerializationKind.Promise;
            }

            const constructorType = getTypeOfSymbol(resolvedSymbol);
            if (constructorType && isConstructorType(constructorType)) {
                return isTypeOnly ? ts.TypeReferenceSerializationKind.TypeWithCallSignature : ts.TypeReferenceSerializationKind.TypeWithConstructSignatureAndValue;
            }
        }

        // We might not be able to resolve type symbol so use unknown type in that case (eg error case)
        if (!typeSymbol) {
            return isTypeOnly ? ts.TypeReferenceSerializationKind.ObjectType : ts.TypeReferenceSerializationKind.Unknown;
        }
        const type = getDeclaredTypeOfSymbol(typeSymbol);
        if (isErrorType(type)) {
            return isTypeOnly ? ts.TypeReferenceSerializationKind.ObjectType : ts.TypeReferenceSerializationKind.Unknown;
        }
        else if (type.flags & ts.TypeFlags.AnyOrUnknown) {
            return ts.TypeReferenceSerializationKind.ObjectType;
        }
        else if (isTypeAssignableToKind(type, ts.TypeFlags.Void | ts.TypeFlags.Nullable | ts.TypeFlags.Never)) {
            return ts.TypeReferenceSerializationKind.VoidNullableOrNeverType;
        }
        else if (isTypeAssignableToKind(type, ts.TypeFlags.BooleanLike)) {
            return ts.TypeReferenceSerializationKind.BooleanType;
        }
        else if (isTypeAssignableToKind(type, ts.TypeFlags.NumberLike)) {
            return ts.TypeReferenceSerializationKind.NumberLikeType;
        }
        else if (isTypeAssignableToKind(type, ts.TypeFlags.BigIntLike)) {
            return ts.TypeReferenceSerializationKind.BigIntLikeType;
        }
        else if (isTypeAssignableToKind(type, ts.TypeFlags.StringLike)) {
            return ts.TypeReferenceSerializationKind.StringLikeType;
        }
        else if (isTupleType(type)) {
            return ts.TypeReferenceSerializationKind.ArrayLikeType;
        }
        else if (isTypeAssignableToKind(type, ts.TypeFlags.ESSymbolLike)) {
            return ts.TypeReferenceSerializationKind.ESSymbolType;
        }
        else if (isFunctionType(type)) {
            return ts.TypeReferenceSerializationKind.TypeWithCallSignature;
        }
        else if (isArrayType(type)) {
            return ts.TypeReferenceSerializationKind.ArrayLikeType;
        }
        else {
            return ts.TypeReferenceSerializationKind.ObjectType;
        }
    }

    function createTypeOfDeclaration(declarationIn: ts.AccessorDeclaration | ts.VariableLikeDeclaration | ts.PropertyAccessExpression, enclosingDeclaration: ts.Node, flags: ts.NodeBuilderFlags, tracker: ts.SymbolTracker, addUndefined?: boolean) {
        const declaration = ts.getParseTreeNode(declarationIn, ts.isVariableLikeOrAccessor);
        if (!declaration) {
            return ts.factory.createToken(ts.SyntaxKind.AnyKeyword) as ts.KeywordTypeNode;
        }
        // Get type of the symbol if this is the valid symbol otherwise get type at location
        const symbol = getSymbolOfNode(declaration);
        let type = symbol && !(symbol.flags & (ts.SymbolFlags.TypeLiteral | ts.SymbolFlags.Signature))
            ? getWidenedLiteralType(getTypeOfSymbol(symbol))
            : errorType;
        if (type.flags & ts.TypeFlags.UniqueESSymbol &&
            type.symbol === symbol) {
            flags |= ts.NodeBuilderFlags.AllowUniqueESSymbolType;
        }
        if (addUndefined) {
            type = getOptionalType(type);
        }
        return nodeBuilder.typeToTypeNode(type, enclosingDeclaration, flags | ts.NodeBuilderFlags.MultilineObjectLiterals, tracker);
    }

    function createReturnTypeOfSignatureDeclaration(signatureDeclarationIn: ts.SignatureDeclaration, enclosingDeclaration: ts.Node, flags: ts.NodeBuilderFlags, tracker: ts.SymbolTracker) {
        const signatureDeclaration = ts.getParseTreeNode(signatureDeclarationIn, ts.isFunctionLike);
        if (!signatureDeclaration) {
            return ts.factory.createToken(ts.SyntaxKind.AnyKeyword) as ts.KeywordTypeNode;
        }
        const signature = getSignatureFromDeclaration(signatureDeclaration);
        return nodeBuilder.typeToTypeNode(getReturnTypeOfSignature(signature), enclosingDeclaration, flags | ts.NodeBuilderFlags.MultilineObjectLiterals, tracker);
    }

    function createTypeOfExpression(exprIn: ts.Expression, enclosingDeclaration: ts.Node, flags: ts.NodeBuilderFlags, tracker: ts.SymbolTracker) {
        const expr = ts.getParseTreeNode(exprIn, ts.isExpression);
        if (!expr) {
            return ts.factory.createToken(ts.SyntaxKind.AnyKeyword) as ts.KeywordTypeNode;
        }
        const type = getWidenedType(getRegularTypeOfExpression(expr));
        return nodeBuilder.typeToTypeNode(type, enclosingDeclaration, flags | ts.NodeBuilderFlags.MultilineObjectLiterals, tracker);
    }

    function hasGlobalName(name: string): boolean {
        return globals.has(ts.escapeLeadingUnderscores(name));
    }

    function getReferencedValueSymbol(reference: ts.Identifier, startInDeclarationContainer?: boolean): ts.Symbol | undefined {
        const resolvedSymbol = getNodeLinks(reference).resolvedSymbol;
        if (resolvedSymbol) {
            return resolvedSymbol;
        }

        let location: ts.Node = reference;
        if (startInDeclarationContainer) {
            // When resolving the name of a declaration as a value, we need to start resolution
            // at a point outside of the declaration.
            const parent = reference.parent;
            if (ts.isDeclaration(parent) && reference === parent.name) {
                location = getDeclarationContainer(parent);
            }
        }

        return resolveName(location, reference.escapedText, ts.SymbolFlags.Value | ts.SymbolFlags.ExportValue | ts.SymbolFlags.Alias, /*nodeNotFoundMessage*/ undefined, /*nameArg*/ undefined, /*isUse*/ true);
    }

    /**
     * Get either a value-meaning symbol or an alias symbol.
     * Unlike `getReferencedValueSymbol`, if the cached resolved symbol is the unknown symbol,
     * we call `resolveName` to find a symbol.
     * This is because when caching the resolved symbol, we only consider value symbols, but here
     * we want to also get an alias symbol if one exists.
     */
    function getReferencedValueOrAliasSymbol(reference: ts.Identifier): ts.Symbol | undefined {
        const resolvedSymbol = getNodeLinks(reference).resolvedSymbol;
        if (resolvedSymbol && resolvedSymbol !== unknownSymbol) {
            return resolvedSymbol;
        }

        return resolveName(
            reference,
            reference.escapedText,
            ts.SymbolFlags.Value | ts.SymbolFlags.ExportValue | ts.SymbolFlags.Alias,
            /*nodeNotFoundMessage*/ undefined,
            /*nameArg*/ undefined,
            /*isUse*/ true,
            /*excludeGlobals*/ undefined,
            /*getSpellingSuggestions*/ undefined);
    }

    function getReferencedValueDeclaration(referenceIn: ts.Identifier): ts.Declaration | undefined {
        if (!ts.isGeneratedIdentifier(referenceIn)) {
            const reference = ts.getParseTreeNode(referenceIn, ts.isIdentifier);
            if (reference) {
                const symbol = getReferencedValueSymbol(reference);
                if (symbol) {
                    return getExportSymbolOfValueSymbolIfExported(symbol).valueDeclaration;
                }
            }
        }

        return undefined;
    }

    function isLiteralConstDeclaration(node: ts.VariableDeclaration | ts.PropertyDeclaration | ts.PropertySignature | ts.ParameterDeclaration): boolean {
        if (ts.isDeclarationReadonly(node) || ts.isVariableDeclaration(node) && ts.isVarConst(node)) {
            return isFreshLiteralType(getTypeOfSymbol(getSymbolOfNode(node)));
        }
        return false;
    }

    function literalTypeToNode(type: ts.FreshableType, enclosing: ts.Node, tracker: ts.SymbolTracker): ts.Expression {
        const enumResult = type.flags & ts.TypeFlags.EnumLiteral ? nodeBuilder.symbolToExpression(type.symbol, ts.SymbolFlags.Value, enclosing, /*flags*/ undefined, tracker)
            : type === trueType ? ts.factory.createTrue() : type === falseType && ts.factory.createFalse();
        if (enumResult) return enumResult;
        const literalValue = (type as ts.LiteralType).value;
        return typeof literalValue === "object" ? ts.factory.createBigIntLiteral(literalValue) :
            typeof literalValue === "number" ? ts.factory.createNumericLiteral(literalValue) :
            ts.factory.createStringLiteral(literalValue);
    }

    function createLiteralConstValue(node: ts.VariableDeclaration | ts.PropertyDeclaration | ts.PropertySignature | ts.ParameterDeclaration, tracker: ts.SymbolTracker) {
        const type = getTypeOfSymbol(getSymbolOfNode(node));
        return literalTypeToNode(type as ts.FreshableType, node, tracker);
    }

    function getJsxFactoryEntity(location: ts.Node): ts.EntityName | undefined {
        return location ? (getJsxNamespace(location), (ts.getSourceFileOfNode(location).localJsxFactory || _jsxFactoryEntity)) : _jsxFactoryEntity;
    }

    function getJsxFragmentFactoryEntity(location: ts.Node): ts.EntityName | undefined {
        if (location) {
            const file = ts.getSourceFileOfNode(location);
            if (file) {
                if (file.localJsxFragmentFactory) {
                    return file.localJsxFragmentFactory;
                }
                const jsxFragPragmas = file.pragmas.get("jsxfrag");
                const jsxFragPragma = ts.isArray(jsxFragPragmas) ? jsxFragPragmas[0] : jsxFragPragmas;
                if (jsxFragPragma) {
                    file.localJsxFragmentFactory = ts.parseIsolatedEntityName(jsxFragPragma.arguments.factory, languageVersion);
                    return file.localJsxFragmentFactory;
                }
            }
        }

        if (compilerOptions.jsxFragmentFactory) {
            return ts.parseIsolatedEntityName(compilerOptions.jsxFragmentFactory, languageVersion);
        }
    }

    function createResolver(): ts.EmitResolver {
        // this variable and functions that use it are deliberately moved here from the outer scope
        // to avoid scope pollution
        const resolvedTypeReferenceDirectives = host.getResolvedTypeReferenceDirectives();
        let fileToDirective: ts.ESMap<string, [specifier: string, mode: ts.SourceFile["impliedNodeFormat"] | undefined]>;
        if (resolvedTypeReferenceDirectives) {
            // populate reverse mapping: file path -> type reference directive that was resolved to this file
            fileToDirective = new ts.Map<string, [specifier: string, mode: ts.SourceFile["impliedNodeFormat"] | undefined]>();
            resolvedTypeReferenceDirectives.forEach((resolvedDirective, key, mode) => {
                if (!resolvedDirective || !resolvedDirective.resolvedFileName) {
                    return;
                }
                const file = host.getSourceFile(resolvedDirective.resolvedFileName);
                if (file) {
                    // Add the transitive closure of path references loaded by this file (as long as they are not)
                    // part of an existing type reference.
                    addReferencedFilesToTypeDirective(file, key, mode);
                }
            });
        }

        return {
            getReferencedExportContainer,
            getReferencedImportDeclaration,
            getReferencedDeclarationWithCollidingName,
            isDeclarationWithCollidingName,
            isValueAliasDeclaration: nodeIn => {
                const node = ts.getParseTreeNode(nodeIn);
                // Synthesized nodes are always treated like values.
                return node ? isValueAliasDeclaration(node) : true;
            },
            hasGlobalName,
            isReferencedAliasDeclaration: (nodeIn, checkChildren?) => {
                const node = ts.getParseTreeNode(nodeIn);
                // Synthesized nodes are always treated as referenced.
                return node ? isReferencedAliasDeclaration(node, checkChildren) : true;
            },
            getNodeCheckFlags: nodeIn => {
                const node = ts.getParseTreeNode(nodeIn);
                return node ? getNodeCheckFlags(node) : 0;
            },
            isTopLevelValueImportEqualsWithEntityName,
            isDeclarationVisible,
            isImplementationOfOverload,
            isRequiredInitializedParameter,
            isOptionalUninitializedParameterProperty,
            isExpandoFunctionDeclaration,
            getPropertiesOfContainerFunction,
            createTypeOfDeclaration,
            createReturnTypeOfSignatureDeclaration,
            createTypeOfExpression,
            createLiteralConstValue,
            isSymbolAccessible,
            isEntityNameVisible,
            getConstantValue: nodeIn => {
                const node = ts.getParseTreeNode(nodeIn, canHaveConstantValue);
                return node ? getConstantValue(node) : undefined;
            },
            collectLinkedAliases,
            getReferencedValueDeclaration,
            getTypeReferenceSerializationKind,
            isOptionalParameter,
            moduleExportsSomeValue,
            isArgumentsLocalBinding,
            getExternalModuleFileFromDeclaration: nodeIn => {
                const node = ts.getParseTreeNode(nodeIn, ts.hasPossibleExternalModuleReference);
                return node && getExternalModuleFileFromDeclaration(node);
            },
            getTypeReferenceDirectivesForEntityName,
            getTypeReferenceDirectivesForSymbol,
            isLiteralConstDeclaration,
            isLateBound: (nodeIn: ts.Declaration): nodeIn is ts.LateBoundDeclaration => {
                const node = ts.getParseTreeNode(nodeIn, ts.isDeclaration);
                const symbol = node && getSymbolOfNode(node);
                return !!(symbol && ts.getCheckFlags(symbol) & ts.CheckFlags.Late);
            },
            getJsxFactoryEntity,
            getJsxFragmentFactoryEntity,
            getAllAccessorDeclarations(accessor: ts.AccessorDeclaration): ts.AllAccessorDeclarations {
                accessor = ts.getParseTreeNode(accessor, ts.isGetOrSetAccessorDeclaration)!; // TODO: GH#18217
                const otherKind = accessor.kind === ts.SyntaxKind.SetAccessor ? ts.SyntaxKind.GetAccessor : ts.SyntaxKind.SetAccessor;
                const otherAccessor = ts.getDeclarationOfKind<ts.AccessorDeclaration>(getSymbolOfNode(accessor), otherKind);
                const firstAccessor = otherAccessor && (otherAccessor.pos < accessor.pos) ? otherAccessor : accessor;
                const secondAccessor = otherAccessor && (otherAccessor.pos < accessor.pos) ? accessor : otherAccessor;
                const setAccessor = accessor.kind === ts.SyntaxKind.SetAccessor ? accessor : otherAccessor as ts.SetAccessorDeclaration;
                const getAccessor = accessor.kind === ts.SyntaxKind.GetAccessor ? accessor : otherAccessor as ts.GetAccessorDeclaration;
                return {
                    firstAccessor,
                    secondAccessor,
                    setAccessor,
                    getAccessor
                };
            },
            getSymbolOfExternalModuleSpecifier: moduleName => resolveExternalModuleNameWorker(moduleName, moduleName, /*moduleNotFoundError*/ undefined),
            isBindingCapturedByNode: (node, decl) => {
                const parseNode = ts.getParseTreeNode(node);
                const parseDecl = ts.getParseTreeNode(decl);
                return !!parseNode && !!parseDecl && (ts.isVariableDeclaration(parseDecl) || ts.isBindingElement(parseDecl)) && isBindingCapturedByNode(parseNode, parseDecl);
            },
            getDeclarationStatementsForSourceFile: (node, flags, tracker, bundled) => {
                const n = ts.getParseTreeNode(node) as ts.SourceFile;
                ts.Debug.assert(n && n.kind === ts.SyntaxKind.SourceFile, "Non-sourcefile node passed into getDeclarationsForSourceFile");
                const sym = getSymbolOfNode(node);
                if (!sym) {
                    return !node.locals ? [] : nodeBuilder.symbolTableToDeclarationStatements(node.locals, node, flags, tracker, bundled);
                }
                return !sym.exports ? [] : nodeBuilder.symbolTableToDeclarationStatements(sym.exports, node, flags, tracker, bundled);
            },
            isImportRequiredByAugmentation,
        };

        function isImportRequiredByAugmentation(node: ts.ImportDeclaration) {
            const file = ts.getSourceFileOfNode(node);
            if (!file.symbol) return false;
            const importTarget = getExternalModuleFileFromDeclaration(node);
            if (!importTarget) return false;
            if (importTarget === file) return false;
            const exports = getExportsOfModule(file.symbol);
            for (const s of ts.arrayFrom(exports.values())) {
                if (s.mergeId) {
                    const merged = getMergedSymbol(s);
                    if (merged.declarations) {
                        for (const d of merged.declarations) {
                            const declFile = ts.getSourceFileOfNode(d);
                            if (declFile === importTarget) {
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        }

        function isInHeritageClause(node: ts.PropertyAccessEntityNameExpression) {
            return node.parent && node.parent.kind === ts.SyntaxKind.ExpressionWithTypeArguments && node.parent.parent && node.parent.parent.kind === ts.SyntaxKind.HeritageClause;
        }

        // defined here to avoid outer scope pollution
        function getTypeReferenceDirectivesForEntityName(node: ts.EntityNameOrEntityNameExpression): [specifier: string, mode: ts.SourceFile["impliedNodeFormat"] | undefined][] | undefined {
            // program does not have any files with type reference directives - bail out
            if (!fileToDirective) {
                return undefined;
            }
            // computed property name should use node as value
            // property access can only be used as values, or types when within an expression with type arguments inside a heritage clause
            // qualified names can only be used as types\namespaces
            // identifiers are treated as values only if they appear in type queries
            let meaning;
            if (node.parent.kind === ts.SyntaxKind.ComputedPropertyName) {
                meaning = ts.SymbolFlags.Value | ts.SymbolFlags.ExportValue;
            }
            else {
                meaning = ts.SymbolFlags.Type | ts.SymbolFlags.Namespace;
                if ((node.kind === ts.SyntaxKind.Identifier && isInTypeQuery(node)) || (node.kind === ts.SyntaxKind.PropertyAccessExpression && !isInHeritageClause(node))) {
                    meaning = ts.SymbolFlags.Value | ts.SymbolFlags.ExportValue;
                }
            }

            const symbol = resolveEntityName(node, meaning, /*ignoreErrors*/ true);
            return symbol && symbol !== unknownSymbol ? getTypeReferenceDirectivesForSymbol(symbol, meaning) : undefined;
        }

        // defined here to avoid outer scope pollution
        function getTypeReferenceDirectivesForSymbol(symbol: ts.Symbol, meaning?: ts.SymbolFlags): [specifier: string, mode: ts.SourceFile["impliedNodeFormat"] | undefined][] | undefined {
            // program does not have any files with type reference directives - bail out
            if (!fileToDirective || !isSymbolFromTypeDeclarationFile(symbol)) {
                return undefined;
            }
            // check what declarations in the symbol can contribute to the target meaning
            let typeReferenceDirectives: [specifier: string, mode: ts.SourceFile["impliedNodeFormat"] | undefined][] | undefined;
            for (const decl of symbol.declarations!) {
                // check meaning of the local symbol to see if declaration needs to be analyzed further
                if (decl.symbol && decl.symbol.flags & meaning!) {
                    const file = ts.getSourceFileOfNode(decl);
                    const typeReferenceDirective = fileToDirective.get(file.path);
                    if (typeReferenceDirective) {
                        (typeReferenceDirectives || (typeReferenceDirectives = [])).push(typeReferenceDirective);
                    }
                    else {
                        // found at least one entry that does not originate from type reference directive
                        return undefined;
                    }
                }
            }
            return typeReferenceDirectives;
        }

        function isSymbolFromTypeDeclarationFile(symbol: ts.Symbol): boolean {
            // bail out if symbol does not have associated declarations (i.e. this is transient symbol created for property in binding pattern)
            if (!symbol.declarations) {
                return false;
            }

            // walk the parent chain for symbols to make sure that top level parent symbol is in the global scope
            // external modules cannot define or contribute to type declaration files
            let current = symbol;
            while (true) {
                const parent = getParentOfSymbol(current);
                if (parent) {
                    current = parent;
                }
                else {
                    break;
                }
            }

            if (current.valueDeclaration && current.valueDeclaration.kind === ts.SyntaxKind.SourceFile && current.flags & ts.SymbolFlags.ValueModule) {
                return false;
            }

            // check that at least one declaration of top level symbol originates from type declaration file
            for (const decl of symbol.declarations) {
                const file = ts.getSourceFileOfNode(decl);
                if (fileToDirective.has(file.path)) {
                    return true;
                }
            }
            return false;
        }

        function addReferencedFilesToTypeDirective(file: ts.SourceFile, key: string, mode: ts.SourceFile["impliedNodeFormat"] | undefined) {
            if (fileToDirective.has(file.path)) return;
            fileToDirective.set(file.path, [key, mode]);
            for (const { fileName, resolutionMode } of file.referencedFiles) {
                const resolvedFile = ts.resolveTripleslashReference(fileName, file.fileName);
                const referencedFile = host.getSourceFile(resolvedFile);
                if (referencedFile) {
                    addReferencedFilesToTypeDirective(referencedFile, key, resolutionMode || file.impliedNodeFormat);
                }
            }
        }
    }

    function getExternalModuleFileFromDeclaration(declaration: ts.AnyImportOrReExport | ts.ModuleDeclaration | ts.ImportTypeNode | ts.ImportCall): ts.SourceFile | undefined {
        const specifier = declaration.kind === ts.SyntaxKind.ModuleDeclaration ? ts.tryCast(declaration.name, ts.isStringLiteral) : ts.getExternalModuleName(declaration);
        const moduleSymbol = resolveExternalModuleNameWorker(specifier!, specifier!, /*moduleNotFoundError*/ undefined); // TODO: GH#18217
        if (!moduleSymbol) {
            return undefined;
        }
        return ts.getDeclarationOfKind(moduleSymbol, ts.SyntaxKind.SourceFile);
    }

    function initializeTypeChecker() {
        // Bind all source files and propagate errors
        for (const file of host.getSourceFiles()) {
            ts.bindSourceFile(file, compilerOptions);
        }

        amalgamatedDuplicates = new ts.Map();

        // Initialize global symbol table
        let augmentations: (readonly (ts.StringLiteral | ts.Identifier)[])[] | undefined;
        for (const file of host.getSourceFiles()) {
            if (file.redirectInfo) {
                continue;
            }
            if (!ts.isExternalOrCommonJsModule(file)) {
                // It is an error for a non-external-module (i.e. script) to declare its own `globalThis`.
                // We can't use `builtinGlobals` for this due to synthetic expando-namespace generation in JS files.
                const fileGlobalThisSymbol = file.locals!.get("globalThis" as ts.__String);
                if (fileGlobalThisSymbol?.declarations) {
                    for (const declaration of fileGlobalThisSymbol.declarations) {
                        diagnostics.add(ts.createDiagnosticForNode(declaration, ts.Diagnostics.Declaration_name_conflicts_with_built_in_global_identifier_0, "globalThis"));
                    }
                }
                mergeSymbolTable(globals, file.locals!);
            }
            if (file.jsGlobalAugmentations) {
                mergeSymbolTable(globals, file.jsGlobalAugmentations);
            }
            if (file.patternAmbientModules && file.patternAmbientModules.length) {
                patternAmbientModules = ts.concatenate(patternAmbientModules, file.patternAmbientModules);
            }
            if (file.moduleAugmentations.length) {
                (augmentations || (augmentations = [])).push(file.moduleAugmentations);
            }
            if (file.symbol && file.symbol.globalExports) {
                // Merge in UMD exports with first-in-wins semantics (see #9771)
                const source = file.symbol.globalExports;
                source.forEach((sourceSymbol, id) => {
                    if (!globals.has(id)) {
                        globals.set(id, sourceSymbol);
                    }
                });
            }
        }

        // We do global augmentations separately from module augmentations (and before creating global types) because they
        //  1. Affect global types. We won't have the correct global types until global augmentations are merged. Also,
        //  2. Module augmentation instantiation requires creating the type of a module, which, in turn, can require
        //       checking for an export or property on the module (if export=) which, in turn, can fall back to the
        //       apparent type of the module - either globalObjectType or globalFunctionType - which wouldn't exist if we
        //       did module augmentations prior to finalizing the global types.
        if (augmentations) {
            // merge _global_ module augmentations.
            // this needs to be done after global symbol table is initialized to make sure that all ambient modules are indexed
            for (const list of augmentations) {
                for (const augmentation of list) {
                    if (!ts.isGlobalScopeAugmentation(augmentation.parent as ts.ModuleDeclaration)) continue;
                    mergeModuleAugmentation(augmentation);
                }
            }
        }

        // Setup global builtins
        addToSymbolTable(globals, builtinGlobals, ts.Diagnostics.Declaration_name_conflicts_with_built_in_global_identifier_0);

        getSymbolLinks(undefinedSymbol).type = undefinedWideningType;
        getSymbolLinks(argumentsSymbol).type = getGlobalType("IArguments" as ts.__String, /*arity*/ 0, /*reportErrors*/ true);
        getSymbolLinks(unknownSymbol).type = errorType;
        getSymbolLinks(globalThisSymbol).type = createObjectType(ts.ObjectFlags.Anonymous, globalThisSymbol);

        // Initialize special types
        globalArrayType = getGlobalType("Array" as ts.__String, /*arity*/ 1, /*reportErrors*/ true);
        globalObjectType = getGlobalType("Object" as ts.__String, /*arity*/ 0, /*reportErrors*/ true);
        globalFunctionType = getGlobalType("Function" as ts.__String, /*arity*/ 0, /*reportErrors*/ true);
        globalCallableFunctionType = strictBindCallApply && getGlobalType("CallableFunction" as ts.__String, /*arity*/ 0, /*reportErrors*/ true) || globalFunctionType;
        globalNewableFunctionType = strictBindCallApply && getGlobalType("NewableFunction" as ts.__String, /*arity*/ 0, /*reportErrors*/ true) || globalFunctionType;
        globalStringType = getGlobalType("String" as ts.__String, /*arity*/ 0, /*reportErrors*/ true);
        globalNumberType = getGlobalType("Number" as ts.__String, /*arity*/ 0, /*reportErrors*/ true);
        globalBooleanType = getGlobalType("Boolean" as ts.__String, /*arity*/ 0, /*reportErrors*/ true);
        globalRegExpType = getGlobalType("RegExp" as ts.__String, /*arity*/ 0, /*reportErrors*/ true);
        anyArrayType = createArrayType(anyType);

        autoArrayType = createArrayType(autoType);
        if (autoArrayType === emptyObjectType) {
            // autoArrayType is used as a marker, so even if global Array type is not defined, it needs to be a unique type
            autoArrayType = createAnonymousType(undefined, emptySymbols, ts.emptyArray, ts.emptyArray, ts.emptyArray);
        }

        globalReadonlyArrayType = getGlobalTypeOrUndefined("ReadonlyArray" as ts.__String, /*arity*/ 1) as ts.GenericType || globalArrayType;
        anyReadonlyArrayType = globalReadonlyArrayType ? createTypeFromGenericGlobalType(globalReadonlyArrayType, [anyType]) : anyArrayType;
        globalThisType = getGlobalTypeOrUndefined("ThisType" as ts.__String, /*arity*/ 1) as ts.GenericType;

        if (augmentations) {
            // merge _nonglobal_ module augmentations.
            // this needs to be done after global symbol table is initialized to make sure that all ambient modules are indexed
            for (const list of augmentations) {
                for (const augmentation of list) {
                    if (ts.isGlobalScopeAugmentation(augmentation.parent as ts.ModuleDeclaration)) continue;
                    mergeModuleAugmentation(augmentation);
                }
            }
        }

        amalgamatedDuplicates.forEach(({ firstFile, secondFile, conflictingSymbols }) => {
            // If not many things conflict, issue individual errors
            if (conflictingSymbols.size < 8) {
                conflictingSymbols.forEach(({ isBlockScoped, firstFileLocations, secondFileLocations }, symbolName) => {
                    const message = isBlockScoped ? ts.Diagnostics.Cannot_redeclare_block_scoped_variable_0 : ts.Diagnostics.Duplicate_identifier_0;
                    for (const node of firstFileLocations) {
                        addDuplicateDeclarationError(node, message, symbolName, secondFileLocations);
                    }
                    for (const node of secondFileLocations) {
                        addDuplicateDeclarationError(node, message, symbolName, firstFileLocations);
                    }
                });
            }
            else {
                // Otherwise issue top-level error since the files appear very identical in terms of what they contain
                const list = ts.arrayFrom(conflictingSymbols.keys()).join(", ");
                diagnostics.add(ts.addRelatedInfo(
                    ts.createDiagnosticForNode(firstFile, ts.Diagnostics.Definitions_of_the_following_identifiers_conflict_with_those_in_another_file_Colon_0, list),
                    ts.createDiagnosticForNode(secondFile, ts.Diagnostics.Conflicts_are_in_this_file)
                ));
                diagnostics.add(ts.addRelatedInfo(
                    ts.createDiagnosticForNode(secondFile, ts.Diagnostics.Definitions_of_the_following_identifiers_conflict_with_those_in_another_file_Colon_0, list),
                    ts.createDiagnosticForNode(firstFile, ts.Diagnostics.Conflicts_are_in_this_file)
                ));
            }
        });
        amalgamatedDuplicates = undefined;
    }

    function checkExternalEmitHelpers(location: ts.Node, helpers: ts.ExternalEmitHelpers) {
        if ((requestedExternalEmitHelpers & helpers) !== helpers && compilerOptions.importHelpers) {
            const sourceFile = ts.getSourceFileOfNode(location);
            if (ts.isEffectiveExternalModule(sourceFile, compilerOptions) && !(location.flags & ts.NodeFlags.Ambient)) {
                const helpersModule = resolveHelpersModule(sourceFile, location);
                if (helpersModule !== unknownSymbol) {
                    const uncheckedHelpers = helpers & ~requestedExternalEmitHelpers;
                    for (let helper = ts.ExternalEmitHelpers.FirstEmitHelper; helper <= ts.ExternalEmitHelpers.LastEmitHelper; helper <<= 1) {
                        if (uncheckedHelpers & helper) {
                            const name = getHelperName(helper);
                            const symbol = getSymbol(helpersModule.exports!, ts.escapeLeadingUnderscores(name), ts.SymbolFlags.Value);
                            if (!symbol) {
                                error(location, ts.Diagnostics.This_syntax_requires_an_imported_helper_named_1_which_does_not_exist_in_0_Consider_upgrading_your_version_of_0, ts.externalHelpersModuleNameText, name);
                            }
                            else if (helper & ts.ExternalEmitHelpers.ClassPrivateFieldGet) {
                                if (!ts.some(getSignaturesOfSymbol(symbol), signature => getParameterCount(signature) > 3)) {
                                    error(location, ts.Diagnostics.This_syntax_requires_an_imported_helper_named_1_with_2_parameters_which_is_not_compatible_with_the_one_in_0_Consider_upgrading_your_version_of_0, ts.externalHelpersModuleNameText, name, 4);
                                }
                            }
                            else if (helper & ts.ExternalEmitHelpers.ClassPrivateFieldSet) {
                                if (!ts.some(getSignaturesOfSymbol(symbol), signature => getParameterCount(signature) > 4)) {
                                    error(location, ts.Diagnostics.This_syntax_requires_an_imported_helper_named_1_with_2_parameters_which_is_not_compatible_with_the_one_in_0_Consider_upgrading_your_version_of_0, ts.externalHelpersModuleNameText, name, 5);
                                }
                            }
                            else if (helper & ts.ExternalEmitHelpers.SpreadArray) {
                                if (!ts.some(getSignaturesOfSymbol(symbol), signature => getParameterCount(signature) > 2)) {
                                    error(location, ts.Diagnostics.This_syntax_requires_an_imported_helper_named_1_with_2_parameters_which_is_not_compatible_with_the_one_in_0_Consider_upgrading_your_version_of_0, ts.externalHelpersModuleNameText, name, 3);
                                }
                            }
                        }
                    }
                }
                requestedExternalEmitHelpers |= helpers;
            }
        }
    }

    function getHelperName(helper: ts.ExternalEmitHelpers) {
        switch (helper) {
            case ts.ExternalEmitHelpers.Extends: return "__extends";
            case ts.ExternalEmitHelpers.Assign: return "__assign";
            case ts.ExternalEmitHelpers.Rest: return "__rest";
            case ts.ExternalEmitHelpers.Decorate: return "__decorate";
            case ts.ExternalEmitHelpers.Metadata: return "__metadata";
            case ts.ExternalEmitHelpers.Param: return "__param";
            case ts.ExternalEmitHelpers.Awaiter: return "__awaiter";
            case ts.ExternalEmitHelpers.Generator: return "__generator";
            case ts.ExternalEmitHelpers.Values: return "__values";
            case ts.ExternalEmitHelpers.Read: return "__read";
            case ts.ExternalEmitHelpers.SpreadArray: return "__spreadArray";
            case ts.ExternalEmitHelpers.Await: return "__await";
            case ts.ExternalEmitHelpers.AsyncGenerator: return "__asyncGenerator";
            case ts.ExternalEmitHelpers.AsyncDelegator: return "__asyncDelegator";
            case ts.ExternalEmitHelpers.AsyncValues: return "__asyncValues";
            case ts.ExternalEmitHelpers.ExportStar: return "__exportStar";
            case ts.ExternalEmitHelpers.ImportStar: return "__importStar";
            case ts.ExternalEmitHelpers.ImportDefault: return "__importDefault";
            case ts.ExternalEmitHelpers.MakeTemplateObject: return "__makeTemplateObject";
            case ts.ExternalEmitHelpers.ClassPrivateFieldGet: return "__classPrivateFieldGet";
            case ts.ExternalEmitHelpers.ClassPrivateFieldSet: return "__classPrivateFieldSet";
            case ts.ExternalEmitHelpers.ClassPrivateFieldIn: return "__classPrivateFieldIn";
            case ts.ExternalEmitHelpers.CreateBinding: return "__createBinding";
            default: return ts.Debug.fail("Unrecognized helper");
        }
    }

    function resolveHelpersModule(node: ts.SourceFile, errorNode: ts.Node) {
        if (!externalHelpersModule) {
            externalHelpersModule = resolveExternalModule(node, ts.externalHelpersModuleNameText, ts.Diagnostics.This_syntax_requires_an_imported_helper_but_module_0_cannot_be_found, errorNode) || unknownSymbol;
        }
        return externalHelpersModule;
    }

    // GRAMMAR CHECKING
    function checkGrammarDecoratorsAndModifiers(node: ts.HasModifiers | ts.HasDecorators | ts.HasIllegalModifiers | ts.HasIllegalDecorators): boolean {
        return checkGrammarDecorators(node) || checkGrammarModifiers(node);
    }

    function checkGrammarDecorators(node: ts.Node): boolean {
        if (ts.canHaveIllegalDecorators(node) && ts.some(node.illegalDecorators)) {
            return grammarErrorOnFirstToken(node, ts.Diagnostics.Decorators_are_not_valid_here);
        }
        if (!ts.canHaveDecorators(node) || !ts.hasDecorators(node)) {
            return false;
        }
        if (!ts.nodeCanBeDecorated(node, node.parent, node.parent.parent)) {
            if (node.kind === ts.SyntaxKind.MethodDeclaration && !ts.nodeIsPresent(node.body)) {
                return grammarErrorOnFirstToken(node, ts.Diagnostics.A_decorator_can_only_decorate_a_method_implementation_not_an_overload);
            }
            else {
                return grammarErrorOnFirstToken(node, ts.Diagnostics.Decorators_are_not_valid_here);
            }
        }
        else if (node.kind === ts.SyntaxKind.GetAccessor || node.kind === ts.SyntaxKind.SetAccessor) {
            const accessors = ts.getAllAccessorDeclarations((node.parent as ts.ClassDeclaration).members, node as ts.AccessorDeclaration);
            if (ts.hasDecorators(accessors.firstAccessor) && node === accessors.secondAccessor) {
                return grammarErrorOnFirstToken(node, ts.Diagnostics.Decorators_cannot_be_applied_to_multiple_get_Slashset_accessors_of_the_same_name);
            }
        }
        return false;
    }

    function checkGrammarModifiers(node: ts.HasModifiers | ts.HasIllegalModifiers): boolean {
        const quickResult = reportObviousModifierErrors(node);
        if (quickResult !== undefined) {
            return quickResult;
        }

        let lastStatic: ts.Node | undefined, lastDeclare: ts.Node | undefined, lastAsync: ts.Node | undefined, lastOverride: ts.Node | undefined;
        let flags = ts.ModifierFlags.None;
        for (const modifier of node.modifiers!) {
            if (ts.isDecorator(modifier)) continue;
            if (modifier.kind !== ts.SyntaxKind.ReadonlyKeyword) {
                if (node.kind === ts.SyntaxKind.PropertySignature || node.kind === ts.SyntaxKind.MethodSignature) {
                    return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_a_type_member, ts.tokenToString(modifier.kind));
                }
                if (node.kind === ts.SyntaxKind.IndexSignature && (modifier.kind !== ts.SyntaxKind.StaticKeyword || !ts.isClassLike(node.parent))) {
                    return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_an_index_signature, ts.tokenToString(modifier.kind));
                }
            }
            if (modifier.kind !== ts.SyntaxKind.InKeyword && modifier.kind !== ts.SyntaxKind.OutKeyword) {
                if (node.kind === ts.SyntaxKind.TypeParameter) {
                    return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_a_type_parameter, ts.tokenToString(modifier.kind));
                }
            }
            switch (modifier.kind) {
                case ts.SyntaxKind.ConstKeyword:
                    if (node.kind !== ts.SyntaxKind.EnumDeclaration) {
                        return grammarErrorOnNode(node, ts.Diagnostics.A_class_member_cannot_have_the_0_keyword, ts.tokenToString(ts.SyntaxKind.ConstKeyword));
                    }
                    break;
                case ts.SyntaxKind.OverrideKeyword:
                    // If node.kind === SyntaxKind.Parameter, checkParameter reports an error if it's not a parameter property.
                    if (flags & ts.ModifierFlags.Override) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_already_seen, "override");
                    }
                    else if (flags & ts.ModifierFlags.Ambient) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_be_used_with_1_modifier, "override", "declare");
                    }
                    else if (flags & ts.ModifierFlags.Readonly) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, "override", "readonly");
                    }
                    else if (flags & ts.ModifierFlags.Accessor) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, "override", "accessor");
                    }
                    else if (flags & ts.ModifierFlags.Async) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, "override", "async");
                    }
                    flags |= ts.ModifierFlags.Override;
                    lastOverride = modifier;
                    break;

                case ts.SyntaxKind.PublicKeyword:
                case ts.SyntaxKind.ProtectedKeyword:
                case ts.SyntaxKind.PrivateKeyword:
                    const text = visibilityToString(ts.modifierToFlag(modifier.kind));

                    if (flags & ts.ModifierFlags.AccessibilityModifier) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics.Accessibility_modifier_already_seen);
                    }
                    else if (flags & ts.ModifierFlags.Override) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, text, "override");
                    }
                    else if (flags & ts.ModifierFlags.Static) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, text, "static");
                    }
                    else if (flags & ts.ModifierFlags.Accessor) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, text, "accessor");
                    }
                    else if (flags & ts.ModifierFlags.Readonly) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, text, "readonly");
                    }
                    else if (flags & ts.ModifierFlags.Async) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, text, "async");
                    }
                    else if (node.parent.kind === ts.SyntaxKind.ModuleBlock || node.parent.kind === ts.SyntaxKind.SourceFile) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_a_module_or_namespace_element, text);
                    }
                    else if (flags & ts.ModifierFlags.Abstract) {
                        if (modifier.kind === ts.SyntaxKind.PrivateKeyword) {
                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_be_used_with_1_modifier, text, "abstract");
                        }
                        else {
                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, text, "abstract");
                        }
                    }
                    else if (ts.isPrivateIdentifierClassElementDeclaration(node)) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics.An_accessibility_modifier_cannot_be_used_with_a_private_identifier);
                    }
                    flags |= ts.modifierToFlag(modifier.kind);
                    break;

                case ts.SyntaxKind.StaticKeyword:
                    if (flags & ts.ModifierFlags.Static) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_already_seen, "static");
                    }
                    else if (flags & ts.ModifierFlags.Readonly) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, "static", "readonly");
                    }
                    else if (flags & ts.ModifierFlags.Async) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, "static", "async");
                    }
                    else if (flags & ts.ModifierFlags.Accessor) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, "static", "accessor");
                    }
                    else if (node.parent.kind === ts.SyntaxKind.ModuleBlock || node.parent.kind === ts.SyntaxKind.SourceFile) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_a_module_or_namespace_element, "static");
                    }
                    else if (node.kind === ts.SyntaxKind.Parameter) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_a_parameter, "static");
                    }
                    else if (flags & ts.ModifierFlags.Abstract) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_be_used_with_1_modifier, "static", "abstract");
                    }
                    else if (flags & ts.ModifierFlags.Override) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, "static", "override");
                    }
                    flags |= ts.ModifierFlags.Static;
                    lastStatic = modifier;
                    break;

                case ts.SyntaxKind.AccessorKeyword:
                    if (flags & ts.ModifierFlags.Accessor) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_already_seen, "accessor");
                    }
                    else if (flags & ts.ModifierFlags.Readonly) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_be_used_with_1_modifier, "accessor", "readonly");
                    }
                    else if (flags & ts.ModifierFlags.Ambient) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_be_used_with_1_modifier, "accessor", "declare");
                    }
                    else if (node.kind !== ts.SyntaxKind.PropertyDeclaration) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics.accessor_modifier_can_only_appear_on_a_property_declaration);
                    }

                    flags |= ts.ModifierFlags.Accessor;
                    break;

                case ts.SyntaxKind.ReadonlyKeyword:
                    if (flags & ts.ModifierFlags.Readonly) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_already_seen, "readonly");
                    }
                    else if (node.kind !== ts.SyntaxKind.PropertyDeclaration && node.kind !== ts.SyntaxKind.PropertySignature && node.kind !== ts.SyntaxKind.IndexSignature && node.kind !== ts.SyntaxKind.Parameter) {
                        // If node.kind === SyntaxKind.Parameter, checkParameter reports an error if it's not a parameter property.
                        return grammarErrorOnNode(modifier, ts.Diagnostics.readonly_modifier_can_only_appear_on_a_property_declaration_or_index_signature);
                    }
                    flags |= ts.ModifierFlags.Readonly;
                    break;

                case ts.SyntaxKind.ExportKeyword:
                    if (flags & ts.ModifierFlags.Export) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_already_seen, "export");
                    }
                    else if (flags & ts.ModifierFlags.Ambient) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, "export", "declare");
                    }
                    else if (flags & ts.ModifierFlags.Abstract) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, "export", "abstract");
                    }
                    else if (flags & ts.ModifierFlags.Async) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, "export", "async");
                    }
                    else if (ts.isClassLike(node.parent)) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_class_elements_of_this_kind, "export");
                    }
                    else if (node.kind === ts.SyntaxKind.Parameter) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_a_parameter, "export");
                    }
                    flags |= ts.ModifierFlags.Export;
                    break;
                case ts.SyntaxKind.DefaultKeyword:
                    const container = node.parent.kind === ts.SyntaxKind.SourceFile ? node.parent : node.parent.parent;
                    if (container.kind === ts.SyntaxKind.ModuleDeclaration && !ts.isAmbientModule(container)) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics.A_default_export_can_only_be_used_in_an_ECMAScript_style_module);
                    }
                    else if (!(flags & ts.ModifierFlags.Export)) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, "export", "default");
                    }

                    flags |= ts.ModifierFlags.Default;
                    break;
                case ts.SyntaxKind.DeclareKeyword:
                    if (flags & ts.ModifierFlags.Ambient) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_already_seen, "declare");
                    }
                    else if (flags & ts.ModifierFlags.Async) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_be_used_in_an_ambient_context, "async");
                    }
                    else if (flags & ts.ModifierFlags.Override) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_be_used_in_an_ambient_context, "override");
                    }
                    else if (ts.isClassLike(node.parent) && !ts.isPropertyDeclaration(node)) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_class_elements_of_this_kind, "declare");
                    }
                    else if (node.kind === ts.SyntaxKind.Parameter) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_a_parameter, "declare");
                    }
                    else if ((node.parent.flags & ts.NodeFlags.Ambient) && node.parent.kind === ts.SyntaxKind.ModuleBlock) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics.A_declare_modifier_cannot_be_used_in_an_already_ambient_context);
                    }
                    else if (ts.isPrivateIdentifierClassElementDeclaration(node)) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_be_used_with_a_private_identifier, "declare");
                    }
                    flags |= ts.ModifierFlags.Ambient;
                    lastDeclare = modifier;
                    break;

                case ts.SyntaxKind.AbstractKeyword:
                    if (flags & ts.ModifierFlags.Abstract) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_already_seen, "abstract");
                    }
                    if (node.kind !== ts.SyntaxKind.ClassDeclaration &&
                        node.kind !== ts.SyntaxKind.ConstructorType) {
                        if (node.kind !== ts.SyntaxKind.MethodDeclaration &&
                            node.kind !== ts.SyntaxKind.PropertyDeclaration &&
                            node.kind !== ts.SyntaxKind.GetAccessor &&
                            node.kind !== ts.SyntaxKind.SetAccessor) {
                            return grammarErrorOnNode(modifier, ts.Diagnostics.abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration);
                        }
                        if (!(node.parent.kind === ts.SyntaxKind.ClassDeclaration && ts.hasSyntacticModifier(node.parent, ts.ModifierFlags.Abstract))) {
                            return grammarErrorOnNode(modifier, ts.Diagnostics.Abstract_methods_can_only_appear_within_an_abstract_class);
                        }
                        if (flags & ts.ModifierFlags.Static) {
                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_be_used_with_1_modifier, "static", "abstract");
                        }
                        if (flags & ts.ModifierFlags.Private) {
                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_be_used_with_1_modifier, "private", "abstract");
                        }
                        if (flags & ts.ModifierFlags.Async && lastAsync) {
                            return grammarErrorOnNode(lastAsync, ts.Diagnostics._0_modifier_cannot_be_used_with_1_modifier, "async", "abstract");
                        }
                        if (flags & ts.ModifierFlags.Override) {
                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, "abstract", "override");
                        }
                        if (flags & ts.ModifierFlags.Accessor) {
                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, "abstract", "accessor");
                        }
                    }
                    if (ts.isNamedDeclaration(node) && node.name.kind === ts.SyntaxKind.PrivateIdentifier) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_be_used_with_a_private_identifier, "abstract");
                    }

                    flags |= ts.ModifierFlags.Abstract;
                    break;

                case ts.SyntaxKind.AsyncKeyword:
                    if (flags & ts.ModifierFlags.Async) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_already_seen, "async");
                    }
                    else if (flags & ts.ModifierFlags.Ambient || node.parent.flags & ts.NodeFlags.Ambient) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_be_used_in_an_ambient_context, "async");
                    }
                    else if (node.kind === ts.SyntaxKind.Parameter) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_a_parameter, "async");
                    }
                    if (flags & ts.ModifierFlags.Abstract) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_be_used_with_1_modifier, "async", "abstract");
                    }
                    flags |= ts.ModifierFlags.Async;
                    lastAsync = modifier;
                    break;

                case ts.SyntaxKind.InKeyword:
                case ts.SyntaxKind.OutKeyword:
                    const inOutFlag = modifier.kind === ts.SyntaxKind.InKeyword ? ts.ModifierFlags.In : ts.ModifierFlags.Out;
                    const inOutText = modifier.kind === ts.SyntaxKind.InKeyword ? "in" : "out";
                    if (node.kind !== ts.SyntaxKind.TypeParameter || !(ts.isInterfaceDeclaration(node.parent) || ts.isClassLike(node.parent) || ts.isTypeAliasDeclaration(node.parent))) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_can_only_appear_on_a_type_parameter_of_a_class_interface_or_type_alias, inOutText);
                    }
                    if (flags & inOutFlag) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_already_seen, inOutText);
                    }
                    if (inOutFlag & ts.ModifierFlags.In && flags & ts.ModifierFlags.Out) {
                        return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, "in", "out");
                    }
                    flags |= inOutFlag;
                    break;
            }
        }

        if (node.kind === ts.SyntaxKind.Constructor) {
            if (flags & ts.ModifierFlags.Static) {
                return grammarErrorOnNode(lastStatic!, ts.Diagnostics._0_modifier_cannot_appear_on_a_constructor_declaration, "static");
            }
            if (flags & ts.ModifierFlags.Override) {
                return grammarErrorOnNode(lastOverride!, ts.Diagnostics._0_modifier_cannot_appear_on_a_constructor_declaration, "override"); // TODO: GH#18217
            }
            if (flags & ts.ModifierFlags.Async) {
                return grammarErrorOnNode(lastAsync!, ts.Diagnostics._0_modifier_cannot_appear_on_a_constructor_declaration, "async");
            }
            return false;
        }
        else if ((node.kind === ts.SyntaxKind.ImportDeclaration || node.kind === ts.SyntaxKind.ImportEqualsDeclaration) && flags & ts.ModifierFlags.Ambient) {
            return grammarErrorOnNode(lastDeclare!, ts.Diagnostics.A_0_modifier_cannot_be_used_with_an_import_declaration, "declare");
        }
        else if (node.kind === ts.SyntaxKind.Parameter && (flags & ts.ModifierFlags.ParameterPropertyModifier) && ts.isBindingPattern(node.name)) {
            return grammarErrorOnNode(node, ts.Diagnostics.A_parameter_property_may_not_be_declared_using_a_binding_pattern);
        }
        else if (node.kind === ts.SyntaxKind.Parameter && (flags & ts.ModifierFlags.ParameterPropertyModifier) && node.dotDotDotToken) {
            return grammarErrorOnNode(node, ts.Diagnostics.A_parameter_property_cannot_be_declared_using_a_rest_parameter);
        }
        if (flags & ts.ModifierFlags.Async) {
            return checkGrammarAsyncModifier(node, lastAsync!);
        }
        return false;
    }

    /**
     * true | false: Early return this value from checkGrammarModifiers.
     * undefined: Need to do full checking on the modifiers.
     */
    function reportObviousModifierErrors(node: ts.HasModifiers | ts.HasIllegalModifiers): boolean | undefined {
        return !node.modifiers
            ? false
            : shouldReportBadModifier(node)
                ? grammarErrorOnFirstToken(node, ts.Diagnostics.Modifiers_cannot_appear_here)
                : undefined;
    }

    function shouldReportBadModifier(node: ts.HasModifiers | ts.HasIllegalModifiers): boolean {
        switch (node.kind) {
            case ts.SyntaxKind.GetAccessor:
            case ts.SyntaxKind.SetAccessor:
            case ts.SyntaxKind.Constructor:
            case ts.SyntaxKind.PropertyDeclaration:
            case ts.SyntaxKind.PropertySignature:
            case ts.SyntaxKind.MethodDeclaration:
            case ts.SyntaxKind.MethodSignature:
            case ts.SyntaxKind.IndexSignature:
            case ts.SyntaxKind.ModuleDeclaration:
            case ts.SyntaxKind.ImportDeclaration:
            case ts.SyntaxKind.ImportEqualsDeclaration:
            case ts.SyntaxKind.ExportDeclaration:
            case ts.SyntaxKind.ExportAssignment:
            case ts.SyntaxKind.FunctionExpression:
            case ts.SyntaxKind.ArrowFunction:
            case ts.SyntaxKind.Parameter:
            case ts.SyntaxKind.TypeParameter:
                return false;
            case ts.SyntaxKind.ClassStaticBlockDeclaration:
            case ts.SyntaxKind.PropertyAssignment:
            case ts.SyntaxKind.ShorthandPropertyAssignment:
            case ts.SyntaxKind.NamespaceExportDeclaration:
            case ts.SyntaxKind.FunctionType:
            case ts.SyntaxKind.MissingDeclaration:
                return true;
            default:
                if (node.parent.kind === ts.SyntaxKind.ModuleBlock || node.parent.kind === ts.SyntaxKind.SourceFile) {
                    return false;
                }
                switch (node.kind) {
                    case ts.SyntaxKind.FunctionDeclaration:
                        return nodeHasAnyModifiersExcept(node, ts.SyntaxKind.AsyncKeyword);
                    case ts.SyntaxKind.ClassDeclaration:
                    case ts.SyntaxKind.ConstructorType:
                        return nodeHasAnyModifiersExcept(node, ts.SyntaxKind.AbstractKeyword);
                    case ts.SyntaxKind.ClassExpression:
                    case ts.SyntaxKind.InterfaceDeclaration:
                    case ts.SyntaxKind.VariableStatement:
                    case ts.SyntaxKind.TypeAliasDeclaration:
                        return true;
                    case ts.SyntaxKind.EnumDeclaration:
                        return nodeHasAnyModifiersExcept(node, ts.SyntaxKind.ConstKeyword);
                    default:
                        ts.Debug.assertNever(node);
                }
        }
    }

    function nodeHasAnyModifiersExcept(node: ts.HasModifiers, allowedModifier: ts.SyntaxKind): boolean {
        for (const modifier of node.modifiers!) {
            if (ts.isDecorator(modifier)) continue;
            return modifier.kind !== allowedModifier;
        }
        return false;
    }

    function checkGrammarAsyncModifier(node: ts.Node, asyncModifier: ts.Node): boolean {
        switch (node.kind) {
            case ts.SyntaxKind.MethodDeclaration:
            case ts.SyntaxKind.FunctionDeclaration:
            case ts.SyntaxKind.FunctionExpression:
            case ts.SyntaxKind.ArrowFunction:
                return false;
        }

        return grammarErrorOnNode(asyncModifier, ts.Diagnostics._0_modifier_cannot_be_used_here, "async");
    }

    function checkGrammarForDisallowedTrailingComma(list: ts.NodeArray<ts.Node> | undefined, diag = ts.Diagnostics.Trailing_comma_not_allowed): boolean {
        if (list && list.hasTrailingComma) {
            return grammarErrorAtPos(list[0], list.end - ",".length, ",".length, diag);
        }
        return false;
    }

    function checkGrammarTypeParameterList(typeParameters: ts.NodeArray<ts.TypeParameterDeclaration> | undefined, file: ts.SourceFile): boolean {
        if (typeParameters && typeParameters.length === 0) {
            const start = typeParameters.pos - "<".length;
            const end = ts.skipTrivia(file.text, typeParameters.end) + ">".length;
            return grammarErrorAtPos(file, start, end - start, ts.Diagnostics.Type_parameter_list_cannot_be_empty);
        }
        return false;
    }

    function checkGrammarParameterList(parameters: ts.NodeArray<ts.ParameterDeclaration>) {
        let seenOptionalParameter = false;
        const parameterCount = parameters.length;

        for (let i = 0; i < parameterCount; i++) {
            const parameter = parameters[i];
            if (parameter.dotDotDotToken) {
                if (i !== (parameterCount - 1)) {
                    return grammarErrorOnNode(parameter.dotDotDotToken, ts.Diagnostics.A_rest_parameter_must_be_last_in_a_parameter_list);
                }
                if (!(parameter.flags & ts.NodeFlags.Ambient)) { // Allow `...foo,` in ambient declarations; see GH#23070
                    checkGrammarForDisallowedTrailingComma(parameters, ts.Diagnostics.A_rest_parameter_or_binding_pattern_may_not_have_a_trailing_comma);
                }

                if (parameter.questionToken) {
                    return grammarErrorOnNode(parameter.questionToken, ts.Diagnostics.A_rest_parameter_cannot_be_optional);
                }

                if (parameter.initializer) {
                    return grammarErrorOnNode(parameter.name, ts.Diagnostics.A_rest_parameter_cannot_have_an_initializer);
                }
            }
            else if (isOptionalParameter(parameter)) {
                seenOptionalParameter = true;
                if (parameter.questionToken && parameter.initializer) {
                    return grammarErrorOnNode(parameter.name, ts.Diagnostics.Parameter_cannot_have_question_mark_and_initializer);
                }
            }
            else if (seenOptionalParameter && !parameter.initializer) {
                return grammarErrorOnNode(parameter.name, ts.Diagnostics.A_required_parameter_cannot_follow_an_optional_parameter);
            }
        }
    }

    function getNonSimpleParameters(parameters: readonly ts.ParameterDeclaration[]): readonly ts.ParameterDeclaration[] {
        return ts.filter(parameters, parameter => !!parameter.initializer || ts.isBindingPattern(parameter.name) || ts.isRestParameter(parameter));
    }

    function checkGrammarForUseStrictSimpleParameterList(node: ts.FunctionLikeDeclaration): boolean {
        if (languageVersion >= ts.ScriptTarget.ES2016) {
            const useStrictDirective = node.body && ts.isBlock(node.body) && ts.findUseStrictPrologue(node.body.statements);
            if (useStrictDirective) {
                const nonSimpleParameters = getNonSimpleParameters(node.parameters);
                if (ts.length(nonSimpleParameters)) {
                    ts.forEach(nonSimpleParameters, parameter => {
                        ts.addRelatedInfo(
                            error(parameter, ts.Diagnostics.This_parameter_is_not_allowed_with_use_strict_directive),
                            ts.createDiagnosticForNode(useStrictDirective, ts.Diagnostics.use_strict_directive_used_here)
                        );
                    });

                    const diagnostics = nonSimpleParameters.map((parameter, index) => (
                        index === 0 ? ts.createDiagnosticForNode(parameter, ts.Diagnostics.Non_simple_parameter_declared_here) : ts.createDiagnosticForNode(parameter, ts.Diagnostics.and_here)
                    )) as [ts.DiagnosticWithLocation, ...ts.DiagnosticWithLocation[]];
                    ts.addRelatedInfo(error(useStrictDirective, ts.Diagnostics.use_strict_directive_cannot_be_used_with_non_simple_parameter_list), ...diagnostics);
                    return true;
                }
            }
        }
        return false;
    }

    function checkGrammarFunctionLikeDeclaration(node: ts.FunctionLikeDeclaration | ts.MethodSignature): boolean {
        // Prevent cascading error by short-circuit
        const file = ts.getSourceFileOfNode(node);
        return checkGrammarDecoratorsAndModifiers(node) ||
            checkGrammarTypeParameterList(node.typeParameters, file) ||
            checkGrammarParameterList(node.parameters) ||
            checkGrammarArrowFunction(node, file) ||
            (ts.isFunctionLikeDeclaration(node) && checkGrammarForUseStrictSimpleParameterList(node));
    }

    function checkGrammarClassLikeDeclaration(node: ts.ClassLikeDeclaration): boolean {
        const file = ts.getSourceFileOfNode(node);
        return checkGrammarClassDeclarationHeritageClauses(node) ||
            checkGrammarTypeParameterList(node.typeParameters, file);
    }

    function checkGrammarArrowFunction(node: ts.Node, file: ts.SourceFile): boolean {
        if (!ts.isArrowFunction(node)) {
            return false;
        }

        if (node.typeParameters && !(ts.length(node.typeParameters) > 1 || node.typeParameters.hasTrailingComma || node.typeParameters[0].constraint)) {
            if (file && ts.fileExtensionIsOneOf(file.fileName, [ts.Extension.Mts, ts.Extension.Cts])) {
                grammarErrorOnNode(node.typeParameters[0], ts.Diagnostics.This_syntax_is_reserved_in_files_with_the_mts_or_cts_extension_Add_a_trailing_comma_or_explicit_constraint);
            }
        }

        const { equalsGreaterThanToken } = node;
        const startLine = ts.getLineAndCharacterOfPosition(file, equalsGreaterThanToken.pos).line;
        const endLine = ts.getLineAndCharacterOfPosition(file, equalsGreaterThanToken.end).line;
        return startLine !== endLine && grammarErrorOnNode(equalsGreaterThanToken, ts.Diagnostics.Line_terminator_not_permitted_before_arrow);
    }

    function checkGrammarIndexSignatureParameters(node: ts.SignatureDeclaration): boolean {
        const parameter = node.parameters[0];
        if (node.parameters.length !== 1) {
            if (parameter) {
                return grammarErrorOnNode(parameter.name, ts.Diagnostics.An_index_signature_must_have_exactly_one_parameter);
            }
            else {
                return grammarErrorOnNode(node, ts.Diagnostics.An_index_signature_must_have_exactly_one_parameter);
            }
        }
        checkGrammarForDisallowedTrailingComma(node.parameters, ts.Diagnostics.An_index_signature_cannot_have_a_trailing_comma);
        if (parameter.dotDotDotToken) {
            return grammarErrorOnNode(parameter.dotDotDotToken, ts.Diagnostics.An_index_signature_cannot_have_a_rest_parameter);
        }
        if (ts.hasEffectiveModifiers(parameter)) {
            return grammarErrorOnNode(parameter.name, ts.Diagnostics.An_index_signature_parameter_cannot_have_an_accessibility_modifier);
        }
        if (parameter.questionToken) {
            return grammarErrorOnNode(parameter.questionToken, ts.Diagnostics.An_index_signature_parameter_cannot_have_a_question_mark);
        }
        if (parameter.initializer) {
            return grammarErrorOnNode(parameter.name, ts.Diagnostics.An_index_signature_parameter_cannot_have_an_initializer);
        }
        if (!parameter.type) {
            return grammarErrorOnNode(parameter.name, ts.Diagnostics.An_index_signature_parameter_must_have_a_type_annotation);
        }
        const type = getTypeFromTypeNode(parameter.type);
        if (someType(type, t => !!(t.flags & ts.TypeFlags.StringOrNumberLiteralOrUnique)) || isGenericType(type)) {
            return grammarErrorOnNode(parameter.name, ts.Diagnostics.An_index_signature_parameter_type_cannot_be_a_literal_type_or_generic_type_Consider_using_a_mapped_object_type_instead);
        }
        if (!everyType(type, isValidIndexKeyType)) {
            return grammarErrorOnNode(parameter.name, ts.Diagnostics.An_index_signature_parameter_type_must_be_string_number_symbol_or_a_template_literal_type);
        }
        if (!node.type) {
            return grammarErrorOnNode(node, ts.Diagnostics.An_index_signature_must_have_a_type_annotation);
        }
        return false;
    }

    function checkGrammarIndexSignature(node: ts.IndexSignatureDeclaration) {
        // Prevent cascading error by short-circuit
        return checkGrammarDecoratorsAndModifiers(node) || checkGrammarIndexSignatureParameters(node);
    }

    function checkGrammarForAtLeastOneTypeArgument(node: ts.Node, typeArguments: ts.NodeArray<ts.TypeNode> | undefined): boolean {
        if (typeArguments && typeArguments.length === 0) {
            const sourceFile = ts.getSourceFileOfNode(node);
            const start = typeArguments.pos - "<".length;
            const end = ts.skipTrivia(sourceFile.text, typeArguments.end) + ">".length;
            return grammarErrorAtPos(sourceFile, start, end - start, ts.Diagnostics.Type_argument_list_cannot_be_empty);
        }
        return false;
    }

    function checkGrammarTypeArguments(node: ts.Node, typeArguments: ts.NodeArray<ts.TypeNode> | undefined): boolean {
        return checkGrammarForDisallowedTrailingComma(typeArguments) ||
            checkGrammarForAtLeastOneTypeArgument(node, typeArguments);
    }

    function checkGrammarTaggedTemplateChain(node: ts.TaggedTemplateExpression): boolean {
        if (node.questionDotToken || node.flags & ts.NodeFlags.OptionalChain) {
            return grammarErrorOnNode(node.template, ts.Diagnostics.Tagged_template_expressions_are_not_permitted_in_an_optional_chain);
        }
        return false;
    }

    function checkGrammarHeritageClause(node: ts.HeritageClause): boolean {
        const types = node.types;
        if (checkGrammarForDisallowedTrailingComma(types)) {
            return true;
        }
        if (types && types.length === 0) {
            const listType = ts.tokenToString(node.token);
            return grammarErrorAtPos(node, types.pos, 0, ts.Diagnostics._0_list_cannot_be_empty, listType);
        }
        return ts.some(types, checkGrammarExpressionWithTypeArguments);
    }

    function checkGrammarExpressionWithTypeArguments(node: ts.ExpressionWithTypeArguments | ts.TypeQueryNode) {
        if (ts.isExpressionWithTypeArguments(node) && ts.isImportKeyword(node.expression) && node.typeArguments) {
            return grammarErrorOnNode(node, ts.Diagnostics.This_use_of_import_is_invalid_import_calls_can_be_written_but_they_must_have_parentheses_and_cannot_have_type_arguments);
        }
        return checkGrammarTypeArguments(node, node.typeArguments);
    }

    function checkGrammarClassDeclarationHeritageClauses(node: ts.ClassLikeDeclaration) {
        let seenExtendsClause = false;
        let seenImplementsClause = false;

        if (!checkGrammarDecoratorsAndModifiers(node) && node.heritageClauses) {
            for (const heritageClause of node.heritageClauses) {
                if (heritageClause.token === ts.SyntaxKind.ExtendsKeyword) {
                    if (seenExtendsClause) {
                        return grammarErrorOnFirstToken(heritageClause, ts.Diagnostics.extends_clause_already_seen);
                    }

                    if (seenImplementsClause) {
                        return grammarErrorOnFirstToken(heritageClause, ts.Diagnostics.extends_clause_must_precede_implements_clause);
                    }

                    if (heritageClause.types.length > 1) {
                        return grammarErrorOnFirstToken(heritageClause.types[1], ts.Diagnostics.Classes_can_only_extend_a_single_class);
                    }

                    seenExtendsClause = true;
                }
                else {
                    ts.Debug.assert(heritageClause.token === ts.SyntaxKind.ImplementsKeyword);
                    if (seenImplementsClause) {
                        return grammarErrorOnFirstToken(heritageClause, ts.Diagnostics.implements_clause_already_seen);
                    }

                    seenImplementsClause = true;
                }

                // Grammar checking heritageClause inside class declaration
                checkGrammarHeritageClause(heritageClause);
            }
        }
    }

    function checkGrammarInterfaceDeclaration(node: ts.InterfaceDeclaration) {
        let seenExtendsClause = false;

        if (node.heritageClauses) {
            for (const heritageClause of node.heritageClauses) {
                if (heritageClause.token === ts.SyntaxKind.ExtendsKeyword) {
                    if (seenExtendsClause) {
                        return grammarErrorOnFirstToken(heritageClause, ts.Diagnostics.extends_clause_already_seen);
                    }

                    seenExtendsClause = true;
                }
                else {
                    ts.Debug.assert(heritageClause.token === ts.SyntaxKind.ImplementsKeyword);
                    return grammarErrorOnFirstToken(heritageClause, ts.Diagnostics.Interface_declaration_cannot_have_implements_clause);
                }

                // Grammar checking heritageClause inside class declaration
                checkGrammarHeritageClause(heritageClause);
            }
        }
        return false;
    }

    function checkGrammarComputedPropertyName(node: ts.Node): boolean {
        // If node is not a computedPropertyName, just skip the grammar checking
        if (node.kind !== ts.SyntaxKind.ComputedPropertyName) {
            return false;
        }

        const computedPropertyName = node as ts.ComputedPropertyName;
        if (computedPropertyName.expression.kind === ts.SyntaxKind.BinaryExpression && (computedPropertyName.expression as ts.BinaryExpression).operatorToken.kind === ts.SyntaxKind.CommaToken) {
            return grammarErrorOnNode(computedPropertyName.expression, ts.Diagnostics.A_comma_expression_is_not_allowed_in_a_computed_property_name);
        }
        return false;
    }

    function checkGrammarForGenerator(node: ts.FunctionLikeDeclaration) {
        if (node.asteriskToken) {
            ts.Debug.assert(
                node.kind === ts.SyntaxKind.FunctionDeclaration ||
                node.kind === ts.SyntaxKind.FunctionExpression ||
                node.kind === ts.SyntaxKind.MethodDeclaration);
            if (node.flags & ts.NodeFlags.Ambient) {
                return grammarErrorOnNode(node.asteriskToken, ts.Diagnostics.Generators_are_not_allowed_in_an_ambient_context);
            }
            if (!node.body) {
                return grammarErrorOnNode(node.asteriskToken, ts.Diagnostics.An_overload_signature_cannot_be_declared_as_a_generator);
            }
        }
    }

    function checkGrammarForInvalidQuestionMark(questionToken: ts.QuestionToken | undefined, message: ts.DiagnosticMessage): boolean {
        return !!questionToken && grammarErrorOnNode(questionToken, message);
    }

    function checkGrammarForInvalidExclamationToken(exclamationToken: ts.ExclamationToken | undefined, message: ts.DiagnosticMessage): boolean {
        return !!exclamationToken && grammarErrorOnNode(exclamationToken, message);
    }

    function checkGrammarObjectLiteralExpression(node: ts.ObjectLiteralExpression, inDestructuring: boolean) {
        const seen = new ts.Map<ts.__String, DeclarationMeaning>();

        for (const prop of node.properties) {
            if (prop.kind === ts.SyntaxKind.SpreadAssignment) {
                if (inDestructuring) {
                    // a rest property cannot be destructured any further
                    const expression = ts.skipParentheses(prop.expression);
                    if (ts.isArrayLiteralExpression(expression) || ts.isObjectLiteralExpression(expression)) {
                        return grammarErrorOnNode(prop.expression, ts.Diagnostics.A_rest_element_cannot_contain_a_binding_pattern);
                    }
                }
                continue;
            }
            const name = prop.name;
            if (name.kind === ts.SyntaxKind.ComputedPropertyName) {
                // If the name is not a ComputedPropertyName, the grammar checking will skip it
                checkGrammarComputedPropertyName(name);
            }

            if (prop.kind === ts.SyntaxKind.ShorthandPropertyAssignment && !inDestructuring && prop.objectAssignmentInitializer) {
                // having objectAssignmentInitializer is only valid in ObjectAssignmentPattern
                // outside of destructuring it is a syntax error
                grammarErrorOnNode(prop.equalsToken!, ts.Diagnostics.Did_you_mean_to_use_a_Colon_An_can_only_follow_a_property_name_when_the_containing_object_literal_is_part_of_a_destructuring_pattern);
            }

            if (name.kind === ts.SyntaxKind.PrivateIdentifier) {
                grammarErrorOnNode(name, ts.Diagnostics.Private_identifiers_are_not_allowed_outside_class_bodies);
            }

            // Modifiers are never allowed on properties except for 'async' on a method declaration
            if (ts.canHaveModifiers(prop) && prop.modifiers) {
                for (const mod of prop.modifiers) {
                    if (ts.isModifier(mod) && (mod.kind !== ts.SyntaxKind.AsyncKeyword || prop.kind !== ts.SyntaxKind.MethodDeclaration)) {
                        grammarErrorOnNode(mod, ts.Diagnostics._0_modifier_cannot_be_used_here, ts.getTextOfNode(mod));
                    }
                }
            }
            else if (ts.canHaveIllegalModifiers(prop) && prop.modifiers) {
                for (const mod of prop.modifiers) {
                    grammarErrorOnNode(mod, ts.Diagnostics._0_modifier_cannot_be_used_here, ts.getTextOfNode(mod));
                }
            }

            // ECMA-262 11.1.5 Object Initializer
            // If previous is not undefined then throw a SyntaxError exception if any of the following conditions are true
            // a.This production is contained in strict code and IsDataDescriptor(previous) is true and
            // IsDataDescriptor(propId.descriptor) is true.
            //    b.IsDataDescriptor(previous) is true and IsAccessorDescriptor(propId.descriptor) is true.
            //    c.IsAccessorDescriptor(previous) is true and IsDataDescriptor(propId.descriptor) is true.
            //    d.IsAccessorDescriptor(previous) is true and IsAccessorDescriptor(propId.descriptor) is true
            // and either both previous and propId.descriptor have[[Get]] fields or both previous and propId.descriptor have[[Set]] fields
            let currentKind: DeclarationMeaning;
            switch (prop.kind) {
                case ts.SyntaxKind.ShorthandPropertyAssignment:
                case ts.SyntaxKind.PropertyAssignment:
                    // Grammar checking for computedPropertyName and shorthandPropertyAssignment
                    checkGrammarForInvalidExclamationToken(prop.exclamationToken, ts.Diagnostics.A_definite_assignment_assertion_is_not_permitted_in_this_context);
                    checkGrammarForInvalidQuestionMark(prop.questionToken, ts.Diagnostics.An_object_member_cannot_be_declared_optional);
                    if (name.kind === ts.SyntaxKind.NumericLiteral) {
                        checkGrammarNumericLiteral(name);
                    }
                    currentKind = DeclarationMeaning.PropertyAssignment;
                    break;
                case ts.SyntaxKind.MethodDeclaration:
                    currentKind = DeclarationMeaning.Method;
                    break;
                case ts.SyntaxKind.GetAccessor:
                    currentKind = DeclarationMeaning.GetAccessor;
                    break;
                case ts.SyntaxKind.SetAccessor:
                    currentKind = DeclarationMeaning.SetAccessor;
                    break;
                default:
                    throw ts.Debug.assertNever(prop, "Unexpected syntax kind:" + (prop as ts.Node).kind);
            }

            if (!inDestructuring) {
                const effectiveName = ts.getPropertyNameForPropertyNameNode(name);
                if (effectiveName === undefined) {
                    continue;
                }

                const existingKind = seen.get(effectiveName);
                if (!existingKind) {
                    seen.set(effectiveName, currentKind);
                }
                else {
                    if ((currentKind & DeclarationMeaning.Method) && (existingKind & DeclarationMeaning.Method)) {
                        grammarErrorOnNode(name, ts.Diagnostics.Duplicate_identifier_0, ts.getTextOfNode(name));
                    }
                    else if ((currentKind & DeclarationMeaning.PropertyAssignment) && (existingKind & DeclarationMeaning.PropertyAssignment)) {
                        grammarErrorOnNode(name, ts.Diagnostics.An_object_literal_cannot_have_multiple_properties_with_the_same_name, ts.getTextOfNode(name));
                    }
                    else if ((currentKind & DeclarationMeaning.GetOrSetAccessor) && (existingKind & DeclarationMeaning.GetOrSetAccessor)) {
                        if (existingKind !== DeclarationMeaning.GetOrSetAccessor && currentKind !== existingKind) {
                            seen.set(effectiveName, currentKind | existingKind);
                        }
                        else {
                            return grammarErrorOnNode(name, ts.Diagnostics.An_object_literal_cannot_have_multiple_get_Slashset_accessors_with_the_same_name);
                        }
                    }
                    else {
                        return grammarErrorOnNode(name, ts.Diagnostics.An_object_literal_cannot_have_property_and_accessor_with_the_same_name);
                    }
                }
            }
        }
    }

    function checkGrammarJsxElement(node: ts.JsxOpeningLikeElement) {
        checkGrammarJsxName(node.tagName);
        checkGrammarTypeArguments(node, node.typeArguments);
        const seen = new ts.Map<ts.__String, boolean>();

        for (const attr of node.attributes.properties) {
            if (attr.kind === ts.SyntaxKind.JsxSpreadAttribute) {
                continue;
            }

            const { name, initializer } = attr;
            if (!seen.get(name.escapedText)) {
                seen.set(name.escapedText, true);
            }
            else {
                return grammarErrorOnNode(name, ts.Diagnostics.JSX_elements_cannot_have_multiple_attributes_with_the_same_name);
            }

            if (initializer && initializer.kind === ts.SyntaxKind.JsxExpression && !initializer.expression) {
                return grammarErrorOnNode(initializer, ts.Diagnostics.JSX_attributes_must_only_be_assigned_a_non_empty_expression);
            }
        }
    }

    function checkGrammarJsxName(node: ts.JsxTagNameExpression) {
        if (ts.isPropertyAccessExpression(node)) {
            let propName: ts.JsxTagNameExpression = node;
            do {
                const check = checkGrammarJsxNestedIdentifier(propName.name);
                if (check) {
                    return check;
                }
                propName = propName.expression;
            } while (ts.isPropertyAccessExpression(propName));
            const check = checkGrammarJsxNestedIdentifier(propName);
            if (check) {
                return check;
            }
        }

        function checkGrammarJsxNestedIdentifier(name: ts.MemberName | ts.ThisExpression) {
            if (ts.isIdentifier(name) && ts.idText(name).indexOf(":") !== -1) {
                return grammarErrorOnNode(name, ts.Diagnostics.JSX_property_access_expressions_cannot_include_JSX_namespace_names);
            }
        }
    }

    function checkGrammarJsxExpression(node: ts.JsxExpression) {
        if (node.expression && ts.isCommaSequence(node.expression)) {
            return grammarErrorOnNode(node.expression, ts.Diagnostics.JSX_expressions_may_not_use_the_comma_operator_Did_you_mean_to_write_an_array);
        }
    }

    function checkGrammarForInOrForOfStatement(forInOrOfStatement: ts.ForInOrOfStatement): boolean {
        if (checkGrammarStatementInAmbientContext(forInOrOfStatement)) {
            return true;
        }

        if (forInOrOfStatement.kind === ts.SyntaxKind.ForOfStatement && forInOrOfStatement.awaitModifier) {
            if (!(forInOrOfStatement.flags & ts.NodeFlags.AwaitContext)) {
                const sourceFile = ts.getSourceFileOfNode(forInOrOfStatement);
                if (ts.isInTopLevelContext(forInOrOfStatement)) {
                    if (!hasParseDiagnostics(sourceFile)) {
                        if (!ts.isEffectiveExternalModule(sourceFile, compilerOptions)) {
                            diagnostics.add(ts.createDiagnosticForNode(forInOrOfStatement.awaitModifier,
                                ts.Diagnostics.for_await_loops_are_only_allowed_at_the_top_level_of_a_file_when_that_file_is_a_module_but_this_file_has_no_imports_or_exports_Consider_adding_an_empty_export_to_make_this_file_a_module));
                        }
                        switch (moduleKind) {
                            case ts.ModuleKind.Node16:
                            case ts.ModuleKind.NodeNext:
                                if (sourceFile.impliedNodeFormat === ts.ModuleKind.CommonJS) {
                                    diagnostics.add(
                                        ts.createDiagnosticForNode(forInOrOfStatement.awaitModifier, ts.Diagnostics.The_current_file_is_a_CommonJS_module_and_cannot_use_await_at_the_top_level)
                                    );
                                    break;
                                }
                                // fallthrough
                            case ts.ModuleKind.ES2022:
                            case ts.ModuleKind.ESNext:
                            case ts.ModuleKind.System:
                                if (languageVersion >= ts.ScriptTarget.ES2017) {
                                    break;
                                }
                                // fallthrough
                            default:
                                diagnostics.add(
                                    ts.createDiagnosticForNode(forInOrOfStatement.awaitModifier,
                                        ts.Diagnostics.Top_level_for_await_loops_are_only_allowed_when_the_module_option_is_set_to_es2022_esnext_system_node16_or_nodenext_and_the_target_option_is_set_to_es2017_or_higher
                                    )
                                );
                                break;
                        }
                    }
                }
                else {
                    // use of 'for-await-of' in non-async function
                    if (!hasParseDiagnostics(sourceFile)) {
                        const diagnostic = ts.createDiagnosticForNode(forInOrOfStatement.awaitModifier, ts.Diagnostics.for_await_loops_are_only_allowed_within_async_functions_and_at_the_top_levels_of_modules);
                        const func = ts.getContainingFunction(forInOrOfStatement);
                        if (func && func.kind !== ts.SyntaxKind.Constructor) {
                            ts.Debug.assert((ts.getFunctionFlags(func) & ts.FunctionFlags.Async) === 0, "Enclosing function should never be an async function.");
                            const relatedInfo = ts.createDiagnosticForNode(func, ts.Diagnostics.Did_you_mean_to_mark_this_function_as_async);
                            ts.addRelatedInfo(diagnostic, relatedInfo);
                        }
                        diagnostics.add(diagnostic);
                        return true;
                    }
                }
                return false;
            }
        }

        if (ts.isForOfStatement(forInOrOfStatement) && !(forInOrOfStatement.flags & ts.NodeFlags.AwaitContext) &&
            ts.isIdentifier(forInOrOfStatement.initializer) && forInOrOfStatement.initializer.escapedText === "async") {
            grammarErrorOnNode(forInOrOfStatement.initializer, ts.Diagnostics.The_left_hand_side_of_a_for_of_statement_may_not_be_async);
            return false;
        }

        if (forInOrOfStatement.initializer.kind === ts.SyntaxKind.VariableDeclarationList) {
            const variableList = forInOrOfStatement.initializer as ts.VariableDeclarationList;
            if (!checkGrammarVariableDeclarationList(variableList)) {
                const declarations = variableList.declarations;

                // declarations.length can be zero if there is an error in variable declaration in for-of or for-in
                // See http://www.ecma-international.org/ecma-262/6.0/#sec-for-in-and-for-of-statements for details
                // For example:
                //      var let = 10;
                //      for (let of [1,2,3]) {} // this is invalid ES6 syntax
                //      for (let in [1,2,3]) {} // this is invalid ES6 syntax
                // We will then want to skip on grammar checking on variableList declaration
                if (!declarations.length) {
                    return false;
                }

                if (declarations.length > 1) {
                    const diagnostic = forInOrOfStatement.kind === ts.SyntaxKind.ForInStatement
                        ? ts.Diagnostics.Only_a_single_variable_declaration_is_allowed_in_a_for_in_statement
                        : ts.Diagnostics.Only_a_single_variable_declaration_is_allowed_in_a_for_of_statement;
                    return grammarErrorOnFirstToken(variableList.declarations[1], diagnostic);
                }
                const firstDeclaration = declarations[0];

                if (firstDeclaration.initializer) {
                    const diagnostic = forInOrOfStatement.kind === ts.SyntaxKind.ForInStatement
                        ? ts.Diagnostics.The_variable_declaration_of_a_for_in_statement_cannot_have_an_initializer
                        : ts.Diagnostics.The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer;
                    return grammarErrorOnNode(firstDeclaration.name, diagnostic);
                }
                if (firstDeclaration.type) {
                    const diagnostic = forInOrOfStatement.kind === ts.SyntaxKind.ForInStatement
                        ? ts.Diagnostics.The_left_hand_side_of_a_for_in_statement_cannot_use_a_type_annotation
                        : ts.Diagnostics.The_left_hand_side_of_a_for_of_statement_cannot_use_a_type_annotation;
                    return grammarErrorOnNode(firstDeclaration, diagnostic);
                }
            }
        }

        return false;
    }

    function checkGrammarAccessor(accessor: ts.AccessorDeclaration): boolean {
        if (!(accessor.flags & ts.NodeFlags.Ambient) && (accessor.parent.kind !== ts.SyntaxKind.TypeLiteral) && (accessor.parent.kind !== ts.SyntaxKind.InterfaceDeclaration)) {
            if (languageVersion < ts.ScriptTarget.ES5) {
                return grammarErrorOnNode(accessor.name, ts.Diagnostics.Accessors_are_only_available_when_targeting_ECMAScript_5_and_higher);
            }
            if (languageVersion < ts.ScriptTarget.ES2015 && ts.isPrivateIdentifier(accessor.name)) {
                return grammarErrorOnNode(accessor.name, ts.Diagnostics.Private_identifiers_are_only_available_when_targeting_ECMAScript_2015_and_higher);
            }
            if (accessor.body === undefined && !ts.hasSyntacticModifier(accessor, ts.ModifierFlags.Abstract)) {
                return grammarErrorAtPos(accessor, accessor.end - 1, ";".length, ts.Diagnostics._0_expected, "{");
            }
        }
        if (accessor.body) {
            if (ts.hasSyntacticModifier(accessor, ts.ModifierFlags.Abstract)) {
                return grammarErrorOnNode(accessor, ts.Diagnostics.An_abstract_accessor_cannot_have_an_implementation);
            }
            if (accessor.parent.kind === ts.SyntaxKind.TypeLiteral || accessor.parent.kind === ts.SyntaxKind.InterfaceDeclaration) {
                return grammarErrorOnNode(accessor.body, ts.Diagnostics.An_implementation_cannot_be_declared_in_ambient_contexts);
            }
        }
        if (accessor.typeParameters) {
            return grammarErrorOnNode(accessor.name, ts.Diagnostics.An_accessor_cannot_have_type_parameters);
        }
        if (!doesAccessorHaveCorrectParameterCount(accessor)) {
            return grammarErrorOnNode(accessor.name,
                accessor.kind === ts.SyntaxKind.GetAccessor ?
                    ts.Diagnostics.A_get_accessor_cannot_have_parameters :
                    ts.Diagnostics.A_set_accessor_must_have_exactly_one_parameter);
        }
        if (accessor.kind === ts.SyntaxKind.SetAccessor) {
            if (accessor.type) {
                return grammarErrorOnNode(accessor.name, ts.Diagnostics.A_set_accessor_cannot_have_a_return_type_annotation);
            }
            const parameter = ts.Debug.checkDefined(ts.getSetAccessorValueParameter(accessor), "Return value does not match parameter count assertion.");
            if (parameter.dotDotDotToken) {
                return grammarErrorOnNode(parameter.dotDotDotToken, ts.Diagnostics.A_set_accessor_cannot_have_rest_parameter);
            }
            if (parameter.questionToken) {
                return grammarErrorOnNode(parameter.questionToken, ts.Diagnostics.A_set_accessor_cannot_have_an_optional_parameter);
            }
            if (parameter.initializer) {
                return grammarErrorOnNode(accessor.name, ts.Diagnostics.A_set_accessor_parameter_cannot_have_an_initializer);
            }
        }
        return false;
    }

    /** Does the accessor have the right number of parameters?
     * A get accessor has no parameters or a single `this` parameter.
     * A set accessor has one parameter or a `this` parameter and one more parameter.
     */
    function doesAccessorHaveCorrectParameterCount(accessor: ts.AccessorDeclaration) {
        return getAccessorThisParameter(accessor) || accessor.parameters.length === (accessor.kind === ts.SyntaxKind.GetAccessor ? 0 : 1);
    }

    function getAccessorThisParameter(accessor: ts.AccessorDeclaration): ts.ParameterDeclaration | undefined {
        if (accessor.parameters.length === (accessor.kind === ts.SyntaxKind.GetAccessor ? 1 : 2)) {
            return ts.getThisParameter(accessor);
        }
    }

    function checkGrammarTypeOperatorNode(node: ts.TypeOperatorNode) {
        if (node.operator === ts.SyntaxKind.UniqueKeyword) {
            if (node.type.kind !== ts.SyntaxKind.SymbolKeyword) {
                return grammarErrorOnNode(node.type, ts.Diagnostics._0_expected, ts.tokenToString(ts.SyntaxKind.SymbolKeyword));
            }
            let parent = ts.walkUpParenthesizedTypes(node.parent);
            if (ts.isInJSFile(parent) && ts.isJSDocTypeExpression(parent)) {
                const host = ts.getJSDocHost(parent);
                if (host) {
                    parent = ts.getSingleVariableOfVariableStatement(host) || host;
                }
            }
            switch (parent.kind) {
                case ts.SyntaxKind.VariableDeclaration:
                    const decl = parent as ts.VariableDeclaration;
                    if (decl.name.kind !== ts.SyntaxKind.Identifier) {
                        return grammarErrorOnNode(node, ts.Diagnostics.unique_symbol_types_may_not_be_used_on_a_variable_declaration_with_a_binding_name);
                    }
                    if (!ts.isVariableDeclarationInVariableStatement(decl)) {
                        return grammarErrorOnNode(node, ts.Diagnostics.unique_symbol_types_are_only_allowed_on_variables_in_a_variable_statement);
                    }
                    if (!(decl.parent.flags & ts.NodeFlags.Const)) {
                        return grammarErrorOnNode((parent as ts.VariableDeclaration).name, ts.Diagnostics.A_variable_whose_type_is_a_unique_symbol_type_must_be_const);
                    }
                    break;

                case ts.SyntaxKind.PropertyDeclaration:
                    if (!ts.isStatic(parent) ||
                        !ts.hasEffectiveReadonlyModifier(parent)) {
                        return grammarErrorOnNode((parent as ts.PropertyDeclaration).name, ts.Diagnostics.A_property_of_a_class_whose_type_is_a_unique_symbol_type_must_be_both_static_and_readonly);
                    }
                    break;

                case ts.SyntaxKind.PropertySignature:
                    if (!ts.hasSyntacticModifier(parent, ts.ModifierFlags.Readonly)) {
                        return grammarErrorOnNode((parent as ts.PropertySignature).name, ts.Diagnostics.A_property_of_an_interface_or_type_literal_whose_type_is_a_unique_symbol_type_must_be_readonly);
                    }
                    break;

                default:
                    return grammarErrorOnNode(node, ts.Diagnostics.unique_symbol_types_are_not_allowed_here);
            }
        }
        else if (node.operator === ts.SyntaxKind.ReadonlyKeyword) {
            if (node.type.kind !== ts.SyntaxKind.ArrayType && node.type.kind !== ts.SyntaxKind.TupleType) {
                return grammarErrorOnFirstToken(node, ts.Diagnostics.readonly_type_modifier_is_only_permitted_on_array_and_tuple_literal_types, ts.tokenToString(ts.SyntaxKind.SymbolKeyword));
            }
        }
    }

    function checkGrammarForInvalidDynamicName(node: ts.DeclarationName, message: ts.DiagnosticMessage) {
        if (isNonBindableDynamicName(node)) {
            return grammarErrorOnNode(node, message);
        }
    }

    function checkGrammarMethod(node: ts.MethodDeclaration | ts.MethodSignature) {
        if (checkGrammarFunctionLikeDeclaration(node)) {
            return true;
        }

        if (node.kind === ts.SyntaxKind.MethodDeclaration) {
            if (node.parent.kind === ts.SyntaxKind.ObjectLiteralExpression) {
                // We only disallow modifier on a method declaration if it is a property of object-literal-expression
                if (node.modifiers && !(node.modifiers.length === 1 && ts.first(node.modifiers).kind === ts.SyntaxKind.AsyncKeyword)) {
                    return grammarErrorOnFirstToken(node, ts.Diagnostics.Modifiers_cannot_appear_here);
                }
                else if (checkGrammarForInvalidQuestionMark(node.questionToken, ts.Diagnostics.An_object_member_cannot_be_declared_optional)) {
                    return true;
                }
                else if (checkGrammarForInvalidExclamationToken(node.exclamationToken, ts.Diagnostics.A_definite_assignment_assertion_is_not_permitted_in_this_context)) {
                    return true;
                }
                else if (node.body === undefined) {
                    return grammarErrorAtPos(node, node.end - 1, ";".length, ts.Diagnostics._0_expected, "{");
                }
            }
            if (checkGrammarForGenerator(node)) {
                return true;
            }
        }

        if (ts.isClassLike(node.parent)) {
            if (languageVersion < ts.ScriptTarget.ES2015 && ts.isPrivateIdentifier(node.name)) {
                return grammarErrorOnNode(node.name, ts.Diagnostics.Private_identifiers_are_only_available_when_targeting_ECMAScript_2015_and_higher);
            }
            // Technically, computed properties in ambient contexts is disallowed
            // for property declarations and accessors too, not just methods.
            // However, property declarations disallow computed names in general,
            // and accessors are not allowed in ambient contexts in general,
            // so this error only really matters for methods.
            if (node.flags & ts.NodeFlags.Ambient) {
                return checkGrammarForInvalidDynamicName(node.name, ts.Diagnostics.A_computed_property_name_in_an_ambient_context_must_refer_to_an_expression_whose_type_is_a_literal_type_or_a_unique_symbol_type);
            }
            else if (node.kind === ts.SyntaxKind.MethodDeclaration && !node.body) {
                return checkGrammarForInvalidDynamicName(node.name, ts.Diagnostics.A_computed_property_name_in_a_method_overload_must_refer_to_an_expression_whose_type_is_a_literal_type_or_a_unique_symbol_type);
            }
        }
        else if (node.parent.kind === ts.SyntaxKind.InterfaceDeclaration) {
            return checkGrammarForInvalidDynamicName(node.name, ts.Diagnostics.A_computed_property_name_in_an_interface_must_refer_to_an_expression_whose_type_is_a_literal_type_or_a_unique_symbol_type);
        }
        else if (node.parent.kind === ts.SyntaxKind.TypeLiteral) {
            return checkGrammarForInvalidDynamicName(node.name, ts.Diagnostics.A_computed_property_name_in_a_type_literal_must_refer_to_an_expression_whose_type_is_a_literal_type_or_a_unique_symbol_type);
        }
    }

    function checkGrammarBreakOrContinueStatement(node: ts.BreakOrContinueStatement): boolean {
        let current: ts.Node = node;
        while (current) {
            if (ts.isFunctionLikeOrClassStaticBlockDeclaration(current)) {
                return grammarErrorOnNode(node, ts.Diagnostics.Jump_target_cannot_cross_function_boundary);
            }

            switch (current.kind) {
                case ts.SyntaxKind.LabeledStatement:
                    if (node.label && (current as ts.LabeledStatement).label.escapedText === node.label.escapedText) {
                        // found matching label - verify that label usage is correct
                        // continue can only target labels that are on iteration statements
                        const isMisplacedContinueLabel = node.kind === ts.SyntaxKind.ContinueStatement
                            && !ts.isIterationStatement((current as ts.LabeledStatement).statement, /*lookInLabeledStatement*/ true);

                        if (isMisplacedContinueLabel) {
                            return grammarErrorOnNode(node, ts.Diagnostics.A_continue_statement_can_only_jump_to_a_label_of_an_enclosing_iteration_statement);
                        }

                        return false;
                    }
                    break;
                case ts.SyntaxKind.SwitchStatement:
                    if (node.kind === ts.SyntaxKind.BreakStatement && !node.label) {
                        // unlabeled break within switch statement - ok
                        return false;
                    }
                    break;
                default:
                    if (ts.isIterationStatement(current, /*lookInLabeledStatement*/ false) && !node.label) {
                        // unlabeled break or continue within iteration statement - ok
                        return false;
                    }
                    break;
            }

            current = current.parent;
        }

        if (node.label) {
            const message = node.kind === ts.SyntaxKind.BreakStatement
                ? ts.Diagnostics.A_break_statement_can_only_jump_to_a_label_of_an_enclosing_statement
                : ts.Diagnostics.A_continue_statement_can_only_jump_to_a_label_of_an_enclosing_iteration_statement;

            return grammarErrorOnNode(node, message);
        }
        else {
            const message = node.kind === ts.SyntaxKind.BreakStatement
                ? ts.Diagnostics.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement
                : ts.Diagnostics.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement;
            return grammarErrorOnNode(node, message);
        }
    }

    function checkGrammarBindingElement(node: ts.BindingElement) {
        if (node.dotDotDotToken) {
            const elements = node.parent.elements;
            if (node !== ts.last(elements)) {
                return grammarErrorOnNode(node, ts.Diagnostics.A_rest_element_must_be_last_in_a_destructuring_pattern);
            }
            checkGrammarForDisallowedTrailingComma(elements, ts.Diagnostics.A_rest_parameter_or_binding_pattern_may_not_have_a_trailing_comma);

            if (node.propertyName) {
                return grammarErrorOnNode(node.name, ts.Diagnostics.A_rest_element_cannot_have_a_property_name);
            }
        }

        if (node.dotDotDotToken && node.initializer) {
            // Error on equals token which immediately precedes the initializer
            return grammarErrorAtPos(node, node.initializer.pos - 1, 1, ts.Diagnostics.A_rest_element_cannot_have_an_initializer);
        }
    }

    function isStringOrNumberLiteralExpression(expr: ts.Expression) {
        return ts.isStringOrNumericLiteralLike(expr) ||
            expr.kind === ts.SyntaxKind.PrefixUnaryExpression && (expr as ts.PrefixUnaryExpression).operator === ts.SyntaxKind.MinusToken &&
            (expr as ts.PrefixUnaryExpression).operand.kind === ts.SyntaxKind.NumericLiteral;
    }

    function isBigIntLiteralExpression(expr: ts.Expression) {
        return expr.kind === ts.SyntaxKind.BigIntLiteral ||
            expr.kind === ts.SyntaxKind.PrefixUnaryExpression && (expr as ts.PrefixUnaryExpression).operator === ts.SyntaxKind.MinusToken &&
            (expr as ts.PrefixUnaryExpression).operand.kind === ts.SyntaxKind.BigIntLiteral;
    }

    function isSimpleLiteralEnumReference(expr: ts.Expression) {
        if ((ts.isPropertyAccessExpression(expr) || (ts.isElementAccessExpression(expr) && isStringOrNumberLiteralExpression(expr.argumentExpression))) &&
            ts.isEntityNameExpression(expr.expression)) {
            return !!(checkExpressionCached(expr).flags & ts.TypeFlags.EnumLiteral);
        }
    }

    function checkAmbientInitializer(node: ts.VariableDeclaration | ts.PropertyDeclaration | ts.PropertySignature) {
        const initializer = node.initializer;
        if (initializer) {
            const isInvalidInitializer = !(
                isStringOrNumberLiteralExpression(initializer) ||
                isSimpleLiteralEnumReference(initializer) ||
                initializer.kind === ts.SyntaxKind.TrueKeyword || initializer.kind === ts.SyntaxKind.FalseKeyword ||
                isBigIntLiteralExpression(initializer)
            );
            const isConstOrReadonly = ts.isDeclarationReadonly(node) || ts.isVariableDeclaration(node) && ts.isVarConst(node);
            if (isConstOrReadonly && !node.type) {
                if (isInvalidInitializer) {
                    return grammarErrorOnNode(initializer, ts.Diagnostics.A_const_initializer_in_an_ambient_context_must_be_a_string_or_numeric_literal_or_literal_enum_reference);
                }
            }
            else {
                return grammarErrorOnNode(initializer, ts.Diagnostics.Initializers_are_not_allowed_in_ambient_contexts);
            }
        }
    }

    function checkGrammarVariableDeclaration(node: ts.VariableDeclaration) {
        if (node.parent.parent.kind !== ts.SyntaxKind.ForInStatement && node.parent.parent.kind !== ts.SyntaxKind.ForOfStatement) {
            if (node.flags & ts.NodeFlags.Ambient) {
                checkAmbientInitializer(node);
            }
            else if (!node.initializer) {
                if (ts.isBindingPattern(node.name) && !ts.isBindingPattern(node.parent)) {
                    return grammarErrorOnNode(node, ts.Diagnostics.A_destructuring_declaration_must_have_an_initializer);
                }
                if (ts.isVarConst(node)) {
                    return grammarErrorOnNode(node, ts.Diagnostics.const_declarations_must_be_initialized);
                }
            }
        }

        if (node.exclamationToken && (node.parent.parent.kind !== ts.SyntaxKind.VariableStatement || !node.type || node.initializer || node.flags & ts.NodeFlags.Ambient)) {
            const message = node.initializer
                ? ts.Diagnostics.Declarations_with_initializers_cannot_also_have_definite_assignment_assertions
                : !node.type
                    ? ts.Diagnostics.Declarations_with_definite_assignment_assertions_must_also_have_type_annotations
                    : ts.Diagnostics.A_definite_assignment_assertion_is_not_permitted_in_this_context;
            return grammarErrorOnNode(node.exclamationToken, message);
        }

        if ((moduleKind < ts.ModuleKind.ES2015 || ts.getSourceFileOfNode(node).impliedNodeFormat === ts.ModuleKind.CommonJS) && moduleKind !== ts.ModuleKind.System &&
            !(node.parent.parent.flags & ts.NodeFlags.Ambient) && ts.hasSyntacticModifier(node.parent.parent, ts.ModifierFlags.Export)) {
            checkESModuleMarker(node.name);
        }

        const checkLetConstNames = (ts.isLet(node) || ts.isVarConst(node));

        // 1. LexicalDeclaration : LetOrConst BindingList ;
        // It is a Syntax Error if the BoundNames of BindingList contains "let".
        // 2. ForDeclaration: ForDeclaration : LetOrConst ForBinding
        // It is a Syntax Error if the BoundNames of ForDeclaration contains "let".

        // It is a SyntaxError if a VariableDeclaration or VariableDeclarationNoIn occurs within strict code
        // and its Identifier is eval or arguments
        return checkLetConstNames && checkGrammarNameInLetOrConstDeclarations(node.name);
    }

    function checkESModuleMarker(name: ts.Identifier | ts.BindingPattern): boolean {
        if (name.kind === ts.SyntaxKind.Identifier) {
            if (ts.idText(name) === "__esModule") {
                return grammarErrorOnNodeSkippedOn("noEmit", name, ts.Diagnostics.Identifier_expected_esModule_is_reserved_as_an_exported_marker_when_transforming_ECMAScript_modules);
            }
        }
        else {
            const elements = name.elements;
            for (const element of elements) {
                if (!ts.isOmittedExpression(element)) {
                    return checkESModuleMarker(element.name);
                }
            }
        }
        return false;
    }

    function checkGrammarNameInLetOrConstDeclarations(name: ts.Identifier | ts.BindingPattern): boolean {
        if (name.kind === ts.SyntaxKind.Identifier) {
            if (name.originalKeywordKind === ts.SyntaxKind.LetKeyword) {
                return grammarErrorOnNode(name, ts.Diagnostics.let_is_not_allowed_to_be_used_as_a_name_in_let_or_const_declarations);
            }
        }
        else {
            const elements = name.elements;
            for (const element of elements) {
                if (!ts.isOmittedExpression(element)) {
                    checkGrammarNameInLetOrConstDeclarations(element.name);
                }
            }
        }
        return false;
    }

    function checkGrammarVariableDeclarationList(declarationList: ts.VariableDeclarationList): boolean {
        const declarations = declarationList.declarations;
        if (checkGrammarForDisallowedTrailingComma(declarationList.declarations)) {
            return true;
        }

        if (!declarationList.declarations.length) {
            return grammarErrorAtPos(declarationList, declarations.pos, declarations.end - declarations.pos, ts.Diagnostics.Variable_declaration_list_cannot_be_empty);
        }
        return false;
    }

    function allowLetAndConstDeclarations(parent: ts.Node): boolean {
        switch (parent.kind) {
            case ts.SyntaxKind.IfStatement:
            case ts.SyntaxKind.DoStatement:
            case ts.SyntaxKind.WhileStatement:
            case ts.SyntaxKind.WithStatement:
            case ts.SyntaxKind.ForStatement:
            case ts.SyntaxKind.ForInStatement:
            case ts.SyntaxKind.ForOfStatement:
                return false;
            case ts.SyntaxKind.LabeledStatement:
                return allowLetAndConstDeclarations(parent.parent);
        }

        return true;
    }

    function checkGrammarForDisallowedLetOrConstStatement(node: ts.VariableStatement) {
        if (!allowLetAndConstDeclarations(node.parent)) {
            if (ts.isLet(node.declarationList)) {
                return grammarErrorOnNode(node, ts.Diagnostics.let_declarations_can_only_be_declared_inside_a_block);
            }
            else if (ts.isVarConst(node.declarationList)) {
                return grammarErrorOnNode(node, ts.Diagnostics.const_declarations_can_only_be_declared_inside_a_block);
            }
        }
    }

    function checkGrammarMetaProperty(node: ts.MetaProperty) {
        const escapedText = node.name.escapedText;
        switch (node.keywordToken) {
            case ts.SyntaxKind.NewKeyword:
                if (escapedText !== "target") {
                    return grammarErrorOnNode(node.name, ts.Diagnostics._0_is_not_a_valid_meta_property_for_keyword_1_Did_you_mean_2, node.name.escapedText, ts.tokenToString(node.keywordToken), "target");
                }
                break;
            case ts.SyntaxKind.ImportKeyword:
                if (escapedText !== "meta") {
                    return grammarErrorOnNode(node.name, ts.Diagnostics._0_is_not_a_valid_meta_property_for_keyword_1_Did_you_mean_2, node.name.escapedText, ts.tokenToString(node.keywordToken), "meta");
                }
                break;
        }
    }

    function hasParseDiagnostics(sourceFile: ts.SourceFile): boolean {
        return sourceFile.parseDiagnostics.length > 0;
    }

    function grammarErrorOnFirstToken(node: ts.Node, message: ts.DiagnosticMessage, arg0?: any, arg1?: any, arg2?: any): boolean {
        const sourceFile = ts.getSourceFileOfNode(node);
        if (!hasParseDiagnostics(sourceFile)) {
            const span = ts.getSpanOfTokenAtPosition(sourceFile, node.pos);
            diagnostics.add(ts.createFileDiagnostic(sourceFile, span.start, span.length, message, arg0, arg1, arg2));
            return true;
        }
        return false;
    }

    function grammarErrorAtPos(nodeForSourceFile: ts.Node, start: number, length: number, message: ts.DiagnosticMessage, arg0?: any, arg1?: any, arg2?: any): boolean {
        const sourceFile = ts.getSourceFileOfNode(nodeForSourceFile);
        if (!hasParseDiagnostics(sourceFile)) {
            diagnostics.add(ts.createFileDiagnostic(sourceFile, start, length, message, arg0, arg1, arg2));
            return true;
        }
        return false;
    }

    function grammarErrorOnNodeSkippedOn(key: keyof ts.CompilerOptions, node: ts.Node, message: ts.DiagnosticMessage, arg0?: any, arg1?: any, arg2?: any): boolean {
        const sourceFile = ts.getSourceFileOfNode(node);
        if (!hasParseDiagnostics(sourceFile)) {
            errorSkippedOn(key, node, message, arg0, arg1, arg2);
            return true;
        }
        return false;
    }

    function grammarErrorOnNode(node: ts.Node, message: ts.DiagnosticMessage, arg0?: any, arg1?: any, arg2?: any): boolean {
        const sourceFile = ts.getSourceFileOfNode(node);
        if (!hasParseDiagnostics(sourceFile)) {
            diagnostics.add(ts.createDiagnosticForNode(node, message, arg0, arg1, arg2));
            return true;
        }
        return false;
    }

    function checkGrammarConstructorTypeParameters(node: ts.ConstructorDeclaration) {
        const jsdocTypeParameters = ts.isInJSFile(node) ? ts.getJSDocTypeParameterDeclarations(node) : undefined;
        const range = node.typeParameters || jsdocTypeParameters && ts.firstOrUndefined(jsdocTypeParameters);
        if (range) {
            const pos = range.pos === range.end ? range.pos : ts.skipTrivia(ts.getSourceFileOfNode(node).text, range.pos);
            return grammarErrorAtPos(node, pos, range.end - pos, ts.Diagnostics.Type_parameters_cannot_appear_on_a_constructor_declaration);
        }
    }

    function checkGrammarConstructorTypeAnnotation(node: ts.ConstructorDeclaration) {
        const type = node.type || ts.getEffectiveReturnTypeNode(node);
        if (type) {
            return grammarErrorOnNode(type, ts.Diagnostics.Type_annotation_cannot_appear_on_a_constructor_declaration);
        }
    }

    function checkGrammarProperty(node: ts.PropertyDeclaration | ts.PropertySignature) {
        if (ts.isComputedPropertyName(node.name) && ts.isBinaryExpression(node.name.expression) && node.name.expression.operatorToken.kind === ts.SyntaxKind.InKeyword) {
            return grammarErrorOnNode(
                (node.parent as ts.ClassLikeDeclaration | ts.InterfaceDeclaration | ts.TypeLiteralNode).members[0],
                ts.Diagnostics.A_mapped_type_may_not_declare_properties_or_methods);
        }
        if (ts.isClassLike(node.parent)) {
            if (ts.isStringLiteral(node.name) && node.name.text === "constructor") {
                return grammarErrorOnNode(node.name, ts.Diagnostics.Classes_may_not_have_a_field_named_constructor);
            }
            if (checkGrammarForInvalidDynamicName(node.name, ts.Diagnostics.A_computed_property_name_in_a_class_property_declaration_must_have_a_simple_literal_type_or_a_unique_symbol_type)) {
                return true;
            }
            if (languageVersion < ts.ScriptTarget.ES2015 && ts.isPrivateIdentifier(node.name)) {
                return grammarErrorOnNode(node.name, ts.Diagnostics.Private_identifiers_are_only_available_when_targeting_ECMAScript_2015_and_higher);
            }
            if (languageVersion < ts.ScriptTarget.ES2015 && ts.isAutoAccessorPropertyDeclaration(node)) {
                return grammarErrorOnNode(node.name, ts.Diagnostics.Properties_with_the_accessor_modifier_are_only_available_when_targeting_ECMAScript_2015_and_higher);
            }
            if (ts.isAutoAccessorPropertyDeclaration(node) && checkGrammarForInvalidQuestionMark(node.questionToken, ts.Diagnostics.An_accessor_property_cannot_be_declared_optional)) {
                return true;
            }
        }
        else if (node.parent.kind === ts.SyntaxKind.InterfaceDeclaration) {
            if (checkGrammarForInvalidDynamicName(node.name, ts.Diagnostics.A_computed_property_name_in_an_interface_must_refer_to_an_expression_whose_type_is_a_literal_type_or_a_unique_symbol_type)) {
                return true;
            }

            // Interfaces cannot contain property declarations
            ts.Debug.assertNode(node, ts.isPropertySignature);
            if (node.initializer) {
                return grammarErrorOnNode(node.initializer, ts.Diagnostics.An_interface_property_cannot_have_an_initializer);
            }
        }
        else if (ts.isTypeLiteralNode(node.parent)) {
            if (checkGrammarForInvalidDynamicName(node.name, ts.Diagnostics.A_computed_property_name_in_a_type_literal_must_refer_to_an_expression_whose_type_is_a_literal_type_or_a_unique_symbol_type)) {
                return true;
            }
            // Type literals cannot contain property declarations
            ts.Debug.assertNode(node, ts.isPropertySignature);
            if (node.initializer) {
                return grammarErrorOnNode(node.initializer, ts.Diagnostics.A_type_literal_property_cannot_have_an_initializer);
            }
        }

        if (node.flags & ts.NodeFlags.Ambient) {
            checkAmbientInitializer(node);
        }

        if (ts.isPropertyDeclaration(node) && node.exclamationToken && (!ts.isClassLike(node.parent) || !node.type || node.initializer ||
            node.flags & ts.NodeFlags.Ambient || ts.isStatic(node) || ts.hasAbstractModifier(node))) {
            const message = node.initializer
                ? ts.Diagnostics.Declarations_with_initializers_cannot_also_have_definite_assignment_assertions
                : !node.type
                    ? ts.Diagnostics.Declarations_with_definite_assignment_assertions_must_also_have_type_annotations
                    : ts.Diagnostics.A_definite_assignment_assertion_is_not_permitted_in_this_context;
            return grammarErrorOnNode(node.exclamationToken, message);
        }
    }

    function checkGrammarTopLevelElementForRequiredDeclareModifier(node: ts.Node): boolean {
        // A declare modifier is required for any top level .d.ts declaration except export=, export default, export as namespace
        // interfaces and imports categories:
        //
        //  DeclarationElement:
        //     ExportAssignment
        //     export_opt   InterfaceDeclaration
        //     export_opt   TypeAliasDeclaration
        //     export_opt   ImportDeclaration
        //     export_opt   ExternalImportDeclaration
        //     export_opt   AmbientDeclaration
        //
        // TODO: The spec needs to be amended to reflect this grammar.
        if (node.kind === ts.SyntaxKind.InterfaceDeclaration ||
            node.kind === ts.SyntaxKind.TypeAliasDeclaration ||
            node.kind === ts.SyntaxKind.ImportDeclaration ||
            node.kind === ts.SyntaxKind.ImportEqualsDeclaration ||
            node.kind === ts.SyntaxKind.ExportDeclaration ||
            node.kind === ts.SyntaxKind.ExportAssignment ||
            node.kind === ts.SyntaxKind.NamespaceExportDeclaration ||
            ts.hasSyntacticModifier(node, ts.ModifierFlags.Ambient | ts.ModifierFlags.Export | ts.ModifierFlags.Default)) {
            return false;
        }

        return grammarErrorOnFirstToken(node, ts.Diagnostics.Top_level_declarations_in_d_ts_files_must_start_with_either_a_declare_or_export_modifier);
    }

    function checkGrammarTopLevelElementsForRequiredDeclareModifier(file: ts.SourceFile): boolean {
        for (const decl of file.statements) {
            if (ts.isDeclaration(decl) || decl.kind === ts.SyntaxKind.VariableStatement) {
                if (checkGrammarTopLevelElementForRequiredDeclareModifier(decl)) {
                    return true;
                }
            }
        }
        return false;
    }

    function checkGrammarSourceFile(node: ts.SourceFile): boolean {
        return !!(node.flags & ts.NodeFlags.Ambient) && checkGrammarTopLevelElementsForRequiredDeclareModifier(node);
    }

    function checkGrammarStatementInAmbientContext(node: ts.Node): boolean {
        if (node.flags & ts.NodeFlags.Ambient) {
            // Find containing block which is either Block, ModuleBlock, SourceFile
            const links = getNodeLinks(node);
            if (!links.hasReportedStatementInAmbientContext && (ts.isFunctionLike(node.parent) || ts.isAccessor(node.parent))) {
                return getNodeLinks(node).hasReportedStatementInAmbientContext = grammarErrorOnFirstToken(node, ts.Diagnostics.An_implementation_cannot_be_declared_in_ambient_contexts);
            }

            // We are either parented by another statement, or some sort of block.
            // If we're in a block, we only want to really report an error once
            // to prevent noisiness.  So use a bit on the block to indicate if
            // this has already been reported, and don't report if it has.
            //
            if (node.parent.kind === ts.SyntaxKind.Block || node.parent.kind === ts.SyntaxKind.ModuleBlock || node.parent.kind === ts.SyntaxKind.SourceFile) {
                const links = getNodeLinks(node.parent);
                // Check if the containing block ever report this error
                if (!links.hasReportedStatementInAmbientContext) {
                    return links.hasReportedStatementInAmbientContext = grammarErrorOnFirstToken(node, ts.Diagnostics.Statements_are_not_allowed_in_ambient_contexts);
                }
            }
            else {
                // We must be parented by a statement.  If so, there's no need
                // to report the error as our parent will have already done it.
                // Debug.assert(isStatement(node.parent));
            }
        }
        return false;
    }

    function checkGrammarNumericLiteral(node: ts.NumericLiteral): boolean {
        // Grammar checking
        if (node.numericLiteralFlags & ts.TokenFlags.Octal) {
            let diagnosticMessage: ts.DiagnosticMessage | undefined;
            if (languageVersion >= ts.ScriptTarget.ES5) {
                diagnosticMessage = ts.Diagnostics.Octal_literals_are_not_available_when_targeting_ECMAScript_5_and_higher_Use_the_syntax_0;
            }
            else if (ts.isChildOfNodeWithKind(node, ts.SyntaxKind.LiteralType)) {
                diagnosticMessage = ts.Diagnostics.Octal_literal_types_must_use_ES2015_syntax_Use_the_syntax_0;
            }
            else if (ts.isChildOfNodeWithKind(node, ts.SyntaxKind.EnumMember)) {
                diagnosticMessage = ts.Diagnostics.Octal_literals_are_not_allowed_in_enums_members_initializer_Use_the_syntax_0;
            }
            if (diagnosticMessage) {
                const withMinus = ts.isPrefixUnaryExpression(node.parent) && node.parent.operator === ts.SyntaxKind.MinusToken;
                const literal = (withMinus ? "-" : "") + "0o" + node.text;
                return grammarErrorOnNode(withMinus ? node.parent : node, diagnosticMessage, literal);
            }
        }

        // Realism (size) checking
        checkNumericLiteralValueSize(node);

        return false;
    }

    function checkNumericLiteralValueSize(node: ts.NumericLiteral) {
        // We should test against `getTextOfNode(node)` rather than `node.text`, because `node.text` for large numeric literals can contain "."
        // e.g. `node.text` for numeric literal `1100000000000000000000` is `1.1e21`.
        const isFractional = ts.getTextOfNode(node).indexOf(".") !== -1;
        const isScientific = node.numericLiteralFlags & ts.TokenFlags.Scientific;

        // Scientific notation (e.g. 2e54 and 1e00000000010) can't be converted to bigint
        // Fractional numbers (e.g. 9000000000000000.001) are inherently imprecise anyway
        if (isFractional || isScientific) {
            return;
        }

        // Here `node` is guaranteed to be a numeric literal representing an integer.
        // We need to judge whether the integer `node` represents is <= 2 ** 53 - 1, which can be accomplished by comparing to `value` defined below because:
        // 1) when `node` represents an integer <= 2 ** 53 - 1, `node.text` is its exact string representation and thus `value` precisely represents the integer.
        // 2) otherwise, although `node.text` may be imprecise string representation, its mathematical value and consequently `value` cannot be less than 2 ** 53,
        //    thus the result of the predicate won't be affected.
        const value = +node.text;
        if (value <= 2 ** 53 - 1) {
            return;
        }

        addErrorOrSuggestion(/*isError*/ false, ts.createDiagnosticForNode(node, ts.Diagnostics.Numeric_literals_with_absolute_values_equal_to_2_53_or_greater_are_too_large_to_be_represented_accurately_as_integers));
    }

    function checkGrammarBigIntLiteral(node: ts.BigIntLiteral): boolean {
        const literalType = ts.isLiteralTypeNode(node.parent) ||
            ts.isPrefixUnaryExpression(node.parent) && ts.isLiteralTypeNode(node.parent.parent);
        if (!literalType) {
            if (languageVersion < ts.ScriptTarget.ES2020) {
                if (grammarErrorOnNode(node, ts.Diagnostics.BigInt_literals_are_not_available_when_targeting_lower_than_ES2020)) {
                    return true;
                }
            }
        }
        return false;
    }

    function grammarErrorAfterFirstToken(node: ts.Node, message: ts.DiagnosticMessage, arg0?: any, arg1?: any, arg2?: any): boolean {
        const sourceFile = ts.getSourceFileOfNode(node);
        if (!hasParseDiagnostics(sourceFile)) {
            const span = ts.getSpanOfTokenAtPosition(sourceFile, node.pos);
            diagnostics.add(ts.createFileDiagnostic(sourceFile, ts.textSpanEnd(span), /*length*/ 0, message, arg0, arg1, arg2));
            return true;
        }
        return false;
    }

    function getAmbientModules(): ts.Symbol[] {
        if (!ambientModulesCache) {
            ambientModulesCache = [];
            globals.forEach((global, sym) => {
                // No need to `unescapeLeadingUnderscores`, an escaped symbol is never an ambient module.
                if (ambientModuleSymbolRegex.test(sym as string)) {
                    ambientModulesCache!.push(global);
                }
            });
        }
        return ambientModulesCache;
    }

    function checkGrammarImportClause(node: ts.ImportClause): boolean {
        if (node.isTypeOnly && node.name && node.namedBindings) {
            return grammarErrorOnNode(node, ts.Diagnostics.A_type_only_import_can_specify_a_default_import_or_named_bindings_but_not_both);
        }
        if (node.isTypeOnly && node.namedBindings?.kind === ts.SyntaxKind.NamedImports) {
            return checkGrammarNamedImportsOrExports(node.namedBindings);
        }
        return false;
    }

    function checkGrammarNamedImportsOrExports(namedBindings: ts.NamedImportsOrExports): boolean {
        return !!ts.forEach<ts.ImportSpecifier | ts.ExportSpecifier, boolean>(namedBindings.elements, specifier => {
            if (specifier.isTypeOnly) {
                return grammarErrorOnFirstToken(
                    specifier,
                    specifier.kind === ts.SyntaxKind.ImportSpecifier
                        ? ts.Diagnostics.The_type_modifier_cannot_be_used_on_a_named_import_when_import_type_is_used_on_its_import_statement
                        : ts.Diagnostics.The_type_modifier_cannot_be_used_on_a_named_export_when_export_type_is_used_on_its_export_statement);
            }
        });
    }

    function checkGrammarImportCallExpression(node: ts.ImportCall): boolean {
        if (moduleKind === ts.ModuleKind.ES2015) {
            return grammarErrorOnNode(node, ts.Diagnostics.Dynamic_imports_are_only_supported_when_the_module_flag_is_set_to_es2020_es2022_esnext_commonjs_amd_system_umd_node16_or_nodenext);
        }

        if (node.typeArguments) {
            return grammarErrorOnNode(node, ts.Diagnostics.This_use_of_import_is_invalid_import_calls_can_be_written_but_they_must_have_parentheses_and_cannot_have_type_arguments);
        }

        const nodeArguments = node.arguments;
        if (moduleKind !== ts.ModuleKind.ESNext && moduleKind !== ts.ModuleKind.NodeNext && moduleKind !== ts.ModuleKind.Node16) {
            // We are allowed trailing comma after proposal-import-assertions.
            checkGrammarForDisallowedTrailingComma(nodeArguments);

            if (nodeArguments.length > 1) {
                const assertionArgument = nodeArguments[1];
                return grammarErrorOnNode(assertionArgument, ts.Diagnostics.Dynamic_imports_only_support_a_second_argument_when_the_module_option_is_set_to_esnext_node16_or_nodenext);
            }
        }

        if (nodeArguments.length === 0 || nodeArguments.length > 2) {
            return grammarErrorOnNode(node, ts.Diagnostics.Dynamic_imports_can_only_accept_a_module_specifier_and_an_optional_assertion_as_arguments);
        }

        // see: parseArgumentOrArrayLiteralElement...we use this function which parse arguments of callExpression to parse specifier for dynamic import.
        // parseArgumentOrArrayLiteralElement allows spread element to be in an argument list which is not allowed as specifier in dynamic import.
        const spreadElement = ts.find(nodeArguments, ts.isSpreadElement);
        if (spreadElement) {
            return grammarErrorOnNode(spreadElement, ts.Diagnostics.Argument_of_dynamic_import_cannot_be_spread_element);
        }
        return false;
    }

    function findMatchingTypeReferenceOrTypeAliasReference(source: ts.Type, unionTarget: ts.UnionOrIntersectionType) {
        const sourceObjectFlags = ts.getObjectFlags(source);
        if (sourceObjectFlags & (ts.ObjectFlags.Reference | ts.ObjectFlags.Anonymous) && unionTarget.flags & ts.TypeFlags.Union) {
            return ts.find(unionTarget.types, target => {
                if (target.flags & ts.TypeFlags.Object) {
                    const overlapObjFlags = sourceObjectFlags & ts.getObjectFlags(target);
                    if (overlapObjFlags & ts.ObjectFlags.Reference) {
                        return (source as ts.TypeReference).target === (target as ts.TypeReference).target;
                    }
                    if (overlapObjFlags & ts.ObjectFlags.Anonymous) {
                        return !!(source as ts.AnonymousType).aliasSymbol && (source as ts.AnonymousType).aliasSymbol === (target as ts.AnonymousType).aliasSymbol;
                    }
                }
                return false;
            });
        }
    }

    function findBestTypeForObjectLiteral(source: ts.Type, unionTarget: ts.UnionOrIntersectionType) {
        if (ts.getObjectFlags(source) & ts.ObjectFlags.ObjectLiteral && someType(unionTarget, isArrayLikeType)) {
            return ts.find(unionTarget.types, t => !isArrayLikeType(t));
        }
    }

    function findBestTypeForInvokable(source: ts.Type, unionTarget: ts.UnionOrIntersectionType) {
        let signatureKind = ts.SignatureKind.Call;
        const hasSignatures = getSignaturesOfType(source, signatureKind).length > 0 ||
            (signatureKind = ts.SignatureKind.Construct, getSignaturesOfType(source, signatureKind).length > 0);
        if (hasSignatures) {
            return ts.find(unionTarget.types, t => getSignaturesOfType(t, signatureKind).length > 0);
        }
    }

    function findMostOverlappyType(source: ts.Type, unionTarget: ts.UnionOrIntersectionType) {
        let bestMatch: ts.Type | undefined;
        if (!(source.flags & (ts.TypeFlags.Primitive | ts.TypeFlags.InstantiablePrimitive))) {
            let matchingCount = 0;
            for (const target of unionTarget.types) {
                if (!(target.flags & (ts.TypeFlags.Primitive | ts.TypeFlags.InstantiablePrimitive))) {
                    const overlap = getIntersectionType([getIndexType(source), getIndexType(target)]);
                    if (overlap.flags & ts.TypeFlags.Index) {
                        // perfect overlap of keys
                        return target;
                    }
                    else if (isUnitType(overlap) || overlap.flags & ts.TypeFlags.Union) {
                        // We only want to account for literal types otherwise.
                        // If we have a union of index types, it seems likely that we
                        // needed to elaborate between two generic mapped types anyway.
                        const len = overlap.flags & ts.TypeFlags.Union ? ts.countWhere((overlap as ts.UnionType).types, isUnitType) : 1;
                        if (len >= matchingCount) {
                            bestMatch = target;
                            matchingCount = len;
                        }
                    }
                }
            }
        }
        return bestMatch;
    }

    function filterPrimitivesIfContainsNonPrimitive(type: ts.UnionType) {
        if (maybeTypeOfKind(type, ts.TypeFlags.NonPrimitive)) {
            const result = filterType(type, t => !(t.flags & ts.TypeFlags.Primitive));
            if (!(result.flags & ts.TypeFlags.Never)) {
                return result;
            }
        }
        return type;
    }

    // Keep this up-to-date with the same logic within `getApparentTypeOfContextualType`, since they should behave similarly
    function findMatchingDiscriminantType(source: ts.Type, target: ts.Type, isRelatedTo: (source: ts.Type, target: ts.Type) => ts.Ternary, skipPartial?: boolean) {
        if (target.flags & ts.TypeFlags.Union && source.flags & (ts.TypeFlags.Intersection | ts.TypeFlags.Object)) {
            const match = getMatchingUnionConstituentForType(target as ts.UnionType, source);
            if (match) {
                return match;
            }
            const sourceProperties = getPropertiesOfType(source);
            if (sourceProperties) {
                const sourcePropertiesFiltered = findDiscriminantProperties(sourceProperties, target);
                if (sourcePropertiesFiltered) {
                    return discriminateTypeByDiscriminableItems(target as ts.UnionType, ts.map(sourcePropertiesFiltered, p => ([() => getTypeOfSymbol(p), p.escapedName] as [() => ts.Type, ts.__String])), isRelatedTo, /*defaultValue*/ undefined, skipPartial);
                }
            }
        }
        return undefined;
    }
}

function isNotAccessor(declaration: ts.Declaration): boolean {
    // Accessors check for their own matching duplicates, and in contexts where they are valid, there are already duplicate identifier checks
    return !ts.isAccessor(declaration);
}

function isNotOverload(declaration: ts.Declaration): boolean {
    return (declaration.kind !== ts.SyntaxKind.FunctionDeclaration && declaration.kind !== ts.SyntaxKind.MethodDeclaration) ||
            !!(declaration as ts.FunctionDeclaration).body;
}

/** Like 'isDeclarationName', but returns true for LHS of `import { x as y }` or `export { x as y }`. */
function isDeclarationNameOrImportPropertyName(name: ts.Node): boolean {
    switch (name.parent.kind) {
        case ts.SyntaxKind.ImportSpecifier:
        case ts.SyntaxKind.ExportSpecifier:
            return ts.isIdentifier(name);
        default:
            return ts.isDeclarationName(name);
    }
}

namespace JsxNames {
    export const JSX = "JSX" as ts.__String;
    export const IntrinsicElements = "IntrinsicElements" as ts.__String;
    export const ElementClass = "ElementClass" as ts.__String;
    export const ElementAttributesPropertyNameContainer = "ElementAttributesProperty" as ts.__String; // TODO: Deprecate and remove support
    export const ElementChildrenAttributeNameContainer = "ElementChildrenAttribute" as ts.__String;
    export const Element = "Element" as ts.__String;
    export const IntrinsicAttributes = "IntrinsicAttributes" as ts.__String;
    export const IntrinsicClassAttributes = "IntrinsicClassAttributes" as ts.__String;
    export const LibraryManagedAttributes = "LibraryManagedAttributes" as ts.__String;
}

function getIterationTypesKeyFromIterationTypeKind(typeKind: IterationTypeKind) {
    switch (typeKind) {
        case IterationTypeKind.Yield: return "yieldType";
        case IterationTypeKind.Return: return "returnType";
        case IterationTypeKind.Next: return "nextType";
    }
}

/** @internal */
export function signatureHasRestParameter(s: ts.Signature) {
    return !!(s.flags & ts.SignatureFlags.HasRestParameter);
}

/** @internal */
export function signatureHasLiteralTypes(s: ts.Signature) {
    return !!(s.flags & ts.SignatureFlags.HasLiteralTypes);
}
