//// [tests/cases/conformance/types/typeRelationships/widenedTypes/arrayLiteralWidened.ts] ////

=== arrayLiteralWidened.ts ===
// array literals are widened upon assignment according to their element type

var a = []; // any[]
>a : never[]
>[] : never[]

var a = [,,];
>a : never[]
>[,,] : undefined[]
> : undefined
> : undefined

var a = [null, null];
>a : never[]
>[null, null] : null[]

var a = [undefined, undefined];
>a : never[]
>[undefined, undefined] : undefined[]
>undefined : undefined
>undefined : undefined

var b = [[], [null, null]]; // any[][]
>b : null[][]
>[[], [null, null]] : null[][]
>[] : never[]
>[null, null] : null[]

var b = [[], []];
>b : null[][]
>[[], []] : never[][]
>[] : never[]
>[] : never[]

var b = [[undefined, undefined]];
>b : null[][]
>[[undefined, undefined]] : undefined[][]
>[undefined, undefined] : undefined[]
>undefined : undefined
>undefined : undefined

var c = [[[]]]; // any[][][]
>c : never[][][]
>[[[]]] : never[][][]
>[[]] : never[][]
>[] : never[]

var c = [[[null]],[undefined]]
>c : never[][][]
>[[[null]],[undefined]] : (undefined[] | null[][])[]
>[[null]] : null[][]
>[null] : null[]
>[undefined] : undefined[]
>undefined : undefined

// no widening when one or more elements are non-widening

var x: undefined = undefined;
>x : undefined
>undefined : undefined

var d = [x];
>d : undefined[]
>[x] : undefined[]
>x : undefined

var d = [, x];
>d : undefined[]
>[, x] : undefined[]
> : undefined
>x : undefined

var d = [undefined, x];
>d : undefined[]
>[undefined, x] : undefined[]
>undefined : undefined
>x : undefined

