constructSignatureAssignabilityInInheritance3.ts(5,18): error TS2564: Property 'foo' has no initializer and is not definitely assigned in the constructor.
constructSignatureAssignabilityInInheritance3.ts(6,34): error TS2564: Property 'bar' has no initializer and is not definitely assigned in the constructor.
constructSignatureAssignabilityInInheritance3.ts(7,38): error TS2564: Property 'baz' has no initializer and is not definitely assigned in the constructor.
constructSignatureAssignabilityInInheritance3.ts(8,39): error TS2564: Property 'bing' has no initializer and is not definitely assigned in the constructor.
constructSignatureAssignabilityInInheritance3.ts(41,19): error TS2430: Interface 'I2<T, U>' incorrectly extends interface 'A'.
  Types of property 'a2' are incompatible.
    Type 'new (x: T) => U[]' is not assignable to type 'new (x: number) => string[]'.
      Types of parameters 'x' and 'x' are incompatible.
        Type 'number' is not assignable to type 'T'.
          'T' could be instantiated with an arbitrary type which could be unrelated to 'number'.
constructSignatureAssignabilityInInheritance3.ts(50,19): error TS2430: Interface 'I4' incorrectly extends interface 'A'.
  Types of property 'a8' are incompatible.
    Type 'new <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: { foo: number; }) => U) => (r: T) => U' is not assignable to type 'new (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived'.
      Types of parameters 'y' and 'y' are incompatible.
        Types of parameters 'arg2' and 'arg2' are incompatible.
          Type '{ foo: number; }' is not assignable to type 'Base'.
            Types of property 'foo' are incompatible.
              Type 'number' is not assignable to type 'string'.
constructSignatureAssignabilityInInheritance3.ts(54,19): error TS2430: Interface 'I4B' incorrectly extends interface 'A'.
  Types of property 'a10' are incompatible.
    Type 'new <T extends Derived>(...x: T[]) => T' is not assignable to type 'new (...x: Base[]) => Base'.
      Types of parameters 'x' and 'x' are incompatible.
        Property 'bar' is missing in type 'Base' but required in type 'Derived'.
constructSignatureAssignabilityInInheritance3.ts(58,19): error TS2430: Interface 'I4C' incorrectly extends interface 'A'.
  Types of property 'a11' are incompatible.
    Type 'new <T extends Derived>(x: T, y: T) => T' is not assignable to type 'new (x: { foo: string; }, y: { foo: string; bar: string; }) => Base'.
      Types of parameters 'x' and 'x' are incompatible.
        Property 'bar' is missing in type '{ foo: string; }' but required in type 'Derived'.
constructSignatureAssignabilityInInheritance3.ts(66,19): error TS2430: Interface 'I6' incorrectly extends interface 'A'.
  Types of property 'a15' are incompatible.
    Type 'new <T>(x: { a: T; b: T; }) => T' is not assignable to type 'new (x: { a: string; b: number; }) => number'.
      Types of parameters 'x' and 'x' are incompatible.
        Type '{ a: string; b: number; }' is not assignable to type '{ a: string; b: string; }'.
          Types of property 'b' are incompatible.
            Type 'number' is not assignable to type 'string'.
constructSignatureAssignabilityInInheritance3.ts(70,19): error TS2430: Interface 'I7' incorrectly extends interface 'A'.
  Types of property 'a15' are incompatible.
    Type 'new <T extends Base>(x: { a: T; b: T; }) => number' is not assignable to type 'new (x: { a: string; b: number; }) => number'.
      Types of parameters 'x' and 'x' are incompatible.
        Type '{ a: string; b: number; }' is not assignable to type '{ a: Base; b: Base; }'.
          Types of property 'a' are incompatible.
            Type 'string' is not assignable to type 'Base'.
constructSignatureAssignabilityInInheritance3.ts(86,19): error TS2430: Interface 'I6' incorrectly extends interface 'B'.
  The types returned by 'new a2(...)' are incompatible between these types.
    Type 'string[]' is not assignable to type 'T[]'.
      Type 'string' is not assignable to type 'T'.
        'T' could be instantiated with an arbitrary type which could be unrelated to 'string'.
constructSignatureAssignabilityInInheritance3.ts(95,19): error TS2430: Interface 'I7' incorrectly extends interface 'C'.
  The types returned by 'new a2(...)' are incompatible between these types.
    Type 'T[]' is not assignable to type 'string[]'.
      Type 'T' is not assignable to type 'string'.


==== constructSignatureAssignabilityInInheritance3.ts (12 errors) ====
    // checking subtype relations for function types as it relates to contextual signature instantiation
    // error cases
    
    module Errors {
        class Base { foo: string; }
                     ~~~
!!! error TS2564: Property 'foo' has no initializer and is not definitely assigned in the constructor.
        class Derived extends Base { bar: string; }
                                     ~~~
!!! error TS2564: Property 'bar' has no initializer and is not definitely assigned in the constructor.
        class Derived2 extends Derived { baz: string; }
                                         ~~~
!!! error TS2564: Property 'baz' has no initializer and is not definitely assigned in the constructor.
        class OtherDerived extends Base { bing: string; }
                                          ~~~~
!!! error TS2564: Property 'bing' has no initializer and is not definitely assigned in the constructor.
    
        module WithNonGenericSignaturesInBaseType {
            // base type with non-generic call signatures
            interface A {
                a2: new (x: number) => string[];
                a7: new (x: (arg: Base) => Derived) => (r: Base) => Derived2;
                a8: new (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived;
                a10: new (...x: Base[]) => Base;
                a11: new (x: { foo: string }, y: { foo: string; bar: string }) => Base;
                a12: new (x: Array<Base>, y: Array<Derived2>) => Array<Derived>;
                a14: {
                    new (x: number): number[];
                    new (x: string): string[];
                };
                a15: new (x: { a: string; b: number }) => number;
                a16: {
                    // type of parameter is overload set which means we can't do inference based on this type
                    new (x: {
                        new (a: number): number;
                        new (a?: number): number;
                    }): number[];
                    new (x: {
                        new (a: boolean): boolean;
                        new (a?: boolean): boolean;
                    }): boolean[];
                };
            }
    
            interface I extends A {
                a2: new <T, U>(x: T) => U[]; // error, contextual signature instantiation doesn't relate return types so U is {}, not a subtype of string[]
            }
    
            interface I2<T, U> extends A {
                      ~~
!!! error TS2430: Interface 'I2<T, U>' incorrectly extends interface 'A'.
!!! error TS2430:   Types of property 'a2' are incompatible.
!!! error TS2430:     Type 'new (x: T) => U[]' is not assignable to type 'new (x: number) => string[]'.
!!! error TS2430:       Types of parameters 'x' and 'x' are incompatible.
!!! error TS2430:         Type 'number' is not assignable to type 'T'.
!!! error TS2430:           'T' could be instantiated with an arbitrary type which could be unrelated to 'number'.
                a2: new (x: T) => U[]; // error, no contextual signature instantiation since I2.a2 is not generic
            }
    
            interface I3 extends A {
                // valid, no inferences for V so it defaults to Derived2
                a7: new <T extends Base, U extends Derived, V extends Derived2>(x: (arg: T) => U) => (r: T) => V;
            }
    
            interface I4 extends A {
                      ~~
!!! error TS2430: Interface 'I4' incorrectly extends interface 'A'.
!!! error TS2430:   Types of property 'a8' are incompatible.
!!! error TS2430:     Type 'new <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: { foo: number; }) => U) => (r: T) => U' is not assignable to type 'new (x: (arg: Base) => Derived, y: (arg2: Base) => Derived) => (r: Base) => Derived'.
!!! error TS2430:       Types of parameters 'y' and 'y' are incompatible.
!!! error TS2430:         Types of parameters 'arg2' and 'arg2' are incompatible.
!!! error TS2430:           Type '{ foo: number; }' is not assignable to type 'Base'.
!!! error TS2430:             Types of property 'foo' are incompatible.
!!! error TS2430:               Type 'number' is not assignable to type 'string'.
                a8: new <T extends Base, U extends Derived>(x: (arg: T) => U, y: (arg2: { foo: number; }) => U) => (r: T) => U; // error, type mismatch
            }
    
            interface I4B extends A {
                      ~~~
!!! error TS2430: Interface 'I4B' incorrectly extends interface 'A'.
!!! error TS2430:   Types of property 'a10' are incompatible.
!!! error TS2430:     Type 'new <T extends Derived>(...x: T[]) => T' is not assignable to type 'new (...x: Base[]) => Base'.
!!! error TS2430:       Types of parameters 'x' and 'x' are incompatible.
!!! error TS2430:         Property 'bar' is missing in type 'Base' but required in type 'Derived'.
!!! related TS2728 constructSignatureAssignabilityInInheritance3.ts:6:34: 'bar' is declared here.
                a10: new <T extends Derived>(...x: T[]) => T; // valid, parameter covariance works even after contextual signature instantiation
            }
    
            interface I4C extends A {
                      ~~~
!!! error TS2430: Interface 'I4C' incorrectly extends interface 'A'.
!!! error TS2430:   Types of property 'a11' are incompatible.
!!! error TS2430:     Type 'new <T extends Derived>(x: T, y: T) => T' is not assignable to type 'new (x: { foo: string; }, y: { foo: string; bar: string; }) => Base'.
!!! error TS2430:       Types of parameters 'x' and 'x' are incompatible.
!!! error TS2430:         Property 'bar' is missing in type '{ foo: string; }' but required in type 'Derived'.
!!! related TS2728 constructSignatureAssignabilityInInheritance3.ts:6:34: 'bar' is declared here.
                a11: new <T extends Derived>(x: T, y: T) => T; // valid, even though x is a Base, parameter covariance works even after contextual signature instantiation
            }
    
            interface I4E extends A {
                a12: new <T extends Array<Derived2>>(x: Array<Base>, y: Array<Base>) => T; // valid, no inferences for T, defaults to Array<Derived2>
            }
    
            interface I6 extends A {
                      ~~
!!! error TS2430: Interface 'I6' incorrectly extends interface 'A'.
!!! error TS2430:   Types of property 'a15' are incompatible.
!!! error TS2430:     Type 'new <T>(x: { a: T; b: T; }) => T' is not assignable to type 'new (x: { a: string; b: number; }) => number'.
!!! error TS2430:       Types of parameters 'x' and 'x' are incompatible.
!!! error TS2430:         Type '{ a: string; b: number; }' is not assignable to type '{ a: string; b: string; }'.
!!! error TS2430:           Types of property 'b' are incompatible.
!!! error TS2430:             Type 'number' is not assignable to type 'string'.
                a15: new <T>(x: { a: T; b: T }) => T; // error, T is {} which isn't an acceptable return type
            }
    
            interface I7 extends A {
                      ~~
!!! error TS2430: Interface 'I7' incorrectly extends interface 'A'.
!!! error TS2430:   Types of property 'a15' are incompatible.
!!! error TS2430:     Type 'new <T extends Base>(x: { a: T; b: T; }) => number' is not assignable to type 'new (x: { a: string; b: number; }) => number'.
!!! error TS2430:       Types of parameters 'x' and 'x' are incompatible.
!!! error TS2430:         Type '{ a: string; b: number; }' is not assignable to type '{ a: Base; b: Base; }'.
!!! error TS2430:           Types of property 'a' are incompatible.
!!! error TS2430:             Type 'string' is not assignable to type 'Base'.
                a15: new <T extends Base>(x: { a: T; b: T }) => number; // error, T defaults to Base, which is not compatible with number or string
            }
    
            interface I8 extends A {
                // ok, we relate each signature of a16 to b16, and within that, we make inferences from two different signatures in the respective A.a16 signature
                a16: new <T>(x: new (a: T) => T) => T[];
            }
        }
    
        module WithGenericSignaturesInBaseType {
            // base type has generic call signature
            interface B {
                a2: new <T>(x: T) => T[];
            }
    
            interface I6 extends B {
                      ~~
!!! error TS2430: Interface 'I6' incorrectly extends interface 'B'.
!!! error TS2430:   The types returned by 'new a2(...)' are incompatible between these types.
!!! error TS2430:     Type 'string[]' is not assignable to type 'T[]'.
!!! error TS2430:       Type 'string' is not assignable to type 'T'.
!!! error TS2430:         'T' could be instantiated with an arbitrary type which could be unrelated to 'string'.
                a2: new <T>(x: T) => string[]; // error
            }
    
            // base type has generic call signature
            interface C {
                a2: new <T>(x: T) => string[];
            }
    
            interface I7 extends C {
                      ~~
!!! error TS2430: Interface 'I7' incorrectly extends interface 'C'.
!!! error TS2430:   The types returned by 'new a2(...)' are incompatible between these types.
!!! error TS2430:     Type 'T[]' is not assignable to type 'string[]'.
!!! error TS2430:       Type 'T' is not assignable to type 'string'.
!!! related TS2208 constructSignatureAssignabilityInInheritance3.ts:92:22: This type parameter might need an `extends string` constraint.
                a2: new <T>(x: T) => T[]; // error
            }
    
            // base type has a generic call signature with overloads
            interface D {
                a14: {
                    new <T extends Derived>(x: T): number[];
                    new <U extends Base>(x: U): number[];
                };
            }
    
            interface I8 extends D {
                a14: new <T extends Base>(x: T) => number[];
            }
        }
    }