privateNameStaticFieldCallExpression.ts(2,39): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
privateNameStaticFieldCallExpression.ts(3,36): error TS7006: Parameter 'a' implicitly has an 'any' type.
privateNameStaticFieldCallExpression.ts(3,39): error TS7019: Rest parameter 'b' implicitly has an 'any[]' type.
privateNameStaticFieldCallExpression.ts(10,9): error TS7009: 'new' expression, whose target lacks a construct signature, implicitly has an 'any' type.
privateNameStaticFieldCallExpression.ts(14,19): error TS7009: 'new' expression, whose target lacks a construct signature, implicitly has an 'any' type.


==== privateNameStaticFieldCallExpression.ts (5 errors) ====
    class A {
        static #fieldFunc = function () { this.x = 10; };
                                          ~~~~
!!! error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
!!! related TS2738 privateNameStaticFieldCallExpression.ts:2:25: An outer value of 'this' is shadowed by this container.
        static #fieldFunc2 = function (a, ...b) {};
                                       ~
!!! error TS7006: Parameter 'a' implicitly has an 'any' type.
                                          ~~~~
!!! error TS7019: Rest parameter 'b' implicitly has an 'any[]' type.
        x = 1;
        test() {
            A.#fieldFunc();
            A.#fieldFunc?.();
            const func = A.#fieldFunc;
            func();
            new A.#fieldFunc();
            ~~~~~~~~~~~~~~~~~~
!!! error TS7009: 'new' expression, whose target lacks a construct signature, implicitly has an 'any' type.
    
            const arr = [ 1, 2 ];
            A.#fieldFunc2(0, ...arr, 3);
            const b = new A.#fieldFunc2(0, ...arr, 3);
                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS7009: 'new' expression, whose target lacks a construct signature, implicitly has an 'any' type.
            const str = A.#fieldFunc2`head${1}middle${2}tail`;
            this.getClass().#fieldFunc2`test${1}and${2}`;
        }
        getClass() { return A; }
    }
    