capturedLetConstInLoop1_ES6.ts(18,9): error TS7034: Variable 'x' implicitly has type 'any' in some locations where its type cannot be determined.
capturedLetConstInLoop1_ES6.ts(19,26): error TS7005: Variable 'x' implicitly has an 'any' type.
capturedLetConstInLoop1_ES6.ts(20,12): error TS7005: Variable 'x' implicitly has an 'any' type.
capturedLetConstInLoop1_ES6.ts(24,9): error TS7034: Variable 'x' implicitly has type 'any' in some locations where its type cannot be determined.
capturedLetConstInLoop1_ES6.ts(25,26): error TS7005: Variable 'x' implicitly has an 'any' type.
capturedLetConstInLoop1_ES6.ts(26,12): error TS7005: Variable 'x' implicitly has an 'any' type.
capturedLetConstInLoop1_ES6.ts(41,9): error TS7034: Variable 'x' implicitly has type 'any' in some locations where its type cannot be determined.
capturedLetConstInLoop1_ES6.ts(41,12): error TS7034: Variable 'y' implicitly has type 'any' in some locations where its type cannot be determined.
capturedLetConstInLoop1_ES6.ts(42,26): error TS7005: Variable 'x' implicitly has an 'any' type.
capturedLetConstInLoop1_ES6.ts(42,30): error TS7005: Variable 'y' implicitly has an 'any' type.
capturedLetConstInLoop1_ES6.ts(43,12): error TS7005: Variable 'x' implicitly has an 'any' type.
capturedLetConstInLoop1_ES6.ts(43,16): error TS7005: Variable 'y' implicitly has an 'any' type.
capturedLetConstInLoop1_ES6.ts(47,9): error TS7034: Variable 'x' implicitly has type 'any' in some locations where its type cannot be determined.
capturedLetConstInLoop1_ES6.ts(47,12): error TS7034: Variable 'y' implicitly has type 'any' in some locations where its type cannot be determined.
capturedLetConstInLoop1_ES6.ts(48,26): error TS7005: Variable 'x' implicitly has an 'any' type.
capturedLetConstInLoop1_ES6.ts(48,30): error TS7005: Variable 'y' implicitly has an 'any' type.
capturedLetConstInLoop1_ES6.ts(49,12): error TS7005: Variable 'x' implicitly has an 'any' type.
capturedLetConstInLoop1_ES6.ts(49,16): error TS7005: Variable 'y' implicitly has an 'any' type.


==== capturedLetConstInLoop1_ES6.ts (18 errors) ====
    //==== let
    for (let x in {}) {
        (function() { return x});
        (() => x);
    }
    
    for (let x of []) {
        (function() { return x});
        (() => x);
    }
    
    for (let x = 0; x < 1; ++x) {
        (function() { return x});
        (() => x);
    }
    
    while (1 === 1) {
        let x;
            ~
!!! error TS7034: Variable 'x' implicitly has type 'any' in some locations where its type cannot be determined.
        (function() { return x});
                             ~
!!! error TS7005: Variable 'x' implicitly has an 'any' type.
        (() => x);
               ~
!!! error TS7005: Variable 'x' implicitly has an 'any' type.
    }
    
    do {
        let x;
            ~
!!! error TS7034: Variable 'x' implicitly has type 'any' in some locations where its type cannot be determined.
        (function() { return x});
                             ~
!!! error TS7005: Variable 'x' implicitly has an 'any' type.
        (() => x);
               ~
!!! error TS7005: Variable 'x' implicitly has an 'any' type.
    } while (1 === 1)
    
    for (let y = 0; y < 1; ++y) {
        let x = 1;
        (function() { return x});
        (() => x);
    }
    
    for (let x = 0, y = 1; x < 1; ++x) {
        (function() { return x + y});
        (() => x + y);
    }
    
    while (1 === 1) {
        let x, y;
            ~
!!! error TS7034: Variable 'x' implicitly has type 'any' in some locations where its type cannot be determined.
               ~
!!! error TS7034: Variable 'y' implicitly has type 'any' in some locations where its type cannot be determined.
        (function() { return x + y});
                             ~
!!! error TS7005: Variable 'x' implicitly has an 'any' type.
                                 ~
!!! error TS7005: Variable 'y' implicitly has an 'any' type.
        (() => x + y);
               ~
!!! error TS7005: Variable 'x' implicitly has an 'any' type.
                   ~
!!! error TS7005: Variable 'y' implicitly has an 'any' type.
    }
    
    do {
        let x, y;
            ~
!!! error TS7034: Variable 'x' implicitly has type 'any' in some locations where its type cannot be determined.
               ~
!!! error TS7034: Variable 'y' implicitly has type 'any' in some locations where its type cannot be determined.
        (function() { return x + y});
                             ~
!!! error TS7005: Variable 'x' implicitly has an 'any' type.
                                 ~
!!! error TS7005: Variable 'y' implicitly has an 'any' type.
        (() => x + y);
               ~
!!! error TS7005: Variable 'x' implicitly has an 'any' type.
                   ~
!!! error TS7005: Variable 'y' implicitly has an 'any' type.
    } while (1 === 1)
    
    for (let y = 0; y < 1; ++y) {
        let x = 1;
        (function() { return x + y});
        (() => x + y);
    }
    
    //=========const
    for (const x in {}) {
        (function() { return x});
        (() => x);
    }
    
    for (const x of []) {
        (function() { return x});
        (() => x);
    }
    
    for (const x = 0; x < 1;) {
        (function() { return x});
        (() => x);
    }
    
    while (1 === 1) {
        const x = 1;
        (function() { return x});
        (() => x);
    }
    
    do {
        const x = 1;
        (function() { return x});
        (() => x);
    } while (1 === 1)
    
    for (const y = 0; y < 1;) {
        const x = 1;
        (function() { return x});
        (() => x);
    }
    
    for (const x = 0, y = 1; x < 1;) {
        (function() { return x + y});
        (() => x + y);
    }
    
    while (1 === 1) {
        const x = 1, y = 1;
        (function() { return x + y});
        (() => x + y);
    }
    
    do {
        const x = 1, y = 1;
        (function() { return x + y});
        (() => x + y);
    } while (1 === 1)
    
    for (const y = 0; y < 1;) {
        const x = 1;
        (function() { return x + y});
        (() => x + y);
    }