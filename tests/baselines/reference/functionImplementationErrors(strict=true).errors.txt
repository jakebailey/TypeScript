functionImplementationErrors.ts(25,16): error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.
functionImplementationErrors.ts(30,17): error TS2373: Parameter 'n' cannot reference identifier 'm' declared after it.
functionImplementationErrors.ts(30,17): error TS2454: Variable 'm' is used before being assigned.
functionImplementationErrors.ts(35,17): error TS2373: Parameter 'n' cannot reference identifier 'm' declared after it.
functionImplementationErrors.ts(35,20): error TS7006: Parameter 'm' implicitly has an 'any' type.
functionImplementationErrors.ts(40,1): error TS2839: This condition will always return 'false' since JavaScript compares objects by reference, not value.
functionImplementationErrors.ts(45,22): error TS7008: Member 'x' implicitly has an 'any' type.
functionImplementationErrors.ts(46,30): error TS7008: Member 'y' implicitly has an 'any' type.
functionImplementationErrors.ts(47,39): error TS7008: Member 'm' implicitly has an 'any' type.
functionImplementationErrors.ts(48,39): error TS7008: Member 'n' implicitly has an 'any' type.


==== functionImplementationErrors.ts (10 errors) ====
    // FunctionExpression with no return type annotation with multiple return statements with unrelated types
    var f1 = function () {
        return '';
        return 3;
    };
    var f2 = function x() {
        return '';
        return 3;
    };
    var f3 = () => {
        return '';
        return 3;
    };
    
    // FunctionExpression with no return type annotation with return branch of number[] and other of string[]
    var f4 = function () {
        if (true) {
            return [''];
        } else {
            return [1];
        }
    }
    
    // Function implemetnation with non -void return type annotation with no return
    function f5(): number {
                   ~~~~~~
!!! error TS2355: A function whose declared type is neither 'undefined', 'void', nor 'any' must return a value.
    }
    
    var m;
    // Function signature with parameter initializer referencing in scope local variable
    function f6(n = m) {
                    ~
!!! error TS2373: Parameter 'n' cannot reference identifier 'm' declared after it.
                    ~
!!! error TS2454: Variable 'm' is used before being assigned.
        var m = 4;
    }
    
    // Function signature with initializer referencing other parameter to the right
    function f7(n = m, m?) {
                    ~
!!! error TS2373: Parameter 'n' cannot reference identifier 'm' declared after it.
                       ~~
!!! error TS7006: Parameter 'm' implicitly has an 'any' type.
    }
    
    // FunctionExpression with non -void return type annotation with a throw, no return, and other code
    // Should be error but isn't
    undefined === function (): number {
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        throw undefined;
    ~~~~~~~~~~~~~~~~~~~~
        var x = 4;
    ~~~~~~~~~~~~~~
    };
    ~
!!! error TS2839: This condition will always return 'false' since JavaScript compares objects by reference, not value.
    
    class Base { private x; }
                         ~
!!! error TS7008: Member 'x' implicitly has an 'any' type.
    class AnotherClass { private y; }
                                 ~
!!! error TS7008: Member 'y' implicitly has an 'any' type.
    class Derived1 extends Base { private m; }
                                          ~
!!! error TS7008: Member 'm' implicitly has an 'any' type.
    class Derived2 extends Base { private n; }
                                          ~
!!! error TS7008: Member 'n' implicitly has an 'any' type.
    function f8() {
        return new Derived1();
        return new Derived2();    
    }
    var f9 = function () {
        return new Derived1();
        return new Derived2();
    };
    var f10 = () => {
        return new Derived1();
        return new Derived2();
    };
    function f11() {
        return new Base();
        return new AnotherClass();
    }
    var f12 = function () {
        return new Base();
        return new AnotherClass();
    };
    var f13 = () => {
        return new Base();
        return new AnotherClass();
    };
    