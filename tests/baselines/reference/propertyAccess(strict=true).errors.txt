propertyAccess.ts(2,5): error TS2564: Property 'a' has no initializer and is not definitely assigned in the constructor.
propertyAccess.ts(5,5): error TS2564: Property 'b' has no initializer and is not definitely assigned in the constructor.
propertyAccess.ts(11,55): error TS2353: Object literal may only specify known properties, and ''three'' does not exist in type '{ [n: number]: string; }'.
propertyAccess.ts(45,14): error TS2339: Property 'qqq' does not exist on type '{ 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }'.
propertyAccess.ts(52,10): error TS7053: Element implicitly has an 'any' type because expression of type '"wa wa wa wa wa"' can't be used to index type '{ 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }'.
  Property 'wa wa wa wa wa' does not exist on type '{ 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }'.
propertyAccess.ts(60,10): error TS7053: Element implicitly has an 'any' type because expression of type '"1"' can't be used to index type '{ 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }'.
  Property '1' does not exist on type '{ 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }'.
propertyAccess.ts(76,19): error TS7015: Element implicitly has an 'any' type because index expression is not of type 'number'.
propertyAccess.ts(80,19): error TS2454: Variable 'someObject' is used before being assigned.
propertyAccess.ts(80,19): error TS2538: Type '{ name: string; }' cannot be used as an index type.
propertyAccess.ts(101,10): error TS7053: Element implicitly has an 'any' type because expression of type '123' can't be used to index type '() => void'.
  Property '123' does not exist on type '() => void'.
propertyAccess.ts(105,10): error TS7053: Element implicitly has an 'any' type because expression of type '"zzzz"' can't be used to index type '() => void'.
  Property 'zzzz' does not exist on type '() => void'.
propertyAccess.ts(109,10): error TS7053: Element implicitly has an 'any' type because expression of type 'Compass.South' can't be used to index type '() => void'.
  Property '[Compass.South]' does not exist on type '() => void'.
propertyAccess.ts(113,10): error TS7053: Element implicitly has an 'any' type because expression of type 'any' can't be used to index type '() => void'.
propertyAccess.ts(117,18): error TS2454: Variable 'someObject' is used before being assigned.
propertyAccess.ts(117,18): error TS2538: Type '{ name: string; }' cannot be used as an index type.
propertyAccess.ts(120,10): error TS7053: Element implicitly has an 'any' type because expression of type '32' can't be used to index type '() => void'.
  Property '32' does not exist on type '() => void'.
propertyAccess.ts(124,10): error TS2454: Variable 'bothIndex' is used before being assigned.
propertyAccess.ts(128,10): error TS2454: Variable 'bothIndex' is used before being assigned.
propertyAccess.ts(132,10): error TS2454: Variable 'bothIndex' is used before being assigned.
propertyAccess.ts(136,10): error TS2454: Variable 'bothIndex' is used before being assigned.
propertyAccess.ts(140,12): error TS2454: Variable 'bothIndex' is used before being assigned.
propertyAccess.ts(140,22): error TS2454: Variable 'someObject' is used before being assigned.
propertyAccess.ts(140,22): error TS2538: Type '{ name: string; }' cannot be used as an index type.
propertyAccess.ts(142,19): error TS2454: Variable 'stringOrNumber' is used before being assigned.
propertyAccess.ts(142,19): error TS7015: Element implicitly has an 'any' type because index expression is not of type 'number'.
propertyAccess.ts(145,19): error TS2454: Variable 'stringOrNumber' is used before being assigned.
propertyAccess.ts(148,10): error TS2454: Variable 'bothIndex' is used before being assigned.
propertyAccess.ts(148,20): error TS2454: Variable 'stringOrNumber' is used before being assigned.
propertyAccess.ts(149,5): error TS2403: Subsequent variable declarations must have the same type.  Variable 'x3' must be of type 'A | B', but here has type 'A'.


==== propertyAccess.ts (29 errors) ====
    class A {
        a: number;
        ~
!!! error TS2564: Property 'a' has no initializer and is not definitely assigned in the constructor.
    }
    class B extends A {
        b: number;
        ~
!!! error TS2564: Property 'b' has no initializer and is not definitely assigned in the constructor.
    }
    enum Compass {
        North, South, East, West
    }
    
    var numIndex: { [n: number]: string } = { 3: 'three', 'three': 'three' };
                                                          ~~~~~~~
!!! error TS2353: Object literal may only specify known properties, and ''three'' does not exist in type '{ [n: number]: string; }'.
    var strIndex: { [n: string]: Compass } = { 'N': Compass.North, 'E': Compass.East };
    var bothIndex:
        {
            [n: string]: A;
            [m: number]: B;
        };
    
    function noIndex() { }
    
    var obj = {
        10: 'ten',
        x: 'hello',
        y: 32,
        z: { n: 'world', m: 15, o: () => false },
        'literal property': 100
    };
    var anyVar: any = {};
    var stringOrNumber: string | number;
    var someObject: { name: string };
    
    // Assign to a property access
    obj.y = 4;
    
    // Property access on value of type 'any'
    anyVar.x = anyVar.y = obj.x = anyVar.z;
    
    // Dotted property access of property that exists
    var aa = obj.x;
    
    // Dotted property access of property that exists on value's apparent type
    var bb = obj.hasOwnProperty;
    
    // Dotted property access of property that doesn't exist on value's apparent type
    var cc = obj.qqq; // error
                 ~~~
!!! error TS2339: Property 'qqq' does not exist on type '{ 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }'.
    
    // Bracket notation property access using string literal value on type with property of that literal name
    var dd = obj['literal property'];
    var dd: number;
    
    // Bracket notation property access using string literal value on type without property of that literal name
    var ee = obj['wa wa wa wa wa'];
             ~~~~~~~~~~~~~~~~~~~~~
!!! error TS7053: Element implicitly has an 'any' type because expression of type '"wa wa wa wa wa"' can't be used to index type '{ 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }'.
!!! error TS7053:   Property 'wa wa wa wa wa' does not exist on type '{ 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }'.
    var ee: any;
    
    // Bracket notation property access using numeric string literal value on type with property of that literal name
    var ff = obj['10'];
    var ff: string;
    
    // Bracket notation property access using numeric string literal value on type without property of that literal name
    var gg = obj['1'];
             ~~~~~~~~
!!! error TS7053: Element implicitly has an 'any' type because expression of type '"1"' can't be used to index type '{ 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }'.
!!! error TS7053:   Property '1' does not exist on type '{ 10: string; x: string; y: number; z: { n: string; m: number; o: () => boolean; }; 'literal property': number; }'.
    var gg: any;
    
    // Bracket notation property access using numeric value on type with numeric index signature
    var hh = numIndex[3.0];
    var hh: string;
    
    // Bracket notation property access using enum value on type with numeric index signature
    var ii = numIndex[Compass.South];
    var ii: string;
    
    // Bracket notation property access using value of type 'any' on type with numeric index signature
    var jj = numIndex[anyVar];
    var jj: string;
    
    // Bracket notation property access using string value on type with numeric index signature
    var kk = numIndex['what'];
                      ~~~~~~
!!! error TS7015: Element implicitly has an 'any' type because index expression is not of type 'number'.
    var kk: any;
    
    // Bracket notation property access using value of other type on type with numeric index signature and no string index signature
    var ll = numIndex[someObject]; // Error
                      ~~~~~~~~~~
!!! error TS2454: Variable 'someObject' is used before being assigned.
                      ~~~~~~~~~~
!!! error TS2538: Type '{ name: string; }' cannot be used as an index type.
    
    // Bracket notation property access using string value on type with string index signature and no numeric index signature
    var mm = strIndex['N'];
    var mm: Compass;
    var mm2 = strIndex['zzz'];
    var mm2: Compass;
    
    // Bracket notation property access using numeric value on type with string index signature and no numeric index signature
    var nn = strIndex[10];
    var nn: Compass;
    
    // Bracket notation property access using enum value on type with string index signature and no numeric index signature
    var oo = strIndex[Compass.East];
    var oo: Compass;
    
    // Bracket notation property access using value of type 'any' on type with string index signature and no numeric index signature
    var pp = strIndex[<any>null];
    var pp: Compass;
    
    // Bracket notation property access using numeric value on type with no index signatures
    var qq = noIndex[123];
             ~~~~~~~~~~~~
!!! error TS7053: Element implicitly has an 'any' type because expression of type '123' can't be used to index type '() => void'.
!!! error TS7053:   Property '123' does not exist on type '() => void'.
    var qq: any;
    
    // Bracket notation property access using string value on type with no index signatures
    var rr = noIndex['zzzz'];
             ~~~~~~~~~~~~~~~
!!! error TS7053: Element implicitly has an 'any' type because expression of type '"zzzz"' can't be used to index type '() => void'.
!!! error TS7053:   Property 'zzzz' does not exist on type '() => void'.
    var rr: any;
    
    // Bracket notation property access using enum value on type with no index signatures
    var ss = noIndex[Compass.South];
             ~~~~~~~~~~~~~~~~~~~~~~
!!! error TS7053: Element implicitly has an 'any' type because expression of type 'Compass.South' can't be used to index type '() => void'.
!!! error TS7053:   Property '[Compass.South]' does not exist on type '() => void'.
    var ss: any;
    
    // Bracket notation property access using value of type 'any' on type with no index signatures
    var tt = noIndex[<any>null];
             ~~~~~~~~~~~~~~~~~~
!!! error TS7053: Element implicitly has an 'any' type because expression of type 'any' can't be used to index type '() => void'.
    var tt: any;
    
    // Bracket notation property access using values of other types on type with no index signatures
    var uu = noIndex[someObject]; // Error
                     ~~~~~~~~~~
!!! error TS2454: Variable 'someObject' is used before being assigned.
                     ~~~~~~~~~~
!!! error TS2538: Type '{ name: string; }' cannot be used as an index type.
    
    // Bracket notation property access using numeric value on type with numeric index signature and string index signature
    var vv = noIndex[32];
             ~~~~~~~~~~~
!!! error TS7053: Element implicitly has an 'any' type because expression of type '32' can't be used to index type '() => void'.
!!! error TS7053:   Property '32' does not exist on type '() => void'.
    var vv: any;
    
    // Bracket notation property access using enum value on type with numeric index signature and string index signature
    var ww = bothIndex[Compass.East];
             ~~~~~~~~~
!!! error TS2454: Variable 'bothIndex' is used before being assigned.
    var ww: B;
    
    // Bracket notation property access using value of type 'any' on type with numeric index signature and string index signature
    var xx = bothIndex[<any>null];
             ~~~~~~~~~
!!! error TS2454: Variable 'bothIndex' is used before being assigned.
    var xx: B;
    
    // Bracket notation property access using string value on type with numeric index signature and string index signature
    var yy = bothIndex['foo'];
             ~~~~~~~~~
!!! error TS2454: Variable 'bothIndex' is used before being assigned.
    var yy: A;
    
    // Bracket notation property access using numeric string value on type with numeric index signature and string index signature
    var zz = bothIndex['1.0'];
             ~~~~~~~~~
!!! error TS2454: Variable 'bothIndex' is used before being assigned.
    var zz: A;
    
    // Bracket notation property access using value of other type on type with numeric index signature and no string index signature and string index signature
    var zzzz = bothIndex[someObject]; // Error
               ~~~~~~~~~
!!! error TS2454: Variable 'bothIndex' is used before being assigned.
                         ~~~~~~~~~~
!!! error TS2454: Variable 'someObject' is used before being assigned.
                         ~~~~~~~~~~
!!! error TS2538: Type '{ name: string; }' cannot be used as an index type.
    
    var x1 = numIndex[stringOrNumber];
                      ~~~~~~~~~~~~~~
!!! error TS2454: Variable 'stringOrNumber' is used before being assigned.
                      ~~~~~~~~~~~~~~
!!! error TS7015: Element implicitly has an 'any' type because index expression is not of type 'number'.
    var x1: any;
    
    var x2 = strIndex[stringOrNumber];
                      ~~~~~~~~~~~~~~
!!! error TS2454: Variable 'stringOrNumber' is used before being assigned.
    var x2: Compass;
    
    var x3 = bothIndex[stringOrNumber];
             ~~~~~~~~~
!!! error TS2454: Variable 'bothIndex' is used before being assigned.
                       ~~~~~~~~~~~~~~
!!! error TS2454: Variable 'stringOrNumber' is used before being assigned.
    var x3: A;
        ~~
!!! error TS2403: Subsequent variable declarations must have the same type.  Variable 'x3' must be of type 'A | B', but here has type 'A'.
!!! related TS6203 propertyAccess.ts:148:5: 'x3' was also declared here.
    