inferencePromiseArrays1.ts(4,83): error TS2345: Argument of type '(tuple: [number, string]) => void' is not assignable to parameter of type '(value: (string | number)[]) => void | PromiseLike<void>'.
  Types of parameters 'tuple' and 'value' are incompatible.
    Type '(string | number)[]' is not assignable to type '[number, string]'.
      Target requires 2 element(s) but source may have fewer.
inferencePromiseArrays1.ts(9,7): error TS2322: Type 'Promise<(string | number)[]>' is not assignable to type 'Promise<[number, string]>'.
  Type '(string | number)[]' is not assignable to type '[number, string]'.
    Target requires 2 element(s) but source may have fewer.


==== inferencePromiseArrays1.ts (2 errors) ====
    declare function getNum(): Promise<number>;
    declare function getStr(): Promise<string>;
    declare function useTuple(tuple: [number, string]): void;
    const p1 = Promise.resolve([]).then(() => Promise.all([getNum(), getStr()])).then(useTuple);
                                                                                      ~~~~~~~~
!!! error TS2345: Argument of type '(tuple: [number, string]) => void' is not assignable to parameter of type '(value: (string | number)[]) => void | PromiseLike<void>'.
!!! error TS2345:   Types of parameters 'tuple' and 'value' are incompatible.
!!! error TS2345:     Type '(string | number)[]' is not assignable to type '[number, string]'.
!!! error TS2345:       Target requires 2 element(s) but source may have fewer.
    
    const p2 = Promise.resolve([]).then(()=> {
        return Promise.all([0, ""]);
    })
    const p3: Promise<[number, string]> = p2;
          ~~
!!! error TS2322: Type 'Promise<(string | number)[]>' is not assignable to type 'Promise<[number, string]>'.
!!! error TS2322:   Type '(string | number)[]' is not assignable to type '[number, string]'.
!!! error TS2322:     Target requires 2 element(s) but source may have fewer.
    