//// [tests/cases/compiler/arrayConcatMap.ts] ////

=== arrayConcatMap.ts ===
var x = [].concat([{ a: 1 }], [{ a: 2 }])
>x : any[]
>  : ^^^^^
>[].concat([{ a: 1 }], [{ a: 2 }])          .map(b => b.a) : any[]
>                                                          : ^^^^^
>[].concat([{ a: 1 }], [{ a: 2 }])          .map : <U>(callbackfn: (value: never, index: number, array: never[]) => U, thisArg?: any) => U[]
>                                                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>[].concat([{ a: 1 }], [{ a: 2 }]) : never[]
>                                  : ^^^^^^^
>[].concat : { (...items: ConcatArray<never>[]): never[]; (...items: ConcatArray<never>[]): never[]; }
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>[] : never[]
>   : ^^^^^^^
>concat : { (...items: ConcatArray<never>[]): never[]; (...items: ConcatArray<never>[]): never[]; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>[{ a: 1 }] : { a: number; }[]
>           : ^^^^^^^^^^^^^^^^
>{ a: 1 } : { a: number; }
>         : ^^^^^^^^^^^^^^
>a : number
>  : ^^^^^^
>1 : 1
>  : ^
>[{ a: 2 }] : { a: number; }[]
>           : ^^^^^^^^^^^^^^^^
>{ a: 2 } : { a: number; }
>         : ^^^^^^^^^^^^^^
>a : number
>  : ^^^^^^
>2 : 2
>  : ^

          .map(b => b.a);
>map : <U>(callbackfn: (value: never, index: number, array: never[]) => U, thisArg?: any) => U[]
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>b => b.a : (b: never) => any
>         : ^^^^^^^^^^^^^^^^^
>b : never
>  : ^^^^^
>b.a : any
>    : ^^^
>b : never
>  : ^^^^^
>a : any
>  : ^^^

