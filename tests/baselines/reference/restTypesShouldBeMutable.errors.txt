restTypesShouldBeMutable.ts(7,5): error TS2542: Index signature in type 'readonly string[]' only permits reading.
restTypesShouldBeMutable.ts(14,5): error TS2542: Index signature in type 'readonly string[]' only permits reading.
restTypesShouldBeMutable.ts(22,13): error TS2345: Argument of type 'readonly [string, string, string]' is not assignable to parameter of type '[string, string, string]'.
  The type 'readonly [string, string, string]' is 'readonly' and cannot be assigned to the mutable type '[string, string, string]'.


==== restTypesShouldBeMutable.ts (3 errors) ====
    declare function callFn<T extends readonly any[]>(args: T, fn: (...args: T) => void): void;
    
    declare const input: readonly string[];
    
    callFn(input, (...args) => {
        args;
        args[0] = "hello";
        ~~~~~~~
!!! error TS2542: Index signature in type 'readonly string[]' only permits reading.
    })
    
    declare function callFnNonGeneric(args: readonly string[], fn: (...args: readonly string[]) => void): void;
    
    callFnNonGeneric(input, (...args) => {
        args;
        args[0] = "hello";
        ~~~~~~~
!!! error TS2542: Index signature in type 'readonly string[]' only permits reading.
    })
    
    
    declare function callFnTuple<T extends readonly [string, string, string]>(args: T, fn: (...args: T) => void): void;
    
    declare const inputTuple: readonly [string, string, string];
    
    callFnTuple(inputTuple, (...args) => {
                ~~~~~~~~~~
!!! error TS2345: Argument of type 'readonly [string, string, string]' is not assignable to parameter of type '[string, string, string]'.
!!! error TS2345:   The type 'readonly [string, string, string]' is 'readonly' and cannot be assigned to the mutable type '[string, string, string]'.
        args;
        args[0] = "hello";
    })
    
    declare function callFnNonGenericTuple(args: readonly [string, string, string], fn: (...args: readonly [string, string, string]) => void): void;
    
    callFnNonGenericTuple(inputTuple, (...args) => {
        args;
        args[0] = "hello";
    })
    