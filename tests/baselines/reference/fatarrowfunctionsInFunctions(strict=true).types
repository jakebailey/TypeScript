//// [tests/cases/compiler/fatarrowfunctionsInFunctions.ts] ////

=== fatarrowfunctionsInFunctions.ts ===
declare function setTimeout(expression: any, msec?: number, language?: any): number;
>setTimeout : { (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]): number; (expression: any, msec?: number, language?: any): number; }
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^      ^^^^^^^^^^^^^   ^^^      ^^^
>expression : any
>msec : number | undefined
>     : ^^^^^^^^^^^^^^^^^^
>language : any

var messenger = {
>messenger : { message: string; start: () => void; }
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{    message: "Hello World",    start: function() {        var _self = this;        setTimeout(function() {            _self.message.toString();         }, 3000);     }} : { message: string; start: () => void; }
>                                                                                                                                                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    message: "Hello World",
>message : string
>        : ^^^^^^
>"Hello World" : "Hello World"
>              : ^^^^^^^^^^^^^

    start: function() {
>start : () => void
>      : ^^^^^^^^^^
>function() {        var _self = this;        setTimeout(function() {            _self.message.toString();         }, 3000);     } : () => void
>                                                                                                                                  : ^^^^^^^^^^

        var _self = this;
>_self : { message: string; start: () => void; }
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>this : { message: string; start: () => void; }
>     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        setTimeout(function() {
>setTimeout(function() {            _self.message.toString();         }, 3000) : number
>                                                                              : ^^^^^^
>setTimeout : { (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]): number; (expression: any, msec?: number | undefined, language?: any): number; }
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>function() {            _self.message.toString();         } : () => void
>                                                            : ^^^^^^^^^^

            _self.message.toString(); 
>_self.message.toString() : string
>                         : ^^^^^^
>_self.message.toString : () => string
>                       : ^^^^^^^^^^^^
>_self.message : string
>              : ^^^^^^
>_self : { message: string; start: () => void; }
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>message : string
>        : ^^^^^^
>toString : () => string
>         : ^^^^^^^^^^^^

        }, 3000); 
>3000 : 3000
>     : ^^^^
    }
}; 
messenger.start(); 
>messenger.start() : void
>                  : ^^^^
>messenger.start : () => void
>                : ^^^^^^^^^^
>messenger : { message: string; start: () => void; }
>          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>start : () => void
>      : ^^^^^^^^^^

