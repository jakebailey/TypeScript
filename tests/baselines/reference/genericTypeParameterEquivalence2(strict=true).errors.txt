genericTypeParameterEquivalence2.ts(4,32): error TS2345: Argument of type 'A' is not assignable to parameter of type '[a: A]'.
genericTypeParameterEquivalence2.ts(17,9): error TS7034: Variable 'ret' implicitly has type 'any[]' in some locations where its type cannot be determined.
genericTypeParameterEquivalence2.ts(24,12): error TS7005: Variable 'ret' implicitly has an 'any[]' type.
genericTypeParameterEquivalence2.ts(52,20): error TS2345: Argument of type '<A>(ar: A[]) => number' is not assignable to parameter of type '(b: unknown) => number'.
  Types of parameters 'ar' and 'b' are incompatible.
    Type 'unknown' is not assignable to type 'unknown[]'.


==== genericTypeParameterEquivalence2.ts (4 errors) ====
    // compose :: (b->c) -> (a->b) -> (a->c)
    function compose<A, B, C>(f: (b: B) => C, g: (a:A) => B): (a:A) => C {
        return function (a:A) : C {
            return f(g.apply(null, a));
                                   ~
!!! error TS2345: Argument of type 'A' is not assignable to parameter of type '[a: A]'.
!!! related TS2208 genericTypeParameterEquivalence2.ts:2:18: This type parameter might need an `extends [a: A]` constraint.
        };
    }
    
    // forEach :: [a] -> (a -> ()) -> ()
    function forEach<A>(list: A[], f: (a: A, n?: number) => void ): void {
        for (var i = 0; i < list.length; ++i) {
            f(list[i], i);
        }
    }
    
    // filter :: (a->bool) -> [a] -> [a]
    function filter<A>(f: (a: A) => boolean, ar: A[]): A[] {
        var ret = [];
            ~~~
!!! error TS7034: Variable 'ret' implicitly has type 'any[]' in some locations where its type cannot be determined.
        forEach(ar, (el) => {
            if (f(el)) {
                ret.push(el);
            }
        } );
    
        return ret;
               ~~~
!!! error TS7005: Variable 'ret' implicitly has an 'any[]' type.
    }
    
    // length :: [a] -> Num
    function length2<A>(ar: A[]): number {
        return ar.length;
    }
    
    // curry1 :: ((a,b)->c) -> (a->(b->c))
    function curry1<A, B, C>(f: (a: A, b: B) => C): (ax: A) => (bx: B) => C {
        return function (ay: A) {
            return function (by: B) {
                return f(ay, by);
            };
        };
    }
    
    var cfilter = curry1(filter);
    
    // compose :: (b->c) -> (a->b) -> (a->c)
    // length :: [a] -> Num
    // cfilter :: {} -> {} -> [{}]
    // pred :: a -> Bool 
    // cfilter(pred) :: {} -> [{}]
    // length2 :: [a] -> Num
    // countWhere :: (a -> Bool) -> [a] -> Num
    
    function countWhere_1<A>(pred: (a: A) => boolean): (a: A[]) => number {
        return compose(length2, cfilter(pred));
                       ~~~~~~~
!!! error TS2345: Argument of type '<A>(ar: A[]) => number' is not assignable to parameter of type '(b: unknown) => number'.
!!! error TS2345:   Types of parameters 'ar' and 'b' are incompatible.
!!! error TS2345:     Type 'unknown' is not assignable to type 'unknown[]'.
    }
    
    function countWhere_2<A>(pred: (a: A) => boolean): (a: A[]) => number {
        var where = cfilter(pred);
        return compose(length2, where);
    }