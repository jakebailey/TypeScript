privateNameMethodCallExpression.ts(3,14): error TS7006: Parameter 'a' implicitly has an 'any' type.
privateNameMethodCallExpression.ts(3,17): error TS7019: Rest parameter 'b' implicitly has an 'any[]' type.
privateNameMethodCallExpression.ts(9,9): error TS7009: 'new' expression, whose target lacks a construct signature, implicitly has an 'any' type.
privateNameMethodCallExpression.ts(14,19): error TS7009: 'new' expression, whose target lacks a construct signature, implicitly has an 'any' type.
privateNameMethodCallExpression.ts(19,20): error TS7009: 'new' expression, whose target lacks a construct signature, implicitly has an 'any' type.


==== privateNameMethodCallExpression.ts (5 errors) ====
    class AA {
        #method() { this.x = 10; };
        #method2(a, ...b) {};
                 ~
!!! error TS7006: Parameter 'a' implicitly has an 'any' type.
                    ~~~~
!!! error TS7019: Rest parameter 'b' implicitly has an 'any[]' type.
        x = 1;
        test() {
            this.#method();
            const func = this.#method;
            func();
            new this.#method();
            ~~~~~~~~~~~~~~~~~~
!!! error TS7009: 'new' expression, whose target lacks a construct signature, implicitly has an 'any' type.
    
            const arr = [ 1, 2 ];
            this.#method2(0, ...arr, 3);
    
            const b = new this.#method2(0, ...arr, 3); //Error 
                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS7009: 'new' expression, whose target lacks a construct signature, implicitly has an 'any' type.
            const str = this.#method2`head${1}middle${2}tail`;
            this.getInstance().#method2`test${1}and${2}`;
    
            this.getInstance().#method2(0, ...arr, 3); 
            const b2 = new (this.getInstance().#method2)(0, ...arr, 3); //Error 
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS7009: 'new' expression, whose target lacks a construct signature, implicitly has an 'any' type.
            const str2 = this.getInstance().#method2`head${1}middle${2}tail`;
        }
        getInstance() { return new AA(); }
    }
    