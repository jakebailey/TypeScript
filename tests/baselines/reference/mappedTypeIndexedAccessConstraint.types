//// [tests/cases/compiler/mappedTypeIndexedAccessConstraint.ts] ////

=== mappedTypeIndexedAccessConstraint.ts ===
type Identity<T> = { [K in keyof T]: T[K] };
>Identity : Identity<T>

type M0 = { a: 1, b: 2 };
>M0 : { a: 1; b: 2; }
>a : 1
>b : 2

type M1 = { [K in keyof Partial<M0>]: M0[K] };
>M1 : { a?: 1 | undefined; b?: 2 | undefined; }

type M2 = { [K in keyof Required<M1>]: M1[K] };
>M2 : { a: 1 | undefined; b: 2 | undefined; }

type M3 = { [K in keyof Identity<Partial<M0>>]: M0[K] };
>M3 : { a?: 1 | undefined; b?: 2 | undefined; }

function foo<K extends keyof M0>(m1: M1[K], m2: M2[K], m3: M3[K]) {
>foo : <K extends keyof M0>(m1: M1[K], m2: M2[K], m3: M3[K]) => void
>m1 : M1[K]
>m2 : M2[K]
>m3 : M3[K]

    m1.toString();  // Error
>m1.toString() : string
>m1.toString : (radix?: number | undefined) => string
>m1 : 1 | 2 | undefined
>toString : (radix?: number | undefined) => string

    m1?.toString();
>m1?.toString() : string | undefined
>m1?.toString : ((radix?: number | undefined) => string) | undefined
>m1 : 1 | 2 | undefined
>toString : ((radix?: number | undefined) => string) | undefined

    m2.toString();  // Error
>m2.toString() : string
>m2.toString : (radix?: number | undefined) => string
>m2 : 1 | 2 | undefined
>toString : (radix?: number | undefined) => string

    m2?.toString();
>m2?.toString() : string | undefined
>m2?.toString : ((radix?: number | undefined) => string) | undefined
>m2 : 1 | 2 | undefined
>toString : ((radix?: number | undefined) => string) | undefined

    m3.toString();  // Error
>m3.toString() : string
>m3.toString : (radix?: number | undefined) => string
>m3 : 1 | 2 | undefined
>toString : (radix?: number | undefined) => string

    m3?.toString();
>m3?.toString() : string | undefined
>m3?.toString : ((radix?: number | undefined) => string) | undefined
>m3 : 1 | 2 | undefined
>toString : ((radix?: number | undefined) => string) | undefined
}

// Repro from #57487

type Obj = {
>Obj : { a: 1; b: 2; }

    a: 1,
>a : 1

    b: 2
>b : 2

};

const mapped: { [K in keyof Partial<Obj>]: Obj[K] } = {};
>mapped : { a?: 1 | undefined; b?: 2 | undefined; }
>{} : {}

const resolveMapped = <K extends keyof typeof mapped>(key: K) => mapped[key].toString();  // Error
>resolveMapped : <K extends keyof Obj>(key: K) => string
><K extends keyof typeof mapped>(key: K) => mapped[key].toString() : <K extends keyof Obj>(key: K) => string
>mapped : { a?: 1 | undefined; b?: 2 | undefined; }
>key : K
>mapped[key].toString() : string
>mapped[key].toString : (radix?: number | undefined) => string
>mapped[key] : 1 | 2 | undefined
>mapped : { a?: 1 | undefined; b?: 2 | undefined; }
>key : K
>toString : (radix?: number | undefined) => string

// Additional repro from #57487

const arr = ["foo", "12", 42] as const;
>arr : readonly ["foo", "12", 42]
>["foo", "12", 42] as const : readonly ["foo", "12", 42]
>["foo", "12", 42] : readonly ["foo", "12", 42]
>"foo" : "foo"
>"12" : "12"
>42 : 42

type Mappings = { foo: boolean, "12": number, 42: string };
>Mappings : { foo: boolean; "12": number; 42: string; }
>foo : boolean
>"12" : number
>42 : string

type MapperArgs<K extends (typeof arr)[number]> = {
>MapperArgs : MapperArgs<K>
>arr : readonly ["foo", "12", 42]

    v: K,
>v : K

    i: number
>i : number

};

type SetOptional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;
>SetOptional : SetOptional<T, K>

type PartMappings = SetOptional<Mappings, "foo">;
>PartMappings : Omit<Mappings, "foo"> & Partial<Pick<Mappings, "foo">>

const mapper: { [K in keyof PartMappings]: (o: MapperArgs<K>) => PartMappings[K] } = {
>mapper : { "12": (o: MapperArgs<"12">) => number; 42: (o: MapperArgs<42>) => string; foo?: ((o: MapperArgs<"foo">) => boolean | undefined) | undefined; }
>o : MapperArgs<K>
>{    foo: ({ v, i }) => v.length + i > 4,    "12": ({ v, i }) => Number(v) + i,    42: ({ v, i }) => `${v}${i}`,} : { foo: ({ v, i }: MapperArgs<"foo">) => boolean; "12": ({ v, i }: MapperArgs<"12">) => number; 42: ({ v, i }: MapperArgs<42>) => string; }

    foo: ({ v, i }) => v.length + i > 4,
>foo : ({ v, i }: MapperArgs<"foo">) => boolean
>({ v, i }) => v.length + i > 4 : ({ v, i }: MapperArgs<"foo">) => boolean
>v : "foo"
>i : number
>v.length + i > 4 : boolean
>v.length + i : number
>v.length : number
>v : "foo"
>length : number
>i : number
>4 : 4

    "12": ({ v, i }) => Number(v) + i,
>"12" : ({ v, i }: MapperArgs<"12">) => number
>({ v, i }) => Number(v) + i : ({ v, i }: MapperArgs<"12">) => number
>v : "12"
>i : number
>Number(v) + i : number
>Number(v) : number
>Number : NumberConstructor
>v : "12"
>i : number

    42: ({ v, i }) => `${v}${i}`,
>42 : ({ v, i }: MapperArgs<42>) => string
>({ v, i }) => `${v}${i}` : ({ v, i }: MapperArgs<42>) => string
>v : 42
>i : number
>`${v}${i}` : string
>v : 42
>i : number
}

const resolveMapper1 = <K extends keyof typeof mapper>(
>resolveMapper1 : <K extends "foo" | "12" | 42>(key: K, o: MapperArgs<K>) => PartMappings[K]
><K extends keyof typeof mapper>(    key: K, o: MapperArgs<K>) => mapper[key](o) : <K extends "foo" | "12" | 42>(key: K, o: MapperArgs<K>) => PartMappings[K]
>mapper : { "12": (o: MapperArgs<"12">) => number; 42: (o: MapperArgs<42>) => string; foo?: ((o: MapperArgs<"foo">) => boolean | undefined) | undefined; }

    key: K, o: MapperArgs<K>) => mapper[key](o);  // Error
>key : K
>o : MapperArgs<K>
>mapper[key](o) : PartMappings[K]
>mapper[key] : ((o: MapperArgs<K>) => PartMappings[K]) | undefined
>mapper : { "12": (o: MapperArgs<"12">) => number; 42: (o: MapperArgs<42>) => string; foo?: ((o: MapperArgs<"foo">) => boolean | undefined) | undefined; }
>key : K
>o : MapperArgs<K>

const resolveMapper2 = <K extends keyof typeof mapper>(
>resolveMapper2 : <K extends "foo" | "12" | 42>(key: K, o: MapperArgs<K>) => PartMappings[K] | undefined
><K extends keyof typeof mapper>(    key: K, o: MapperArgs<K>) => mapper[key]?.(o) : <K extends "foo" | "12" | 42>(key: K, o: MapperArgs<K>) => PartMappings[K] | undefined
>mapper : { "12": (o: MapperArgs<"12">) => number; 42: (o: MapperArgs<42>) => string; foo?: ((o: MapperArgs<"foo">) => boolean | undefined) | undefined; }

    key: K, o: MapperArgs<K>) => mapper[key]?.(o)
>key : K
>o : MapperArgs<K>
>mapper[key]?.(o) : PartMappings[K] | undefined
>mapper[key] : ((o: MapperArgs<K>) => PartMappings[K]) | undefined
>mapper : { "12": (o: MapperArgs<"12">) => number; 42: (o: MapperArgs<42>) => string; foo?: ((o: MapperArgs<"foo">) => boolean | undefined) | undefined; }
>key : K
>o : MapperArgs<K>

