es6ClassTest2.ts(6,12): error TS7006: Parameter 'target' implicitly has an 'any' type.
es6ClassTest2.ts(17,19): error TS2454: Variable 'm5' is used before being assigned.
es6ClassTest2.ts(24,12): error TS7006: Parameter 'target' implicitly has an 'any' type.
es6ClassTest2.ts(47,15): error TS2454: Variable 'm5' is used before being assigned.
es6ClassTest2.ts(55,5): error TS7010: 'attack', which lacks return-type annotation, implicitly has an 'any' return type.
es6ClassTest2.ts(56,5): error TS7010: 'attack', which lacks return-type annotation, implicitly has an 'any' return type.
es6ClassTest2.ts(57,12): error TS7006: Parameter 'target' implicitly has an 'any' type.
es6ClassTest2.ts(79,5): error TS2564: Property 'name' has no initializer and is not definitely assigned in the constructor.
es6ClassTest2.ts(141,12): error TS2564: Property 'z' has no initializer and is not definitely assigned in the constructor.


==== es6ClassTest2.ts (9 errors) ====
    class BasicMonster {
        constructor(public name: string, public health: number) {
    
        }
    
        attack(target) {
               ~~~~~~
!!! error TS7006: Parameter 'target' implicitly has an 'any' type.
          // WScript.Echo("Attacks " + target);
        }
    
        isAlive = true;
    }
    
    var m1 = new BasicMonster("1", 100);
    var m2 = new BasicMonster("2", 100);
    m1.attack(m2);
    m1.health = 0;
    console.log((<any>m5.isAlive).toString());
                      ~~
!!! error TS2454: Variable 'm5' is used before being assigned.
    
    class GetSetMonster {
        constructor(public name: string, private _health: number) {
    
        }
    
        attack(target) {
               ~~~~~~
!!! error TS7006: Parameter 'target' implicitly has an 'any' type.
          // WScript.Echo("Attacks " + target);
        }
      // The contextual keyword "get" followed by an identifier and
      // a curly body defines a getter in the same way that "get"
      // defines one in an object literal.
        get isAlive() {
            return this._health > 0;
        }
    
      // Likewise, "set" can be used to define setters.
        set health(value: number) {
            if (value < 0) {
                throw new Error('Health must be non-negative.')
        }
            this._health = value
      }
    }
    
    var m3 = new BasicMonster("1", 100);
    var m4 = new BasicMonster("2", 100);
    m3.attack(m4);
    m3.health = 0;
    var x = (<any>m5.isAlive).toString()
                  ~~
!!! error TS2454: Variable 'm5' is used before being assigned.
    
    class OverloadedMonster {
        constructor(name: string);
        constructor(public name: string, public health?: number) {
    
        }
    
        attack();
        ~~~~~~
!!! error TS7010: 'attack', which lacks return-type annotation, implicitly has an 'any' return type.
        attack(a: any);
        ~~~~~~
!!! error TS7010: 'attack', which lacks return-type annotation, implicitly has an 'any' return type.
        attack(target?) {
               ~~~~~~~
!!! error TS7006: Parameter 'target' implicitly has an 'any' type.
            //WScript.Echo("Attacks " + target);
        }
    
        isAlive = true;
    }
    
    var m5 = new OverloadedMonster("1");
    var m6 = new OverloadedMonster("2");
    m5.attack(m6);
    m5.health = 0;
    var y = (<any>m5.isAlive).toString()
    
    class SplatMonster {
        constructor(...args: string[]) { }
        roar(name: string, ...args: number[]) { }
    }
    
    
    function foo() { return true; }
    class PrototypeMonster {
        age: number = 1;
        name: string;
        ~~~~
!!! error TS2564: Property 'name' has no initializer and is not definitely assigned in the constructor.
        b = foo();
    }
    
    class SuperParent {
        constructor(a: number) {
    
        }
    
        b(b: string) {
    
        }
    
        c() {
    
        }
    }
    
    class SuperChild extends SuperParent {
        constructor() {
            super(1);
        }
    
        b() {
            super.b('str');
        }
    
        c() {
            super.c();
        }
    }
    
    class Statics {
        static foo = 1;
        static bar: string;
    
        static baz() {
            return "";
        }
    }
    
    var stat = new Statics();
    
    interface IFoo {
        x: number;
        z: string;
    }
    
    class ImplementsInterface implements IFoo {
        public x: number;
        public z: string;
        constructor() {
            this.x = 1;
            this.z = "foo";
        }
    }
    
    class Visibility {
        public foo() { }
        private bar() { }
        private x: number;
        public y: number;
        public z: number;
               ~
!!! error TS2564: Property 'z' has no initializer and is not definitely assigned in the constructor.
        constructor() {
            this.x = 1;
            this.y = 2;
        }
    }
    
    class BaseClassWithConstructor {
        constructor(public x: number, public s: string) { }
    }
    
    // used to test codegen
    class ChildClassWithoutConstructor extends BaseClassWithConstructor { }
    
    
    var ccwc = new ChildClassWithoutConstructor(1, "s");
    
    