propertyAccessOnTypeParameterWithConstraints3.ts(17,17): error TS2454: Variable 'x' is used before being assigned.
propertyAccessOnTypeParameterWithConstraints3.ts(18,20): error TS2454: Variable 'x' is used before being assigned.
propertyAccessOnTypeParameterWithConstraints3.ts(35,10): error TS2454: Variable 'i' is used before being assigned.
propertyAccessOnTypeParameterWithConstraints3.ts(36,11): error TS2454: Variable 'i' is used before being assigned.
propertyAccessOnTypeParameterWithConstraints3.ts(42,10): error TS2454: Variable 'a' is used before being assigned.
propertyAccessOnTypeParameterWithConstraints3.ts(43,11): error TS2454: Variable 'a' is used before being assigned.
propertyAccessOnTypeParameterWithConstraints3.ts(45,11): error TS2454: Variable 'a' is used before being assigned.
propertyAccessOnTypeParameterWithConstraints3.ts(46,11): error TS2454: Variable 'a' is used before being assigned.


==== propertyAccessOnTypeParameterWithConstraints3.ts (8 errors) ====
    // generic types should behave as if they have properties of their constraint type
    
    class A {
        foo(): string { return ''; }
    }
    
    class B extends A {
        bar(): string {
            return '';
        }
    }
    
    class C<U extends A, T extends U> {
        f() {
            var x: T;
            // BUG 823818
            var a = x['foo'](); // should be string
                    ~
!!! error TS2454: Variable 'x' is used before being assigned.
            return a + x.foo();
                       ~
!!! error TS2454: Variable 'x' is used before being assigned.
        }
    
        g(x: U) {
            // BUG 823818
            var a = x['foo'](); // should be string
            return a + x.foo();
        }
    }
    
    var r1a = (new C<A, B>()).f();
    var r1b = (new C<A, B>()).g(new B());
    
    interface I<U extends A, T extends U> {
        foo: T;
    }
    var i: I<A, B>;
    var r2 = i.foo.foo();
             ~
!!! error TS2454: Variable 'i' is used before being assigned.
    var r2b = i.foo['foo']();
              ~
!!! error TS2454: Variable 'i' is used before being assigned.
    
    var a: {
        <U extends A, T extends U>(): T;
        <U extends T, T extends A>(x: U): U;
    }
    var r3 = a().foo(); // error, no inferences for U so it doesn't satisfy constraint
             ~
!!! error TS2454: Variable 'a' is used before being assigned.
    var r3b = a()['foo']();
              ~
!!! error TS2454: Variable 'a' is used before being assigned.
    // parameter supplied for type argument inference for U
    var r3c = a(new B()).foo(); // valid call to an invalid function, U is inferred as B, which has a foo
              ~
!!! error TS2454: Variable 'a' is used before being assigned.
    var r3d = a(new B())['foo'](); // valid call to an invalid function, U is inferred as B, which has a foo
              ~
!!! error TS2454: Variable 'a' is used before being assigned.
    
    var b = {
        foo: <U extends A, T extends U>(x: T) => {
            // BUG 823818
            var a = x['foo'](); // should be string
            return a + x.foo();
        }
    }
    
    var r4 = b.foo(new B()); // valid call to an invalid function