//// [tests/cases/conformance/expressions/typeGuards/typeGuardRedundancy.ts] ////

=== typeGuardRedundancy.ts ===
var x: string|number;
>x : string | number

var r1 = typeof x === "string" && typeof x === "string" ? x.substr : x.toFixed;
>r1 : any
>typeof x === "string" && typeof x === "string" ? x.substr : x.toFixed : any
>typeof x === "string" && typeof x === "string" : boolean
>typeof x === "string" : boolean
>typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>x : string | number
>"string" : "string"
>typeof x === "string" : boolean
>typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>x : string
>"string" : "string"
>x.substr : (from: number, length?: number | undefined) => string
>x : string
>substr : (from: number, length?: number | undefined) => string
>x.toFixed : any
>x : string | number
>toFixed : any

var r2 = !(typeof x === "string" && typeof x === "string") ? x.toFixed : x.substr;
>r2 : any
>!(typeof x === "string" && typeof x === "string") ? x.toFixed : x.substr : any
>!(typeof x === "string" && typeof x === "string") : boolean
>(typeof x === "string" && typeof x === "string") : boolean
>typeof x === "string" && typeof x === "string" : boolean
>typeof x === "string" : boolean
>typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>x : string | number
>"string" : "string"
>typeof x === "string" : boolean
>typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>x : string
>"string" : "string"
>x.toFixed : any
>x : string | number
>toFixed : any
>x.substr : (from: number, length?: number | undefined) => string
>x : string
>substr : (from: number, length?: number | undefined) => string

var r3 = typeof x === "string" || typeof x === "string" ? x.substr : x.toFixed;
>r3 : any
>typeof x === "string" || typeof x === "string" ? x.substr : x.toFixed : any
>typeof x === "string" || typeof x === "string" : boolean
>typeof x === "string" : boolean
>typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>x : string | number
>"string" : "string"
>typeof x === "string" : boolean
>typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>x : string | number
>"string" : "string"
>x.substr : (from: number, length?: number | undefined) => string
>x : string
>substr : (from: number, length?: number | undefined) => string
>x.toFixed : any
>x : string | number
>toFixed : any

var r4 = !(typeof x === "string" || typeof x === "string") ? x.toFixed : x.substr;
>r4 : any
>!(typeof x === "string" || typeof x === "string") ? x.toFixed : x.substr : any
>!(typeof x === "string" || typeof x === "string") : boolean
>(typeof x === "string" || typeof x === "string") : boolean
>typeof x === "string" || typeof x === "string" : boolean
>typeof x === "string" : boolean
>typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>x : string | number
>"string" : "string"
>typeof x === "string" : boolean
>typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>x : string | number
>"string" : "string"
>x.toFixed : any
>x : string | number
>toFixed : any
>x.substr : (from: number, length?: number | undefined) => string
>x : string
>substr : (from: number, length?: number | undefined) => string

