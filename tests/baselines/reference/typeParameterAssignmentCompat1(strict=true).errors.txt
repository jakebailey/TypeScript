typeParameterAssignmentCompat1.ts(8,5): error TS2322: Type 'Foo<U>' is not assignable to type 'Foo<T>'.
  Type 'U' is not assignable to type 'T'.
    'T' could be instantiated with an arbitrary type which could be unrelated to 'U'.
typeParameterAssignmentCompat1.ts(8,9): error TS2454: Variable 'y' is used before being assigned.
typeParameterAssignmentCompat1.ts(9,5): error TS2322: Type 'Foo<T>' is not assignable to type 'Foo<U>'.
typeParameterAssignmentCompat1.ts(16,9): error TS2322: Type 'Foo<U>' is not assignable to type 'Foo<T>'.
typeParameterAssignmentCompat1.ts(16,13): error TS2454: Variable 'y' is used before being assigned.
typeParameterAssignmentCompat1.ts(17,9): error TS2322: Type 'Foo<T>' is not assignable to type 'Foo<U>'.


==== typeParameterAssignmentCompat1.ts (6 errors) ====
    interface Foo<T> {
        frobble(value: T): T;
    }
    
    function f<T, U>(): Foo<U> {
        var x: Foo<T>;
        var y: Foo<U>;
        x = y; // should be an error
        ~
!!! error TS2322: Type 'Foo<U>' is not assignable to type 'Foo<T>'.
!!! error TS2322:   Type 'U' is not assignable to type 'T'.
!!! error TS2322:     'T' could be instantiated with an arbitrary type which could be unrelated to 'U'.
!!! related TS2208 typeParameterAssignmentCompat1.ts:5:15: This type parameter might need an `extends T` constraint.
            ~
!!! error TS2454: Variable 'y' is used before being assigned.
        return x;
        ~~~~~~
!!! error TS2322: Type 'Foo<T>' is not assignable to type 'Foo<U>'.
    }
    
    class C<T> {
        f<U>(): Foo<U> {
            var x: Foo<T>;
            var y: Foo<U>;
            x = y; // should be an error
            ~
!!! error TS2322: Type 'Foo<U>' is not assignable to type 'Foo<T>'.
                ~
!!! error TS2454: Variable 'y' is used before being assigned.
            return x;
            ~~~~~~
!!! error TS2322: Type 'Foo<T>' is not assignable to type 'Foo<U>'.
        }
    }