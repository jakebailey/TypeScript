//// [tests/cases/compiler/awaitedTypeNoLib1.ts] ////

=== awaitedTypeNoLib1.ts ===
type NotPromise<T> = T extends Thennable<unknown>
>NotPromise : NotPromise<T>
>           : ^^^^^^^^^^^^^

  ? T
  : T extends PromiseLike<unknown>
  ? never
  : T;

type Receiver<T> = (value: NotPromise<T>) => void;
>Receiver : Receiver<T>
>         : ^^^^^^^^^^^
>value : NotPromise<T>
>      : ^^^^^^^^^^^^^

class Thennable<T> {
>Thennable : Thennable<T>
>          : ^^^^^^^^^^^^

  then(a: Receiver<T>) {}
>then : (a: Receiver<T>) => void
>     : ^^^^           ^^^^^^^^^
>a : Receiver<T>
>  : ^^^^^^^^^^^

  private handleResolve<TResult>(
>handleResolve : <TResult>(result: NotPromise<TResult> | Thennable<NotPromise<TResult>>, resolve: Receiver<TResult>) => void
>              : ^       ^^^^^^^^^^                                                    ^^^^^^^^^^^                 ^^^^^^^^^

    result: NotPromise<TResult> | Thennable<NotPromise<TResult>>,
>result : NotPromise<TResult> | Thennable<NotPromise<TResult>>
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    resolve: Receiver<TResult>,
>resolve : Receiver<TResult>
>        : ^^^^^^^^^^^^^^^^^

  ) {
    if (result instanceof Thennable) {
>result instanceof Thennable : boolean
>                            : ^^^^^^^
>result : NotPromise<TResult> | Thennable<NotPromise<TResult>>
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Thennable : typeof Thennable
>          : ^^^^^^^^^^^^^^^^

      // Error: Debug Failure. False expression: type provided should not be a non-generic 'promise'-like.
      this.resolvePromise(result, resolve);
>this.resolvePromise(result, resolve) : void
>                                     : ^^^^
>this.resolvePromise : <TResult_1>(result: Thennable<TResult_1>, resolve: Receiver<TResult_1>) => void
>                    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>this : this
>     : ^^^^
>resolvePromise : <TResult_1>(result: Thennable<TResult_1>, resolve: Receiver<TResult_1>) => void
>               : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>result : Thennable<NotPromise<TResult>>
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>resolve : Receiver<TResult>
>        : ^^^^^^^^^^^^^^^^^
    }
  }

  private resolvePromise<TResult>(
>resolvePromise : <TResult>(result: Thennable<TResult>, resolve: Receiver<TResult>) => void
>               : ^       ^^^^^^^^^^                  ^^^^^^^^^^^                 ^^^^^^^^^

    result: Thennable<TResult>,
>result : Thennable<TResult>
>       : ^^^^^^^^^^^^^^^^^^

    resolve: Receiver<TResult>,
>resolve : Receiver<TResult>
>        : ^^^^^^^^^^^^^^^^^

  ) {}
}

