propertyAccessOnTypeParameterWithConstraints2.ts(16,17): error TS2454: Variable 'x' is used before being assigned.
propertyAccessOnTypeParameterWithConstraints2.ts(17,20): error TS2454: Variable 'x' is used before being assigned.
propertyAccessOnTypeParameterWithConstraints2.ts(48,10): error TS2454: Variable 'i' is used before being assigned.
propertyAccessOnTypeParameterWithConstraints2.ts(49,11): error TS2454: Variable 'i' is used before being assigned.
propertyAccessOnTypeParameterWithConstraints2.ts(61,10): error TS2454: Variable 'a' is used before being assigned.
propertyAccessOnTypeParameterWithConstraints2.ts(62,11): error TS2454: Variable 'a' is used before being assigned.
propertyAccessOnTypeParameterWithConstraints2.ts(65,11): error TS2454: Variable 'a' is used before being assigned.
propertyAccessOnTypeParameterWithConstraints2.ts(66,11): error TS2454: Variable 'a' is used before being assigned.


==== propertyAccessOnTypeParameterWithConstraints2.ts (8 errors) ====
    // generic types should behave as if they have properties of their constraint type
    
    class A {
        foo(): string { return ''; }
    }
    
    class B extends A {
        bar(): string {
            return '';
        }
    }
    
    class C<U extends A, T extends A> {
        f() {
            var x: U;
            var a = x['foo'](); // should be string
                    ~
!!! error TS2454: Variable 'x' is used before being assigned.
            return a + x.foo();
                       ~
!!! error TS2454: Variable 'x' is used before being assigned.
        }
    
        g(x: U) {
            var a = x['foo'](); // should be string
            return a + x.foo();
        }
    }
    //class C<U extends T, T extends A> {
    //    f() {
    //        var x: U;
    //        var a = x['foo'](); // should be string
    //        return a + x.foo();
    //    }
    
    //    g(x: U) {
    //        var a = x['foo'](); // should be string
    //        return a + x.foo();
    //    }
    //}
    
    var r1 = (new C<B, A>()).f();
    var r1b = (new C<B, A>()).g(new B());
    
    interface I<U extends A, T extends A> {
        foo: U;
    }
    //interface I<U extends T, T extends A> {
    //    foo: U;
    //}
    var i: I<B, A>;
    var r2 = i.foo.foo();
             ~
!!! error TS2454: Variable 'i' is used before being assigned.
    var r2b = i.foo['foo']();
              ~
!!! error TS2454: Variable 'i' is used before being assigned.
    
    var a: {
        <U extends A, T extends A>(): U;
        <U extends A, T extends A>(x: U): U;
        <U extends A, T extends A>(x: U, y: T): U;
    }
    //var a: {
    //    <U extends T, T extends A>(): U;
    //    <U extends T, T extends A>(x: U): U;
    //    <U extends T, T extends A>(x: U, y: T): U;
    //}
    var r3 = a<A, A>().foo(); 
             ~
!!! error TS2454: Variable 'a' is used before being assigned.
    var r3b = a()['foo']();
              ~
!!! error TS2454: Variable 'a' is used before being assigned.
    // parameter supplied for type argument inference to succeed
    var aB = new B();
    var r3c = a(aB, aB).foo(); 
              ~
!!! error TS2454: Variable 'a' is used before being assigned.
    var r3d = a(aB, aB)['foo']();
              ~
!!! error TS2454: Variable 'a' is used before being assigned.
    
    var b = {
        foo: <U extends A, T extends A>(x: U, y: T) => {
            var a = x['foo'](); // should be string
            return a + x.foo();
        }
    }
    //var b = {
    //    foo: <U extends T, T extends A>(x: U, y: T) => {
    //        var a = x['foo'](); // should be string
    //        return a + x.foo();
    //    }
    //}
    
    var r4 = b.foo(aB, aB); // no inferences for T so constraint isn't satisfied, error