privateNameStaticMethodCallExpression.ts(3,21): error TS7006: Parameter 'a' implicitly has an 'any' type.
privateNameStaticMethodCallExpression.ts(3,24): error TS7019: Rest parameter 'b' implicitly has an 'any[]' type.
privateNameStaticMethodCallExpression.ts(9,9): error TS7009: 'new' expression, whose target lacks a construct signature, implicitly has an 'any' type.
privateNameStaticMethodCallExpression.ts(14,19): error TS7009: 'new' expression, whose target lacks a construct signature, implicitly has an 'any' type.
privateNameStaticMethodCallExpression.ts(19,20): error TS7009: 'new' expression, whose target lacks a construct signature, implicitly has an 'any' type.


==== privateNameStaticMethodCallExpression.ts (5 errors) ====
    class AA {
        static #method() { this.x = 10; };
        static #method2(a, ...b) {};
                        ~
!!! error TS7006: Parameter 'a' implicitly has an 'any' type.
                           ~~~~
!!! error TS7019: Rest parameter 'b' implicitly has an 'any[]' type.
        static x = 1;
        test() {
            AA.#method();
            const func = AA.#method;
            func();
            new AA.#method();
            ~~~~~~~~~~~~~~~~
!!! error TS7009: 'new' expression, whose target lacks a construct signature, implicitly has an 'any' type.
    
            const arr = [ 1, 2 ];
            AA.#method2(0, ...arr, 3);
    
            const b = new AA.#method2(0, ...arr, 3); //Error 
                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS7009: 'new' expression, whose target lacks a construct signature, implicitly has an 'any' type.
            const str = AA.#method2`head${1}middle${2}tail`;
            AA.getClass().#method2`test${1}and${2}`;
    
            AA.getClass().#method2(0, ...arr, 3); 
            const b2 = new (AA.getClass().#method2)(0, ...arr, 3); //Error 
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS7009: 'new' expression, whose target lacks a construct signature, implicitly has an 'any' type.
            const str2 = AA.getClass().#method2`head${1}middle${2}tail`;
        }
        static getClass() { return AA; }
    }
    