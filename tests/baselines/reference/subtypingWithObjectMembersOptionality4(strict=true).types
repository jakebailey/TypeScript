//// [tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithObjectMembersOptionality4.ts] ////

=== subtypingWithObjectMembersOptionality4.ts ===
// Base has required property, derived adds an optional property, no errors

interface Base { foo: string; }
>foo : string
>    : ^^^^^^

interface Derived extends Base { bar: string; }
>bar : string
>    : ^^^^^^

interface T {
    Foo: Base;
>Foo : Base
>    : ^^^^
}

interface S extends T {
    Foo2?: Derived // ok
>Foo2 : Derived | undefined
>     : ^^^^^^^^^^^^^^^^^^^
}

interface T2 {
    1: Base; 
>1 : Base
>  : ^^^^
}

interface S2 extends T2 {
    2?: Derived; // ok
>2 : Derived | undefined
>  : ^^^^^^^^^^^^^^^^^^^
}

interface T3 {
    '1': Base;
>'1' : Base
>    : ^^^^
}

interface S3 extends T3 {
    '1.0'?: Derived; // ok
>'1.0' : Derived | undefined
>      : ^^^^^^^^^^^^^^^^^^^
}

// object literal case
var a: { Foo: Base; }
>a : { Foo: Base; }
>  : ^^^^^^^    ^^^
>Foo : Base
>    : ^^^^

var b: { Foo2?: Derived; }
>b : { Foo2?: Derived | undefined; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>Foo2 : Derived | undefined
>     : ^^^^^^^^^^^^^^^^^^^

var r = true ? a : b; // ok
>r : { Foo: Base; } | { Foo2?: Derived | undefined; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>true ? a : b : { Foo: Base; } | { Foo2?: Derived | undefined; }
>             : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>true : true
>     : ^^^^
>a : { Foo: Base; }
>  : ^^^^^^^^^^^^^^
>b : { Foo2?: Derived | undefined; }
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

