===================================================================
JsFile: recursiveClassReferenceTest.js
mapUrl: recursiveClassReferenceTest.js.map
sourceRoot: 
sources: recursiveClassReferenceTest.ts
===================================================================
-------------------------------------------------------------------
emittedFile:recursiveClassReferenceTest.js
sourceFile:recursiveClassReferenceTest.ts
-------------------------------------------------------------------
>>>"use strict";
>>>// Scenario 1: Test reqursive function call with "this" parameter
1 >
2 >^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3 >                                                                 ^^^^^^^^^^->
1 >
2 >// Scenario 1: Test reqursive function call with "this" parameter
1 >Emitted(2, 1) Source(1, 1) + SourceIndex(0)
2 >Emitted(2, 66) Source(1, 66) + SourceIndex(0)
---
>>>// Scenario 2: Test recursive function call with cast and "this" parameter
1->
2 >^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1->
  >
2 >// Scenario 2: Test recursive function call with cast and "this" parameter
1->Emitted(3, 1) Source(2, 1) + SourceIndex(0)
2 >Emitted(3, 75) Source(2, 75) + SourceIndex(0)
---
>>>var __extends = (this && this.__extends) || (function () {
>>>    var extendStatics = function (d, b) {
>>>        extendStatics = Object.setPrototypeOf ||
>>>            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
>>>            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
>>>        return extendStatics(d, b);
>>>    };
>>>    return function (d, b) {
>>>        if (typeof b !== "function" && b !== null)
>>>            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
>>>        extendStatics(d, b);
>>>        function __() { this.constructor = d; }
>>>        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
>>>    };
>>>})();
>>>var Sample;
1 >
2 >^^^^
3 >    ^^^^^^
4 >          ^
5 >           ^^^^^^^^^^->
1 >
  >
  >
  >
  >declare module Sample.Thing {
  >
  >	export interface IWidget {
  >		getDomNode(): any;
  >		destroy();
  >		gar(runner:(widget:Sample.Thing.IWidget)=>any):any;
  >	}
  >
  >	export interface ICodeThing {
  >  
  >  		getDomNode(): Element;
  >		
  >		addWidget(widgetId:string, widget:IWidget);
  >
  >		
  >		focus(); 
  >		
  >		//addWidget(widget: Sample.Thing.Widgets.IWidget);
  >	}
  >
  >	export interface IAction {
  >		run(Thing:ICodeThing):boolean;
  >		getId():string;
  >	}	
  >}
  >
  >
2 >module 
3 >    Sample
4 >          .Actions.Thing.Find {
  >          	export class StartFindAction implements Sample.Thing.IAction {
  >          		
  >          		public getId() { return "yo"; }
  >          		
  >          		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >          
  >          			return true;
  >          		}
  >          	}
  >          }
1 >Emitted(19, 1) Source(32, 1) + SourceIndex(0)
2 >Emitted(19, 5) Source(32, 8) + SourceIndex(0)
3 >Emitted(19, 11) Source(32, 14) + SourceIndex(0)
4 >Emitted(19, 12) Source(42, 2) + SourceIndex(0)
---
>>>(function (Sample) {
1->
2 >^^^^^^^^^^^
3 >           ^^^^^^
1->
2 >module 
3 >           Sample
1->Emitted(20, 1) Source(32, 1) + SourceIndex(0)
2 >Emitted(20, 12) Source(32, 8) + SourceIndex(0)
3 >Emitted(20, 18) Source(32, 14) + SourceIndex(0)
---
>>>    var Actions;
1 >^^^^
2 >    ^^^^
3 >        ^^^^^^^
4 >               ^
5 >                ^^^^^^^^^^->
1 >.
2 >    
3 >        Actions
4 >               .Thing.Find {
  >               	export class StartFindAction implements Sample.Thing.IAction {
  >               		
  >               		public getId() { return "yo"; }
  >               		
  >               		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >               
  >               			return true;
  >               		}
  >               	}
  >               }
1 >Emitted(21, 5) Source(32, 15) + SourceIndex(0)
2 >Emitted(21, 9) Source(32, 15) + SourceIndex(0)
3 >Emitted(21, 16) Source(32, 22) + SourceIndex(0)
4 >Emitted(21, 17) Source(42, 2) + SourceIndex(0)
---
>>>    (function (Actions) {
1->^^^^
2 >    ^^^^^^^^^^^
3 >               ^^^^^^^
1->
2 >    
3 >               Actions
1->Emitted(22, 5) Source(32, 15) + SourceIndex(0)
2 >Emitted(22, 16) Source(32, 15) + SourceIndex(0)
3 >Emitted(22, 23) Source(32, 22) + SourceIndex(0)
---
>>>        var Thing;
1 >^^^^^^^^
2 >        ^^^^
3 >            ^^^^^
4 >                 ^
5 >                  ^^^^^^^^^^^^->
1 >.
2 >        
3 >            Thing
4 >                 .Find {
  >                 	export class StartFindAction implements Sample.Thing.IAction {
  >                 		
  >                 		public getId() { return "yo"; }
  >                 		
  >                 		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                 
  >                 			return true;
  >                 		}
  >                 	}
  >                 }
1 >Emitted(23, 9) Source(32, 23) + SourceIndex(0)
2 >Emitted(23, 13) Source(32, 23) + SourceIndex(0)
3 >Emitted(23, 18) Source(32, 28) + SourceIndex(0)
4 >Emitted(23, 19) Source(42, 2) + SourceIndex(0)
---
>>>        (function (Thing_1) {
1->^^^^^^^^
2 >        ^^^^^^^^^^^
3 >                   ^^^^^^^
1->
2 >        
3 >                   Thing
1->Emitted(24, 9) Source(32, 23) + SourceIndex(0)
2 >Emitted(24, 20) Source(32, 23) + SourceIndex(0)
3 >Emitted(24, 27) Source(32, 28) + SourceIndex(0)
---
>>>            var Find;
1 >^^^^^^^^^^^^
2 >            ^^^^
3 >                ^^^^
4 >                    ^
5 >                     ^^^^^^^^^^->
1 >.
2 >            
3 >                Find
4 >                     {
  >                    	export class StartFindAction implements Sample.Thing.IAction {
  >                    		
  >                    		public getId() { return "yo"; }
  >                    		
  >                    		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                    
  >                    			return true;
  >                    		}
  >                    	}
  >                    }
1 >Emitted(25, 13) Source(32, 29) + SourceIndex(0)
2 >Emitted(25, 17) Source(32, 29) + SourceIndex(0)
3 >Emitted(25, 21) Source(32, 33) + SourceIndex(0)
4 >Emitted(25, 22) Source(42, 2) + SourceIndex(0)
---
>>>            (function (Find) {
1->^^^^^^^^^^^^
2 >            ^^^^^^^^^^^
3 >                       ^^^^
4 >                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1->
2 >            
3 >                       Find
1->Emitted(26, 13) Source(32, 29) + SourceIndex(0)
2 >Emitted(26, 24) Source(32, 29) + SourceIndex(0)
3 >Emitted(26, 28) Source(32, 33) + SourceIndex(0)
---
>>>                var StartFindAction = /** @class */ (function () {
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1-> {
  >	
1->Emitted(27, 17) Source(33, 2) + SourceIndex(0)
---
>>>                    function StartFindAction() {
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^->
1->
1->Emitted(28, 21) Source(33, 2) + SourceIndex(0)
---
>>>                    }
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^
3 >                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1->export class StartFindAction implements Sample.Thing.IAction {
  >		
  >		public getId() { return "yo"; }
  >		
  >		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >
  >			return true;
  >		}
  >	
2 >                    }
1->Emitted(29, 21) Source(41, 2) + SourceIndex(0)
2 >Emitted(29, 22) Source(41, 3) + SourceIndex(0)
---
>>>                    StartFindAction.prototype.getId = function () { return "yo"; };
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3 >                                                   ^^^
4 >                                                      ^^^^^^^^^^^^^^
5 >                                                                    ^^^^^^^
6 >                                                                           ^^^^
7 >                                                                               ^
8 >                                                                                ^
9 >                                                                                 ^
1->
2 >                    getId
3 >                                                   
4 >                                                      public getId() { 
5 >                                                                    return 
6 >                                                                           "yo"
7 >                                                                               ;
8 >                                                                                 
9 >                                                                                 }
1->Emitted(30, 21) Source(35, 10) + SourceIndex(0)
2 >Emitted(30, 52) Source(35, 15) + SourceIndex(0)
3 >Emitted(30, 55) Source(35, 3) + SourceIndex(0)
4 >Emitted(30, 69) Source(35, 20) + SourceIndex(0)
5 >Emitted(30, 76) Source(35, 27) + SourceIndex(0)
6 >Emitted(30, 80) Source(35, 31) + SourceIndex(0)
7 >Emitted(30, 81) Source(35, 32) + SourceIndex(0)
8 >Emitted(30, 82) Source(35, 33) + SourceIndex(0)
9 >Emitted(30, 83) Source(35, 34) + SourceIndex(0)
---
>>>                    StartFindAction.prototype.run = function (Thing) {
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3 >                                                 ^^^
4 >                                                    ^^^^^^^^^^
5 >                                                              ^^^^^
1 >
  >		
  >		public 
2 >                    run
3 >                                                 
4 >                                                    public run(
5 >                                                              Thing:Sample.Thing.ICodeThing
1 >Emitted(31, 21) Source(37, 10) + SourceIndex(0)
2 >Emitted(31, 50) Source(37, 13) + SourceIndex(0)
3 >Emitted(31, 53) Source(37, 3) + SourceIndex(0)
4 >Emitted(31, 63) Source(37, 14) + SourceIndex(0)
5 >Emitted(31, 68) Source(37, 43) + SourceIndex(0)
---
>>>                        return true;
1 >^^^^^^^^^^^^^^^^^^^^^^^^
2 >                        ^^^^^^^
3 >                               ^^^^
4 >                                   ^
1 >):boolean {
  >
  >			
2 >                        return 
3 >                               true
4 >                                   ;
1 >Emitted(32, 25) Source(39, 4) + SourceIndex(0)
2 >Emitted(32, 32) Source(39, 11) + SourceIndex(0)
3 >Emitted(32, 36) Source(39, 15) + SourceIndex(0)
4 >Emitted(32, 37) Source(39, 16) + SourceIndex(0)
---
>>>                    };
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^
3 >                     ^^^^^^^^^^^^^^^^^^^^^^^->
1 >
  >		
2 >                    }
1 >Emitted(33, 21) Source(40, 3) + SourceIndex(0)
2 >Emitted(33, 22) Source(40, 4) + SourceIndex(0)
---
>>>                    return StartFindAction;
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^^^^^^^^^^
1->
  >	
2 >                    }
1->Emitted(34, 21) Source(41, 2) + SourceIndex(0)
2 >Emitted(34, 43) Source(41, 3) + SourceIndex(0)
---
>>>                }());
1 >^^^^^^^^^^^^^^^^
2 >                ^
3 >                 
4 >                 ^^^^
5 >                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
2 >                }
3 >                 
4 >                 export class StartFindAction implements Sample.Thing.IAction {
  >                 		
  >                 		public getId() { return "yo"; }
  >                 		
  >                 		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                 
  >                 			return true;
  >                 		}
  >                 	}
1 >Emitted(35, 17) Source(41, 2) + SourceIndex(0)
2 >Emitted(35, 18) Source(41, 3) + SourceIndex(0)
3 >Emitted(35, 18) Source(33, 2) + SourceIndex(0)
4 >Emitted(35, 22) Source(41, 3) + SourceIndex(0)
---
>>>                Find.StartFindAction = StartFindAction;
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^^^^^^^^^^^
3 >                                    ^^^^^^^^^^^^^^^^^^
4 >                                                      ^
5 >                                                       ^^^^^->
1->
2 >                StartFindAction
3 >                                     implements Sample.Thing.IAction {
  >                                    		
  >                                    		public getId() { return "yo"; }
  >                                    		
  >                                    		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                                    
  >                                    			return true;
  >                                    		}
  >                                    	}
4 >                                                      
1->Emitted(36, 17) Source(33, 15) + SourceIndex(0)
2 >Emitted(36, 37) Source(33, 30) + SourceIndex(0)
3 >Emitted(36, 55) Source(41, 3) + SourceIndex(0)
4 >Emitted(36, 56) Source(41, 3) + SourceIndex(0)
---
>>>            })(Find = Thing_1.Find || (Thing_1.Find = {}));
1->^^^^^^^^^^^^
2 >            ^
3 >             ^^
4 >               ^^^^
5 >                   ^^^
6 >                      ^^^^^^^^^^^^
7 >                                  ^^^^^
8 >                                       ^^^^^^^^^^^^
9 >                                                   ^^^^^^^^
1->
  >
2 >            }
3 >             
4 >               Find
5 >                   
6 >                      Find
7 >                                  
8 >                                       Find
9 >                                                    {
  >                                                   	export class StartFindAction implements Sample.Thing.IAction {
  >                                                   		
  >                                                   		public getId() { return "yo"; }
  >                                                   		
  >                                                   		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                                                   
  >                                                   			return true;
  >                                                   		}
  >                                                   	}
  >                                                   }
1->Emitted(37, 13) Source(42, 1) + SourceIndex(0)
2 >Emitted(37, 14) Source(42, 2) + SourceIndex(0)
3 >Emitted(37, 16) Source(32, 29) + SourceIndex(0)
4 >Emitted(37, 20) Source(32, 33) + SourceIndex(0)
5 >Emitted(37, 23) Source(32, 29) + SourceIndex(0)
6 >Emitted(37, 35) Source(32, 33) + SourceIndex(0)
7 >Emitted(37, 40) Source(32, 29) + SourceIndex(0)
8 >Emitted(37, 52) Source(32, 33) + SourceIndex(0)
9 >Emitted(37, 60) Source(42, 2) + SourceIndex(0)
---
>>>        })(Thing = Actions.Thing || (Actions.Thing = {}));
1 >^^^^^^^^
2 >        ^
3 >         ^^
4 >           ^^^^^
5 >                ^^^
6 >                   ^^^^^^^^^^^^^
7 >                                ^^^^^
8 >                                     ^^^^^^^^^^^^^
9 >                                                  ^^^^^^^^
10>                                                          ^->
1 >
2 >        }
3 >         
4 >           Thing
5 >                
6 >                   Thing
7 >                                
8 >                                     Thing
9 >                                                  .Find {
  >                                                  	export class StartFindAction implements Sample.Thing.IAction {
  >                                                  		
  >                                                  		public getId() { return "yo"; }
  >                                                  		
  >                                                  		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                                                  
  >                                                  			return true;
  >                                                  		}
  >                                                  	}
  >                                                  }
1 >Emitted(38, 9) Source(42, 1) + SourceIndex(0)
2 >Emitted(38, 10) Source(42, 2) + SourceIndex(0)
3 >Emitted(38, 12) Source(32, 23) + SourceIndex(0)
4 >Emitted(38, 17) Source(32, 28) + SourceIndex(0)
5 >Emitted(38, 20) Source(32, 23) + SourceIndex(0)
6 >Emitted(38, 33) Source(32, 28) + SourceIndex(0)
7 >Emitted(38, 38) Source(32, 23) + SourceIndex(0)
8 >Emitted(38, 51) Source(32, 28) + SourceIndex(0)
9 >Emitted(38, 59) Source(42, 2) + SourceIndex(0)
---
>>>    })(Actions = Sample.Actions || (Sample.Actions = {}));
1->^^^^
2 >    ^
3 >     ^^
4 >       ^^^^^^^
5 >              ^^^
6 >                 ^^^^^^^^^^^^^^
7 >                               ^^^^^
8 >                                    ^^^^^^^^^^^^^^
9 >                                                  ^^^^^^^^
1->
2 >    }
3 >     
4 >       Actions
5 >              
6 >                 Actions
7 >                               
8 >                                    Actions
9 >                                                  .Thing.Find {
  >                                                  	export class StartFindAction implements Sample.Thing.IAction {
  >                                                  		
  >                                                  		public getId() { return "yo"; }
  >                                                  		
  >                                                  		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                                                  
  >                                                  			return true;
  >                                                  		}
  >                                                  	}
  >                                                  }
1->Emitted(39, 5) Source(42, 1) + SourceIndex(0)
2 >Emitted(39, 6) Source(42, 2) + SourceIndex(0)
3 >Emitted(39, 8) Source(32, 15) + SourceIndex(0)
4 >Emitted(39, 15) Source(32, 22) + SourceIndex(0)
5 >Emitted(39, 18) Source(32, 15) + SourceIndex(0)
6 >Emitted(39, 32) Source(32, 22) + SourceIndex(0)
7 >Emitted(39, 37) Source(32, 15) + SourceIndex(0)
8 >Emitted(39, 51) Source(32, 22) + SourceIndex(0)
9 >Emitted(39, 59) Source(42, 2) + SourceIndex(0)
---
>>>})(Sample || (Sample = {}));
1 >
2 >^
3 > ^^
4 >   ^^^^^^
5 >         ^^^^^
6 >              ^^^^^^
7 >                    ^^^^^^^^
1 >
2 >}
3 > 
4 >   Sample
5 >         
6 >              Sample
7 >                    .Actions.Thing.Find {
  >                    	export class StartFindAction implements Sample.Thing.IAction {
  >                    		
  >                    		public getId() { return "yo"; }
  >                    		
  >                    		public run(Thing:Sample.Thing.ICodeThing):boolean {
  >                    
  >                    			return true;
  >                    		}
  >                    	}
  >                    }
1 >Emitted(40, 1) Source(42, 1) + SourceIndex(0)
2 >Emitted(40, 2) Source(42, 2) + SourceIndex(0)
3 >Emitted(40, 4) Source(32, 8) + SourceIndex(0)
4 >Emitted(40, 10) Source(32, 14) + SourceIndex(0)
5 >Emitted(40, 15) Source(32, 8) + SourceIndex(0)
6 >Emitted(40, 21) Source(32, 14) + SourceIndex(0)
7 >Emitted(40, 29) Source(42, 2) + SourceIndex(0)
---
>>>(function (Sample) {
1 >
2 >^^^^^^^^^^^
3 >           ^^^^^^
1 >
  >
  >
2 >module 
3 >           Sample
1 >Emitted(41, 1) Source(44, 1) + SourceIndex(0)
2 >Emitted(41, 12) Source(44, 8) + SourceIndex(0)
3 >Emitted(41, 18) Source(44, 14) + SourceIndex(0)
---
>>>    var Thing;
1 >^^^^
2 >    ^^^^
3 >        ^^^^^
4 >             ^
5 >              ^^^^^^^^^^->
1 >.
2 >    
3 >        Thing
4 >             .Widgets {
  >             	export class FindWidget implements Sample.Thing.IWidget {
  >             
  >             		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >             			
  >             		private domNode:any = null;
  >             		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >             		    // scenario 1
  >             		    codeThing.addWidget("addWidget", this);
  >             		}
  >             		
  >             		public getDomNode() {
  >             			return domNode;
  >             		}
  >             		
  >             		public destroy() {
  >             
  >             		}
  >             
  >             	}
  >             }
1 >Emitted(42, 5) Source(44, 15) + SourceIndex(0)
2 >Emitted(42, 9) Source(44, 15) + SourceIndex(0)
3 >Emitted(42, 14) Source(44, 20) + SourceIndex(0)
4 >Emitted(42, 15) Source(64, 2) + SourceIndex(0)
---
>>>    (function (Thing) {
1->^^^^
2 >    ^^^^^^^^^^^
3 >               ^^^^^
4 >                    ^->
1->
2 >    
3 >               Thing
1->Emitted(43, 5) Source(44, 15) + SourceIndex(0)
2 >Emitted(43, 16) Source(44, 15) + SourceIndex(0)
3 >Emitted(43, 21) Source(44, 20) + SourceIndex(0)
---
>>>        var Widgets;
1->^^^^^^^^
2 >        ^^^^
3 >            ^^^^^^^
4 >                   ^
5 >                    ^^^^^^^^^^->
1->.
2 >        
3 >            Widgets
4 >                    {
  >                   	export class FindWidget implements Sample.Thing.IWidget {
  >                   
  >                   		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >                   			
  >                   		private domNode:any = null;
  >                   		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >                   		    // scenario 1
  >                   		    codeThing.addWidget("addWidget", this);
  >                   		}
  >                   		
  >                   		public getDomNode() {
  >                   			return domNode;
  >                   		}
  >                   		
  >                   		public destroy() {
  >                   
  >                   		}
  >                   
  >                   	}
  >                   }
1->Emitted(44, 9) Source(44, 21) + SourceIndex(0)
2 >Emitted(44, 13) Source(44, 21) + SourceIndex(0)
3 >Emitted(44, 20) Source(44, 28) + SourceIndex(0)
4 >Emitted(44, 21) Source(64, 2) + SourceIndex(0)
---
>>>        (function (Widgets) {
1->^^^^^^^^
2 >        ^^^^^^^^^^^
3 >                   ^^^^^^^
4 >                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1->
2 >        
3 >                   Widgets
1->Emitted(45, 9) Source(44, 21) + SourceIndex(0)
2 >Emitted(45, 20) Source(44, 21) + SourceIndex(0)
3 >Emitted(45, 27) Source(44, 28) + SourceIndex(0)
---
>>>            var FindWidget = /** @class */ (function () {
1->^^^^^^^^^^^^
2 >            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1-> {
  >	
1->Emitted(46, 13) Source(45, 2) + SourceIndex(0)
---
>>>                function FindWidget(codeThing) {
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^^^^^^^^^^^
3 >                                    ^^^^^^^^^
4 >                                             ^^^->
1->export class FindWidget implements Sample.Thing.IWidget {
  >
  >		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >			
  >		private domNode:any = null;
  >		
2 >                constructor(private 
3 >                                    codeThing: Sample.Thing.ICodeThing
1->Emitted(47, 17) Source(50, 3) + SourceIndex(0)
2 >Emitted(47, 37) Source(50, 23) + SourceIndex(0)
3 >Emitted(47, 46) Source(50, 57) + SourceIndex(0)
---
>>>                    this.codeThing = codeThing;
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^^
3 >                                  ^^^
4 >                                     ^^^^^^^^^
5 >                                              ^
1->
2 >                    codeThing
3 >                                  
4 >                                     codeThing
5 >                                              : Sample.Thing.ICodeThing
1->Emitted(48, 21) Source(50, 23) + SourceIndex(0)
2 >Emitted(48, 35) Source(50, 32) + SourceIndex(0)
3 >Emitted(48, 38) Source(50, 23) + SourceIndex(0)
4 >Emitted(48, 47) Source(50, 32) + SourceIndex(0)
5 >Emitted(48, 48) Source(50, 57) + SourceIndex(0)
---
>>>                    this.domNode = null;
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^
3 >                                ^^^
4 >                                   ^^^^
5 >                                       ^
1 >
2 >                    domNode
3 >                                :any = 
4 >                                   null
5 >                                       ;
1 >Emitted(49, 21) Source(49, 11) + SourceIndex(0)
2 >Emitted(49, 33) Source(49, 18) + SourceIndex(0)
3 >Emitted(49, 36) Source(49, 25) + SourceIndex(0)
4 >Emitted(49, 40) Source(49, 29) + SourceIndex(0)
5 >Emitted(49, 41) Source(49, 30) + SourceIndex(0)
---
>>>                    // scenario 1
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^
3 >                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
  >		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >		    
2 >                    // scenario 1
1 >Emitted(50, 21) Source(51, 7) + SourceIndex(0)
2 >Emitted(50, 34) Source(51, 20) + SourceIndex(0)
---
>>>                    codeThing.addWidget("addWidget", this);
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^
3 >                             ^
4 >                              ^^^^^^^^^
5 >                                       ^
6 >                                        ^^^^^^^^^^^
7 >                                                   ^^
8 >                                                     ^^^^
9 >                                                         ^
10>                                                          ^
1->
  >		    
2 >                    codeThing
3 >                             .
4 >                              addWidget
5 >                                       (
6 >                                        "addWidget"
7 >                                                   , 
8 >                                                     this
9 >                                                         )
10>                                                          ;
1->Emitted(51, 21) Source(52, 7) + SourceIndex(0)
2 >Emitted(51, 30) Source(52, 16) + SourceIndex(0)
3 >Emitted(51, 31) Source(52, 17) + SourceIndex(0)
4 >Emitted(51, 40) Source(52, 26) + SourceIndex(0)
5 >Emitted(51, 41) Source(52, 27) + SourceIndex(0)
6 >Emitted(51, 52) Source(52, 38) + SourceIndex(0)
7 >Emitted(51, 54) Source(52, 40) + SourceIndex(0)
8 >Emitted(51, 58) Source(52, 44) + SourceIndex(0)
9 >Emitted(51, 59) Source(52, 45) + SourceIndex(0)
10>Emitted(51, 60) Source(52, 46) + SourceIndex(0)
---
>>>                }
1 >^^^^^^^^^^^^^^^^
2 >                ^
3 >                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
  >		
2 >                }
1 >Emitted(52, 17) Source(53, 3) + SourceIndex(0)
2 >Emitted(52, 18) Source(53, 4) + SourceIndex(0)
---
>>>                FindWidget.prototype.gar = function (runner) { if (true) {
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^^^^^^^^^^^^^^^
3 >                                        ^^^
4 >                                           ^^^^^^^^^^
5 >                                                     ^^^^^^
6 >                                                           ^^^^
7 >                                                               ^^^^
8 >                                                                   ^^^^
9 >                                                                       ^^
10>                                                                         ^
1->
2 >                gar
3 >                                        
4 >                                           public gar(
5 >                                                     runner:(widget:Sample.Thing.IWidget)=>any
6 >                                                           ) { 
7 >                                                               if (
8 >                                                                   true
9 >                                                                       ) 
10>                                                                         {
1->Emitted(53, 17) Source(47, 10) + SourceIndex(0)
2 >Emitted(53, 41) Source(47, 13) + SourceIndex(0)
3 >Emitted(53, 44) Source(47, 3) + SourceIndex(0)
4 >Emitted(53, 54) Source(47, 14) + SourceIndex(0)
5 >Emitted(53, 60) Source(47, 55) + SourceIndex(0)
6 >Emitted(53, 64) Source(47, 59) + SourceIndex(0)
7 >Emitted(53, 68) Source(47, 63) + SourceIndex(0)
8 >Emitted(53, 72) Source(47, 67) + SourceIndex(0)
9 >Emitted(53, 74) Source(47, 69) + SourceIndex(0)
10>Emitted(53, 75) Source(47, 70) + SourceIndex(0)
---
>>>                    return runner(this);
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^
3 >                           ^^^^^^
4 >                                 ^
5 >                                  ^^^^
6 >                                      ^
7 >                                       ^
1 >
2 >                    return 
3 >                           runner
4 >                                 (
5 >                                  this
6 >                                      )
7 >                                       ;
1 >Emitted(54, 21) Source(47, 70) + SourceIndex(0)
2 >Emitted(54, 28) Source(47, 77) + SourceIndex(0)
3 >Emitted(54, 34) Source(47, 83) + SourceIndex(0)
4 >Emitted(54, 35) Source(47, 84) + SourceIndex(0)
5 >Emitted(54, 39) Source(47, 88) + SourceIndex(0)
6 >Emitted(54, 40) Source(47, 89) + SourceIndex(0)
7 >Emitted(54, 41) Source(47, 90) + SourceIndex(0)
---
>>>                } };
1 >^^^^^^^^^^^^^^^^
2 >                ^
3 >                 ^
4 >                  ^
5 >                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
2 >                }
3 >                 
4 >                  }
1 >Emitted(55, 17) Source(47, 90) + SourceIndex(0)
2 >Emitted(55, 18) Source(47, 91) + SourceIndex(0)
3 >Emitted(55, 19) Source(47, 91) + SourceIndex(0)
4 >Emitted(55, 20) Source(47, 92) + SourceIndex(0)
---
>>>                FindWidget.prototype.getDomNode = function () {
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3 >                                               ^^^
1->
  >			
  >		private domNode:any = null;
  >		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >		    // scenario 1
  >		    codeThing.addWidget("addWidget", this);
  >		}
  >		
  >		public 
2 >                getDomNode
3 >                                               
1->Emitted(56, 17) Source(55, 10) + SourceIndex(0)
2 >Emitted(56, 48) Source(55, 20) + SourceIndex(0)
3 >Emitted(56, 51) Source(55, 3) + SourceIndex(0)
---
>>>                    return domNode;
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^
3 >                           ^^^^^^^
4 >                                  ^
1 >public getDomNode() {
  >			
2 >                    return 
3 >                           domNode
4 >                                  ;
1 >Emitted(57, 21) Source(56, 4) + SourceIndex(0)
2 >Emitted(57, 28) Source(56, 11) + SourceIndex(0)
3 >Emitted(57, 35) Source(56, 18) + SourceIndex(0)
4 >Emitted(57, 36) Source(56, 19) + SourceIndex(0)
---
>>>                };
1 >^^^^^^^^^^^^^^^^
2 >                ^
3 >                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
  >		
2 >                }
1 >Emitted(58, 17) Source(57, 3) + SourceIndex(0)
2 >Emitted(58, 18) Source(57, 4) + SourceIndex(0)
---
>>>                FindWidget.prototype.destroy = function () {
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3 >                                            ^^^
1->
  >		
  >		public 
2 >                destroy
3 >                                            
1->Emitted(59, 17) Source(59, 10) + SourceIndex(0)
2 >Emitted(59, 45) Source(59, 17) + SourceIndex(0)
3 >Emitted(59, 48) Source(59, 3) + SourceIndex(0)
---
>>>                };
1 >^^^^^^^^^^^^^^^^
2 >                ^
3 >                 ^^^^^^^^^^^^^^^^^^->
1 >public destroy() {
  >
  >		
2 >                }
1 >Emitted(60, 17) Source(61, 3) + SourceIndex(0)
2 >Emitted(60, 18) Source(61, 4) + SourceIndex(0)
---
>>>                return FindWidget;
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^^^^^^^^
1->
  >
  >	
2 >                }
1->Emitted(61, 17) Source(63, 2) + SourceIndex(0)
2 >Emitted(61, 34) Source(63, 3) + SourceIndex(0)
---
>>>            }());
1 >^^^^^^^^^^^^
2 >            ^
3 >             
4 >             ^^^^
5 >                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
2 >            }
3 >             
4 >             export class FindWidget implements Sample.Thing.IWidget {
  >             
  >             		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >             			
  >             		private domNode:any = null;
  >             		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >             		    // scenario 1
  >             		    codeThing.addWidget("addWidget", this);
  >             		}
  >             		
  >             		public getDomNode() {
  >             			return domNode;
  >             		}
  >             		
  >             		public destroy() {
  >             
  >             		}
  >             
  >             	}
1 >Emitted(62, 13) Source(63, 2) + SourceIndex(0)
2 >Emitted(62, 14) Source(63, 3) + SourceIndex(0)
3 >Emitted(62, 14) Source(45, 2) + SourceIndex(0)
4 >Emitted(62, 18) Source(63, 3) + SourceIndex(0)
---
>>>            Widgets.FindWidget = FindWidget;
1->^^^^^^^^^^^^
2 >            ^^^^^^^^^^^^^^^^^^
3 >                              ^^^^^^^^^^^^^
4 >                                           ^
5 >                                            ^^^^^^^^^^^^^^^^^->
1->
2 >            FindWidget
3 >                               implements Sample.Thing.IWidget {
  >                              
  >                              		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >                              			
  >                              		private domNode:any = null;
  >                              		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >                              		    // scenario 1
  >                              		    codeThing.addWidget("addWidget", this);
  >                              		}
  >                              		
  >                              		public getDomNode() {
  >                              			return domNode;
  >                              		}
  >                              		
  >                              		public destroy() {
  >                              
  >                              		}
  >                              
  >                              	}
4 >                                           
1->Emitted(63, 13) Source(45, 15) + SourceIndex(0)
2 >Emitted(63, 31) Source(45, 25) + SourceIndex(0)
3 >Emitted(63, 44) Source(63, 3) + SourceIndex(0)
4 >Emitted(63, 45) Source(63, 3) + SourceIndex(0)
---
>>>        })(Widgets = Thing.Widgets || (Thing.Widgets = {}));
1->^^^^^^^^
2 >        ^
3 >         ^^
4 >           ^^^^^^^
5 >                  ^^^
6 >                     ^^^^^^^^^^^^^
7 >                                  ^^^^^
8 >                                       ^^^^^^^^^^^^^
9 >                                                    ^^^^^^^^
1->
  >
2 >        }
3 >         
4 >           Widgets
5 >                  
6 >                     Widgets
7 >                                  
8 >                                       Widgets
9 >                                                     {
  >                                                    	export class FindWidget implements Sample.Thing.IWidget {
  >                                                    
  >                                                    		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >                                                    			
  >                                                    		private domNode:any = null;
  >                                                    		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >                                                    		    // scenario 1
  >                                                    		    codeThing.addWidget("addWidget", this);
  >                                                    		}
  >                                                    		
  >                                                    		public getDomNode() {
  >                                                    			return domNode;
  >                                                    		}
  >                                                    		
  >                                                    		public destroy() {
  >                                                    
  >                                                    		}
  >                                                    
  >                                                    	}
  >                                                    }
1->Emitted(64, 9) Source(64, 1) + SourceIndex(0)
2 >Emitted(64, 10) Source(64, 2) + SourceIndex(0)
3 >Emitted(64, 12) Source(44, 21) + SourceIndex(0)
4 >Emitted(64, 19) Source(44, 28) + SourceIndex(0)
5 >Emitted(64, 22) Source(44, 21) + SourceIndex(0)
6 >Emitted(64, 35) Source(44, 28) + SourceIndex(0)
7 >Emitted(64, 40) Source(44, 21) + SourceIndex(0)
8 >Emitted(64, 53) Source(44, 28) + SourceIndex(0)
9 >Emitted(64, 61) Source(64, 2) + SourceIndex(0)
---
>>>    })(Thing = Sample.Thing || (Sample.Thing = {}));
1 >^^^^
2 >    ^
3 >     ^^
4 >       ^^^^^
5 >            ^^^
6 >               ^^^^^^^^^^^^
7 >                           ^^^^^
8 >                                ^^^^^^^^^^^^
9 >                                            ^^^^^^^^
1 >
2 >    }
3 >     
4 >       Thing
5 >            
6 >               Thing
7 >                           
8 >                                Thing
9 >                                            .Widgets {
  >                                            	export class FindWidget implements Sample.Thing.IWidget {
  >                                            
  >                                            		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >                                            			
  >                                            		private domNode:any = null;
  >                                            		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >                                            		    // scenario 1
  >                                            		    codeThing.addWidget("addWidget", this);
  >                                            		}
  >                                            		
  >                                            		public getDomNode() {
  >                                            			return domNode;
  >                                            		}
  >                                            		
  >                                            		public destroy() {
  >                                            
  >                                            		}
  >                                            
  >                                            	}
  >                                            }
1 >Emitted(65, 5) Source(64, 1) + SourceIndex(0)
2 >Emitted(65, 6) Source(64, 2) + SourceIndex(0)
3 >Emitted(65, 8) Source(44, 15) + SourceIndex(0)
4 >Emitted(65, 13) Source(44, 20) + SourceIndex(0)
5 >Emitted(65, 16) Source(44, 15) + SourceIndex(0)
6 >Emitted(65, 28) Source(44, 20) + SourceIndex(0)
7 >Emitted(65, 33) Source(44, 15) + SourceIndex(0)
8 >Emitted(65, 45) Source(44, 20) + SourceIndex(0)
9 >Emitted(65, 53) Source(64, 2) + SourceIndex(0)
---
>>>})(Sample || (Sample = {}));
1 >
2 >^
3 > ^^
4 >   ^^^^^^
5 >         ^^^^^
6 >              ^^^^^^
7 >                    ^^^^^^^^
8 >                            ^^^^^^^^^^^^^^^^^^^^->
1 >
2 >}
3 > 
4 >   Sample
5 >         
6 >              Sample
7 >                    .Thing.Widgets {
  >                    	export class FindWidget implements Sample.Thing.IWidget {
  >                    
  >                    		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
  >                    			
  >                    		private domNode:any = null;
  >                    		constructor(private codeThing: Sample.Thing.ICodeThing) {
  >                    		    // scenario 1
  >                    		    codeThing.addWidget("addWidget", this);
  >                    		}
  >                    		
  >                    		public getDomNode() {
  >                    			return domNode;
  >                    		}
  >                    		
  >                    		public destroy() {
  >                    
  >                    		}
  >                    
  >                    	}
  >                    }
1 >Emitted(66, 1) Source(64, 1) + SourceIndex(0)
2 >Emitted(66, 2) Source(64, 2) + SourceIndex(0)
3 >Emitted(66, 4) Source(44, 8) + SourceIndex(0)
4 >Emitted(66, 10) Source(44, 14) + SourceIndex(0)
5 >Emitted(66, 15) Source(44, 8) + SourceIndex(0)
6 >Emitted(66, 21) Source(44, 14) + SourceIndex(0)
7 >Emitted(66, 29) Source(64, 2) + SourceIndex(0)
---
>>>var AbstractMode = /** @class */ (function () {
1->
2 >^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1->
  >
  >interface IMode { getInitialState(): IState;} 
  >
1->Emitted(67, 1) Source(67, 1) + SourceIndex(0)
---
>>>    function AbstractMode() {
1->^^^^
2 >    ^^->
1->
1->Emitted(68, 5) Source(67, 1) + SourceIndex(0)
---
>>>    }
1->^^^^
2 >    ^
3 >     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1->class AbstractMode implements IMode { public getInitialState(): IState { return null;} 
2 >    }
1->Emitted(69, 5) Source(67, 88) + SourceIndex(0)
2 >Emitted(69, 6) Source(67, 89) + SourceIndex(0)
---
>>>    AbstractMode.prototype.getInitialState = function () { return null; };
1->^^^^
2 >    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3 >                                          ^^^
4 >                                             ^^^^^^^^^^^^^^
5 >                                                           ^^^^^^^
6 >                                                                  ^^^^
7 >                                                                      ^
8 >                                                                       ^
9 >                                                                        ^
1->
2 >    getInitialState
3 >                                          
4 >                                             public getInitialState(): IState { 
5 >                                                           return 
6 >                                                                  null
7 >                                                                      ;
8 >                                                                       
9 >                                                                        }
1->Emitted(70, 5) Source(67, 46) + SourceIndex(0)
2 >Emitted(70, 43) Source(67, 61) + SourceIndex(0)
3 >Emitted(70, 46) Source(67, 39) + SourceIndex(0)
4 >Emitted(70, 60) Source(67, 74) + SourceIndex(0)
5 >Emitted(70, 67) Source(67, 81) + SourceIndex(0)
6 >Emitted(70, 71) Source(67, 85) + SourceIndex(0)
7 >Emitted(70, 72) Source(67, 86) + SourceIndex(0)
8 >Emitted(70, 73) Source(67, 86) + SourceIndex(0)
9 >Emitted(70, 74) Source(67, 87) + SourceIndex(0)
---
>>>    return AbstractMode;
1 >^^^^
2 >    ^^^^^^^^^^^^^^^^^^^
1 > 
2 >    }
1 >Emitted(71, 5) Source(67, 88) + SourceIndex(0)
2 >Emitted(71, 24) Source(67, 89) + SourceIndex(0)
---
>>>}());
1 >
2 >^
3 > 
4 > ^^^^
5 >     ^^^^^^^^^^^^^^^^->
1 >
2 >}
3 > 
4 > class AbstractMode implements IMode { public getInitialState(): IState { return null;} }
1 >Emitted(72, 1) Source(67, 88) + SourceIndex(0)
2 >Emitted(72, 2) Source(67, 89) + SourceIndex(0)
3 >Emitted(72, 2) Source(67, 1) + SourceIndex(0)
4 >Emitted(72, 6) Source(67, 89) + SourceIndex(0)
---
>>>(function (Sample) {
1->
2 >^^^^^^^^^^^
3 >           ^^^^^^
1->
  >
  >interface IState {}
  >
  >interface Window {
  >    opener: Window;
  >}
  >declare var self: Window;
  >
  >
2 >module 
3 >           Sample
1->Emitted(73, 1) Source(76, 1) + SourceIndex(0)
2 >Emitted(73, 12) Source(76, 8) + SourceIndex(0)
3 >Emitted(73, 18) Source(76, 14) + SourceIndex(0)
---
>>>    var Thing;
1 >^^^^
2 >    ^^^^
3 >        ^^^^^
4 >             ^
5 >              ^^^^^^^^^^->
1 >.
2 >    
3 >        Thing
4 >             .Languages.PlainText {
  >             	
  >             	export class State implements IState {		
  >                     constructor(private mode: IMode) { }
  >             		public clone():IState {
  >             			return this;
  >             		}
  >             
  >             		public equals(other:IState):boolean {
  >             			return this === other;
  >             		}
  >             		
  >             		public getMode(): IMode { return mode; }
  >             	}
  >             	
  >             	export class Mode extends AbstractMode {
  >             
  >             		// scenario 2
  >             		public getInitialState(): IState {
  >             			return new State(self);
  >             		}
  >             
  >             
  >             	}
  >             }
1 >Emitted(74, 5) Source(76, 15) + SourceIndex(0)
2 >Emitted(74, 9) Source(76, 15) + SourceIndex(0)
3 >Emitted(74, 14) Source(76, 20) + SourceIndex(0)
4 >Emitted(74, 15) Source(100, 2) + SourceIndex(0)
---
>>>    (function (Thing) {
1->^^^^
2 >    ^^^^^^^^^^^
3 >               ^^^^^
4 >                    ^^^->
1->
2 >    
3 >               Thing
1->Emitted(75, 5) Source(76, 15) + SourceIndex(0)
2 >Emitted(75, 16) Source(76, 15) + SourceIndex(0)
3 >Emitted(75, 21) Source(76, 20) + SourceIndex(0)
---
>>>        var Languages;
1->^^^^^^^^
2 >        ^^^^
3 >            ^^^^^^^^^
4 >                     ^
5 >                      ^^^^^^^^^^->
1->.
2 >        
3 >            Languages
4 >                     .PlainText {
  >                     	
  >                     	export class State implements IState {		
  >                             constructor(private mode: IMode) { }
  >                     		public clone():IState {
  >                     			return this;
  >                     		}
  >                     
  >                     		public equals(other:IState):boolean {
  >                     			return this === other;
  >                     		}
  >                     		
  >                     		public getMode(): IMode { return mode; }
  >                     	}
  >                     	
  >                     	export class Mode extends AbstractMode {
  >                     
  >                     		// scenario 2
  >                     		public getInitialState(): IState {
  >                     			return new State(self);
  >                     		}
  >                     
  >                     
  >                     	}
  >                     }
1->Emitted(76, 9) Source(76, 21) + SourceIndex(0)
2 >Emitted(76, 13) Source(76, 21) + SourceIndex(0)
3 >Emitted(76, 22) Source(76, 30) + SourceIndex(0)
4 >Emitted(76, 23) Source(100, 2) + SourceIndex(0)
---
>>>        (function (Languages) {
1->^^^^^^^^
2 >        ^^^^^^^^^^^
3 >                   ^^^^^^^^^
1->
2 >        
3 >                   Languages
1->Emitted(77, 9) Source(76, 21) + SourceIndex(0)
2 >Emitted(77, 20) Source(76, 21) + SourceIndex(0)
3 >Emitted(77, 29) Source(76, 30) + SourceIndex(0)
---
>>>            var PlainText;
1 >^^^^^^^^^^^^
2 >            ^^^^
3 >                ^^^^^^^^^
4 >                         ^
5 >                          ^^^^^^^^^^->
1 >.
2 >            
3 >                PlainText
4 >                          {
  >                         	
  >                         	export class State implements IState {		
  >                                 constructor(private mode: IMode) { }
  >                         		public clone():IState {
  >                         			return this;
  >                         		}
  >                         
  >                         		public equals(other:IState):boolean {
  >                         			return this === other;
  >                         		}
  >                         		
  >                         		public getMode(): IMode { return mode; }
  >                         	}
  >                         	
  >                         	export class Mode extends AbstractMode {
  >                         
  >                         		// scenario 2
  >                         		public getInitialState(): IState {
  >                         			return new State(self);
  >                         		}
  >                         
  >                         
  >                         	}
  >                         }
1 >Emitted(78, 13) Source(76, 31) + SourceIndex(0)
2 >Emitted(78, 17) Source(76, 31) + SourceIndex(0)
3 >Emitted(78, 26) Source(76, 40) + SourceIndex(0)
4 >Emitted(78, 27) Source(100, 2) + SourceIndex(0)
---
>>>            (function (PlainText) {
1->^^^^^^^^^^^^
2 >            ^^^^^^^^^^^
3 >                       ^^^^^^^^^
4 >                                ^^^^^^^^^^^^^^^^^^^^^^^^^->
1->
2 >            
3 >                       PlainText
1->Emitted(79, 13) Source(76, 31) + SourceIndex(0)
2 >Emitted(79, 24) Source(76, 31) + SourceIndex(0)
3 >Emitted(79, 33) Source(76, 40) + SourceIndex(0)
---
>>>                var State = /** @class */ (function () {
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1-> {
  >	
  >	
1->Emitted(80, 17) Source(78, 2) + SourceIndex(0)
---
>>>                    function State(mode) {
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^^^
3 >                                   ^^^^
4 >                                       ^^^->
1->export class State implements IState {		
  >        
2 >                    constructor(private 
3 >                                   mode: IMode
1->Emitted(81, 21) Source(79, 9) + SourceIndex(0)
2 >Emitted(81, 36) Source(79, 29) + SourceIndex(0)
3 >Emitted(81, 40) Source(79, 40) + SourceIndex(0)
---
>>>                        this.mode = mode;
1->^^^^^^^^^^^^^^^^^^^^^^^^
2 >                        ^^^^^^^^^
3 >                                 ^^^
4 >                                    ^^^^
5 >                                        ^
1->
2 >                        mode
3 >                                 
4 >                                    mode
5 >                                        : IMode
1->Emitted(82, 25) Source(79, 29) + SourceIndex(0)
2 >Emitted(82, 34) Source(79, 33) + SourceIndex(0)
3 >Emitted(82, 37) Source(79, 29) + SourceIndex(0)
4 >Emitted(82, 41) Source(79, 33) + SourceIndex(0)
5 >Emitted(82, 42) Source(79, 40) + SourceIndex(0)
---
>>>                    }
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^
3 >                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >) { 
2 >                    }
1 >Emitted(83, 21) Source(79, 44) + SourceIndex(0)
2 >Emitted(83, 22) Source(79, 45) + SourceIndex(0)
---
>>>                    State.prototype.clone = function () {
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^^^^^^^^^
3 >                                         ^^^
1->
  >		public 
2 >                    clone
3 >                                         
1->Emitted(84, 21) Source(80, 10) + SourceIndex(0)
2 >Emitted(84, 42) Source(80, 15) + SourceIndex(0)
3 >Emitted(84, 45) Source(80, 3) + SourceIndex(0)
---
>>>                        return this;
1 >^^^^^^^^^^^^^^^^^^^^^^^^
2 >                        ^^^^^^^
3 >                               ^^^^
4 >                                   ^
1 >public clone():IState {
  >			
2 >                        return 
3 >                               this
4 >                                   ;
1 >Emitted(85, 25) Source(81, 4) + SourceIndex(0)
2 >Emitted(85, 32) Source(81, 11) + SourceIndex(0)
3 >Emitted(85, 36) Source(81, 15) + SourceIndex(0)
4 >Emitted(85, 37) Source(81, 16) + SourceIndex(0)
---
>>>                    };
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^
3 >                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
  >		
2 >                    }
1 >Emitted(86, 21) Source(82, 3) + SourceIndex(0)
2 >Emitted(86, 22) Source(82, 4) + SourceIndex(0)
---
>>>                    State.prototype.equals = function (other) {
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^^^^^^^^^^
3 >                                          ^^^
4 >                                             ^^^^^^^^^^
5 >                                                       ^^^^^
1->
  >
  >		public 
2 >                    equals
3 >                                          
4 >                                             public equals(
5 >                                                       other:IState
1->Emitted(87, 21) Source(84, 10) + SourceIndex(0)
2 >Emitted(87, 43) Source(84, 16) + SourceIndex(0)
3 >Emitted(87, 46) Source(84, 3) + SourceIndex(0)
4 >Emitted(87, 56) Source(84, 17) + SourceIndex(0)
5 >Emitted(87, 61) Source(84, 29) + SourceIndex(0)
---
>>>                        return this === other;
1 >^^^^^^^^^^^^^^^^^^^^^^^^
2 >                        ^^^^^^^
3 >                               ^^^^
4 >                                   ^^^^^
5 >                                        ^^^^^
6 >                                             ^
1 >):boolean {
  >			
2 >                        return 
3 >                               this
4 >                                    === 
5 >                                        other
6 >                                             ;
1 >Emitted(88, 25) Source(85, 4) + SourceIndex(0)
2 >Emitted(88, 32) Source(85, 11) + SourceIndex(0)
3 >Emitted(88, 36) Source(85, 15) + SourceIndex(0)
4 >Emitted(88, 41) Source(85, 20) + SourceIndex(0)
5 >Emitted(88, 46) Source(85, 25) + SourceIndex(0)
6 >Emitted(88, 47) Source(85, 26) + SourceIndex(0)
---
>>>                    };
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^
3 >                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
  >		
2 >                    }
1 >Emitted(89, 21) Source(86, 3) + SourceIndex(0)
2 >Emitted(89, 22) Source(86, 4) + SourceIndex(0)
---
>>>                    State.prototype.getMode = function () { return mode; };
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^^^^^^^^^^^
3 >                                           ^^^
4 >                                              ^^^^^^^^^^^^^^
5 >                                                            ^^^^^^^
6 >                                                                   ^^^^
7 >                                                                       ^
8 >                                                                        ^
9 >                                                                         ^
1->
  >		
  >		public 
2 >                    getMode
3 >                                           
4 >                                              public getMode(): IMode { 
5 >                                                            return 
6 >                                                                   mode
7 >                                                                       ;
8 >                                                                         
9 >                                                                         }
1->Emitted(90, 21) Source(88, 10) + SourceIndex(0)
2 >Emitted(90, 44) Source(88, 17) + SourceIndex(0)
3 >Emitted(90, 47) Source(88, 3) + SourceIndex(0)
4 >Emitted(90, 61) Source(88, 29) + SourceIndex(0)
5 >Emitted(90, 68) Source(88, 36) + SourceIndex(0)
6 >Emitted(90, 72) Source(88, 40) + SourceIndex(0)
7 >Emitted(90, 73) Source(88, 41) + SourceIndex(0)
8 >Emitted(90, 74) Source(88, 42) + SourceIndex(0)
9 >Emitted(90, 75) Source(88, 43) + SourceIndex(0)
---
>>>                    return State;
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^
1 >
  >	
2 >                    }
1 >Emitted(91, 21) Source(89, 2) + SourceIndex(0)
2 >Emitted(91, 33) Source(89, 3) + SourceIndex(0)
---
>>>                }());
1 >^^^^^^^^^^^^^^^^
2 >                ^
3 >                 
4 >                 ^^^^
5 >                     ^^^^^^^^^^^^^^^^^^^^->
1 >
2 >                }
3 >                 
4 >                 export class State implements IState {		
  >                         constructor(private mode: IMode) { }
  >                 		public clone():IState {
  >                 			return this;
  >                 		}
  >                 
  >                 		public equals(other:IState):boolean {
  >                 			return this === other;
  >                 		}
  >                 		
  >                 		public getMode(): IMode { return mode; }
  >                 	}
1 >Emitted(92, 17) Source(89, 2) + SourceIndex(0)
2 >Emitted(92, 18) Source(89, 3) + SourceIndex(0)
3 >Emitted(92, 18) Source(78, 2) + SourceIndex(0)
4 >Emitted(92, 22) Source(89, 3) + SourceIndex(0)
---
>>>                PlainText.State = State;
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^^^^^^
3 >                               ^^^^^^^^
4 >                                       ^
5 >                                        ^^^^^^^^^^^^^^^^^^^^^^->
1->
2 >                State
3 >                                implements IState {		
  >                                       constructor(private mode: IMode) { }
  >                               		public clone():IState {
  >                               			return this;
  >                               		}
  >                               
  >                               		public equals(other:IState):boolean {
  >                               			return this === other;
  >                               		}
  >                               		
  >                               		public getMode(): IMode { return mode; }
  >                               	}
4 >                                       
1->Emitted(93, 17) Source(78, 15) + SourceIndex(0)
2 >Emitted(93, 32) Source(78, 20) + SourceIndex(0)
3 >Emitted(93, 40) Source(89, 3) + SourceIndex(0)
4 >Emitted(93, 41) Source(89, 3) + SourceIndex(0)
---
>>>                var Mode = /** @class */ (function (_super) {
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1->
  >	
  >	
1->Emitted(94, 17) Source(91, 2) + SourceIndex(0)
---
>>>                    __extends(Mode, _super);
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^^^^^^^^^^^^
1->export class Mode extends 
2 >                    AbstractMode
1->Emitted(95, 21) Source(91, 28) + SourceIndex(0)
2 >Emitted(95, 45) Source(91, 40) + SourceIndex(0)
---
>>>                    function Mode() {
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
1 >Emitted(96, 21) Source(91, 2) + SourceIndex(0)
---
>>>                        return _super !== null && _super.apply(this, arguments) || this;
>>>                    }
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^
3 >                     ^^^^^^^^^^^^^->
1->export class Mode extends AbstractMode {
  >
  >		// scenario 2
  >		public getInitialState(): IState {
  >			return new State(self);
  >		}
  >
  >
  >	
2 >                    }
1->Emitted(98, 21) Source(99, 2) + SourceIndex(0)
2 >Emitted(98, 22) Source(99, 3) + SourceIndex(0)
---
>>>                    // scenario 2
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^
3 >                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1->
2 >                    // scenario 2
1->Emitted(99, 21) Source(93, 3) + SourceIndex(0)
2 >Emitted(99, 34) Source(93, 16) + SourceIndex(0)
---
>>>                    Mode.prototype.getInitialState = function () {
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
3 >                                                  ^^^
1->
  >		public 
2 >                    getInitialState
3 >                                                  
1->Emitted(100, 21) Source(94, 10) + SourceIndex(0)
2 >Emitted(100, 51) Source(94, 25) + SourceIndex(0)
3 >Emitted(100, 54) Source(94, 3) + SourceIndex(0)
---
>>>                        return new State(self);
1 >^^^^^^^^^^^^^^^^^^^^^^^^
2 >                        ^^^^^^^
3 >                               ^^^^
4 >                                   ^^^^^
5 >                                        ^
6 >                                         ^^^^
7 >                                             ^
8 >                                              ^
1 >public getInitialState(): IState {
  >			
2 >                        return 
3 >                               new 
4 >                                   State
5 >                                        (
6 >                                         self
7 >                                             )
8 >                                              ;
1 >Emitted(101, 25) Source(95, 4) + SourceIndex(0)
2 >Emitted(101, 32) Source(95, 11) + SourceIndex(0)
3 >Emitted(101, 36) Source(95, 15) + SourceIndex(0)
4 >Emitted(101, 41) Source(95, 20) + SourceIndex(0)
5 >Emitted(101, 42) Source(95, 21) + SourceIndex(0)
6 >Emitted(101, 46) Source(95, 25) + SourceIndex(0)
7 >Emitted(101, 47) Source(95, 26) + SourceIndex(0)
8 >Emitted(101, 48) Source(95, 27) + SourceIndex(0)
---
>>>                    };
1 >^^^^^^^^^^^^^^^^^^^^
2 >                    ^
3 >                     ^^^^^^^^^^^^->
1 >
  >		
2 >                    }
1 >Emitted(102, 21) Source(96, 3) + SourceIndex(0)
2 >Emitted(102, 22) Source(96, 4) + SourceIndex(0)
---
>>>                    return Mode;
1->^^^^^^^^^^^^^^^^^^^^
2 >                    ^^^^^^^^^^^
3 >                               ^^^->
1->
  >
  >
  >	
2 >                    }
1->Emitted(103, 21) Source(99, 2) + SourceIndex(0)
2 >Emitted(103, 32) Source(99, 3) + SourceIndex(0)
---
>>>                }(AbstractMode));
1->^^^^^^^^^^^^^^^^
2 >                ^
3 >                 
4 >                 ^
5 >                  ^^^^^^^^^^^^
6 >                              ^^^
7 >                                 ^^^^^^->
1->
2 >                }
3 >                 
4 >                 export class Mode extends 
5 >                  AbstractMode
6 >                               {
  >                              
  >                              		// scenario 2
  >                              		public getInitialState(): IState {
  >                              			return new State(self);
  >                              		}
  >                              
  >                              
  >                              	}
1->Emitted(104, 17) Source(99, 2) + SourceIndex(0)
2 >Emitted(104, 18) Source(99, 3) + SourceIndex(0)
3 >Emitted(104, 18) Source(91, 2) + SourceIndex(0)
4 >Emitted(104, 19) Source(91, 28) + SourceIndex(0)
5 >Emitted(104, 31) Source(91, 40) + SourceIndex(0)
6 >Emitted(104, 34) Source(99, 3) + SourceIndex(0)
---
>>>                PlainText.Mode = Mode;
1->^^^^^^^^^^^^^^^^
2 >                ^^^^^^^^^^^^^^
3 >                              ^^^^^^^
4 >                                     ^
5 >                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1->
2 >                Mode
3 >                               extends AbstractMode {
  >                              
  >                              		// scenario 2
  >                              		public getInitialState(): IState {
  >                              			return new State(self);
  >                              		}
  >                              
  >                              
  >                              	}
4 >                                     
1->Emitted(105, 17) Source(91, 15) + SourceIndex(0)
2 >Emitted(105, 31) Source(91, 19) + SourceIndex(0)
3 >Emitted(105, 38) Source(99, 3) + SourceIndex(0)
4 >Emitted(105, 39) Source(99, 3) + SourceIndex(0)
---
>>>            })(PlainText = Languages.PlainText || (Languages.PlainText = {}));
1->^^^^^^^^^^^^
2 >            ^
3 >             ^^
4 >               ^^^^^^^^^
5 >                        ^^^
6 >                           ^^^^^^^^^^^^^^^^^^^
7 >                                              ^^^^^
8 >                                                   ^^^^^^^^^^^^^^^^^^^
9 >                                                                      ^^^^^^^^
1->
  >
2 >            }
3 >             
4 >               PlainText
5 >                        
6 >                           PlainText
7 >                                              
8 >                                                   PlainText
9 >                                                                       {
  >                                                                      	
  >                                                                      	export class State implements IState {		
  >                                                                              constructor(private mode: IMode) { }
  >                                                                      		public clone():IState {
  >                                                                      			return this;
  >                                                                      		}
  >                                                                      
  >                                                                      		public equals(other:IState):boolean {
  >                                                                      			return this === other;
  >                                                                      		}
  >                                                                      		
  >                                                                      		public getMode(): IMode { return mode; }
  >                                                                      	}
  >                                                                      	
  >                                                                      	export class Mode extends AbstractMode {
  >                                                                      
  >                                                                      		// scenario 2
  >                                                                      		public getInitialState(): IState {
  >                                                                      			return new State(self);
  >                                                                      		}
  >                                                                      
  >                                                                      
  >                                                                      	}
  >                                                                      }
1->Emitted(106, 13) Source(100, 1) + SourceIndex(0)
2 >Emitted(106, 14) Source(100, 2) + SourceIndex(0)
3 >Emitted(106, 16) Source(76, 31) + SourceIndex(0)
4 >Emitted(106, 25) Source(76, 40) + SourceIndex(0)
5 >Emitted(106, 28) Source(76, 31) + SourceIndex(0)
6 >Emitted(106, 47) Source(76, 40) + SourceIndex(0)
7 >Emitted(106, 52) Source(76, 31) + SourceIndex(0)
8 >Emitted(106, 71) Source(76, 40) + SourceIndex(0)
9 >Emitted(106, 79) Source(100, 2) + SourceIndex(0)
---
>>>        })(Languages = Thing.Languages || (Thing.Languages = {}));
1 >^^^^^^^^
2 >        ^
3 >         ^^
4 >           ^^^^^^^^^
5 >                    ^^^
6 >                       ^^^^^^^^^^^^^^^
7 >                                      ^^^^^
8 >                                           ^^^^^^^^^^^^^^^
9 >                                                          ^^^^^^^^
1 >
2 >        }
3 >         
4 >           Languages
5 >                    
6 >                       Languages
7 >                                      
8 >                                           Languages
9 >                                                          .PlainText {
  >                                                          	
  >                                                          	export class State implements IState {		
  >                                                                  constructor(private mode: IMode) { }
  >                                                          		public clone():IState {
  >                                                          			return this;
  >                                                          		}
  >                                                          
  >                                                          		public equals(other:IState):boolean {
  >                                                          			return this === other;
  >                                                          		}
  >                                                          		
  >                                                          		public getMode(): IMode { return mode; }
  >                                                          	}
  >                                                          	
  >                                                          	export class Mode extends AbstractMode {
  >                                                          
  >                                                          		// scenario 2
  >                                                          		public getInitialState(): IState {
  >                                                          			return new State(self);
  >                                                          		}
  >                                                          
  >                                                          
  >                                                          	}
  >                                                          }
1 >Emitted(107, 9) Source(100, 1) + SourceIndex(0)
2 >Emitted(107, 10) Source(100, 2) + SourceIndex(0)
3 >Emitted(107, 12) Source(76, 21) + SourceIndex(0)
4 >Emitted(107, 21) Source(76, 30) + SourceIndex(0)
5 >Emitted(107, 24) Source(76, 21) + SourceIndex(0)
6 >Emitted(107, 39) Source(76, 30) + SourceIndex(0)
7 >Emitted(107, 44) Source(76, 21) + SourceIndex(0)
8 >Emitted(107, 59) Source(76, 30) + SourceIndex(0)
9 >Emitted(107, 67) Source(100, 2) + SourceIndex(0)
---
>>>    })(Thing = Sample.Thing || (Sample.Thing = {}));
1 >^^^^
2 >    ^
3 >     ^^
4 >       ^^^^^
5 >            ^^^
6 >               ^^^^^^^^^^^^
7 >                           ^^^^^
8 >                                ^^^^^^^^^^^^
9 >                                            ^^^^^^^^
1 >
2 >    }
3 >     
4 >       Thing
5 >            
6 >               Thing
7 >                           
8 >                                Thing
9 >                                            .Languages.PlainText {
  >                                            	
  >                                            	export class State implements IState {		
  >                                                    constructor(private mode: IMode) { }
  >                                            		public clone():IState {
  >                                            			return this;
  >                                            		}
  >                                            
  >                                            		public equals(other:IState):boolean {
  >                                            			return this === other;
  >                                            		}
  >                                            		
  >                                            		public getMode(): IMode { return mode; }
  >                                            	}
  >                                            	
  >                                            	export class Mode extends AbstractMode {
  >                                            
  >                                            		// scenario 2
  >                                            		public getInitialState(): IState {
  >                                            			return new State(self);
  >                                            		}
  >                                            
  >                                            
  >                                            	}
  >                                            }
1 >Emitted(108, 5) Source(100, 1) + SourceIndex(0)
2 >Emitted(108, 6) Source(100, 2) + SourceIndex(0)
3 >Emitted(108, 8) Source(76, 15) + SourceIndex(0)
4 >Emitted(108, 13) Source(76, 20) + SourceIndex(0)
5 >Emitted(108, 16) Source(76, 15) + SourceIndex(0)
6 >Emitted(108, 28) Source(76, 20) + SourceIndex(0)
7 >Emitted(108, 33) Source(76, 15) + SourceIndex(0)
8 >Emitted(108, 45) Source(76, 20) + SourceIndex(0)
9 >Emitted(108, 53) Source(100, 2) + SourceIndex(0)
---
>>>})(Sample || (Sample = {}));
1 >
2 >^
3 > ^^
4 >   ^^^^^^
5 >         ^^^^^
6 >              ^^^^^^
7 >                    ^^^^^^^^
8 >                            ^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
2 >}
3 > 
4 >   Sample
5 >         
6 >              Sample
7 >                    .Thing.Languages.PlainText {
  >                    	
  >                    	export class State implements IState {		
  >                            constructor(private mode: IMode) { }
  >                    		public clone():IState {
  >                    			return this;
  >                    		}
  >                    
  >                    		public equals(other:IState):boolean {
  >                    			return this === other;
  >                    		}
  >                    		
  >                    		public getMode(): IMode { return mode; }
  >                    	}
  >                    	
  >                    	export class Mode extends AbstractMode {
  >                    
  >                    		// scenario 2
  >                    		public getInitialState(): IState {
  >                    			return new State(self);
  >                    		}
  >                    
  >                    
  >                    	}
  >                    }
1 >Emitted(109, 1) Source(100, 1) + SourceIndex(0)
2 >Emitted(109, 2) Source(100, 2) + SourceIndex(0)
3 >Emitted(109, 4) Source(76, 8) + SourceIndex(0)
4 >Emitted(109, 10) Source(76, 14) + SourceIndex(0)
5 >Emitted(109, 15) Source(76, 8) + SourceIndex(0)
6 >Emitted(109, 21) Source(76, 14) + SourceIndex(0)
7 >Emitted(109, 29) Source(100, 2) + SourceIndex(0)
---
>>>//# sourceMappingURL=recursiveClassReferenceTest.js.map