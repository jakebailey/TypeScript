//// [tests/cases/compiler/typePredicateStructuralMatch.ts] ////

=== typePredicateStructuralMatch.ts ===
// Repro from #12235

getResults1([]);
>getResults1([]) : Results
>                : ^^^^^^^
>getResults1 : (value: Results | { data: Results; }) => Results
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>[] : never[]
>   : ^^^^^^^

getResults1({data: []});
>getResults1({data: []}) : Results
>                        : ^^^^^^^
>getResults1 : (value: Results | { data: Results; }) => Results
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{data: []} : { data: never[]; }
>           : ^^^^^^^^^^^^^^^^^^
>data : never[]
>     : ^^^^^^^
>[] : never[]
>   : ^^^^^^^

getResults2([]);
>getResults2([]) : Results
>                : ^^^^^^^
>getResults2 : (value: Results | { data: Results; }) => Results
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>[] : never[]
>   : ^^^^^^^

getResults2({data: []});
>getResults2({data: []}) : Results
>                        : ^^^^^^^
>getResults2 : (value: Results | { data: Results; }) => Results
>            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>{data: []} : { data: never[]; }
>           : ^^^^^^^^^^^^^^^^^^
>data : never[]
>     : ^^^^^^^
>[] : never[]
>   : ^^^^^^^

type Result = { value: string };
>Result : Result
>       : ^^^^^^
>value : string
>      : ^^^^^^

type Results = Result[];
>Results : Results
>        : ^^^^^^^

function isResponseInData<T>(value: T | { data: T}): value is { data: T } {
>isResponseInData : <T>(value: T | { data: T; }) => value is { data: T; }
>                 : ^ ^^^^^^^^^                ^^^^^^^^^^^^^^^^^^^^^^ ^^^
>value : T | { data: T; }
>      : ^^^^^^^^^^^^ ^^^
>data : T
>     : ^
>data : T
>     : ^

    return value.hasOwnProperty('data');
>value.hasOwnProperty('data') : any
>                             : ^^^
>value.hasOwnProperty : any
>                     : ^^^
>value : T | { data: T; }
>      : ^^^^^^^^^^^^^^^^
>hasOwnProperty : any
>               : ^^^
>'data' : "data"
>       : ^^^^^^
}

function getResults1(value: Results | { data: Results }): Results {
>getResults1 : (value: Results | { data: Results; }) => Results
>            : ^^^^^^^^                            ^^^^^^^^^^^^
>value : Results | { data: Results; }
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>data : Results
>     : ^^^^^^^

    return isResponseInData(value) ? value.data : value;
>isResponseInData(value) ? value.data : value : Results
>                                             : ^^^^^^^
>isResponseInData(value) : boolean
>                        : ^^^^^^^
>isResponseInData : <T>(value: T | { data: T; }) => value is { data: T; }
>                 : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>value : Results | { data: Results; }
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>value.data : Results
>           : ^^^^^^^
>value : { data: Results; }
>      : ^^^^^^^^^^^^^^^^^^
>data : Results
>     : ^^^^^^^
>value : Results
>      : ^^^^^^^
}

function isPlainResponse<T>(value: T | { data: T}): value is T {
>isPlainResponse : <T>(value: T | { data: T; }) => value is T
>                : ^ ^^^^^^^^^                ^^^^^^^^^^^^^^^
>value : T | { data: T; }
>      : ^^^^^^^^^^^^ ^^^
>data : T
>     : ^

    return !value.hasOwnProperty('data');
>!value.hasOwnProperty('data') : boolean
>                              : ^^^^^^^
>value.hasOwnProperty('data') : any
>                             : ^^^
>value.hasOwnProperty : any
>                     : ^^^
>value : T | { data: T; }
>      : ^^^^^^^^^^^^^^^^
>hasOwnProperty : any
>               : ^^^
>'data' : "data"
>       : ^^^^^^
}

function getResults2(value: Results | { data: Results }): Results {
>getResults2 : (value: Results | { data: Results; }) => Results
>            : ^^^^^^^^                            ^^^^^^^^^^^^
>value : Results | { data: Results; }
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>data : Results
>     : ^^^^^^^

    return isPlainResponse(value) ? value : value.data;
>isPlainResponse(value) ? value : value.data : Results
>                                            : ^^^^^^^
>isPlainResponse(value) : boolean
>                       : ^^^^^^^
>isPlainResponse : <T>(value: T | { data: T; }) => value is T
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>value : Results | { data: Results; }
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>value : Results
>      : ^^^^^^^
>value.data : Results
>           : ^^^^^^^
>value : { data: Results; }
>      : ^^^^^^^^^^^^^^^^^^
>data : Results
>     : ^^^^^^^
}
