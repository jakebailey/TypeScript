//// [tests/cases/compiler/typeInferenceTypePredicate2.ts] ////

=== typeInferenceTypePredicate2.ts ===
[true, true, false, null]
>[true, true, false, null]    .filter((thing): thing is boolean => thing !== null)    .map(thing => thing.toString()) : string[]
>                                                                                                                     : ^^^^^^^^
>[true, true, false, null]    .filter((thing): thing is boolean => thing !== null)    .map : <U>(callbackfn: (value: boolean, index: number, array: boolean[]) => U, thisArg?: any) => U[]
>                                                                                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>[true, true, false, null]    .filter((thing): thing is boolean => thing !== null) : boolean[]
>                                                                                  : ^^^^^^^^^
>[true, true, false, null]    .filter : { <S extends boolean | null>(predicate: (value: boolean | null, index: number, array: (boolean | null)[]) => value is S, thisArg?: any): S[]; (predicate: (value: boolean | null, index: number, array: (boolean | null)[]) => unknown, thisArg?: any): (boolean | null)[]; }
>                                     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>[true, true, false, null] : (boolean | null)[]
>                          : ^^^^^^^^^^^^^^^^^^
>true : true
>     : ^^^^
>true : true
>     : ^^^^
>false : false
>      : ^^^^^

    .filter((thing): thing is boolean => thing !== null)
>filter : { <S extends boolean | null>(predicate: (value: boolean | null, index: number, array: (boolean | null)[]) => value is S, thisArg?: any): S[]; (predicate: (value: boolean | null, index: number, array: (boolean | null)[]) => unknown, thisArg?: any): (boolean | null)[]; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>(thing): thing is boolean => thing !== null : (thing: boolean | null) => thing is boolean
>                                            : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>thing : boolean | null
>      : ^^^^^^^^^^^^^^
>thing !== null : boolean
>               : ^^^^^^^
>thing : boolean | null
>      : ^^^^^^^^^^^^^^

    .map(thing => thing.toString());
>map : <U>(callbackfn: (value: boolean, index: number, array: boolean[]) => U, thisArg?: any) => U[]
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>thing => thing.toString() : (thing: boolean) => string
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>thing : boolean
>      : ^^^^^^^
>thing.toString() : string
>                 : ^^^^^^
>thing.toString : () => string
>               : ^^^^^^^^^^^^
>thing : boolean
>      : ^^^^^^^
>toString : () => string
>         : ^^^^^^^^^^^^

