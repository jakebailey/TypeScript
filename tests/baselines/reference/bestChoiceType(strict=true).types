//// [tests/cases/compiler/bestChoiceType.ts] ////

=== bestChoiceType.ts ===
// Repro from #10041

(''.match(/ /) || []).map(s => s.toLowerCase());
>(''.match(/ /) || []).map(s => s.toLowerCase()) : string[]
>                                                : ^^^^^^^^
>(''.match(/ /) || []).map : (<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]) | (<U_1>(callbackfn: (value: never, index: number, array: never[]) => U_1, thisArg?: any) => U_1[])
>                          : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>(''.match(/ /) || []) : RegExpMatchArray | []
>                      : ^^^^^^^^^^^^^^^^^^^^^
>''.match(/ /) || [] : RegExpMatchArray | []
>                    : ^^^^^^^^^^^^^^^^^^^^^
>''.match(/ /) : RegExpMatchArray | null
>              : ^^^^^^^^^^^^^^^^^^^^^^^
>''.match : (regexp: string | RegExp) => RegExpMatchArray | null
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>'' : ""
>   : ^^
>match : (regexp: string | RegExp) => RegExpMatchArray | null
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>/ / : RegExp
>    : ^^^^^^
>[] : []
>   : ^^
>map : (<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]) | (<U_1>(callbackfn: (value: never, index: number, array: never[]) => U_1, thisArg?: any) => U_1[])
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>s => s.toLowerCase() : (s: string) => string
>                     : ^^^^^^^^^^^^^^^^^^^^^
>s : string
>  : ^^^^^^
>s.toLowerCase() : string
>                : ^^^^^^
>s.toLowerCase : () => string
>              : ^^^^^^^^^^^^
>s : string
>  : ^^^^^^
>toLowerCase : () => string
>            : ^^^^^^^^^^^^

// Similar cases

function f1() {
>f1 : () => void
>   : ^^^^^^^^^^

    let x = ''.match(/ /);
>x : RegExpMatchArray | null
>  : ^^^^^^^^^^^^^^^^^^^^^^^
>''.match(/ /) : RegExpMatchArray | null
>              : ^^^^^^^^^^^^^^^^^^^^^^^
>''.match : (regexp: string | RegExp) => RegExpMatchArray | null
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>'' : ""
>   : ^^
>match : (regexp: string | RegExp) => RegExpMatchArray | null
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>/ / : RegExp
>    : ^^^^^^

    let y = x || [];
>y : RegExpMatchArray | []
>  : ^^^^^^^^^^^^^^^^^^^^^
>x || [] : RegExpMatchArray | []
>        : ^^^^^^^^^^^^^^^^^^^^^
>x : RegExpMatchArray | null
>  : ^^^^^^^^^^^^^^^^^^^^^^^
>[] : []
>   : ^^

    let z = y.map(s => s.toLowerCase());
>z : string[]
>  : ^^^^^^^^
>y.map(s => s.toLowerCase()) : string[]
>                            : ^^^^^^^^
>y.map : (<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]) | (<U_1>(callbackfn: (value: never, index: number, array: never[]) => U_1, thisArg?: any) => U_1[])
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>y : RegExpMatchArray | []
>  : ^^^^^^^^^^^^^^^^^^^^^
>map : (<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]) | (<U_1>(callbackfn: (value: never, index: number, array: never[]) => U_1, thisArg?: any) => U_1[])
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>s => s.toLowerCase() : (s: string) => string
>                     : ^^^^^^^^^^^^^^^^^^^^^
>s : string
>  : ^^^^^^
>s.toLowerCase() : string
>                : ^^^^^^
>s.toLowerCase : () => string
>              : ^^^^^^^^^^^^
>s : string
>  : ^^^^^^
>toLowerCase : () => string
>            : ^^^^^^^^^^^^
}

function f2() {
>f2 : () => void
>   : ^^^^^^^^^^

    let x = ''.match(/ /);
>x : RegExpMatchArray | null
>  : ^^^^^^^^^^^^^^^^^^^^^^^
>''.match(/ /) : RegExpMatchArray | null
>              : ^^^^^^^^^^^^^^^^^^^^^^^
>''.match : (regexp: string | RegExp) => RegExpMatchArray | null
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>'' : ""
>   : ^^
>match : (regexp: string | RegExp) => RegExpMatchArray | null
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>/ / : RegExp
>    : ^^^^^^

    let y = x ? x : [];
>y : RegExpMatchArray | never[]
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>x ? x : [] : RegExpMatchArray | never[]
>           : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>x : RegExpMatchArray | null
>  : ^^^^^^^^^^^^^^^^^^^^^^^
>x : RegExpMatchArray
>  : ^^^^^^^^^^^^^^^^
>[] : never[]
>   : ^^^^^^^

    let z = y.map(s => s.toLowerCase());
>z : string[]
>  : ^^^^^^^^
>y.map(s => s.toLowerCase()) : string[]
>                            : ^^^^^^^^
>y.map : (<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]) | (<U_1>(callbackfn: (value: never, index: number, array: never[]) => U_1, thisArg?: any) => U_1[])
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>y : RegExpMatchArray | never[]
>  : ^^^^^^^^^^^^^^^^^^^^^^^^^^
>map : (<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]) | (<U_1>(callbackfn: (value: never, index: number, array: never[]) => U_1, thisArg?: any) => U_1[])
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>s => s.toLowerCase() : (s: string) => string
>                     : ^^^^^^^^^^^^^^^^^^^^^
>s : string
>  : ^^^^^^
>s.toLowerCase() : string
>                : ^^^^^^
>s.toLowerCase : () => string
>              : ^^^^^^^^^^^^
>s : string
>  : ^^^^^^
>toLowerCase : () => string
>            : ^^^^^^^^^^^^
}

