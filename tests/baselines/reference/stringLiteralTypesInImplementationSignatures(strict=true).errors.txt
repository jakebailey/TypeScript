stringLiteralTypesInImplementationSignatures.ts(12,5): error TS7020: Call signature, which lacks return-type annotation, implicitly has an 'any' return type.
stringLiteralTypesInImplementationSignatures.ts(13,5): error TS7010: 'foo', which lacks return-type annotation, implicitly has an 'any' return type.
stringLiteralTypesInImplementationSignatures.ts(17,5): error TS7020: Call signature, which lacks return-type annotation, implicitly has an 'any' return type.
stringLiteralTypesInImplementationSignatures.ts(18,5): error TS7010: 'foo', which lacks return-type annotation, implicitly has an 'any' return type.


==== stringLiteralTypesInImplementationSignatures.ts (4 errors) ====
    // String literal types are only valid in overload signatures
    
    function foo(x: 'hi') { }
    var f = function foo(x: 'hi') { }
    var f2 = (x: 'hi', y: 'hi') => { }
    
    class C {
        foo(x: 'hi') { }
    }
    
    interface I {
        (x: 'hi');
        ~~~~~~~~~~
!!! error TS7020: Call signature, which lacks return-type annotation, implicitly has an 'any' return type.
        foo(x: 'hi', y: 'hi');
        ~~~~~~~~~~~~~~~~~~~~~~
!!! error TS7010: 'foo', which lacks return-type annotation, implicitly has an 'any' return type.
    }
    
    var a: {
        (x: 'hi');
        ~~~~~~~~~~
!!! error TS7020: Call signature, which lacks return-type annotation, implicitly has an 'any' return type.
        foo(x: 'hi');
        ~~~~~~~~~~~~~
!!! error TS7010: 'foo', which lacks return-type annotation, implicitly has an 'any' return type.
    }
    
    var b = {
        foo(x: 'hi') { },
        a: function foo(x: 'hi', y: 'hi') { },
        b: (x: 'hi') => { }
    }
    