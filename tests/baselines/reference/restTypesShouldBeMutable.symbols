//// [tests/cases/compiler/restTypesShouldBeMutable.ts] ////

=== restTypesShouldBeMutable.ts ===
declare function callFn<T extends readonly any[]>(args: T, fn: (...args: T) => void): void;
>callFn : Symbol(callFn, Decl(restTypesShouldBeMutable.ts, 0, 0))
>T : Symbol(T, Decl(restTypesShouldBeMutable.ts, 0, 24))
>args : Symbol(args, Decl(restTypesShouldBeMutable.ts, 0, 50))
>T : Symbol(T, Decl(restTypesShouldBeMutable.ts, 0, 24))
>fn : Symbol(fn, Decl(restTypesShouldBeMutable.ts, 0, 58))
>args : Symbol(args, Decl(restTypesShouldBeMutable.ts, 0, 64))
>T : Symbol(T, Decl(restTypesShouldBeMutable.ts, 0, 24))

declare const input: readonly string[];
>input : Symbol(input, Decl(restTypesShouldBeMutable.ts, 2, 13))

callFn(input, (...args) => {
>callFn : Symbol(callFn, Decl(restTypesShouldBeMutable.ts, 0, 0))
>input : Symbol(input, Decl(restTypesShouldBeMutable.ts, 2, 13))
>args : Symbol(args, Decl(restTypesShouldBeMutable.ts, 4, 15))

    args;
>args : Symbol(args, Decl(restTypesShouldBeMutable.ts, 4, 15))

    args[0] = "hello";
>args : Symbol(args, Decl(restTypesShouldBeMutable.ts, 4, 15))

})

declare function callFnNonGeneric(args: readonly string[], fn: (...args: readonly string[]) => void): void;
>callFnNonGeneric : Symbol(callFnNonGeneric, Decl(restTypesShouldBeMutable.ts, 7, 2))
>args : Symbol(args, Decl(restTypesShouldBeMutable.ts, 9, 34))
>fn : Symbol(fn, Decl(restTypesShouldBeMutable.ts, 9, 58))
>args : Symbol(args, Decl(restTypesShouldBeMutable.ts, 9, 64))

callFnNonGeneric(input, (...args) => {
>callFnNonGeneric : Symbol(callFnNonGeneric, Decl(restTypesShouldBeMutable.ts, 7, 2))
>input : Symbol(input, Decl(restTypesShouldBeMutable.ts, 2, 13))
>args : Symbol(args, Decl(restTypesShouldBeMutable.ts, 11, 25))

    args;
>args : Symbol(args, Decl(restTypesShouldBeMutable.ts, 11, 25))

    args[0] = "hello";
>args : Symbol(args, Decl(restTypesShouldBeMutable.ts, 11, 25))

})

