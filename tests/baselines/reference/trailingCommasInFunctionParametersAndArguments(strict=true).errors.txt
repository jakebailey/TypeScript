trailingCommasInFunctionParametersAndArguments.ts(1,13): error TS7006: Parameter 'x' implicitly has an 'any' type.
trailingCommasInFunctionParametersAndArguments.ts(5,13): error TS7019: Rest parameter 'args' implicitly has an 'any[]' type.
trailingCommasInFunctionParametersAndArguments.ts(5,20): error TS1013: A rest parameter or binding pattern may not have a trailing comma.
trailingCommasInFunctionParametersAndArguments.ts(8,22): error TS7019: Rest parameter 'args' implicitly has an 'any[]' type.
trailingCommasInFunctionParametersAndArguments.ts(13,21): error TS7006: Parameter 'x' implicitly has an 'any' type.
trailingCommasInFunctionParametersAndArguments.ts(14,21): error TS7006: Parameter 'x' implicitly has an 'any' type.
trailingCommasInFunctionParametersAndArguments.ts(14,24): error TS7006: Parameter 'y' implicitly has an 'any' type.
trailingCommasInFunctionParametersAndArguments.ts(21,17): error TS7006: Parameter 'a' implicitly has an 'any' type.
trailingCommasInFunctionParametersAndArguments.ts(23,9): error TS7032: Property 'x' implicitly has type 'any', because its set accessor lacks a parameter type annotation.
trailingCommasInFunctionParametersAndArguments.ts(23,11): error TS7006: Parameter 'value' implicitly has an 'any' type.
trailingCommasInFunctionParametersAndArguments.ts(26,5): error TS7013: Construct signature, which lacks return-type annotation, implicitly has an 'any' return type.
trailingCommasInFunctionParametersAndArguments.ts(26,9): error TS7006: Parameter 'x' implicitly has an 'any' type.
trailingCommasInFunctionParametersAndArguments.ts(27,5): error TS7020: Call signature, which lacks return-type annotation, implicitly has an 'any' return type.
trailingCommasInFunctionParametersAndArguments.ts(27,6): error TS7006: Parameter 'x' implicitly has an 'any' type.


==== trailingCommasInFunctionParametersAndArguments.ts (14 errors) ====
    function f1(x,) {}
                ~
!!! error TS7006: Parameter 'x' implicitly has an 'any' type.
    
    f1(1,);
    
    function f2(...args,) {}
                ~~~~~~~
!!! error TS7019: Rest parameter 'args' implicitly has an 'any[]' type.
                       ~
!!! error TS1013: A rest parameter or binding pattern may not have a trailing comma.
    
    // Allowed for ambient declarations
    declare function f25(...args,): void;
                         ~~~~~~~
!!! error TS7019: Rest parameter 'args' implicitly has an 'any[]' type.
    
    f2(...[],);
    
    // Not confused by overloads
    declare function f3(x, ): number;
                        ~
!!! error TS7006: Parameter 'x' implicitly has an 'any' type.
    declare function f3(x, y,): string;
                        ~
!!! error TS7006: Parameter 'x' implicitly has an 'any' type.
                           ~
!!! error TS7006: Parameter 'y' implicitly has an 'any' type.
    
    <number>f3(1,);
    <string>f3(1, 2,);
    
    // Works for constructors too
    class X {
        constructor(a,) { }
                    ~
!!! error TS7006: Parameter 'a' implicitly has an 'any' type.
        // See trailingCommasInGetter.ts
        set x(value,) { }
            ~
!!! error TS7032: Property 'x' implicitly has type 'any', because its set accessor lacks a parameter type annotation.
              ~~~~~
!!! error TS7006: Parameter 'value' implicitly has an 'any' type.
    }
    interface Y {
        new(x,);
        ~~~~~~~~
!!! error TS7013: Construct signature, which lacks return-type annotation, implicitly has an 'any' return type.
            ~
!!! error TS7006: Parameter 'x' implicitly has an 'any' type.
        (x,);
        ~~~~~
!!! error TS7020: Call signature, which lacks return-type annotation, implicitly has an 'any' return type.
         ~
!!! error TS7006: Parameter 'x' implicitly has an 'any' type.
    }
    
    new X(1,);
    