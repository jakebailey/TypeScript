//// [tests/cases/compiler/simpleArrowFunctionParameterReferencedInObjectLiteral1.ts] ////

=== simpleArrowFunctionParameterReferencedInObjectLiteral1.ts ===
[].map(() => [].map(p => ({ X: p })));
>[].map(() => [].map(p => ({ X: p }))) : { X: never; }[][]
>                                      : ^^^^^^^^^^^^^^^^^
>[].map : <U>(callbackfn: (value: never, index: number, array: never[]) => U, thisArg?: any) => U[]
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>[] : never[]
>   : ^^^^^^^
>map : <U>(callbackfn: (value: never, index: number, array: never[]) => U, thisArg?: any) => U[]
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>() => [].map(p => ({ X: p })) : () => { X: never; }[]
>                              : ^^^^^^^^^^^^^^^^^^^^^
>[].map(p => ({ X: p })) : { X: never; }[]
>                        : ^^^^^^^^^^^^^^^
>[].map : <U>(callbackfn: (value: never, index: number, array: never[]) => U, thisArg?: any) => U[]
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>[] : never[]
>   : ^^^^^^^
>map : <U>(callbackfn: (value: never, index: number, array: never[]) => U, thisArg?: any) => U[]
>    : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>p => ({ X: p }) : (p: never) => { X: never; }
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>p : never
>  : ^^^^^
>({ X: p }) : { X: never; }
>           : ^^^^^^^^^^^^^
>{ X: p } : { X: never; }
>         : ^^^^^^^^^^^^^
>X : never
>  : ^^^^^
>p : never
>  : ^^^^^

