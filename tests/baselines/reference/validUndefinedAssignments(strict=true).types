//// [tests/cases/conformance/types/primitives/undefined/validUndefinedAssignments.ts] ////

=== validUndefinedAssignments.ts ===
var x: typeof undefined;
>x : undefined
>  : ^^^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^

var a: number = x;
>a : number
>  : ^^^^^^
>x : undefined
>  : ^^^^^^^^^

var b: boolean = x;
>b : boolean
>  : ^^^^^^^
>x : undefined
>  : ^^^^^^^^^

var c: string = x;
>c : string
>  : ^^^^^^
>x : undefined
>  : ^^^^^^^^^

var d: void = x;
>d : void
>  : ^^^^
>x : undefined
>  : ^^^^^^^^^

var e: typeof undefined = x;
>e : undefined
>  : ^^^^^^^^^
>undefined : undefined
>          : ^^^^^^^^^
>x : undefined
>  : ^^^^^^^^^

e = x; // should work
>e = x : undefined
>      : ^^^^^^^^^
>e : undefined
>  : ^^^^^^^^^
>x : undefined
>  : ^^^^^^^^^

class C { foo: string }
>C : C
>  : ^
>foo : string
>    : ^^^^^^

var f: C;
>f : C
>  : ^

f = x;
>f = x : undefined
>      : ^^^^^^^^^
>f : C
>  : ^
>x : undefined
>  : ^^^^^^^^^

interface I { foo: string }
>foo : string
>    : ^^^^^^

var g: I;
>g : I
>  : ^

g = x;
>g = x : undefined
>      : ^^^^^^^^^
>g : I
>  : ^
>x : undefined
>  : ^^^^^^^^^

var h: { f(): void } = x;
>h : { f(): void; }
>  : ^^^^^^^    ^^^
>f : () => void
>  : ^^^^^^    
>x : undefined
>  : ^^^^^^^^^

function i<T>(a: T) {
>i : <T>(a: T) => void
>  : ^ ^^^^^ ^^^^^^^^^
>a : T
>  : ^

    a = x;
>a = x : undefined
>      : ^^^^^^^^^
>a : T
>  : ^
>x : undefined
>  : ^^^^^^^^^
}
