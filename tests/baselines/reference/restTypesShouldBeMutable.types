//// [tests/cases/compiler/restTypesShouldBeMutable.ts] ////

=== restTypesShouldBeMutable.ts ===
declare function callFn<T extends readonly any[]>(args: T, fn: (...args: T) => void): void;
>callFn : <T extends readonly any[]>(args: T, fn: (...args: T) => void) => void
>args : T
>fn : (...args: T) => void
>args : T

declare const input: readonly string[];
>input : readonly string[]

callFn(input, (...args) => {
>callFn(input, (...args) => {    args;    args[0] = "hello";}) : void
>callFn : <T extends readonly any[]>(args: T, fn: (...args: T) => void) => void
>input : readonly string[]
>(...args) => {    args;    args[0] = "hello";} : (...args: readonly string[]) => void
>args : readonly string[]

    args;
>args : readonly string[]

    args[0] = "hello";
>args[0] = "hello" : "hello"
>args[0] : string
>args : readonly string[]
>0 : 0
>"hello" : "hello"

})

declare function callFnNonGeneric(args: readonly string[], fn: (...args: readonly string[]) => void): void;
>callFnNonGeneric : (args: readonly string[], fn: (...args: readonly string[]) => void) => void
>args : readonly string[]
>fn : (...args: readonly string[]) => void
>args : readonly string[]

callFnNonGeneric(input, (...args) => {
>callFnNonGeneric(input, (...args) => {    args;    args[0] = "hello";}) : void
>callFnNonGeneric : (args: readonly string[], fn: (...args: readonly string[]) => void) => void
>input : readonly string[]
>(...args) => {    args;    args[0] = "hello";} : (...args: readonly string[]) => void
>args : readonly string[]

    args;
>args : readonly string[]

    args[0] = "hello";
>args[0] = "hello" : "hello"
>args[0] : string
>args : readonly string[]
>0 : 0
>"hello" : "hello"

})


declare function callFnTuple<T extends readonly [string, string, string]>(args: T, fn: (...args: T) => void): void;
>callFnTuple : <T extends readonly [string, string, string]>(args: T, fn: (...args: T) => void) => void
>args : T
>fn : (...args: T) => void
>args : T

declare const inputTuple: readonly [string, string, string];
>inputTuple : readonly [string, string, string]

callFnTuple(inputTuple, (...args) => {
>callFnTuple(inputTuple, (...args) => {    args;    args[0] = "hello";}) : void
>callFnTuple : <T extends readonly [string, string, string]>(args: T, fn: (...args: T) => void) => void
>inputTuple : readonly [string, string, string]
>(...args) => {    args;    args[0] = "hello";} : (args_0: string, args_1: string, args_2: string) => void
>args : [string, string, string]

    args;
>args : [string, string, string]

    args[0] = "hello";
>args[0] = "hello" : "hello"
>args[0] : string
>args : [string, string, string]
>0 : 0
>"hello" : "hello"

})

declare function callFnNonGenericTuple(args: readonly [string, string, string], fn: (...args: readonly [string, string, string]) => void): void;
>callFnNonGenericTuple : (args: readonly [string, string, string], fn: (args_0: string, args_1: string, args_2: string) => void) => void
>args : readonly [string, string, string]
>fn : (args_0: string, args_1: string, args_2: string) => void
>args : readonly [string, string, string]

callFnNonGenericTuple(inputTuple, (...args) => {
>callFnNonGenericTuple(inputTuple, (...args) => {    args;    args[0] = "hello";}) : void
>callFnNonGenericTuple : (args: readonly [string, string, string], fn: (args_0: string, args_1: string, args_2: string) => void) => void
>inputTuple : readonly [string, string, string]
>(...args) => {    args;    args[0] = "hello";} : (args_0: string, args_1: string, args_2: string) => void
>args : [string, string, string]

    args;
>args : [string, string, string]

    args[0] = "hello";
>args[0] = "hello" : "hello"
>args[0] : string
>args : [string, string, string]
>0 : 0
>"hello" : "hello"

})

