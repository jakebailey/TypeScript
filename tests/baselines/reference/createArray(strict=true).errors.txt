createArray.ts(1,12): error TS2693: 'number' only refers to a type, but is being used as a value here.
createArray.ts(1,19): error TS1011: An element access expression should take an argument.
createArray.ts(6,5): error TS7053: Element implicitly has an 'any' type because expression of type 'any' can't be used to index type 'typeof C'.
createArray.ts(6,7): error TS1011: An element access expression should take an argument.
createArray.ts(7,12): error TS2693: 'boolean' only refers to a type, but is being used as a value here.
createArray.ts(7,20): error TS1011: An element access expression should take an argument.
createArray.ts(8,12): error TS2693: 'string' only refers to a type, but is being used as a value here.
createArray.ts(8,19): error TS1011: An element access expression should take an argument.
createArray.ts(15,5): error TS7053: Element implicitly has an 'any' type because expression of type '1' can't be used to index type 'typeof C'.
  Property '1' does not exist on type 'typeof C'.


==== createArray.ts (9 errors) ====
    var na=new number[];
               ~~~~~~
!!! error TS2693: 'number' only refers to a type, but is being used as a value here.
                      
!!! error TS1011: An element access expression should take an argument.
    
    class C {
    }
    
    new C[];
        ~~~
!!! error TS7053: Element implicitly has an 'any' type because expression of type 'any' can't be used to index type 'typeof C'.
          
!!! error TS1011: An element access expression should take an argument.
    var ba=new boolean[];
               ~~~~~~~
!!! error TS2693: 'boolean' only refers to a type, but is being used as a value here.
                       
!!! error TS1011: An element access expression should take an argument.
    var sa=new string[];
               ~~~~~~
!!! error TS2693: 'string' only refers to a type, but is being used as a value here.
                      
!!! error TS1011: An element access expression should take an argument.
    function f(s:string):number { return 0;
    }
    if (ba[14]) {
        na[2]=f(sa[3]);
    }
    
    new C[1]; // not an error
        ~~~~
!!! error TS7053: Element implicitly has an 'any' type because expression of type '1' can't be used to index type 'typeof C'.
!!! error TS7053:   Property '1' does not exist on type 'typeof C'.