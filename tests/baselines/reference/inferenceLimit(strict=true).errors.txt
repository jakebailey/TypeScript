file1.ts(13,26): error TS7006: Parameter 'order' implicitly has an 'any' type.
file1.ts(24,13): error TS2345: Argument of type '(orders: Array<MyModule.MyModel>) => void' is not assignable to parameter of type '(value: unknown[]) => void | PromiseLike<void>'.
  Types of parameters 'orders' and 'value' are incompatible.
    Type 'unknown[]' is not assignable to type 'MyModel[]'.
      Type 'unknown' is not assignable to type 'MyModel'.


==== file1.ts (2 errors) ====
    "use strict";
    import * as MyModule from "./mymodule";
    
    export class BrokenClass {
    
      constructor() {}
    
      public brokenMethod(field: string, value: string) {
      return new Promise<Array<MyModule.MyModel>>((resolve, reject) => {
    
        let result: Array<MyModule.MyModel> = [];
    
        let populateItems = (order) => {
                             ~~~~~
!!! error TS7006: Parameter 'order' implicitly has an 'any' type.
          return new Promise((resolve, reject) => {
            this.doStuff(order.id)
              .then((items) => {
                order.items = items;
                resolve(order);
              });
          });
        };
    
        return Promise.all(result.map(populateItems))
          .then((orders: Array<MyModule.MyModel>) => {
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2345: Argument of type '(orders: Array<MyModule.MyModel>) => void' is not assignable to parameter of type '(value: unknown[]) => void | PromiseLike<void>'.
!!! error TS2345:   Types of parameters 'orders' and 'value' are incompatible.
!!! error TS2345:     Type 'unknown[]' is not assignable to type 'MyModel[]'.
!!! error TS2345:       Type 'unknown' is not assignable to type 'MyModel'.
            resolve(orders);
          });
        });
      }
    
      public async doStuff(id: number) {
        return;
      }
    }
    
==== mymodule.ts (0 errors) ====
    export interface MyModel {
        id: number;
    }