//// [tests/cases/compiler/emitSkipsThisWithRestParameter.ts] ////

=== emitSkipsThisWithRestParameter.ts ===
function rebase(fn: (base: any, ...args: any[]) => any): (...args: any[]) => any {
>rebase : (fn: (base: any, ...args: any[]) => any) => (...args: any[]) => any
>       : ^^^^^                                  ^^^^^                       
>fn : (base: any, ...args: any[]) => any
>   : ^^^^^^^   ^^^^^^^^^^^     ^^^^^   
>base : any
>     : ^^^
>args : any[]
>     : ^^^^^
>args : any[]
>     : ^^^^^

    return function(this: any, ...args: any[]) {
>function(this: any, ...args: any[]) {        return fn.apply(this, [ this ].concat(args));    } : (this: any, ...args: any[]) => any
>                                                                                                : ^^^^^^^   ^^^^^^^^^^^     ^^^^^^^^
>this : any
>     : ^^^
>args : any[]
>     : ^^^^^

        return fn.apply(this, [ this ].concat(args));
>fn.apply(this, [ this ].concat(args)) : any
>                                      : ^^^
>fn.apply : { <T, R>(this: (this: T) => R, thisArg: T): R; <T_1, A extends any[], R_1>(this: (this: T_1, ...args: A) => R_1, thisArg: T_1, args: A): R_1; }
>         : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>fn : (base: any, ...args: any[]) => any
>   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>apply : { <T, R>(this: (this: T) => R, thisArg: T): R; <T_1, A extends any[], R_1>(this: (this: T_1, ...args: A) => R_1, thisArg: T_1, args: A): R_1; }
>      : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>this : any
>     : ^^^
>[ this ].concat(args) : any[]
>                      : ^^^^^
>[ this ].concat : { (...items: ConcatArray<any>[]): any[]; (...items: any[]): any[]; }
>                : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>[ this ] : any[]
>         : ^^^^^
>this : any
>     : ^^^
>concat : { (...items: ConcatArray<any>[]): any[]; (...items: any[]): any[]; }
>       : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>args : any[]
>     : ^^^^^

    };
}

