//// [tests/cases/conformance/es6/destructuring/restPropertyWithBindingPattern.ts] ////

=== restPropertyWithBindingPattern.ts ===
({...{}} = {});
>({...{}} = {}) : {}
>{...{}} = {} : {}
>{...{}} : {}
>{} : {}
>{} : {}

({...({})} = {});
>({...({})} = {}) : {}
>{...({})} = {} : {}
>{...({})} : {}
>({}) : {}
>{} : {}
>{} : {}

({...[]} = {});
>({...[]} = {}) : {}
>{...[]} = {} : {}
>{...[]} : { [n: number]: never; length: 0; toString(): string; toLocaleString(): string; pop(): undefined; push(...items: never[]): number; concat(...items: ConcatArray<never>[]): never[]; concat(...items: ConcatArray<never>[]): never[]; join(separator?: string | undefined): string; reverse(): never[]; shift(): undefined; slice(start?: number | undefined, end?: number | undefined): never[]; sort(compareFn?: ((a: never, b: never) => number) | undefined): []; splice(start: number, deleteCount?: number | undefined): never[]; splice(start: number, deleteCount: number, ...items: never[]): never[]; unshift(...items: never[]): number; indexOf(searchElement: never, fromIndex?: number | undefined): number; lastIndexOf(searchElement: never, fromIndex?: number | undefined): number; every<S extends never>(predicate: (value: never, index: number, array: never[]) => value is S, thisArg?: any): this is S[]; every(predicate: (value: never, index: number, array: never[]) => unknown, thisArg?: any): boolean; some(predicate: (value: never, index: number, array: never[]) => unknown, thisArg?: any): boolean; forEach(callbackfn: (value: never, index: number, array: never[]) => void, thisArg?: any): void; map<U>(callbackfn: (value: never, index: number, array: never[]) => U, thisArg?: any): U[]; filter<S extends never>(predicate: (value: never, index: number, array: never[]) => value is S, thisArg?: any): S[]; filter(predicate: (value: never, index: number, array: never[]) => unknown, thisArg?: any): never[]; reduce(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never): never; reduce(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never, initialValue: never): never; reduce<U>(callbackfn: (previousValue: U, currentValue: never, currentIndex: number, array: never[]) => U, initialValue: U): U; reduceRight(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never): never; reduceRight(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never, initialValue: never): never; reduceRight<U>(callbackfn: (previousValue: U, currentValue: never, currentIndex: number, array: never[]) => U, initialValue: U): U; }
>[] : []
>{} : {}

({...([])} = {});
>({...([])} = {}) : {}
>{...([])} = {} : {}
>{...([])} : { [n: number]: never; length: 0; toString(): string; toLocaleString(): string; pop(): undefined; push(...items: never[]): number; concat(...items: ConcatArray<never>[]): never[]; concat(...items: ConcatArray<never>[]): never[]; join(separator?: string | undefined): string; reverse(): never[]; shift(): undefined; slice(start?: number | undefined, end?: number | undefined): never[]; sort(compareFn?: ((a: never, b: never) => number) | undefined): []; splice(start: number, deleteCount?: number | undefined): never[]; splice(start: number, deleteCount: number, ...items: never[]): never[]; unshift(...items: never[]): number; indexOf(searchElement: never, fromIndex?: number | undefined): number; lastIndexOf(searchElement: never, fromIndex?: number | undefined): number; every<S extends never>(predicate: (value: never, index: number, array: never[]) => value is S, thisArg?: any): this is S[]; every(predicate: (value: never, index: number, array: never[]) => unknown, thisArg?: any): boolean; some(predicate: (value: never, index: number, array: never[]) => unknown, thisArg?: any): boolean; forEach(callbackfn: (value: never, index: number, array: never[]) => void, thisArg?: any): void; map<U>(callbackfn: (value: never, index: number, array: never[]) => U, thisArg?: any): U[]; filter<S extends never>(predicate: (value: never, index: number, array: never[]) => value is S, thisArg?: any): S[]; filter(predicate: (value: never, index: number, array: never[]) => unknown, thisArg?: any): never[]; reduce(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never): never; reduce(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never, initialValue: never): never; reduce<U>(callbackfn: (previousValue: U, currentValue: never, currentIndex: number, array: never[]) => U, initialValue: U): U; reduceRight(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never): never; reduceRight(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never, initialValue: never): never; reduceRight<U>(callbackfn: (previousValue: U, currentValue: never, currentIndex: number, array: never[]) => U, initialValue: U): U; }
>([]) : []
>[] : []
>{} : {}

