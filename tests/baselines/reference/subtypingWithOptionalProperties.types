//// [tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithOptionalProperties.ts] ////

=== subtypingWithOptionalProperties.ts ===
// subtyping is not transitive due to optional properties but the subtyping algorithm assumes it is for the 99% case

// returns { s?: number; }
function f<T>(a: T) {
>f : <T>(a: T) => { s?: number | undefined; }
>a : T

    var b: { s?: number } = a;
>b : { s?: number | undefined; }
>s : number | undefined
>a : T

    return b;
>b : { s?: number | undefined; }
}

var r = f({ s: new Object() }); // ok
>r : { s?: number | undefined; }
>f({ s: new Object() }) : { s?: number | undefined; }
>f : <T>(a: T) => { s?: number | undefined; }
>{ s: new Object() } : { s: Object; }
>s : Object
>new Object() : Object
>Object : ObjectConstructor

r.s && r.s.toFixed(); // would blow up at runtime
>r.s && r.s.toFixed() : string | 0 | undefined
>r.s : number | undefined
>r : { s?: number | undefined; }
>s : number | undefined
>r.s.toFixed() : string
>r.s.toFixed : (fractionDigits?: number | undefined) => string
>r.s : number
>r : { s?: number | undefined; }
>s : number
>toFixed : (fractionDigits?: number | undefined) => string

