//// [tests/cases/compiler/overloadsAndTypeArgumentArity.ts] ////

=== overloadsAndTypeArgumentArity.ts ===
declare function Callbacks(flags?: string): void;
>Callbacks : { (flags?: string): void; <T>(flags?: string | undefined): void; <T1, T2>(flags?: string | undefined): void; <T1, T2, T3>(flags?: string | undefined): void; }
>flags : string | undefined

declare function Callbacks<T>(flags?: string): void;
>Callbacks : { (flags?: string | undefined): void; <T>(flags?: string): void; <T1, T2>(flags?: string | undefined): void; <T1, T2, T3>(flags?: string | undefined): void; }
>flags : string | undefined

declare function Callbacks<T1, T2>(flags?: string): void;
>Callbacks : { (flags?: string | undefined): void; <T>(flags?: string | undefined): void; <T1, T2>(flags?: string): void; <T1, T2, T3>(flags?: string | undefined): void; }
>flags : string | undefined

declare function Callbacks<T1, T2, T3>(flags?: string): void;
>Callbacks : { (flags?: string | undefined): void; <T>(flags?: string | undefined): void; <T1, T2>(flags?: string | undefined): void; <T1, T2, T3>(flags?: string): void; }
>flags : string | undefined

Callbacks<number, string, boolean>('s'); // no error
>Callbacks<number, string, boolean>('s') : void
>Callbacks : { (flags?: string | undefined): void; <T>(flags?: string | undefined): void; <T1, T2>(flags?: string | undefined): void; <T1, T2, T3>(flags?: string | undefined): void; }
>'s' : "s"

new Callbacks<number, string, boolean>('s'); // no error
>new Callbacks<number, string, boolean>('s') : any
>Callbacks : { (flags?: string | undefined): void; <T>(flags?: string | undefined): void; <T1, T2>(flags?: string | undefined): void; <T1, T2, T3>(flags?: string | undefined): void; }
>'s' : "s"

